// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SATDataPB.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SATDataPB {

namespace {

const ::google::protobuf::Descriptor* mREALQDCACHELONG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mREALQDCACHELONG_reflection_ = NULL;
const ::google::protobuf::Descriptor* mQDCACHE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mQDCACHE_reflection_ = NULL;
const ::google::protobuf::Descriptor* mREALQDINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mREALQDINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* mREALQDLONGBLOCK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mREALQDLONGBLOCK_reflection_ = NULL;
const ::google::protobuf::Descriptor* mREALQDLONGCACHE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mREALQDLONGCACHE_reflection_ = NULL;
const ::google::protobuf::Descriptor* mREQUEST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mREQUEST_reflection_ = NULL;
const ::google::protobuf::Descriptor* mDailyQuote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mDailyQuote_reflection_ = NULL;
const ::google::protobuf::Descriptor* mFSP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mFSP_reflection_ = NULL;
const ::google::protobuf::Descriptor* QDailyQuote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QDailyQuote_reflection_ = NULL;
const ::google::protobuf::Descriptor* mQDFILEBLOCK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mQDFILEBLOCK_reflection_ = NULL;
const ::google::protobuf::Descriptor* QHFData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QHFData_reflection_ = NULL;
const ::google::protobuf::Descriptor* QData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QData_reflection_ = NULL;
const ::google::protobuf::Descriptor* QFSP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QFSP_reflection_ = NULL;
const ::google::protobuf::Descriptor* mQD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mQD_reflection_ = NULL;
const ::google::protobuf::Descriptor* QQuoteDataIO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QQuoteDataIO_reflection_ = NULL;
const ::google::protobuf::Descriptor* mK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mK_reflection_ = NULL;
const ::google::protobuf::Descriptor* QQD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QQD_reflection_ = NULL;
const ::google::protobuf::Descriptor* mQDSECINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mQDSECINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* QQDSECINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QQDSECINFO_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SATDataPB_2eproto() {
  protobuf_AddDesc_SATDataPB_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SATDataPB.proto");
  GOOGLE_CHECK(file != NULL);
  mREALQDCACHELONG_descriptor_ = file->message_type(0);
  static const int mREALQDCACHELONG_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, preclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, buyprice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, buyprice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, buyprice3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, buyprice4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, buyprice5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, buyvol1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, buyvol2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, buyvol3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, buyvol4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, buyvol5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, sellprice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, sellprice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, sellprice3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, sellprice4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, sellprice5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, sellvol1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, sellvol2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, sellvol3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, sellvol4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, sellvol5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, vol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, amout_),
  };
  mREALQDCACHELONG_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mREALQDCACHELONG_descriptor_,
      mREALQDCACHELONG::default_instance_,
      mREALQDCACHELONG_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDCACHELONG, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mREALQDCACHELONG));
  mQDCACHE_descriptor_ = file->message_type(1);
  static const int mQDCACHE_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, preclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, buyprice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, buyprice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, buyprice3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, buyprice4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, buyprice5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, buyvol1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, buyvol2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, buyvol3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, buyvol4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, buyvol5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, sellprice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, sellprice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, sellprice3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, sellprice4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, sellprice5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, sellvol1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, sellvol2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, sellvol3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, sellvol4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, sellvol5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, vol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, amout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, time_),
  };
  mQDCACHE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mQDCACHE_descriptor_,
      mQDCACHE::default_instance_,
      mQDCACHE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDCACHE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mQDCACHE));
  mREALQDINFO_descriptor_ = file->message_type(2);
  static const int mREALQDINFO_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDINFO, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDINFO, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDINFO, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDINFO, preclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDINFO, open_),
  };
  mREALQDINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mREALQDINFO_descriptor_,
      mREALQDINFO::default_instance_,
      mREALQDINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mREALQDINFO));
  mREALQDLONGBLOCK_descriptor_ = file->message_type(3);
  static const int mREALQDLONGBLOCK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDLONGBLOCK, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDLONGBLOCK, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDLONGBLOCK, longdata_),
  };
  mREALQDLONGBLOCK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mREALQDLONGBLOCK_descriptor_,
      mREALQDLONGBLOCK::default_instance_,
      mREALQDLONGBLOCK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDLONGBLOCK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDLONGBLOCK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mREALQDLONGBLOCK));
  mREALQDLONGCACHE_descriptor_ = file->message_type(4);
  static const int mREALQDLONGCACHE_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDLONGCACHE, isused_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDLONGCACHE, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDLONGCACHE, secnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDLONGCACHE, datablock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDLONGCACHE, secinfo_),
  };
  mREALQDLONGCACHE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mREALQDLONGCACHE_descriptor_,
      mREALQDLONGCACHE::default_instance_,
      mREALQDLONGCACHE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDLONGCACHE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREALQDLONGCACHE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mREALQDLONGCACHE));
  mREQUEST_descriptor_ = file->message_type(5);
  static const int mREQUEST_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREQUEST, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREQUEST, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREQUEST, startdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREQUEST, enddate_),
  };
  mREQUEST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mREQUEST_descriptor_,
      mREQUEST::default_instance_,
      mREQUEST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREQUEST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mREQUEST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mREQUEST));
  mDailyQuote_descriptor_ = file->message_type(6);
  static const int mDailyQuote_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mDailyQuote, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mDailyQuote, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mDailyQuote, preclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mDailyQuote, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mDailyQuote, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mDailyQuote, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mDailyQuote, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mDailyQuote, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mDailyQuote, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mDailyQuote, adjustingfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mDailyQuote, return__),
  };
  mDailyQuote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mDailyQuote_descriptor_,
      mDailyQuote::default_instance_,
      mDailyQuote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mDailyQuote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mDailyQuote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mDailyQuote));
  mFSP_descriptor_ = file->message_type(7);
  static const int mFSP_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mFSP, isid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mFSP, iddj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mFSP, idcq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mFSP, dpgs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mFSP, dpgj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mFSP, dsgs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mFSP, dpxs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mFSP, dzzs_),
  };
  mFSP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mFSP_descriptor_,
      mFSP::default_instance_,
      mFSP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mFSP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mFSP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mFSP));
  QDailyQuote_descriptor_ = file->message_type(8);
  static const int QDailyQuote_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDailyQuote, qdailyquote_),
  };
  QDailyQuote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QDailyQuote_descriptor_,
      QDailyQuote::default_instance_,
      QDailyQuote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDailyQuote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QDailyQuote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QDailyQuote));
  mQDFILEBLOCK_descriptor_ = file->message_type(9);
  static const int mQDFILEBLOCK_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDFILEBLOCK, dwtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDFILEBLOCK, dwtimestamp_),
  };
  mQDFILEBLOCK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mQDFILEBLOCK_descriptor_,
      mQDFILEBLOCK::default_instance_,
      mQDFILEBLOCK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDFILEBLOCK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDFILEBLOCK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mQDFILEBLOCK));
  QHFData_descriptor_ = file->message_type(10);
  static const int QHFData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QHFData, fileblock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QHFData, cachelong_),
  };
  QHFData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QHFData_descriptor_,
      QHFData::default_instance_,
      QHFData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QHFData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QHFData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QHFData));
  QData_descriptor_ = file->message_type(11);
  static const int QData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QData, qdate_),
  };
  QData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QData_descriptor_,
      QData::default_instance_,
      QData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QData));
  QFSP_descriptor_ = file->message_type(12);
  static const int QFSP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QFSP, qfsp_),
  };
  QFSP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QFSP_descriptor_,
      QFSP::default_instance_,
      QFSP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QFSP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QFSP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QFSP));
  mQD_descriptor_ = file->message_type(13);
  static const int mQD_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQD, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQD, secnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQD, datablock_),
  };
  mQD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mQD_descriptor_,
      mQD::default_instance_,
      mQD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mQD));
  QQuoteDataIO_descriptor_ = file->message_type(14);
  static const int QQuoteDataIO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQuoteDataIO, stampindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQuoteDataIO, quotedata_),
  };
  QQuoteDataIO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QQuoteDataIO_descriptor_,
      QQuoteDataIO::default_instance_,
      QQuoteDataIO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQuoteDataIO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQuoteDataIO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QQuoteDataIO));
  mK_descriptor_ = file->message_type(15);
  static const int mK_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mK, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mK, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mK, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mK, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mK, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mK, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mK, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mK, exchange_),
  };
  mK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mK_descriptor_,
      mK::default_instance_,
      mK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mK));
  QQD_descriptor_ = file->message_type(16);
  static const int QQD_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQD, secnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQD, datelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQD, mmk_),
  };
  QQD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QQD_descriptor_,
      QQD::default_instance_,
      QQD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QQD));
  mQDSECINFO_descriptor_ = file->message_type(17);
  static const int mQDSECINFO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDSECINFO, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDSECINFO, sid_),
  };
  mQDSECINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mQDSECINFO_descriptor_,
      mQDSECINFO::default_instance_,
      mQDSECINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDSECINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mQDSECINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mQDSECINFO));
  QQDSECINFO_descriptor_ = file->message_type(18);
  static const int QQDSECINFO_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQDSECINFO, mmqdsecinfo_),
  };
  QQDSECINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QQDSECINFO_descriptor_,
      QQDSECINFO::default_instance_,
      QQDSECINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQDSECINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QQDSECINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QQDSECINFO));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SATDataPB_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mREALQDCACHELONG_descriptor_, &mREALQDCACHELONG::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mQDCACHE_descriptor_, &mQDCACHE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mREALQDINFO_descriptor_, &mREALQDINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mREALQDLONGBLOCK_descriptor_, &mREALQDLONGBLOCK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mREALQDLONGCACHE_descriptor_, &mREALQDLONGCACHE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mREQUEST_descriptor_, &mREQUEST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mDailyQuote_descriptor_, &mDailyQuote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mFSP_descriptor_, &mFSP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QDailyQuote_descriptor_, &QDailyQuote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mQDFILEBLOCK_descriptor_, &mQDFILEBLOCK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QHFData_descriptor_, &QHFData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QData_descriptor_, &QData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QFSP_descriptor_, &QFSP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mQD_descriptor_, &mQD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QQuoteDataIO_descriptor_, &QQuoteDataIO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mK_descriptor_, &mK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QQD_descriptor_, &QQD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mQDSECINFO_descriptor_, &mQDSECINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QQDSECINFO_descriptor_, &QQDSECINFO::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SATDataPB_2eproto() {
  delete mREALQDCACHELONG::default_instance_;
  delete mREALQDCACHELONG_reflection_;
  delete mQDCACHE::default_instance_;
  delete mQDCACHE_reflection_;
  delete mREALQDINFO::default_instance_;
  delete mREALQDINFO_reflection_;
  delete mREALQDLONGBLOCK::default_instance_;
  delete mREALQDLONGBLOCK_reflection_;
  delete mREALQDLONGCACHE::default_instance_;
  delete mREALQDLONGCACHE_reflection_;
  delete mREQUEST::default_instance_;
  delete mREQUEST_reflection_;
  delete mDailyQuote::default_instance_;
  delete mDailyQuote_reflection_;
  delete mFSP::default_instance_;
  delete mFSP_reflection_;
  delete QDailyQuote::default_instance_;
  delete QDailyQuote_reflection_;
  delete mQDFILEBLOCK::default_instance_;
  delete mQDFILEBLOCK_reflection_;
  delete QHFData::default_instance_;
  delete QHFData_reflection_;
  delete QData::default_instance_;
  delete QData_reflection_;
  delete QFSP::default_instance_;
  delete QFSP_reflection_;
  delete mQD::default_instance_;
  delete mQD_reflection_;
  delete QQuoteDataIO::default_instance_;
  delete QQuoteDataIO_reflection_;
  delete mK::default_instance_;
  delete mK_reflection_;
  delete QQD::default_instance_;
  delete QQD_reflection_;
  delete mQDSECINFO::default_instance_;
  delete mQDSECINFO_reflection_;
  delete QQDSECINFO::default_instance_;
  delete QQDSECINFO_reflection_;
}

void protobuf_AddDesc_SATDataPB_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017SATDataPB.proto\022\tSATDataPB\"\354\003\n\020mREALQD"
    "CACHELONG\022\017\n\007CURRENT\030\001 \002(\005\022\020\n\010PRECLOSE\030\002"
    " \002(\005\022\014\n\004OPEN\030\003 \002(\005\022\014\n\004HIGH\030\004 \002(\005\022\013\n\003LOW\030"
    "\005 \002(\005\022\021\n\tBUYPRICE1\030\006 \002(\005\022\021\n\tBUYPRICE2\030\007 "
    "\002(\005\022\021\n\tBUYPRICE3\030\010 \002(\005\022\021\n\tBUYPRICE4\030\t \002("
    "\005\022\021\n\tBUYPRICE5\030\n \002(\005\022\017\n\007BUYVOL1\030\013 \002(\001\022\017\n"
    "\007BUYVOL2\030\014 \002(\001\022\017\n\007BUYVOL3\030\r \002(\001\022\017\n\007BUYVO"
    "L4\030\016 \002(\001\022\017\n\007BUYVOL5\030\017 \002(\001\022\022\n\nSELLPRICE1\030"
    "\020 \002(\005\022\022\n\nSELLPRICE2\030\021 \002(\005\022\022\n\nSELLPRICE3\030"
    "\022 \002(\005\022\022\n\nSELLPRICE4\030\023 \002(\005\022\022\n\nSELLPRICE5\030"
    "\024 \002(\005\022\020\n\010SELLVOL1\030\025 \002(\001\022\020\n\010SELLVOL2\030\026 \002("
    "\001\022\020\n\010SELLVOL3\030\027 \002(\001\022\020\n\010SELLVOL4\030\030 \002(\001\022\020\n"
    "\010SELLVOL5\030\031 \002(\001\022\013\n\003VOL\030\032 \002(\001\022\r\n\005AMOUT\030\033 "
    "\002(\001\"\237\004\n\010mQDCACHE\022\017\n\007CURRENT\030\001 \002(\005\022\020\n\010PRE"
    "CLOSE\030\002 \002(\005\022\014\n\004OPEN\030\003 \002(\005\022\014\n\004HIGH\030\004 \002(\005\022"
    "\013\n\003LOW\030\005 \002(\005\022\021\n\tBUYPRICE1\030\006 \002(\005\022\021\n\tBUYPR"
    "ICE2\030\007 \002(\005\022\021\n\tBUYPRICE3\030\010 \002(\005\022\021\n\tBUYPRIC"
    "E4\030\t \002(\005\022\021\n\tBUYPRICE5\030\n \002(\005\022\017\n\007BUYVOL1\030\013"
    " \002(\001\022\017\n\007BUYVOL2\030\014 \002(\001\022\017\n\007BUYVOL3\030\r \002(\001\022\017"
    "\n\007BUYVOL4\030\016 \002(\001\022\017\n\007BUYVOL5\030\017 \002(\001\022\022\n\nSELL"
    "PRICE1\030\020 \002(\005\022\022\n\nSELLPRICE2\030\021 \002(\005\022\022\n\nSELL"
    "PRICE3\030\022 \002(\005\022\022\n\nSELLPRICE4\030\023 \002(\005\022\022\n\nSELL"
    "PRICE5\030\024 \002(\005\022\020\n\010SELLVOL1\030\025 \002(\001\022\020\n\010SELLVO"
    "L2\030\026 \002(\001\022\020\n\010SELLVOL3\030\027 \002(\001\022\020\n\010SELLVOL4\030\030"
    " \002(\001\022\020\n\010SELLVOL5\030\031 \002(\001\022\013\n\003VOL\030\032 \002(\001\022\r\n\005A"
    "MOUT\030\033 \002(\001\022\013\n\003SID\030\034 \002(\005\022\020\n\010Exchange\030\035 \002("
    "\005\022\014\n\004Name\030\036 \002(\t\022\014\n\004Time\030\037 \002(\005\"Z\n\013mREALQD"
    "INFO\022\013\n\003SID\030\001 \002(\005\022\020\n\010Exchange\030\002 \002(\005\022\014\n\004N"
    "ame\030\003 \002(\t\022\020\n\010PRECLOSE\030\004 \002(\005\022\014\n\004OPEN\030\005 \002("
    "\005\"b\n\020mREALQDLONGBLOCK\022\014\n\004Time\030\001 \002(\005\022\021\n\tT"
    "imeStamp\030\002 \002(\005\022-\n\010LongData\030\003 \003(\0132\033.SATDa"
    "taPB.mREALQDCACHELONG\"\231\001\n\020mREALQDLONGCAC"
    "HE\022\016\n\006IsUsed\030\001 \002(\005\022\014\n\004Date\030\002 \002(\005\022\016\n\006SecN"
    "um\030\003 \002(\005\022.\n\tDataBlock\030\004 \002(\0132\033.SATDataPB."
    "mREALQDLONGBLOCK\022\'\n\007SecInfo\030\005 \003(\0132\026.SATD"
    "ataPB.mREALQDINFO\"M\n\010mREQUEST\022\013\n\003SID\030\001 \002"
    "(\005\022\020\n\010Exchange\030\002 \002(\005\022\021\n\tStartDate\030\003 \002(\005\022"
    "\017\n\007EndDate\030\004 \002(\005\"\273\001\n\013mDailyQuote\022\013\n\003SID\030"
    "\001 \002(\005\022\014\n\004Date\030\002 \002(\005\022\020\n\010PreClose\030\003 \002(\005\022\014\n"
    "\004Open\030\004 \002(\005\022\014\n\004High\030\005 \002(\005\022\013\n\003Low\030\006 \002(\005\022\r"
    "\n\005Close\030\007 \002(\005\022\016\n\006Volume\030\010 \002(\001\022\016\n\006Amount\030"
    "\t \002(\001\022\027\n\017AdjustingFactor\030\n \002(\001\022\016\n\006Return"
    "\030\013 \002(\001\"v\n\004mFSP\022\014\n\004iSID\030\001 \002(\005\022\014\n\004iDDJ\030\002 \002"
    "(\005\022\014\n\004iDCQ\030\003 \002(\005\022\014\n\004dPGS\030\004 \002(\001\022\014\n\004dPGJ\030\005"
    " \002(\001\022\014\n\004dSGS\030\006 \002(\001\022\014\n\004dPXS\030\007 \002(\001\022\014\n\004dZZS"
    "\030\010 \002(\001\":\n\013QDailyQuote\022+\n\013qDailyQuote\030\001 \003"
    "(\0132\026.SATDataPB.mDailyQuote\"3\n\014mQDFILEBLO"
    "CK\022\016\n\006dwTime\030\001 \002(\005\022\023\n\013dwTimeStamp\030\002 \002(\005\""
    "]\n\007QHFData\022*\n\tFILEBLOCK\030\001 \003(\0132\027.SATDataP"
    "B.mQDFILEBLOCK\022&\n\tCACHELONG\030\002 \003(\0132\023.SATD"
    "ataPB.mQDCACHE\"\026\n\005QData\022\r\n\005qDate\030\001 \003(\005\"%"
    "\n\004QFSP\022\035\n\004qFSP\030\001 \003(\0132\017.SATDataPB.mFSP\"K\n"
    "\003mQD\022\014\n\004Date\030\001 \002(\005\022\016\n\006SecNum\030\002 \002(\005\022&\n\tDa"
    "taBlock\030\003 \003(\0132\023.SATDataPB.mQDCACHE\"E\n\014QQ"
    "uoteDataIO\022\022\n\nStampIndex\030\001 \002(\005\022!\n\tQuoteD"
    "ata\030\002 \002(\0132\016.SATDataPB.mQD\"w\n\002mK\022\014\n\004Date\030"
    "\001 \002(\005\022\014\n\004Time\030\002 \002(\005\022\014\n\004Open\030\003 \002(\005\022\014\n\004Hig"
    "h\030\004 \002(\005\022\013\n\003Low\030\005 \002(\005\022\r\n\005Close\030\006 \002(\005\022\013\n\003S"
    "ID\030\007 \002(\005\022\020\n\010Exchange\030\010 \002(\005\"C\n\003QQD\022\016\n\006Sec"
    "Num\030\001 \002(\005\022\020\n\010DateList\030\002 \003(\005\022\032\n\003mmK\030\003 \003(\013"
    "2\r.SATDataPB.mK\"+\n\nmQDSECINFO\022\020\n\010Exchang"
    "e\030\001 \002(\005\022\013\n\003SID\030\002 \002(\005\"8\n\nQQDSECINFO\022*\n\013mm"
    "QDSECINFO\030\001 \003(\0132\025.SATDataPB.mQDSECINFO", 2518);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SATDataPB.proto", &protobuf_RegisterTypes);
  mREALQDCACHELONG::default_instance_ = new mREALQDCACHELONG();
  mQDCACHE::default_instance_ = new mQDCACHE();
  mREALQDINFO::default_instance_ = new mREALQDINFO();
  mREALQDLONGBLOCK::default_instance_ = new mREALQDLONGBLOCK();
  mREALQDLONGCACHE::default_instance_ = new mREALQDLONGCACHE();
  mREQUEST::default_instance_ = new mREQUEST();
  mDailyQuote::default_instance_ = new mDailyQuote();
  mFSP::default_instance_ = new mFSP();
  QDailyQuote::default_instance_ = new QDailyQuote();
  mQDFILEBLOCK::default_instance_ = new mQDFILEBLOCK();
  QHFData::default_instance_ = new QHFData();
  QData::default_instance_ = new QData();
  QFSP::default_instance_ = new QFSP();
  mQD::default_instance_ = new mQD();
  QQuoteDataIO::default_instance_ = new QQuoteDataIO();
  mK::default_instance_ = new mK();
  QQD::default_instance_ = new QQD();
  mQDSECINFO::default_instance_ = new mQDSECINFO();
  QQDSECINFO::default_instance_ = new QQDSECINFO();
  mREALQDCACHELONG::default_instance_->InitAsDefaultInstance();
  mQDCACHE::default_instance_->InitAsDefaultInstance();
  mREALQDINFO::default_instance_->InitAsDefaultInstance();
  mREALQDLONGBLOCK::default_instance_->InitAsDefaultInstance();
  mREALQDLONGCACHE::default_instance_->InitAsDefaultInstance();
  mREQUEST::default_instance_->InitAsDefaultInstance();
  mDailyQuote::default_instance_->InitAsDefaultInstance();
  mFSP::default_instance_->InitAsDefaultInstance();
  QDailyQuote::default_instance_->InitAsDefaultInstance();
  mQDFILEBLOCK::default_instance_->InitAsDefaultInstance();
  QHFData::default_instance_->InitAsDefaultInstance();
  QData::default_instance_->InitAsDefaultInstance();
  QFSP::default_instance_->InitAsDefaultInstance();
  mQD::default_instance_->InitAsDefaultInstance();
  QQuoteDataIO::default_instance_->InitAsDefaultInstance();
  mK::default_instance_->InitAsDefaultInstance();
  QQD::default_instance_->InitAsDefaultInstance();
  mQDSECINFO::default_instance_->InitAsDefaultInstance();
  QQDSECINFO::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SATDataPB_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SATDataPB_2eproto {
  StaticDescriptorInitializer_SATDataPB_2eproto() {
    protobuf_AddDesc_SATDataPB_2eproto();
  }
} static_descriptor_initializer_SATDataPB_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int mREALQDCACHELONG::kCURRENTFieldNumber;
const int mREALQDCACHELONG::kPRECLOSEFieldNumber;
const int mREALQDCACHELONG::kOPENFieldNumber;
const int mREALQDCACHELONG::kHIGHFieldNumber;
const int mREALQDCACHELONG::kLOWFieldNumber;
const int mREALQDCACHELONG::kBUYPRICE1FieldNumber;
const int mREALQDCACHELONG::kBUYPRICE2FieldNumber;
const int mREALQDCACHELONG::kBUYPRICE3FieldNumber;
const int mREALQDCACHELONG::kBUYPRICE4FieldNumber;
const int mREALQDCACHELONG::kBUYPRICE5FieldNumber;
const int mREALQDCACHELONG::kBUYVOL1FieldNumber;
const int mREALQDCACHELONG::kBUYVOL2FieldNumber;
const int mREALQDCACHELONG::kBUYVOL3FieldNumber;
const int mREALQDCACHELONG::kBUYVOL4FieldNumber;
const int mREALQDCACHELONG::kBUYVOL5FieldNumber;
const int mREALQDCACHELONG::kSELLPRICE1FieldNumber;
const int mREALQDCACHELONG::kSELLPRICE2FieldNumber;
const int mREALQDCACHELONG::kSELLPRICE3FieldNumber;
const int mREALQDCACHELONG::kSELLPRICE4FieldNumber;
const int mREALQDCACHELONG::kSELLPRICE5FieldNumber;
const int mREALQDCACHELONG::kSELLVOL1FieldNumber;
const int mREALQDCACHELONG::kSELLVOL2FieldNumber;
const int mREALQDCACHELONG::kSELLVOL3FieldNumber;
const int mREALQDCACHELONG::kSELLVOL4FieldNumber;
const int mREALQDCACHELONG::kSELLVOL5FieldNumber;
const int mREALQDCACHELONG::kVOLFieldNumber;
const int mREALQDCACHELONG::kAMOUTFieldNumber;
#endif  // !_MSC_VER

mREALQDCACHELONG::mREALQDCACHELONG()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mREALQDCACHELONG::InitAsDefaultInstance() {
}

mREALQDCACHELONG::mREALQDCACHELONG(const mREALQDCACHELONG& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mREALQDCACHELONG::SharedCtor() {
  _cached_size_ = 0;
  current_ = 0;
  preclose_ = 0;
  open_ = 0;
  high_ = 0;
  low_ = 0;
  buyprice1_ = 0;
  buyprice2_ = 0;
  buyprice3_ = 0;
  buyprice4_ = 0;
  buyprice5_ = 0;
  buyvol1_ = 0;
  buyvol2_ = 0;
  buyvol3_ = 0;
  buyvol4_ = 0;
  buyvol5_ = 0;
  sellprice1_ = 0;
  sellprice2_ = 0;
  sellprice3_ = 0;
  sellprice4_ = 0;
  sellprice5_ = 0;
  sellvol1_ = 0;
  sellvol2_ = 0;
  sellvol3_ = 0;
  sellvol4_ = 0;
  sellvol5_ = 0;
  vol_ = 0;
  amout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mREALQDCACHELONG::~mREALQDCACHELONG() {
  SharedDtor();
}

void mREALQDCACHELONG::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mREALQDCACHELONG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mREALQDCACHELONG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mREALQDCACHELONG_descriptor_;
}

const mREALQDCACHELONG& mREALQDCACHELONG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SATDataPB_2eproto();  return *default_instance_;
}

mREALQDCACHELONG* mREALQDCACHELONG::default_instance_ = NULL;

mREALQDCACHELONG* mREALQDCACHELONG::New() const {
  return new mREALQDCACHELONG;
}

void mREALQDCACHELONG::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    current_ = 0;
    preclose_ = 0;
    open_ = 0;
    high_ = 0;
    low_ = 0;
    buyprice1_ = 0;
    buyprice2_ = 0;
    buyprice3_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    buyprice4_ = 0;
    buyprice5_ = 0;
    buyvol1_ = 0;
    buyvol2_ = 0;
    buyvol3_ = 0;
    buyvol4_ = 0;
    buyvol5_ = 0;
    sellprice1_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    sellprice2_ = 0;
    sellprice3_ = 0;
    sellprice4_ = 0;
    sellprice5_ = 0;
    sellvol1_ = 0;
    sellvol2_ = 0;
    sellvol3_ = 0;
    sellvol4_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    sellvol5_ = 0;
    vol_ = 0;
    amout_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mREALQDCACHELONG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CURRENT = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_)));
          set_has_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PRECLOSE;
        break;
      }
      
      // required int32 PRECLOSE = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PRECLOSE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preclose_)));
          set_has_preclose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OPEN;
        break;
      }
      
      // required int32 OPEN = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OPEN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_HIGH;
        break;
      }
      
      // required int32 HIGH = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HIGH:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_LOW;
        break;
      }
      
      // required int32 LOW = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LOW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_BUYPRICE1;
        break;
      }
      
      // required int32 BUYPRICE1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BUYPRICE1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyprice1_)));
          set_has_buyprice1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_BUYPRICE2;
        break;
      }
      
      // required int32 BUYPRICE2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BUYPRICE2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyprice2_)));
          set_has_buyprice2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_BUYPRICE3;
        break;
      }
      
      // required int32 BUYPRICE3 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BUYPRICE3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyprice3_)));
          set_has_buyprice3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_BUYPRICE4;
        break;
      }
      
      // required int32 BUYPRICE4 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BUYPRICE4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyprice4_)));
          set_has_buyprice4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_BUYPRICE5;
        break;
      }
      
      // required int32 BUYPRICE5 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BUYPRICE5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyprice5_)));
          set_has_buyprice5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_BUYVOL1;
        break;
      }
      
      // required double BUYVOL1 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BUYVOL1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &buyvol1_)));
          set_has_buyvol1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_BUYVOL2;
        break;
      }
      
      // required double BUYVOL2 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BUYVOL2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &buyvol2_)));
          set_has_buyvol2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_BUYVOL3;
        break;
      }
      
      // required double BUYVOL3 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BUYVOL3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &buyvol3_)));
          set_has_buyvol3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_BUYVOL4;
        break;
      }
      
      // required double BUYVOL4 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BUYVOL4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &buyvol4_)));
          set_has_buyvol4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_BUYVOL5;
        break;
      }
      
      // required double BUYVOL5 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BUYVOL5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &buyvol5_)));
          set_has_buyvol5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_SELLPRICE1;
        break;
      }
      
      // required int32 SELLPRICE1 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SELLPRICE1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellprice1_)));
          set_has_sellprice1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_SELLPRICE2;
        break;
      }
      
      // required int32 SELLPRICE2 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SELLPRICE2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellprice2_)));
          set_has_sellprice2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_SELLPRICE3;
        break;
      }
      
      // required int32 SELLPRICE3 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SELLPRICE3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellprice3_)));
          set_has_sellprice3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_SELLPRICE4;
        break;
      }
      
      // required int32 SELLPRICE4 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SELLPRICE4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellprice4_)));
          set_has_sellprice4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_SELLPRICE5;
        break;
      }
      
      // required int32 SELLPRICE5 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SELLPRICE5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellprice5_)));
          set_has_sellprice5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_SELLVOL1;
        break;
      }
      
      // required double SELLVOL1 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SELLVOL1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sellvol1_)));
          set_has_sellvol1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_SELLVOL2;
        break;
      }
      
      // required double SELLVOL2 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SELLVOL2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sellvol2_)));
          set_has_sellvol2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_SELLVOL3;
        break;
      }
      
      // required double SELLVOL3 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SELLVOL3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sellvol3_)));
          set_has_sellvol3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_SELLVOL4;
        break;
      }
      
      // required double SELLVOL4 = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SELLVOL4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sellvol4_)));
          set_has_sellvol4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_SELLVOL5;
        break;
      }
      
      // required double SELLVOL5 = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SELLVOL5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sellvol5_)));
          set_has_sellvol5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_VOL;
        break;
      }
      
      // required double VOL = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VOL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vol_)));
          set_has_vol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_AMOUT;
        break;
      }
      
      // required double AMOUT = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AMOUT:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amout_)));
          set_has_amout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mREALQDCACHELONG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CURRENT = 1;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->current(), output);
  }
  
  // required int32 PRECLOSE = 2;
  if (has_preclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->preclose(), output);
  }
  
  // required int32 OPEN = 3;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->open(), output);
  }
  
  // required int32 HIGH = 4;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->high(), output);
  }
  
  // required int32 LOW = 5;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->low(), output);
  }
  
  // required int32 BUYPRICE1 = 6;
  if (has_buyprice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->buyprice1(), output);
  }
  
  // required int32 BUYPRICE2 = 7;
  if (has_buyprice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->buyprice2(), output);
  }
  
  // required int32 BUYPRICE3 = 8;
  if (has_buyprice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->buyprice3(), output);
  }
  
  // required int32 BUYPRICE4 = 9;
  if (has_buyprice4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->buyprice4(), output);
  }
  
  // required int32 BUYPRICE5 = 10;
  if (has_buyprice5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->buyprice5(), output);
  }
  
  // required double BUYVOL1 = 11;
  if (has_buyvol1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->buyvol1(), output);
  }
  
  // required double BUYVOL2 = 12;
  if (has_buyvol2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->buyvol2(), output);
  }
  
  // required double BUYVOL3 = 13;
  if (has_buyvol3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->buyvol3(), output);
  }
  
  // required double BUYVOL4 = 14;
  if (has_buyvol4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->buyvol4(), output);
  }
  
  // required double BUYVOL5 = 15;
  if (has_buyvol5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->buyvol5(), output);
  }
  
  // required int32 SELLPRICE1 = 16;
  if (has_sellprice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->sellprice1(), output);
  }
  
  // required int32 SELLPRICE2 = 17;
  if (has_sellprice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->sellprice2(), output);
  }
  
  // required int32 SELLPRICE3 = 18;
  if (has_sellprice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->sellprice3(), output);
  }
  
  // required int32 SELLPRICE4 = 19;
  if (has_sellprice4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->sellprice4(), output);
  }
  
  // required int32 SELLPRICE5 = 20;
  if (has_sellprice5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->sellprice5(), output);
  }
  
  // required double SELLVOL1 = 21;
  if (has_sellvol1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->sellvol1(), output);
  }
  
  // required double SELLVOL2 = 22;
  if (has_sellvol2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->sellvol2(), output);
  }
  
  // required double SELLVOL3 = 23;
  if (has_sellvol3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->sellvol3(), output);
  }
  
  // required double SELLVOL4 = 24;
  if (has_sellvol4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->sellvol4(), output);
  }
  
  // required double SELLVOL5 = 25;
  if (has_sellvol5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->sellvol5(), output);
  }
  
  // required double VOL = 26;
  if (has_vol()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->vol(), output);
  }
  
  // required double AMOUT = 27;
  if (has_amout()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->amout(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mREALQDCACHELONG::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CURRENT = 1;
  if (has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->current(), target);
  }
  
  // required int32 PRECLOSE = 2;
  if (has_preclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->preclose(), target);
  }
  
  // required int32 OPEN = 3;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->open(), target);
  }
  
  // required int32 HIGH = 4;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->high(), target);
  }
  
  // required int32 LOW = 5;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->low(), target);
  }
  
  // required int32 BUYPRICE1 = 6;
  if (has_buyprice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->buyprice1(), target);
  }
  
  // required int32 BUYPRICE2 = 7;
  if (has_buyprice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->buyprice2(), target);
  }
  
  // required int32 BUYPRICE3 = 8;
  if (has_buyprice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->buyprice3(), target);
  }
  
  // required int32 BUYPRICE4 = 9;
  if (has_buyprice4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->buyprice4(), target);
  }
  
  // required int32 BUYPRICE5 = 10;
  if (has_buyprice5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->buyprice5(), target);
  }
  
  // required double BUYVOL1 = 11;
  if (has_buyvol1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->buyvol1(), target);
  }
  
  // required double BUYVOL2 = 12;
  if (has_buyvol2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->buyvol2(), target);
  }
  
  // required double BUYVOL3 = 13;
  if (has_buyvol3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->buyvol3(), target);
  }
  
  // required double BUYVOL4 = 14;
  if (has_buyvol4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->buyvol4(), target);
  }
  
  // required double BUYVOL5 = 15;
  if (has_buyvol5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->buyvol5(), target);
  }
  
  // required int32 SELLPRICE1 = 16;
  if (has_sellprice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->sellprice1(), target);
  }
  
  // required int32 SELLPRICE2 = 17;
  if (has_sellprice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->sellprice2(), target);
  }
  
  // required int32 SELLPRICE3 = 18;
  if (has_sellprice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->sellprice3(), target);
  }
  
  // required int32 SELLPRICE4 = 19;
  if (has_sellprice4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->sellprice4(), target);
  }
  
  // required int32 SELLPRICE5 = 20;
  if (has_sellprice5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->sellprice5(), target);
  }
  
  // required double SELLVOL1 = 21;
  if (has_sellvol1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->sellvol1(), target);
  }
  
  // required double SELLVOL2 = 22;
  if (has_sellvol2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->sellvol2(), target);
  }
  
  // required double SELLVOL3 = 23;
  if (has_sellvol3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->sellvol3(), target);
  }
  
  // required double SELLVOL4 = 24;
  if (has_sellvol4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->sellvol4(), target);
  }
  
  // required double SELLVOL5 = 25;
  if (has_sellvol5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->sellvol5(), target);
  }
  
  // required double VOL = 26;
  if (has_vol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->vol(), target);
  }
  
  // required double AMOUT = 27;
  if (has_amout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->amout(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mREALQDCACHELONG::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CURRENT = 1;
    if (has_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current());
    }
    
    // required int32 PRECLOSE = 2;
    if (has_preclose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preclose());
    }
    
    // required int32 OPEN = 3;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open());
    }
    
    // required int32 HIGH = 4;
    if (has_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->high());
    }
    
    // required int32 LOW = 5;
    if (has_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->low());
    }
    
    // required int32 BUYPRICE1 = 6;
    if (has_buyprice1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyprice1());
    }
    
    // required int32 BUYPRICE2 = 7;
    if (has_buyprice2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyprice2());
    }
    
    // required int32 BUYPRICE3 = 8;
    if (has_buyprice3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyprice3());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 BUYPRICE4 = 9;
    if (has_buyprice4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyprice4());
    }
    
    // required int32 BUYPRICE5 = 10;
    if (has_buyprice5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyprice5());
    }
    
    // required double BUYVOL1 = 11;
    if (has_buyvol1()) {
      total_size += 1 + 8;
    }
    
    // required double BUYVOL2 = 12;
    if (has_buyvol2()) {
      total_size += 1 + 8;
    }
    
    // required double BUYVOL3 = 13;
    if (has_buyvol3()) {
      total_size += 1 + 8;
    }
    
    // required double BUYVOL4 = 14;
    if (has_buyvol4()) {
      total_size += 1 + 8;
    }
    
    // required double BUYVOL5 = 15;
    if (has_buyvol5()) {
      total_size += 1 + 8;
    }
    
    // required int32 SELLPRICE1 = 16;
    if (has_sellprice1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellprice1());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 SELLPRICE2 = 17;
    if (has_sellprice2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellprice2());
    }
    
    // required int32 SELLPRICE3 = 18;
    if (has_sellprice3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellprice3());
    }
    
    // required int32 SELLPRICE4 = 19;
    if (has_sellprice4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellprice4());
    }
    
    // required int32 SELLPRICE5 = 20;
    if (has_sellprice5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellprice5());
    }
    
    // required double SELLVOL1 = 21;
    if (has_sellvol1()) {
      total_size += 2 + 8;
    }
    
    // required double SELLVOL2 = 22;
    if (has_sellvol2()) {
      total_size += 2 + 8;
    }
    
    // required double SELLVOL3 = 23;
    if (has_sellvol3()) {
      total_size += 2 + 8;
    }
    
    // required double SELLVOL4 = 24;
    if (has_sellvol4()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double SELLVOL5 = 25;
    if (has_sellvol5()) {
      total_size += 2 + 8;
    }
    
    // required double VOL = 26;
    if (has_vol()) {
      total_size += 2 + 8;
    }
    
    // required double AMOUT = 27;
    if (has_amout()) {
      total_size += 2 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mREALQDCACHELONG::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mREALQDCACHELONG* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mREALQDCACHELONG*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mREALQDCACHELONG::MergeFrom(const mREALQDCACHELONG& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current()) {
      set_current(from.current());
    }
    if (from.has_preclose()) {
      set_preclose(from.preclose());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_buyprice1()) {
      set_buyprice1(from.buyprice1());
    }
    if (from.has_buyprice2()) {
      set_buyprice2(from.buyprice2());
    }
    if (from.has_buyprice3()) {
      set_buyprice3(from.buyprice3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buyprice4()) {
      set_buyprice4(from.buyprice4());
    }
    if (from.has_buyprice5()) {
      set_buyprice5(from.buyprice5());
    }
    if (from.has_buyvol1()) {
      set_buyvol1(from.buyvol1());
    }
    if (from.has_buyvol2()) {
      set_buyvol2(from.buyvol2());
    }
    if (from.has_buyvol3()) {
      set_buyvol3(from.buyvol3());
    }
    if (from.has_buyvol4()) {
      set_buyvol4(from.buyvol4());
    }
    if (from.has_buyvol5()) {
      set_buyvol5(from.buyvol5());
    }
    if (from.has_sellprice1()) {
      set_sellprice1(from.sellprice1());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sellprice2()) {
      set_sellprice2(from.sellprice2());
    }
    if (from.has_sellprice3()) {
      set_sellprice3(from.sellprice3());
    }
    if (from.has_sellprice4()) {
      set_sellprice4(from.sellprice4());
    }
    if (from.has_sellprice5()) {
      set_sellprice5(from.sellprice5());
    }
    if (from.has_sellvol1()) {
      set_sellvol1(from.sellvol1());
    }
    if (from.has_sellvol2()) {
      set_sellvol2(from.sellvol2());
    }
    if (from.has_sellvol3()) {
      set_sellvol3(from.sellvol3());
    }
    if (from.has_sellvol4()) {
      set_sellvol4(from.sellvol4());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_sellvol5()) {
      set_sellvol5(from.sellvol5());
    }
    if (from.has_vol()) {
      set_vol(from.vol());
    }
    if (from.has_amout()) {
      set_amout(from.amout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mREALQDCACHELONG::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mREALQDCACHELONG::CopyFrom(const mREALQDCACHELONG& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mREALQDCACHELONG::IsInitialized() const {
  if ((_has_bits_[0] & 0x07ffffff) != 0x07ffffff) return false;
  
  return true;
}

void mREALQDCACHELONG::Swap(mREALQDCACHELONG* other) {
  if (other != this) {
    std::swap(current_, other->current_);
    std::swap(preclose_, other->preclose_);
    std::swap(open_, other->open_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(buyprice1_, other->buyprice1_);
    std::swap(buyprice2_, other->buyprice2_);
    std::swap(buyprice3_, other->buyprice3_);
    std::swap(buyprice4_, other->buyprice4_);
    std::swap(buyprice5_, other->buyprice5_);
    std::swap(buyvol1_, other->buyvol1_);
    std::swap(buyvol2_, other->buyvol2_);
    std::swap(buyvol3_, other->buyvol3_);
    std::swap(buyvol4_, other->buyvol4_);
    std::swap(buyvol5_, other->buyvol5_);
    std::swap(sellprice1_, other->sellprice1_);
    std::swap(sellprice2_, other->sellprice2_);
    std::swap(sellprice3_, other->sellprice3_);
    std::swap(sellprice4_, other->sellprice4_);
    std::swap(sellprice5_, other->sellprice5_);
    std::swap(sellvol1_, other->sellvol1_);
    std::swap(sellvol2_, other->sellvol2_);
    std::swap(sellvol3_, other->sellvol3_);
    std::swap(sellvol4_, other->sellvol4_);
    std::swap(sellvol5_, other->sellvol5_);
    std::swap(vol_, other->vol_);
    std::swap(amout_, other->amout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mREALQDCACHELONG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mREALQDCACHELONG_descriptor_;
  metadata.reflection = mREALQDCACHELONG_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mQDCACHE::kCURRENTFieldNumber;
const int mQDCACHE::kPRECLOSEFieldNumber;
const int mQDCACHE::kOPENFieldNumber;
const int mQDCACHE::kHIGHFieldNumber;
const int mQDCACHE::kLOWFieldNumber;
const int mQDCACHE::kBUYPRICE1FieldNumber;
const int mQDCACHE::kBUYPRICE2FieldNumber;
const int mQDCACHE::kBUYPRICE3FieldNumber;
const int mQDCACHE::kBUYPRICE4FieldNumber;
const int mQDCACHE::kBUYPRICE5FieldNumber;
const int mQDCACHE::kBUYVOL1FieldNumber;
const int mQDCACHE::kBUYVOL2FieldNumber;
const int mQDCACHE::kBUYVOL3FieldNumber;
const int mQDCACHE::kBUYVOL4FieldNumber;
const int mQDCACHE::kBUYVOL5FieldNumber;
const int mQDCACHE::kSELLPRICE1FieldNumber;
const int mQDCACHE::kSELLPRICE2FieldNumber;
const int mQDCACHE::kSELLPRICE3FieldNumber;
const int mQDCACHE::kSELLPRICE4FieldNumber;
const int mQDCACHE::kSELLPRICE5FieldNumber;
const int mQDCACHE::kSELLVOL1FieldNumber;
const int mQDCACHE::kSELLVOL2FieldNumber;
const int mQDCACHE::kSELLVOL3FieldNumber;
const int mQDCACHE::kSELLVOL4FieldNumber;
const int mQDCACHE::kSELLVOL5FieldNumber;
const int mQDCACHE::kVOLFieldNumber;
const int mQDCACHE::kAMOUTFieldNumber;
const int mQDCACHE::kSIDFieldNumber;
const int mQDCACHE::kExchangeFieldNumber;
const int mQDCACHE::kNameFieldNumber;
const int mQDCACHE::kTimeFieldNumber;
#endif  // !_MSC_VER

mQDCACHE::mQDCACHE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mQDCACHE::InitAsDefaultInstance() {
}

mQDCACHE::mQDCACHE(const mQDCACHE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mQDCACHE::SharedCtor() {
  _cached_size_ = 0;
  current_ = 0;
  preclose_ = 0;
  open_ = 0;
  high_ = 0;
  low_ = 0;
  buyprice1_ = 0;
  buyprice2_ = 0;
  buyprice3_ = 0;
  buyprice4_ = 0;
  buyprice5_ = 0;
  buyvol1_ = 0;
  buyvol2_ = 0;
  buyvol3_ = 0;
  buyvol4_ = 0;
  buyvol5_ = 0;
  sellprice1_ = 0;
  sellprice2_ = 0;
  sellprice3_ = 0;
  sellprice4_ = 0;
  sellprice5_ = 0;
  sellvol1_ = 0;
  sellvol2_ = 0;
  sellvol3_ = 0;
  sellvol4_ = 0;
  sellvol5_ = 0;
  vol_ = 0;
  amout_ = 0;
  sid_ = 0;
  exchange_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mQDCACHE::~mQDCACHE() {
  SharedDtor();
}

void mQDCACHE::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void mQDCACHE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mQDCACHE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mQDCACHE_descriptor_;
}

const mQDCACHE& mQDCACHE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SATDataPB_2eproto();  return *default_instance_;
}

mQDCACHE* mQDCACHE::default_instance_ = NULL;

mQDCACHE* mQDCACHE::New() const {
  return new mQDCACHE;
}

void mQDCACHE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    current_ = 0;
    preclose_ = 0;
    open_ = 0;
    high_ = 0;
    low_ = 0;
    buyprice1_ = 0;
    buyprice2_ = 0;
    buyprice3_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    buyprice4_ = 0;
    buyprice5_ = 0;
    buyvol1_ = 0;
    buyvol2_ = 0;
    buyvol3_ = 0;
    buyvol4_ = 0;
    buyvol5_ = 0;
    sellprice1_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    sellprice2_ = 0;
    sellprice3_ = 0;
    sellprice4_ = 0;
    sellprice5_ = 0;
    sellvol1_ = 0;
    sellvol2_ = 0;
    sellvol3_ = 0;
    sellvol4_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    sellvol5_ = 0;
    vol_ = 0;
    amout_ = 0;
    sid_ = 0;
    exchange_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mQDCACHE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CURRENT = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_)));
          set_has_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PRECLOSE;
        break;
      }
      
      // required int32 PRECLOSE = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PRECLOSE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preclose_)));
          set_has_preclose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OPEN;
        break;
      }
      
      // required int32 OPEN = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OPEN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_HIGH;
        break;
      }
      
      // required int32 HIGH = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HIGH:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_LOW;
        break;
      }
      
      // required int32 LOW = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LOW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_BUYPRICE1;
        break;
      }
      
      // required int32 BUYPRICE1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BUYPRICE1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyprice1_)));
          set_has_buyprice1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_BUYPRICE2;
        break;
      }
      
      // required int32 BUYPRICE2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BUYPRICE2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyprice2_)));
          set_has_buyprice2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_BUYPRICE3;
        break;
      }
      
      // required int32 BUYPRICE3 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BUYPRICE3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyprice3_)));
          set_has_buyprice3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_BUYPRICE4;
        break;
      }
      
      // required int32 BUYPRICE4 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BUYPRICE4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyprice4_)));
          set_has_buyprice4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_BUYPRICE5;
        break;
      }
      
      // required int32 BUYPRICE5 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BUYPRICE5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buyprice5_)));
          set_has_buyprice5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_BUYVOL1;
        break;
      }
      
      // required double BUYVOL1 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BUYVOL1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &buyvol1_)));
          set_has_buyvol1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_BUYVOL2;
        break;
      }
      
      // required double BUYVOL2 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BUYVOL2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &buyvol2_)));
          set_has_buyvol2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_BUYVOL3;
        break;
      }
      
      // required double BUYVOL3 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BUYVOL3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &buyvol3_)));
          set_has_buyvol3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_BUYVOL4;
        break;
      }
      
      // required double BUYVOL4 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BUYVOL4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &buyvol4_)));
          set_has_buyvol4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_BUYVOL5;
        break;
      }
      
      // required double BUYVOL5 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BUYVOL5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &buyvol5_)));
          set_has_buyvol5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_SELLPRICE1;
        break;
      }
      
      // required int32 SELLPRICE1 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SELLPRICE1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellprice1_)));
          set_has_sellprice1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_SELLPRICE2;
        break;
      }
      
      // required int32 SELLPRICE2 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SELLPRICE2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellprice2_)));
          set_has_sellprice2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_SELLPRICE3;
        break;
      }
      
      // required int32 SELLPRICE3 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SELLPRICE3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellprice3_)));
          set_has_sellprice3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_SELLPRICE4;
        break;
      }
      
      // required int32 SELLPRICE4 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SELLPRICE4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellprice4_)));
          set_has_sellprice4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_SELLPRICE5;
        break;
      }
      
      // required int32 SELLPRICE5 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SELLPRICE5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellprice5_)));
          set_has_sellprice5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_SELLVOL1;
        break;
      }
      
      // required double SELLVOL1 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SELLVOL1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sellvol1_)));
          set_has_sellvol1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_SELLVOL2;
        break;
      }
      
      // required double SELLVOL2 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SELLVOL2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sellvol2_)));
          set_has_sellvol2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_SELLVOL3;
        break;
      }
      
      // required double SELLVOL3 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SELLVOL3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sellvol3_)));
          set_has_sellvol3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_SELLVOL4;
        break;
      }
      
      // required double SELLVOL4 = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SELLVOL4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sellvol4_)));
          set_has_sellvol4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_SELLVOL5;
        break;
      }
      
      // required double SELLVOL5 = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SELLVOL5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sellvol5_)));
          set_has_sellvol5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_VOL;
        break;
      }
      
      // required double VOL = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VOL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vol_)));
          set_has_vol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_AMOUT;
        break;
      }
      
      // required double AMOUT = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AMOUT:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amout_)));
          set_has_amout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_SID;
        break;
      }
      
      // required int32 SID = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_Exchange;
        break;
      }
      
      // required int32 Exchange = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_)));
          set_has_exchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_Name;
        break;
      }
      
      // required string Name = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_Time;
        break;
      }
      
      // required int32 Time = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mQDCACHE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CURRENT = 1;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->current(), output);
  }
  
  // required int32 PRECLOSE = 2;
  if (has_preclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->preclose(), output);
  }
  
  // required int32 OPEN = 3;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->open(), output);
  }
  
  // required int32 HIGH = 4;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->high(), output);
  }
  
  // required int32 LOW = 5;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->low(), output);
  }
  
  // required int32 BUYPRICE1 = 6;
  if (has_buyprice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->buyprice1(), output);
  }
  
  // required int32 BUYPRICE2 = 7;
  if (has_buyprice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->buyprice2(), output);
  }
  
  // required int32 BUYPRICE3 = 8;
  if (has_buyprice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->buyprice3(), output);
  }
  
  // required int32 BUYPRICE4 = 9;
  if (has_buyprice4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->buyprice4(), output);
  }
  
  // required int32 BUYPRICE5 = 10;
  if (has_buyprice5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->buyprice5(), output);
  }
  
  // required double BUYVOL1 = 11;
  if (has_buyvol1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->buyvol1(), output);
  }
  
  // required double BUYVOL2 = 12;
  if (has_buyvol2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->buyvol2(), output);
  }
  
  // required double BUYVOL3 = 13;
  if (has_buyvol3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->buyvol3(), output);
  }
  
  // required double BUYVOL4 = 14;
  if (has_buyvol4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->buyvol4(), output);
  }
  
  // required double BUYVOL5 = 15;
  if (has_buyvol5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->buyvol5(), output);
  }
  
  // required int32 SELLPRICE1 = 16;
  if (has_sellprice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->sellprice1(), output);
  }
  
  // required int32 SELLPRICE2 = 17;
  if (has_sellprice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->sellprice2(), output);
  }
  
  // required int32 SELLPRICE3 = 18;
  if (has_sellprice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->sellprice3(), output);
  }
  
  // required int32 SELLPRICE4 = 19;
  if (has_sellprice4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->sellprice4(), output);
  }
  
  // required int32 SELLPRICE5 = 20;
  if (has_sellprice5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->sellprice5(), output);
  }
  
  // required double SELLVOL1 = 21;
  if (has_sellvol1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->sellvol1(), output);
  }
  
  // required double SELLVOL2 = 22;
  if (has_sellvol2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->sellvol2(), output);
  }
  
  // required double SELLVOL3 = 23;
  if (has_sellvol3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->sellvol3(), output);
  }
  
  // required double SELLVOL4 = 24;
  if (has_sellvol4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->sellvol4(), output);
  }
  
  // required double SELLVOL5 = 25;
  if (has_sellvol5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->sellvol5(), output);
  }
  
  // required double VOL = 26;
  if (has_vol()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->vol(), output);
  }
  
  // required double AMOUT = 27;
  if (has_amout()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->amout(), output);
  }
  
  // required int32 SID = 28;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->sid(), output);
  }
  
  // required int32 Exchange = 29;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->exchange(), output);
  }
  
  // required string Name = 30;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->name(), output);
  }
  
  // required int32 Time = 31;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mQDCACHE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CURRENT = 1;
  if (has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->current(), target);
  }
  
  // required int32 PRECLOSE = 2;
  if (has_preclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->preclose(), target);
  }
  
  // required int32 OPEN = 3;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->open(), target);
  }
  
  // required int32 HIGH = 4;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->high(), target);
  }
  
  // required int32 LOW = 5;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->low(), target);
  }
  
  // required int32 BUYPRICE1 = 6;
  if (has_buyprice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->buyprice1(), target);
  }
  
  // required int32 BUYPRICE2 = 7;
  if (has_buyprice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->buyprice2(), target);
  }
  
  // required int32 BUYPRICE3 = 8;
  if (has_buyprice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->buyprice3(), target);
  }
  
  // required int32 BUYPRICE4 = 9;
  if (has_buyprice4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->buyprice4(), target);
  }
  
  // required int32 BUYPRICE5 = 10;
  if (has_buyprice5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->buyprice5(), target);
  }
  
  // required double BUYVOL1 = 11;
  if (has_buyvol1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->buyvol1(), target);
  }
  
  // required double BUYVOL2 = 12;
  if (has_buyvol2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->buyvol2(), target);
  }
  
  // required double BUYVOL3 = 13;
  if (has_buyvol3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->buyvol3(), target);
  }
  
  // required double BUYVOL4 = 14;
  if (has_buyvol4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->buyvol4(), target);
  }
  
  // required double BUYVOL5 = 15;
  if (has_buyvol5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->buyvol5(), target);
  }
  
  // required int32 SELLPRICE1 = 16;
  if (has_sellprice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->sellprice1(), target);
  }
  
  // required int32 SELLPRICE2 = 17;
  if (has_sellprice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->sellprice2(), target);
  }
  
  // required int32 SELLPRICE3 = 18;
  if (has_sellprice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->sellprice3(), target);
  }
  
  // required int32 SELLPRICE4 = 19;
  if (has_sellprice4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->sellprice4(), target);
  }
  
  // required int32 SELLPRICE5 = 20;
  if (has_sellprice5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->sellprice5(), target);
  }
  
  // required double SELLVOL1 = 21;
  if (has_sellvol1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->sellvol1(), target);
  }
  
  // required double SELLVOL2 = 22;
  if (has_sellvol2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->sellvol2(), target);
  }
  
  // required double SELLVOL3 = 23;
  if (has_sellvol3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->sellvol3(), target);
  }
  
  // required double SELLVOL4 = 24;
  if (has_sellvol4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->sellvol4(), target);
  }
  
  // required double SELLVOL5 = 25;
  if (has_sellvol5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->sellvol5(), target);
  }
  
  // required double VOL = 26;
  if (has_vol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->vol(), target);
  }
  
  // required double AMOUT = 27;
  if (has_amout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->amout(), target);
  }
  
  // required int32 SID = 28;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->sid(), target);
  }
  
  // required int32 Exchange = 29;
  if (has_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->exchange(), target);
  }
  
  // required string Name = 30;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->name(), target);
  }
  
  // required int32 Time = 31;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mQDCACHE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CURRENT = 1;
    if (has_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current());
    }
    
    // required int32 PRECLOSE = 2;
    if (has_preclose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preclose());
    }
    
    // required int32 OPEN = 3;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open());
    }
    
    // required int32 HIGH = 4;
    if (has_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->high());
    }
    
    // required int32 LOW = 5;
    if (has_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->low());
    }
    
    // required int32 BUYPRICE1 = 6;
    if (has_buyprice1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyprice1());
    }
    
    // required int32 BUYPRICE2 = 7;
    if (has_buyprice2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyprice2());
    }
    
    // required int32 BUYPRICE3 = 8;
    if (has_buyprice3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyprice3());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 BUYPRICE4 = 9;
    if (has_buyprice4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyprice4());
    }
    
    // required int32 BUYPRICE5 = 10;
    if (has_buyprice5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buyprice5());
    }
    
    // required double BUYVOL1 = 11;
    if (has_buyvol1()) {
      total_size += 1 + 8;
    }
    
    // required double BUYVOL2 = 12;
    if (has_buyvol2()) {
      total_size += 1 + 8;
    }
    
    // required double BUYVOL3 = 13;
    if (has_buyvol3()) {
      total_size += 1 + 8;
    }
    
    // required double BUYVOL4 = 14;
    if (has_buyvol4()) {
      total_size += 1 + 8;
    }
    
    // required double BUYVOL5 = 15;
    if (has_buyvol5()) {
      total_size += 1 + 8;
    }
    
    // required int32 SELLPRICE1 = 16;
    if (has_sellprice1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellprice1());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 SELLPRICE2 = 17;
    if (has_sellprice2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellprice2());
    }
    
    // required int32 SELLPRICE3 = 18;
    if (has_sellprice3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellprice3());
    }
    
    // required int32 SELLPRICE4 = 19;
    if (has_sellprice4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellprice4());
    }
    
    // required int32 SELLPRICE5 = 20;
    if (has_sellprice5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellprice5());
    }
    
    // required double SELLVOL1 = 21;
    if (has_sellvol1()) {
      total_size += 2 + 8;
    }
    
    // required double SELLVOL2 = 22;
    if (has_sellvol2()) {
      total_size += 2 + 8;
    }
    
    // required double SELLVOL3 = 23;
    if (has_sellvol3()) {
      total_size += 2 + 8;
    }
    
    // required double SELLVOL4 = 24;
    if (has_sellvol4()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double SELLVOL5 = 25;
    if (has_sellvol5()) {
      total_size += 2 + 8;
    }
    
    // required double VOL = 26;
    if (has_vol()) {
      total_size += 2 + 8;
    }
    
    // required double AMOUT = 27;
    if (has_amout()) {
      total_size += 2 + 8;
    }
    
    // required int32 SID = 28;
    if (has_sid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // required int32 Exchange = 29;
    if (has_exchange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange());
    }
    
    // required string Name = 30;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 Time = 31;
    if (has_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mQDCACHE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mQDCACHE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mQDCACHE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mQDCACHE::MergeFrom(const mQDCACHE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current()) {
      set_current(from.current());
    }
    if (from.has_preclose()) {
      set_preclose(from.preclose());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_buyprice1()) {
      set_buyprice1(from.buyprice1());
    }
    if (from.has_buyprice2()) {
      set_buyprice2(from.buyprice2());
    }
    if (from.has_buyprice3()) {
      set_buyprice3(from.buyprice3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buyprice4()) {
      set_buyprice4(from.buyprice4());
    }
    if (from.has_buyprice5()) {
      set_buyprice5(from.buyprice5());
    }
    if (from.has_buyvol1()) {
      set_buyvol1(from.buyvol1());
    }
    if (from.has_buyvol2()) {
      set_buyvol2(from.buyvol2());
    }
    if (from.has_buyvol3()) {
      set_buyvol3(from.buyvol3());
    }
    if (from.has_buyvol4()) {
      set_buyvol4(from.buyvol4());
    }
    if (from.has_buyvol5()) {
      set_buyvol5(from.buyvol5());
    }
    if (from.has_sellprice1()) {
      set_sellprice1(from.sellprice1());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sellprice2()) {
      set_sellprice2(from.sellprice2());
    }
    if (from.has_sellprice3()) {
      set_sellprice3(from.sellprice3());
    }
    if (from.has_sellprice4()) {
      set_sellprice4(from.sellprice4());
    }
    if (from.has_sellprice5()) {
      set_sellprice5(from.sellprice5());
    }
    if (from.has_sellvol1()) {
      set_sellvol1(from.sellvol1());
    }
    if (from.has_sellvol2()) {
      set_sellvol2(from.sellvol2());
    }
    if (from.has_sellvol3()) {
      set_sellvol3(from.sellvol3());
    }
    if (from.has_sellvol4()) {
      set_sellvol4(from.sellvol4());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_sellvol5()) {
      set_sellvol5(from.sellvol5());
    }
    if (from.has_vol()) {
      set_vol(from.vol());
    }
    if (from.has_amout()) {
      set_amout(from.amout());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mQDCACHE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mQDCACHE::CopyFrom(const mQDCACHE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mQDCACHE::IsInitialized() const {
  if ((_has_bits_[0] & 0x7fffffff) != 0x7fffffff) return false;
  
  return true;
}

void mQDCACHE::Swap(mQDCACHE* other) {
  if (other != this) {
    std::swap(current_, other->current_);
    std::swap(preclose_, other->preclose_);
    std::swap(open_, other->open_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(buyprice1_, other->buyprice1_);
    std::swap(buyprice2_, other->buyprice2_);
    std::swap(buyprice3_, other->buyprice3_);
    std::swap(buyprice4_, other->buyprice4_);
    std::swap(buyprice5_, other->buyprice5_);
    std::swap(buyvol1_, other->buyvol1_);
    std::swap(buyvol2_, other->buyvol2_);
    std::swap(buyvol3_, other->buyvol3_);
    std::swap(buyvol4_, other->buyvol4_);
    std::swap(buyvol5_, other->buyvol5_);
    std::swap(sellprice1_, other->sellprice1_);
    std::swap(sellprice2_, other->sellprice2_);
    std::swap(sellprice3_, other->sellprice3_);
    std::swap(sellprice4_, other->sellprice4_);
    std::swap(sellprice5_, other->sellprice5_);
    std::swap(sellvol1_, other->sellvol1_);
    std::swap(sellvol2_, other->sellvol2_);
    std::swap(sellvol3_, other->sellvol3_);
    std::swap(sellvol4_, other->sellvol4_);
    std::swap(sellvol5_, other->sellvol5_);
    std::swap(vol_, other->vol_);
    std::swap(amout_, other->amout_);
    std::swap(sid_, other->sid_);
    std::swap(exchange_, other->exchange_);
    std::swap(name_, other->name_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mQDCACHE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mQDCACHE_descriptor_;
  metadata.reflection = mQDCACHE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mREALQDINFO::kSIDFieldNumber;
const int mREALQDINFO::kExchangeFieldNumber;
const int mREALQDINFO::kNameFieldNumber;
const int mREALQDINFO::kPRECLOSEFieldNumber;
const int mREALQDINFO::kOPENFieldNumber;
#endif  // !_MSC_VER

mREALQDINFO::mREALQDINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mREALQDINFO::InitAsDefaultInstance() {
}

mREALQDINFO::mREALQDINFO(const mREALQDINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mREALQDINFO::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  exchange_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preclose_ = 0;
  open_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mREALQDINFO::~mREALQDINFO() {
  SharedDtor();
}

void mREALQDINFO::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void mREALQDINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mREALQDINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mREALQDINFO_descriptor_;
}

const mREALQDINFO& mREALQDINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SATDataPB_2eproto();  return *default_instance_;
}

mREALQDINFO* mREALQDINFO::default_instance_ = NULL;

mREALQDINFO* mREALQDINFO::New() const {
  return new mREALQDINFO;
}

void mREALQDINFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0;
    exchange_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    preclose_ = 0;
    open_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mREALQDINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 SID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Exchange;
        break;
      }
      
      // required int32 Exchange = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_)));
          set_has_exchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }
      
      // required string Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_PRECLOSE;
        break;
      }
      
      // required int32 PRECLOSE = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PRECLOSE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preclose_)));
          set_has_preclose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_OPEN;
        break;
      }
      
      // required int32 OPEN = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OPEN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mREALQDINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 SID = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }
  
  // required int32 Exchange = 2;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exchange(), output);
  }
  
  // required string Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // required int32 PRECLOSE = 4;
  if (has_preclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->preclose(), output);
  }
  
  // required int32 OPEN = 5;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->open(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mREALQDINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 SID = 1;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }
  
  // required int32 Exchange = 2;
  if (has_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exchange(), target);
  }
  
  // required string Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // required int32 PRECLOSE = 4;
  if (has_preclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->preclose(), target);
  }
  
  // required int32 OPEN = 5;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->open(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mREALQDINFO::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 SID = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // required int32 Exchange = 2;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange());
    }
    
    // required string Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 PRECLOSE = 4;
    if (has_preclose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preclose());
    }
    
    // required int32 OPEN = 5;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mREALQDINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mREALQDINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mREALQDINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mREALQDINFO::MergeFrom(const mREALQDINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_preclose()) {
      set_preclose(from.preclose());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mREALQDINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mREALQDINFO::CopyFrom(const mREALQDINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mREALQDINFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void mREALQDINFO::Swap(mREALQDINFO* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(exchange_, other->exchange_);
    std::swap(name_, other->name_);
    std::swap(preclose_, other->preclose_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mREALQDINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mREALQDINFO_descriptor_;
  metadata.reflection = mREALQDINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mREALQDLONGBLOCK::kTimeFieldNumber;
const int mREALQDLONGBLOCK::kTimeStampFieldNumber;
const int mREALQDLONGBLOCK::kLongDataFieldNumber;
#endif  // !_MSC_VER

mREALQDLONGBLOCK::mREALQDLONGBLOCK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mREALQDLONGBLOCK::InitAsDefaultInstance() {
}

mREALQDLONGBLOCK::mREALQDLONGBLOCK(const mREALQDLONGBLOCK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mREALQDLONGBLOCK::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mREALQDLONGBLOCK::~mREALQDLONGBLOCK() {
  SharedDtor();
}

void mREALQDLONGBLOCK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mREALQDLONGBLOCK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mREALQDLONGBLOCK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mREALQDLONGBLOCK_descriptor_;
}

const mREALQDLONGBLOCK& mREALQDLONGBLOCK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SATDataPB_2eproto();  return *default_instance_;
}

mREALQDLONGBLOCK* mREALQDLONGBLOCK::default_instance_ = NULL;

mREALQDLONGBLOCK* mREALQDLONGBLOCK::New() const {
  return new mREALQDLONGBLOCK;
}

void mREALQDLONGBLOCK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0;
    timestamp_ = 0;
  }
  longdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mREALQDLONGBLOCK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TimeStamp;
        break;
      }
      
      // required int32 TimeStamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LongData;
        break;
      }
      
      // repeated .SATDataPB.mREALQDCACHELONG LongData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LongData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_longdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_LongData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mREALQDLONGBLOCK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time(), output);
  }
  
  // required int32 TimeStamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timestamp(), output);
  }
  
  // repeated .SATDataPB.mREALQDCACHELONG LongData = 3;
  for (int i = 0; i < this->longdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->longdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mREALQDLONGBLOCK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time(), target);
  }
  
  // required int32 TimeStamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timestamp(), target);
  }
  
  // repeated .SATDataPB.mREALQDCACHELONG LongData = 3;
  for (int i = 0; i < this->longdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->longdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mREALQDLONGBLOCK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // required int32 TimeStamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }
    
  }
  // repeated .SATDataPB.mREALQDCACHELONG LongData = 3;
  total_size += 1 * this->longdata_size();
  for (int i = 0; i < this->longdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->longdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mREALQDLONGBLOCK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mREALQDLONGBLOCK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mREALQDLONGBLOCK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mREALQDLONGBLOCK::MergeFrom(const mREALQDLONGBLOCK& from) {
  GOOGLE_CHECK_NE(&from, this);
  longdata_.MergeFrom(from.longdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mREALQDLONGBLOCK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mREALQDLONGBLOCK::CopyFrom(const mREALQDLONGBLOCK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mREALQDLONGBLOCK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < longdata_size(); i++) {
    if (!this->longdata(i).IsInitialized()) return false;
  }
  return true;
}

void mREALQDLONGBLOCK::Swap(mREALQDLONGBLOCK* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(timestamp_, other->timestamp_);
    longdata_.Swap(&other->longdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mREALQDLONGBLOCK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mREALQDLONGBLOCK_descriptor_;
  metadata.reflection = mREALQDLONGBLOCK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mREALQDLONGCACHE::kIsUsedFieldNumber;
const int mREALQDLONGCACHE::kDateFieldNumber;
const int mREALQDLONGCACHE::kSecNumFieldNumber;
const int mREALQDLONGCACHE::kDataBlockFieldNumber;
const int mREALQDLONGCACHE::kSecInfoFieldNumber;
#endif  // !_MSC_VER

mREALQDLONGCACHE::mREALQDLONGCACHE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mREALQDLONGCACHE::InitAsDefaultInstance() {
  datablock_ = const_cast< ::SATDataPB::mREALQDLONGBLOCK*>(&::SATDataPB::mREALQDLONGBLOCK::default_instance());
}

mREALQDLONGCACHE::mREALQDLONGCACHE(const mREALQDLONGCACHE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mREALQDLONGCACHE::SharedCtor() {
  _cached_size_ = 0;
  isused_ = 0;
  date_ = 0;
  secnum_ = 0;
  datablock_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mREALQDLONGCACHE::~mREALQDLONGCACHE() {
  SharedDtor();
}

void mREALQDLONGCACHE::SharedDtor() {
  if (this != default_instance_) {
    delete datablock_;
  }
}

void mREALQDLONGCACHE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mREALQDLONGCACHE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mREALQDLONGCACHE_descriptor_;
}

const mREALQDLONGCACHE& mREALQDLONGCACHE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SATDataPB_2eproto();  return *default_instance_;
}

mREALQDLONGCACHE* mREALQDLONGCACHE::default_instance_ = NULL;

mREALQDLONGCACHE* mREALQDLONGCACHE::New() const {
  return new mREALQDLONGCACHE;
}

void mREALQDLONGCACHE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isused_ = 0;
    date_ = 0;
    secnum_ = 0;
    if (has_datablock()) {
      if (datablock_ != NULL) datablock_->::SATDataPB::mREALQDLONGBLOCK::Clear();
    }
  }
  secinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mREALQDLONGCACHE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 IsUsed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isused_)));
          set_has_isused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Date;
        break;
      }
      
      // required int32 Date = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SecNum;
        break;
      }
      
      // required int32 SecNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SecNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &secnum_)));
          set_has_secnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_DataBlock;
        break;
      }
      
      // required .SATDataPB.mREALQDLONGBLOCK DataBlock = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DataBlock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_datablock()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_SecInfo;
        break;
      }
      
      // repeated .SATDataPB.mREALQDINFO SecInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SecInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_secinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_SecInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mREALQDLONGCACHE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 IsUsed = 1;
  if (has_isused()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isused(), output);
  }
  
  // required int32 Date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->date(), output);
  }
  
  // required int32 SecNum = 3;
  if (has_secnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->secnum(), output);
  }
  
  // required .SATDataPB.mREALQDLONGBLOCK DataBlock = 4;
  if (has_datablock()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->datablock(), output);
  }
  
  // repeated .SATDataPB.mREALQDINFO SecInfo = 5;
  for (int i = 0; i < this->secinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->secinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mREALQDLONGCACHE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 IsUsed = 1;
  if (has_isused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isused(), target);
  }
  
  // required int32 Date = 2;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->date(), target);
  }
  
  // required int32 SecNum = 3;
  if (has_secnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->secnum(), target);
  }
  
  // required .SATDataPB.mREALQDLONGBLOCK DataBlock = 4;
  if (has_datablock()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->datablock(), target);
  }
  
  // repeated .SATDataPB.mREALQDINFO SecInfo = 5;
  for (int i = 0; i < this->secinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->secinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mREALQDLONGCACHE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 IsUsed = 1;
    if (has_isused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isused());
    }
    
    // required int32 Date = 2;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date());
    }
    
    // required int32 SecNum = 3;
    if (has_secnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->secnum());
    }
    
    // required .SATDataPB.mREALQDLONGBLOCK DataBlock = 4;
    if (has_datablock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datablock());
    }
    
  }
  // repeated .SATDataPB.mREALQDINFO SecInfo = 5;
  total_size += 1 * this->secinfo_size();
  for (int i = 0; i < this->secinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->secinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mREALQDLONGCACHE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mREALQDLONGCACHE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mREALQDLONGCACHE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mREALQDLONGCACHE::MergeFrom(const mREALQDLONGCACHE& from) {
  GOOGLE_CHECK_NE(&from, this);
  secinfo_.MergeFrom(from.secinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isused()) {
      set_isused(from.isused());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_secnum()) {
      set_secnum(from.secnum());
    }
    if (from.has_datablock()) {
      mutable_datablock()->::SATDataPB::mREALQDLONGBLOCK::MergeFrom(from.datablock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mREALQDLONGCACHE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mREALQDLONGCACHE::CopyFrom(const mREALQDLONGCACHE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mREALQDLONGCACHE::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_datablock()) {
    if (!this->datablock().IsInitialized()) return false;
  }
  for (int i = 0; i < secinfo_size(); i++) {
    if (!this->secinfo(i).IsInitialized()) return false;
  }
  return true;
}

void mREALQDLONGCACHE::Swap(mREALQDLONGCACHE* other) {
  if (other != this) {
    std::swap(isused_, other->isused_);
    std::swap(date_, other->date_);
    std::swap(secnum_, other->secnum_);
    std::swap(datablock_, other->datablock_);
    secinfo_.Swap(&other->secinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mREALQDLONGCACHE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mREALQDLONGCACHE_descriptor_;
  metadata.reflection = mREALQDLONGCACHE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mREQUEST::kSIDFieldNumber;
const int mREQUEST::kExchangeFieldNumber;
const int mREQUEST::kStartDateFieldNumber;
const int mREQUEST::kEndDateFieldNumber;
#endif  // !_MSC_VER

mREQUEST::mREQUEST()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mREQUEST::InitAsDefaultInstance() {
}

mREQUEST::mREQUEST(const mREQUEST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mREQUEST::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  exchange_ = 0;
  startdate_ = 0;
  enddate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mREQUEST::~mREQUEST() {
  SharedDtor();
}

void mREQUEST::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mREQUEST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mREQUEST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mREQUEST_descriptor_;
}

const mREQUEST& mREQUEST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SATDataPB_2eproto();  return *default_instance_;
}

mREQUEST* mREQUEST::default_instance_ = NULL;

mREQUEST* mREQUEST::New() const {
  return new mREQUEST;
}

void mREQUEST::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0;
    exchange_ = 0;
    startdate_ = 0;
    enddate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mREQUEST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 SID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Exchange;
        break;
      }
      
      // required int32 Exchange = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_)));
          set_has_exchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_StartDate;
        break;
      }
      
      // required int32 StartDate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StartDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startdate_)));
          set_has_startdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_EndDate;
        break;
      }
      
      // required int32 EndDate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enddate_)));
          set_has_enddate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mREQUEST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 SID = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }
  
  // required int32 Exchange = 2;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exchange(), output);
  }
  
  // required int32 StartDate = 3;
  if (has_startdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->startdate(), output);
  }
  
  // required int32 EndDate = 4;
  if (has_enddate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->enddate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mREQUEST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 SID = 1;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }
  
  // required int32 Exchange = 2;
  if (has_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exchange(), target);
  }
  
  // required int32 StartDate = 3;
  if (has_startdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->startdate(), target);
  }
  
  // required int32 EndDate = 4;
  if (has_enddate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->enddate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mREQUEST::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 SID = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // required int32 Exchange = 2;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange());
    }
    
    // required int32 StartDate = 3;
    if (has_startdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startdate());
    }
    
    // required int32 EndDate = 4;
    if (has_enddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enddate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mREQUEST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mREQUEST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mREQUEST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mREQUEST::MergeFrom(const mREQUEST& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_startdate()) {
      set_startdate(from.startdate());
    }
    if (from.has_enddate()) {
      set_enddate(from.enddate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mREQUEST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mREQUEST::CopyFrom(const mREQUEST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mREQUEST::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void mREQUEST::Swap(mREQUEST* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(exchange_, other->exchange_);
    std::swap(startdate_, other->startdate_);
    std::swap(enddate_, other->enddate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mREQUEST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mREQUEST_descriptor_;
  metadata.reflection = mREQUEST_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mDailyQuote::kSIDFieldNumber;
const int mDailyQuote::kDateFieldNumber;
const int mDailyQuote::kPreCloseFieldNumber;
const int mDailyQuote::kOpenFieldNumber;
const int mDailyQuote::kHighFieldNumber;
const int mDailyQuote::kLowFieldNumber;
const int mDailyQuote::kCloseFieldNumber;
const int mDailyQuote::kVolumeFieldNumber;
const int mDailyQuote::kAmountFieldNumber;
const int mDailyQuote::kAdjustingFactorFieldNumber;
const int mDailyQuote::kReturnFieldNumber;
#endif  // !_MSC_VER

mDailyQuote::mDailyQuote()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mDailyQuote::InitAsDefaultInstance() {
}

mDailyQuote::mDailyQuote(const mDailyQuote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mDailyQuote::SharedCtor() {
  _cached_size_ = 0;
  sid_ = 0;
  date_ = 0;
  preclose_ = 0;
  open_ = 0;
  high_ = 0;
  low_ = 0;
  close_ = 0;
  volume_ = 0;
  amount_ = 0;
  adjustingfactor_ = 0;
  return__ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mDailyQuote::~mDailyQuote() {
  SharedDtor();
}

void mDailyQuote::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mDailyQuote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mDailyQuote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mDailyQuote_descriptor_;
}

const mDailyQuote& mDailyQuote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SATDataPB_2eproto();  return *default_instance_;
}

mDailyQuote* mDailyQuote::default_instance_ = NULL;

mDailyQuote* mDailyQuote::New() const {
  return new mDailyQuote;
}

void mDailyQuote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sid_ = 0;
    date_ = 0;
    preclose_ = 0;
    open_ = 0;
    high_ = 0;
    low_ = 0;
    close_ = 0;
    volume_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    amount_ = 0;
    adjustingfactor_ = 0;
    return__ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mDailyQuote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 SID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Date;
        break;
      }
      
      // required int32 Date = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PreClose;
        break;
      }
      
      // required int32 PreClose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PreClose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preclose_)));
          set_has_preclose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Open;
        break;
      }
      
      // required int32 Open = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_High;
        break;
      }
      
      // required int32 High = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_High:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Low;
        break;
      }
      
      // required int32 Low = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Close;
        break;
      }
      
      // required int32 Close = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_Volume;
        break;
      }
      
      // required double Volume = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_Amount;
        break;
      }
      
      // required double Amount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_AdjustingFactor;
        break;
      }
      
      // required double AdjustingFactor = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AdjustingFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &adjustingfactor_)));
          set_has_adjustingfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_Return;
        break;
      }
      
      // required double Return = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Return:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &return__)));
          set_has_return_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mDailyQuote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 SID = 1;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }
  
  // required int32 Date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->date(), output);
  }
  
  // required int32 PreClose = 3;
  if (has_preclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->preclose(), output);
  }
  
  // required int32 Open = 4;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->open(), output);
  }
  
  // required int32 High = 5;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->high(), output);
  }
  
  // required int32 Low = 6;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->low(), output);
  }
  
  // required int32 Close = 7;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->close(), output);
  }
  
  // required double Volume = 8;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->volume(), output);
  }
  
  // required double Amount = 9;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->amount(), output);
  }
  
  // required double AdjustingFactor = 10;
  if (has_adjustingfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->adjustingfactor(), output);
  }
  
  // required double Return = 11;
  if (has_return_()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->return_(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mDailyQuote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 SID = 1;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }
  
  // required int32 Date = 2;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->date(), target);
  }
  
  // required int32 PreClose = 3;
  if (has_preclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->preclose(), target);
  }
  
  // required int32 Open = 4;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->open(), target);
  }
  
  // required int32 High = 5;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->high(), target);
  }
  
  // required int32 Low = 6;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->low(), target);
  }
  
  // required int32 Close = 7;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->close(), target);
  }
  
  // required double Volume = 8;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->volume(), target);
  }
  
  // required double Amount = 9;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->amount(), target);
  }
  
  // required double AdjustingFactor = 10;
  if (has_adjustingfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->adjustingfactor(), target);
  }
  
  // required double Return = 11;
  if (has_return_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->return_(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mDailyQuote::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 SID = 1;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // required int32 Date = 2;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date());
    }
    
    // required int32 PreClose = 3;
    if (has_preclose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preclose());
    }
    
    // required int32 Open = 4;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open());
    }
    
    // required int32 High = 5;
    if (has_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->high());
    }
    
    // required int32 Low = 6;
    if (has_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->low());
    }
    
    // required int32 Close = 7;
    if (has_close()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->close());
    }
    
    // required double Volume = 8;
    if (has_volume()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double Amount = 9;
    if (has_amount()) {
      total_size += 1 + 8;
    }
    
    // required double AdjustingFactor = 10;
    if (has_adjustingfactor()) {
      total_size += 1 + 8;
    }
    
    // required double Return = 11;
    if (has_return_()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mDailyQuote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mDailyQuote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mDailyQuote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mDailyQuote::MergeFrom(const mDailyQuote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_preclose()) {
      set_preclose(from.preclose());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_adjustingfactor()) {
      set_adjustingfactor(from.adjustingfactor());
    }
    if (from.has_return_()) {
      set_return_(from.return_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mDailyQuote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mDailyQuote::CopyFrom(const mDailyQuote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mDailyQuote::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  
  return true;
}

void mDailyQuote::Swap(mDailyQuote* other) {
  if (other != this) {
    std::swap(sid_, other->sid_);
    std::swap(date_, other->date_);
    std::swap(preclose_, other->preclose_);
    std::swap(open_, other->open_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(close_, other->close_);
    std::swap(volume_, other->volume_);
    std::swap(amount_, other->amount_);
    std::swap(adjustingfactor_, other->adjustingfactor_);
    std::swap(return__, other->return__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mDailyQuote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mDailyQuote_descriptor_;
  metadata.reflection = mDailyQuote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mFSP::kISIDFieldNumber;
const int mFSP::kIDDJFieldNumber;
const int mFSP::kIDCQFieldNumber;
const int mFSP::kDPGSFieldNumber;
const int mFSP::kDPGJFieldNumber;
const int mFSP::kDSGSFieldNumber;
const int mFSP::kDPXSFieldNumber;
const int mFSP::kDZZSFieldNumber;
#endif  // !_MSC_VER

mFSP::mFSP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mFSP::InitAsDefaultInstance() {
}

mFSP::mFSP(const mFSP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mFSP::SharedCtor() {
  _cached_size_ = 0;
  isid_ = 0;
  iddj_ = 0;
  idcq_ = 0;
  dpgs_ = 0;
  dpgj_ = 0;
  dsgs_ = 0;
  dpxs_ = 0;
  dzzs_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mFSP::~mFSP() {
  SharedDtor();
}

void mFSP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mFSP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mFSP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mFSP_descriptor_;
}

const mFSP& mFSP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SATDataPB_2eproto();  return *default_instance_;
}

mFSP* mFSP::default_instance_ = NULL;

mFSP* mFSP::New() const {
  return new mFSP;
}

void mFSP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isid_ = 0;
    iddj_ = 0;
    idcq_ = 0;
    dpgs_ = 0;
    dpgj_ = 0;
    dsgs_ = 0;
    dpxs_ = 0;
    dzzs_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mFSP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 iSID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isid_)));
          set_has_isid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iDDJ;
        break;
      }
      
      // required int32 iDDJ = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iDDJ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iddj_)));
          set_has_iddj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iDCQ;
        break;
      }
      
      // required int32 iDCQ = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iDCQ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idcq_)));
          set_has_idcq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_dPGS;
        break;
      }
      
      // required double dPGS = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dPGS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dpgs_)));
          set_has_dpgs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_dPGJ;
        break;
      }
      
      // required double dPGJ = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dPGJ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dpgj_)));
          set_has_dpgj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_dSGS;
        break;
      }
      
      // required double dSGS = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dSGS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dsgs_)));
          set_has_dsgs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_dPXS;
        break;
      }
      
      // required double dPXS = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dPXS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dpxs_)));
          set_has_dpxs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_dZZS;
        break;
      }
      
      // required double dZZS = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dZZS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dzzs_)));
          set_has_dzzs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mFSP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 iSID = 1;
  if (has_isid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isid(), output);
  }
  
  // required int32 iDDJ = 2;
  if (has_iddj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iddj(), output);
  }
  
  // required int32 iDCQ = 3;
  if (has_idcq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->idcq(), output);
  }
  
  // required double dPGS = 4;
  if (has_dpgs()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->dpgs(), output);
  }
  
  // required double dPGJ = 5;
  if (has_dpgj()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->dpgj(), output);
  }
  
  // required double dSGS = 6;
  if (has_dsgs()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->dsgs(), output);
  }
  
  // required double dPXS = 7;
  if (has_dpxs()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->dpxs(), output);
  }
  
  // required double dZZS = 8;
  if (has_dzzs()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->dzzs(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mFSP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 iSID = 1;
  if (has_isid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isid(), target);
  }
  
  // required int32 iDDJ = 2;
  if (has_iddj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iddj(), target);
  }
  
  // required int32 iDCQ = 3;
  if (has_idcq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->idcq(), target);
  }
  
  // required double dPGS = 4;
  if (has_dpgs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->dpgs(), target);
  }
  
  // required double dPGJ = 5;
  if (has_dpgj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->dpgj(), target);
  }
  
  // required double dSGS = 6;
  if (has_dsgs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->dsgs(), target);
  }
  
  // required double dPXS = 7;
  if (has_dpxs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->dpxs(), target);
  }
  
  // required double dZZS = 8;
  if (has_dzzs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->dzzs(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mFSP::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 iSID = 1;
    if (has_isid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isid());
    }
    
    // required int32 iDDJ = 2;
    if (has_iddj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iddj());
    }
    
    // required int32 iDCQ = 3;
    if (has_idcq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idcq());
    }
    
    // required double dPGS = 4;
    if (has_dpgs()) {
      total_size += 1 + 8;
    }
    
    // required double dPGJ = 5;
    if (has_dpgj()) {
      total_size += 1 + 8;
    }
    
    // required double dSGS = 6;
    if (has_dsgs()) {
      total_size += 1 + 8;
    }
    
    // required double dPXS = 7;
    if (has_dpxs()) {
      total_size += 1 + 8;
    }
    
    // required double dZZS = 8;
    if (has_dzzs()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mFSP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mFSP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mFSP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mFSP::MergeFrom(const mFSP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isid()) {
      set_isid(from.isid());
    }
    if (from.has_iddj()) {
      set_iddj(from.iddj());
    }
    if (from.has_idcq()) {
      set_idcq(from.idcq());
    }
    if (from.has_dpgs()) {
      set_dpgs(from.dpgs());
    }
    if (from.has_dpgj()) {
      set_dpgj(from.dpgj());
    }
    if (from.has_dsgs()) {
      set_dsgs(from.dsgs());
    }
    if (from.has_dpxs()) {
      set_dpxs(from.dpxs());
    }
    if (from.has_dzzs()) {
      set_dzzs(from.dzzs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mFSP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mFSP::CopyFrom(const mFSP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mFSP::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void mFSP::Swap(mFSP* other) {
  if (other != this) {
    std::swap(isid_, other->isid_);
    std::swap(iddj_, other->iddj_);
    std::swap(idcq_, other->idcq_);
    std::swap(dpgs_, other->dpgs_);
    std::swap(dpgj_, other->dpgj_);
    std::swap(dsgs_, other->dsgs_);
    std::swap(dpxs_, other->dpxs_);
    std::swap(dzzs_, other->dzzs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mFSP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mFSP_descriptor_;
  metadata.reflection = mFSP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QDailyQuote::kQDailyQuoteFieldNumber;
#endif  // !_MSC_VER

QDailyQuote::QDailyQuote()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QDailyQuote::InitAsDefaultInstance() {
}

QDailyQuote::QDailyQuote(const QDailyQuote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QDailyQuote::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QDailyQuote::~QDailyQuote() {
  SharedDtor();
}

void QDailyQuote::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QDailyQuote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QDailyQuote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QDailyQuote_descriptor_;
}

const QDailyQuote& QDailyQuote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SATDataPB_2eproto();  return *default_instance_;
}

QDailyQuote* QDailyQuote::default_instance_ = NULL;

QDailyQuote* QDailyQuote::New() const {
  return new QDailyQuote;
}

void QDailyQuote::Clear() {
  qdailyquote_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QDailyQuote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SATDataPB.mDailyQuote qDailyQuote = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qDailyQuote:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_qdailyquote()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_qDailyQuote;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QDailyQuote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SATDataPB.mDailyQuote qDailyQuote = 1;
  for (int i = 0; i < this->qdailyquote_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->qdailyquote(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QDailyQuote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SATDataPB.mDailyQuote qDailyQuote = 1;
  for (int i = 0; i < this->qdailyquote_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->qdailyquote(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QDailyQuote::ByteSize() const {
  int total_size = 0;
  
  // repeated .SATDataPB.mDailyQuote qDailyQuote = 1;
  total_size += 1 * this->qdailyquote_size();
  for (int i = 0; i < this->qdailyquote_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->qdailyquote(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QDailyQuote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QDailyQuote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QDailyQuote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QDailyQuote::MergeFrom(const QDailyQuote& from) {
  GOOGLE_CHECK_NE(&from, this);
  qdailyquote_.MergeFrom(from.qdailyquote_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QDailyQuote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QDailyQuote::CopyFrom(const QDailyQuote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QDailyQuote::IsInitialized() const {
  
  for (int i = 0; i < qdailyquote_size(); i++) {
    if (!this->qdailyquote(i).IsInitialized()) return false;
  }
  return true;
}

void QDailyQuote::Swap(QDailyQuote* other) {
  if (other != this) {
    qdailyquote_.Swap(&other->qdailyquote_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QDailyQuote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QDailyQuote_descriptor_;
  metadata.reflection = QDailyQuote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mQDFILEBLOCK::kDwTimeFieldNumber;
const int mQDFILEBLOCK::kDwTimeStampFieldNumber;
#endif  // !_MSC_VER

mQDFILEBLOCK::mQDFILEBLOCK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mQDFILEBLOCK::InitAsDefaultInstance() {
}

mQDFILEBLOCK::mQDFILEBLOCK(const mQDFILEBLOCK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mQDFILEBLOCK::SharedCtor() {
  _cached_size_ = 0;
  dwtime_ = 0;
  dwtimestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mQDFILEBLOCK::~mQDFILEBLOCK() {
  SharedDtor();
}

void mQDFILEBLOCK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mQDFILEBLOCK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mQDFILEBLOCK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mQDFILEBLOCK_descriptor_;
}

const mQDFILEBLOCK& mQDFILEBLOCK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SATDataPB_2eproto();  return *default_instance_;
}

mQDFILEBLOCK* mQDFILEBLOCK::default_instance_ = NULL;

mQDFILEBLOCK* mQDFILEBLOCK::New() const {
  return new mQDFILEBLOCK;
}

void mQDFILEBLOCK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwtime_ = 0;
    dwtimestamp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mQDFILEBLOCK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwtime_)));
          set_has_dwtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwTimeStamp;
        break;
      }
      
      // required int32 dwTimeStamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwTimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwtimestamp_)));
          set_has_dwtimestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mQDFILEBLOCK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwTime = 1;
  if (has_dwtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwtime(), output);
  }
  
  // required int32 dwTimeStamp = 2;
  if (has_dwtimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dwtimestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mQDFILEBLOCK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwTime = 1;
  if (has_dwtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwtime(), target);
  }
  
  // required int32 dwTimeStamp = 2;
  if (has_dwtimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dwtimestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mQDFILEBLOCK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwTime = 1;
    if (has_dwtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwtime());
    }
    
    // required int32 dwTimeStamp = 2;
    if (has_dwtimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwtimestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mQDFILEBLOCK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mQDFILEBLOCK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mQDFILEBLOCK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mQDFILEBLOCK::MergeFrom(const mQDFILEBLOCK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwtime()) {
      set_dwtime(from.dwtime());
    }
    if (from.has_dwtimestamp()) {
      set_dwtimestamp(from.dwtimestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mQDFILEBLOCK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mQDFILEBLOCK::CopyFrom(const mQDFILEBLOCK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mQDFILEBLOCK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void mQDFILEBLOCK::Swap(mQDFILEBLOCK* other) {
  if (other != this) {
    std::swap(dwtime_, other->dwtime_);
    std::swap(dwtimestamp_, other->dwtimestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mQDFILEBLOCK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mQDFILEBLOCK_descriptor_;
  metadata.reflection = mQDFILEBLOCK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QHFData::kFILEBLOCKFieldNumber;
const int QHFData::kCACHELONGFieldNumber;
#endif  // !_MSC_VER

QHFData::QHFData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QHFData::InitAsDefaultInstance() {
}

QHFData::QHFData(const QHFData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QHFData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QHFData::~QHFData() {
  SharedDtor();
}

void QHFData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QHFData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QHFData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QHFData_descriptor_;
}

const QHFData& QHFData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SATDataPB_2eproto();  return *default_instance_;
}

QHFData* QHFData::default_instance_ = NULL;

QHFData* QHFData::New() const {
  return new QHFData;
}

void QHFData::Clear() {
  fileblock_.Clear();
  cachelong_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QHFData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SATDataPB.mQDFILEBLOCK FILEBLOCK = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FILEBLOCK:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fileblock()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_FILEBLOCK;
        if (input->ExpectTag(18)) goto parse_CACHELONG;
        break;
      }
      
      // repeated .SATDataPB.mQDCACHE CACHELONG = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CACHELONG:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cachelong()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CACHELONG;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QHFData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SATDataPB.mQDFILEBLOCK FILEBLOCK = 1;
  for (int i = 0; i < this->fileblock_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fileblock(i), output);
  }
  
  // repeated .SATDataPB.mQDCACHE CACHELONG = 2;
  for (int i = 0; i < this->cachelong_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cachelong(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QHFData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SATDataPB.mQDFILEBLOCK FILEBLOCK = 1;
  for (int i = 0; i < this->fileblock_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fileblock(i), target);
  }
  
  // repeated .SATDataPB.mQDCACHE CACHELONG = 2;
  for (int i = 0; i < this->cachelong_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cachelong(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QHFData::ByteSize() const {
  int total_size = 0;
  
  // repeated .SATDataPB.mQDFILEBLOCK FILEBLOCK = 1;
  total_size += 1 * this->fileblock_size();
  for (int i = 0; i < this->fileblock_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fileblock(i));
  }
  
  // repeated .SATDataPB.mQDCACHE CACHELONG = 2;
  total_size += 1 * this->cachelong_size();
  for (int i = 0; i < this->cachelong_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cachelong(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QHFData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QHFData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QHFData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QHFData::MergeFrom(const QHFData& from) {
  GOOGLE_CHECK_NE(&from, this);
  fileblock_.MergeFrom(from.fileblock_);
  cachelong_.MergeFrom(from.cachelong_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QHFData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QHFData::CopyFrom(const QHFData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QHFData::IsInitialized() const {
  
  for (int i = 0; i < fileblock_size(); i++) {
    if (!this->fileblock(i).IsInitialized()) return false;
  }
  for (int i = 0; i < cachelong_size(); i++) {
    if (!this->cachelong(i).IsInitialized()) return false;
  }
  return true;
}

void QHFData::Swap(QHFData* other) {
  if (other != this) {
    fileblock_.Swap(&other->fileblock_);
    cachelong_.Swap(&other->cachelong_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QHFData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QHFData_descriptor_;
  metadata.reflection = QHFData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QData::kQDateFieldNumber;
#endif  // !_MSC_VER

QData::QData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QData::InitAsDefaultInstance() {
}

QData::QData(const QData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QData::~QData() {
  SharedDtor();
}

void QData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QData_descriptor_;
}

const QData& QData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SATDataPB_2eproto();  return *default_instance_;
}

QData* QData::default_instance_ = NULL;

QData* QData::New() const {
  return new QData;
}

void QData::Clear() {
  qdate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 qDate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_qdate())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_qdate())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_qDate;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 qDate = 1;
  for (int i = 0; i < this->qdate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->qdate(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 qDate = 1;
  for (int i = 0; i < this->qdate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->qdate(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QData::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 qDate = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->qdate_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->qdate(i));
    }
    total_size += 1 * this->qdate_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QData::MergeFrom(const QData& from) {
  GOOGLE_CHECK_NE(&from, this);
  qdate_.MergeFrom(from.qdate_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QData::CopyFrom(const QData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QData::IsInitialized() const {
  
  return true;
}

void QData::Swap(QData* other) {
  if (other != this) {
    qdate_.Swap(&other->qdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QData_descriptor_;
  metadata.reflection = QData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QFSP::kQFSPFieldNumber;
#endif  // !_MSC_VER

QFSP::QFSP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QFSP::InitAsDefaultInstance() {
}

QFSP::QFSP(const QFSP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QFSP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QFSP::~QFSP() {
  SharedDtor();
}

void QFSP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QFSP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QFSP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QFSP_descriptor_;
}

const QFSP& QFSP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SATDataPB_2eproto();  return *default_instance_;
}

QFSP* QFSP::default_instance_ = NULL;

QFSP* QFSP::New() const {
  return new QFSP;
}

void QFSP::Clear() {
  qfsp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QFSP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SATDataPB.mFSP qFSP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qFSP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_qfsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_qFSP;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QFSP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SATDataPB.mFSP qFSP = 1;
  for (int i = 0; i < this->qfsp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->qfsp(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QFSP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SATDataPB.mFSP qFSP = 1;
  for (int i = 0; i < this->qfsp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->qfsp(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QFSP::ByteSize() const {
  int total_size = 0;
  
  // repeated .SATDataPB.mFSP qFSP = 1;
  total_size += 1 * this->qfsp_size();
  for (int i = 0; i < this->qfsp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->qfsp(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QFSP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QFSP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QFSP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QFSP::MergeFrom(const QFSP& from) {
  GOOGLE_CHECK_NE(&from, this);
  qfsp_.MergeFrom(from.qfsp_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QFSP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QFSP::CopyFrom(const QFSP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QFSP::IsInitialized() const {
  
  for (int i = 0; i < qfsp_size(); i++) {
    if (!this->qfsp(i).IsInitialized()) return false;
  }
  return true;
}

void QFSP::Swap(QFSP* other) {
  if (other != this) {
    qfsp_.Swap(&other->qfsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QFSP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QFSP_descriptor_;
  metadata.reflection = QFSP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mQD::kDateFieldNumber;
const int mQD::kSecNumFieldNumber;
const int mQD::kDataBlockFieldNumber;
#endif  // !_MSC_VER

mQD::mQD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mQD::InitAsDefaultInstance() {
}

mQD::mQD(const mQD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mQD::SharedCtor() {
  _cached_size_ = 0;
  date_ = 0;
  secnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mQD::~mQD() {
  SharedDtor();
}

void mQD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mQD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mQD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mQD_descriptor_;
}

const mQD& mQD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SATDataPB_2eproto();  return *default_instance_;
}

mQD* mQD::default_instance_ = NULL;

mQD* mQD::New() const {
  return new mQD;
}

void mQD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    date_ = 0;
    secnum_ = 0;
  }
  datablock_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mQD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Date = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SecNum;
        break;
      }
      
      // required int32 SecNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SecNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &secnum_)));
          set_has_secnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DataBlock;
        break;
      }
      
      // repeated .SATDataPB.mQDCACHE DataBlock = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DataBlock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datablock()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DataBlock;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mQD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->date(), output);
  }
  
  // required int32 SecNum = 2;
  if (has_secnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->secnum(), output);
  }
  
  // repeated .SATDataPB.mQDCACHE DataBlock = 3;
  for (int i = 0; i < this->datablock_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->datablock(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mQD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Date = 1;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->date(), target);
  }
  
  // required int32 SecNum = 2;
  if (has_secnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->secnum(), target);
  }
  
  // repeated .SATDataPB.mQDCACHE DataBlock = 3;
  for (int i = 0; i < this->datablock_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->datablock(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mQD::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Date = 1;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date());
    }
    
    // required int32 SecNum = 2;
    if (has_secnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->secnum());
    }
    
  }
  // repeated .SATDataPB.mQDCACHE DataBlock = 3;
  total_size += 1 * this->datablock_size();
  for (int i = 0; i < this->datablock_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datablock(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mQD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mQD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mQD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mQD::MergeFrom(const mQD& from) {
  GOOGLE_CHECK_NE(&from, this);
  datablock_.MergeFrom(from.datablock_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_secnum()) {
      set_secnum(from.secnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mQD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mQD::CopyFrom(const mQD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mQD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < datablock_size(); i++) {
    if (!this->datablock(i).IsInitialized()) return false;
  }
  return true;
}

void mQD::Swap(mQD* other) {
  if (other != this) {
    std::swap(date_, other->date_);
    std::swap(secnum_, other->secnum_);
    datablock_.Swap(&other->datablock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mQD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mQD_descriptor_;
  metadata.reflection = mQD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QQuoteDataIO::kStampIndexFieldNumber;
const int QQuoteDataIO::kQuoteDataFieldNumber;
#endif  // !_MSC_VER

QQuoteDataIO::QQuoteDataIO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QQuoteDataIO::InitAsDefaultInstance() {
  quotedata_ = const_cast< ::SATDataPB::mQD*>(&::SATDataPB::mQD::default_instance());
}

QQuoteDataIO::QQuoteDataIO(const QQuoteDataIO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QQuoteDataIO::SharedCtor() {
  _cached_size_ = 0;
  stampindex_ = 0;
  quotedata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QQuoteDataIO::~QQuoteDataIO() {
  SharedDtor();
}

void QQuoteDataIO::SharedDtor() {
  if (this != default_instance_) {
    delete quotedata_;
  }
}

void QQuoteDataIO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QQuoteDataIO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QQuoteDataIO_descriptor_;
}

const QQuoteDataIO& QQuoteDataIO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SATDataPB_2eproto();  return *default_instance_;
}

QQuoteDataIO* QQuoteDataIO::default_instance_ = NULL;

QQuoteDataIO* QQuoteDataIO::New() const {
  return new QQuoteDataIO;
}

void QQuoteDataIO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stampindex_ = 0;
    if (has_quotedata()) {
      if (quotedata_ != NULL) quotedata_->::SATDataPB::mQD::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QQuoteDataIO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 StampIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stampindex_)));
          set_has_stampindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_QuoteData;
        break;
      }
      
      // required .SATDataPB.mQD QuoteData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QuoteData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quotedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QQuoteDataIO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 StampIndex = 1;
  if (has_stampindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stampindex(), output);
  }
  
  // required .SATDataPB.mQD QuoteData = 2;
  if (has_quotedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->quotedata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QQuoteDataIO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 StampIndex = 1;
  if (has_stampindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stampindex(), target);
  }
  
  // required .SATDataPB.mQD QuoteData = 2;
  if (has_quotedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->quotedata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QQuoteDataIO::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 StampIndex = 1;
    if (has_stampindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stampindex());
    }
    
    // required .SATDataPB.mQD QuoteData = 2;
    if (has_quotedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quotedata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QQuoteDataIO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QQuoteDataIO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QQuoteDataIO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QQuoteDataIO::MergeFrom(const QQuoteDataIO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stampindex()) {
      set_stampindex(from.stampindex());
    }
    if (from.has_quotedata()) {
      mutable_quotedata()->::SATDataPB::mQD::MergeFrom(from.quotedata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QQuoteDataIO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QQuoteDataIO::CopyFrom(const QQuoteDataIO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QQuoteDataIO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_quotedata()) {
    if (!this->quotedata().IsInitialized()) return false;
  }
  return true;
}

void QQuoteDataIO::Swap(QQuoteDataIO* other) {
  if (other != this) {
    std::swap(stampindex_, other->stampindex_);
    std::swap(quotedata_, other->quotedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QQuoteDataIO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QQuoteDataIO_descriptor_;
  metadata.reflection = QQuoteDataIO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mK::kDateFieldNumber;
const int mK::kTimeFieldNumber;
const int mK::kOpenFieldNumber;
const int mK::kHighFieldNumber;
const int mK::kLowFieldNumber;
const int mK::kCloseFieldNumber;
const int mK::kSIDFieldNumber;
const int mK::kExchangeFieldNumber;
#endif  // !_MSC_VER

mK::mK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mK::InitAsDefaultInstance() {
}

mK::mK(const mK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mK::SharedCtor() {
  _cached_size_ = 0;
  date_ = 0;
  time_ = 0;
  open_ = 0;
  high_ = 0;
  low_ = 0;
  close_ = 0;
  sid_ = 0;
  exchange_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mK::~mK() {
  SharedDtor();
}

void mK::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mK_descriptor_;
}

const mK& mK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SATDataPB_2eproto();  return *default_instance_;
}

mK* mK::default_instance_ = NULL;

mK* mK::New() const {
  return new mK;
}

void mK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    date_ = 0;
    time_ = 0;
    open_ = 0;
    high_ = 0;
    low_ = 0;
    close_ = 0;
    sid_ = 0;
    exchange_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Date = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Time;
        break;
      }
      
      // required int32 Time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Open;
        break;
      }
      
      // required int32 Open = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_High;
        break;
      }
      
      // required int32 High = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_High:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Low;
        break;
      }
      
      // required int32 Low = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Close;
        break;
      }
      
      // required int32 Close = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_SID;
        break;
      }
      
      // required int32 SID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Exchange;
        break;
      }
      
      // required int32 Exchange = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exchange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_)));
          set_has_exchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->date(), output);
  }
  
  // required int32 Time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }
  
  // required int32 Open = 3;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->open(), output);
  }
  
  // required int32 High = 4;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->high(), output);
  }
  
  // required int32 Low = 5;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->low(), output);
  }
  
  // required int32 Close = 6;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->close(), output);
  }
  
  // required int32 SID = 7;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sid(), output);
  }
  
  // required int32 Exchange = 8;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->exchange(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Date = 1;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->date(), target);
  }
  
  // required int32 Time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }
  
  // required int32 Open = 3;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->open(), target);
  }
  
  // required int32 High = 4;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->high(), target);
  }
  
  // required int32 Low = 5;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->low(), target);
  }
  
  // required int32 Close = 6;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->close(), target);
  }
  
  // required int32 SID = 7;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sid(), target);
  }
  
  // required int32 Exchange = 8;
  if (has_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->exchange(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Date = 1;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date());
    }
    
    // required int32 Time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // required int32 Open = 3;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open());
    }
    
    // required int32 High = 4;
    if (has_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->high());
    }
    
    // required int32 Low = 5;
    if (has_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->low());
    }
    
    // required int32 Close = 6;
    if (has_close()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->close());
    }
    
    // required int32 SID = 7;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
    // required int32 Exchange = 8;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mK::MergeFrom(const mK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mK::CopyFrom(const mK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mK::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void mK::Swap(mK* other) {
  if (other != this) {
    std::swap(date_, other->date_);
    std::swap(time_, other->time_);
    std::swap(open_, other->open_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(close_, other->close_);
    std::swap(sid_, other->sid_);
    std::swap(exchange_, other->exchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mK_descriptor_;
  metadata.reflection = mK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QQD::kSecNumFieldNumber;
const int QQD::kDateListFieldNumber;
const int QQD::kMmKFieldNumber;
#endif  // !_MSC_VER

QQD::QQD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QQD::InitAsDefaultInstance() {
}

QQD::QQD(const QQD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QQD::SharedCtor() {
  _cached_size_ = 0;
  secnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QQD::~QQD() {
  SharedDtor();
}

void QQD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QQD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QQD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QQD_descriptor_;
}

const QQD& QQD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SATDataPB_2eproto();  return *default_instance_;
}

QQD* QQD::default_instance_ = NULL;

QQD* QQD::New() const {
  return new QQD;
}

void QQD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    secnum_ = 0;
  }
  datelist_.Clear();
  mmk_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QQD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 SecNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &secnum_)));
          set_has_secnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DateList;
        break;
      }
      
      // repeated int32 DateList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DateList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_datelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_datelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DateList;
        if (input->ExpectTag(26)) goto parse_mmK;
        break;
      }
      
      // repeated .SATDataPB.mK mmK = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mmK:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mmk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mmK;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QQD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 SecNum = 1;
  if (has_secnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->secnum(), output);
  }
  
  // repeated int32 DateList = 2;
  for (int i = 0; i < this->datelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->datelist(i), output);
  }
  
  // repeated .SATDataPB.mK mmK = 3;
  for (int i = 0; i < this->mmk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mmk(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QQD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 SecNum = 1;
  if (has_secnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->secnum(), target);
  }
  
  // repeated int32 DateList = 2;
  for (int i = 0; i < this->datelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->datelist(i), target);
  }
  
  // repeated .SATDataPB.mK mmK = 3;
  for (int i = 0; i < this->mmk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mmk(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QQD::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 SecNum = 1;
    if (has_secnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->secnum());
    }
    
  }
  // repeated int32 DateList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->datelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->datelist(i));
    }
    total_size += 1 * this->datelist_size() + data_size;
  }
  
  // repeated .SATDataPB.mK mmK = 3;
  total_size += 1 * this->mmk_size();
  for (int i = 0; i < this->mmk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mmk(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QQD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QQD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QQD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QQD::MergeFrom(const QQD& from) {
  GOOGLE_CHECK_NE(&from, this);
  datelist_.MergeFrom(from.datelist_);
  mmk_.MergeFrom(from.mmk_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_secnum()) {
      set_secnum(from.secnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QQD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QQD::CopyFrom(const QQD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QQD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < mmk_size(); i++) {
    if (!this->mmk(i).IsInitialized()) return false;
  }
  return true;
}

void QQD::Swap(QQD* other) {
  if (other != this) {
    std::swap(secnum_, other->secnum_);
    datelist_.Swap(&other->datelist_);
    mmk_.Swap(&other->mmk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QQD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QQD_descriptor_;
  metadata.reflection = QQD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mQDSECINFO::kExchangeFieldNumber;
const int mQDSECINFO::kSIDFieldNumber;
#endif  // !_MSC_VER

mQDSECINFO::mQDSECINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mQDSECINFO::InitAsDefaultInstance() {
}

mQDSECINFO::mQDSECINFO(const mQDSECINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mQDSECINFO::SharedCtor() {
  _cached_size_ = 0;
  exchange_ = 0;
  sid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mQDSECINFO::~mQDSECINFO() {
  SharedDtor();
}

void mQDSECINFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mQDSECINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mQDSECINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mQDSECINFO_descriptor_;
}

const mQDSECINFO& mQDSECINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SATDataPB_2eproto();  return *default_instance_;
}

mQDSECINFO* mQDSECINFO::default_instance_ = NULL;

mQDSECINFO* mQDSECINFO::New() const {
  return new mQDSECINFO;
}

void mQDSECINFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exchange_ = 0;
    sid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mQDSECINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Exchange = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_)));
          set_has_exchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SID;
        break;
      }
      
      // required int32 SID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mQDSECINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Exchange = 1;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exchange(), output);
  }
  
  // required int32 SID = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mQDSECINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Exchange = 1;
  if (has_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exchange(), target);
  }
  
  // required int32 SID = 2;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mQDSECINFO::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Exchange = 1;
    if (has_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange());
    }
    
    // required int32 SID = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mQDSECINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mQDSECINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mQDSECINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mQDSECINFO::MergeFrom(const mQDSECINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchange()) {
      set_exchange(from.exchange());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mQDSECINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mQDSECINFO::CopyFrom(const mQDSECINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mQDSECINFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void mQDSECINFO::Swap(mQDSECINFO* other) {
  if (other != this) {
    std::swap(exchange_, other->exchange_);
    std::swap(sid_, other->sid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mQDSECINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mQDSECINFO_descriptor_;
  metadata.reflection = mQDSECINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QQDSECINFO::kMmQDSECINFOFieldNumber;
#endif  // !_MSC_VER

QQDSECINFO::QQDSECINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QQDSECINFO::InitAsDefaultInstance() {
}

QQDSECINFO::QQDSECINFO(const QQDSECINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QQDSECINFO::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QQDSECINFO::~QQDSECINFO() {
  SharedDtor();
}

void QQDSECINFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QQDSECINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QQDSECINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QQDSECINFO_descriptor_;
}

const QQDSECINFO& QQDSECINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SATDataPB_2eproto();  return *default_instance_;
}

QQDSECINFO* QQDSECINFO::default_instance_ = NULL;

QQDSECINFO* QQDSECINFO::New() const {
  return new QQDSECINFO;
}

void QQDSECINFO::Clear() {
  mmqdsecinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QQDSECINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SATDataPB.mQDSECINFO mmQDSECINFO = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mmQDSECINFO:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mmqdsecinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mmQDSECINFO;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QQDSECINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SATDataPB.mQDSECINFO mmQDSECINFO = 1;
  for (int i = 0; i < this->mmqdsecinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mmqdsecinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QQDSECINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SATDataPB.mQDSECINFO mmQDSECINFO = 1;
  for (int i = 0; i < this->mmqdsecinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mmqdsecinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QQDSECINFO::ByteSize() const {
  int total_size = 0;
  
  // repeated .SATDataPB.mQDSECINFO mmQDSECINFO = 1;
  total_size += 1 * this->mmqdsecinfo_size();
  for (int i = 0; i < this->mmqdsecinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mmqdsecinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QQDSECINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QQDSECINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QQDSECINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QQDSECINFO::MergeFrom(const QQDSECINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  mmqdsecinfo_.MergeFrom(from.mmqdsecinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QQDSECINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QQDSECINFO::CopyFrom(const QQDSECINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QQDSECINFO::IsInitialized() const {
  
  for (int i = 0; i < mmqdsecinfo_size(); i++) {
    if (!this->mmqdsecinfo(i).IsInitialized()) return false;
  }
  return true;
}

void QQDSECINFO::Swap(QQDSECINFO* other) {
  if (other != this) {
    mmqdsecinfo_.Swap(&other->mmqdsecinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QQDSECINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QQDSECINFO_descriptor_;
  metadata.reflection = QQDSECINFO_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SATDataPB

// @@protoc_insertion_point(global_scope)
