// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SATDataPB.proto

#ifndef PROTOBUF_SATDataPB_2eproto__INCLUDED
#define PROTOBUF_SATDataPB_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace SATDataPB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SATDataPB_2eproto();
void protobuf_AssignDesc_SATDataPB_2eproto();
void protobuf_ShutdownFile_SATDataPB_2eproto();

class mREALQDCACHELONG;
class mQDCACHE;
class mREALQDINFO;
class mREALQDLONGBLOCK;
class mREALQDLONGCACHE;
class mREQUEST;
class mDailyQuote;
class mFSP;
class QDailyQuote;
class mQDFILEBLOCK;
class QHFData;
class QData;
class QFSP;
class mQD;
class QQuoteDataIO;
class mK;
class QQD;
class mQDSECINFO;
class QQDSECINFO;

// ===================================================================

class mREALQDCACHELONG : public ::google::protobuf::Message {
 public:
  mREALQDCACHELONG();
  virtual ~mREALQDCACHELONG();
  
  mREALQDCACHELONG(const mREALQDCACHELONG& from);
  
  inline mREALQDCACHELONG& operator=(const mREALQDCACHELONG& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mREALQDCACHELONG& default_instance();
  
  void Swap(mREALQDCACHELONG* other);
  
  // implements Message ----------------------------------------------
  
  mREALQDCACHELONG* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mREALQDCACHELONG& from);
  void MergeFrom(const mREALQDCACHELONG& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 CURRENT = 1;
  inline bool has_current() const;
  inline void clear_current();
  static const int kCURRENTFieldNumber = 1;
  inline ::google::protobuf::int32 current() const;
  inline void set_current(::google::protobuf::int32 value);
  
  // required int32 PRECLOSE = 2;
  inline bool has_preclose() const;
  inline void clear_preclose();
  static const int kPRECLOSEFieldNumber = 2;
  inline ::google::protobuf::int32 preclose() const;
  inline void set_preclose(::google::protobuf::int32 value);
  
  // required int32 OPEN = 3;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOPENFieldNumber = 3;
  inline ::google::protobuf::int32 open() const;
  inline void set_open(::google::protobuf::int32 value);
  
  // required int32 HIGH = 4;
  inline bool has_high() const;
  inline void clear_high();
  static const int kHIGHFieldNumber = 4;
  inline ::google::protobuf::int32 high() const;
  inline void set_high(::google::protobuf::int32 value);
  
  // required int32 LOW = 5;
  inline bool has_low() const;
  inline void clear_low();
  static const int kLOWFieldNumber = 5;
  inline ::google::protobuf::int32 low() const;
  inline void set_low(::google::protobuf::int32 value);
  
  // required int32 BUYPRICE1 = 6;
  inline bool has_buyprice1() const;
  inline void clear_buyprice1();
  static const int kBUYPRICE1FieldNumber = 6;
  inline ::google::protobuf::int32 buyprice1() const;
  inline void set_buyprice1(::google::protobuf::int32 value);
  
  // required int32 BUYPRICE2 = 7;
  inline bool has_buyprice2() const;
  inline void clear_buyprice2();
  static const int kBUYPRICE2FieldNumber = 7;
  inline ::google::protobuf::int32 buyprice2() const;
  inline void set_buyprice2(::google::protobuf::int32 value);
  
  // required int32 BUYPRICE3 = 8;
  inline bool has_buyprice3() const;
  inline void clear_buyprice3();
  static const int kBUYPRICE3FieldNumber = 8;
  inline ::google::protobuf::int32 buyprice3() const;
  inline void set_buyprice3(::google::protobuf::int32 value);
  
  // required int32 BUYPRICE4 = 9;
  inline bool has_buyprice4() const;
  inline void clear_buyprice4();
  static const int kBUYPRICE4FieldNumber = 9;
  inline ::google::protobuf::int32 buyprice4() const;
  inline void set_buyprice4(::google::protobuf::int32 value);
  
  // required int32 BUYPRICE5 = 10;
  inline bool has_buyprice5() const;
  inline void clear_buyprice5();
  static const int kBUYPRICE5FieldNumber = 10;
  inline ::google::protobuf::int32 buyprice5() const;
  inline void set_buyprice5(::google::protobuf::int32 value);
  
  // required double BUYVOL1 = 11;
  inline bool has_buyvol1() const;
  inline void clear_buyvol1();
  static const int kBUYVOL1FieldNumber = 11;
  inline double buyvol1() const;
  inline void set_buyvol1(double value);
  
  // required double BUYVOL2 = 12;
  inline bool has_buyvol2() const;
  inline void clear_buyvol2();
  static const int kBUYVOL2FieldNumber = 12;
  inline double buyvol2() const;
  inline void set_buyvol2(double value);
  
  // required double BUYVOL3 = 13;
  inline bool has_buyvol3() const;
  inline void clear_buyvol3();
  static const int kBUYVOL3FieldNumber = 13;
  inline double buyvol3() const;
  inline void set_buyvol3(double value);
  
  // required double BUYVOL4 = 14;
  inline bool has_buyvol4() const;
  inline void clear_buyvol4();
  static const int kBUYVOL4FieldNumber = 14;
  inline double buyvol4() const;
  inline void set_buyvol4(double value);
  
  // required double BUYVOL5 = 15;
  inline bool has_buyvol5() const;
  inline void clear_buyvol5();
  static const int kBUYVOL5FieldNumber = 15;
  inline double buyvol5() const;
  inline void set_buyvol5(double value);
  
  // required int32 SELLPRICE1 = 16;
  inline bool has_sellprice1() const;
  inline void clear_sellprice1();
  static const int kSELLPRICE1FieldNumber = 16;
  inline ::google::protobuf::int32 sellprice1() const;
  inline void set_sellprice1(::google::protobuf::int32 value);
  
  // required int32 SELLPRICE2 = 17;
  inline bool has_sellprice2() const;
  inline void clear_sellprice2();
  static const int kSELLPRICE2FieldNumber = 17;
  inline ::google::protobuf::int32 sellprice2() const;
  inline void set_sellprice2(::google::protobuf::int32 value);
  
  // required int32 SELLPRICE3 = 18;
  inline bool has_sellprice3() const;
  inline void clear_sellprice3();
  static const int kSELLPRICE3FieldNumber = 18;
  inline ::google::protobuf::int32 sellprice3() const;
  inline void set_sellprice3(::google::protobuf::int32 value);
  
  // required int32 SELLPRICE4 = 19;
  inline bool has_sellprice4() const;
  inline void clear_sellprice4();
  static const int kSELLPRICE4FieldNumber = 19;
  inline ::google::protobuf::int32 sellprice4() const;
  inline void set_sellprice4(::google::protobuf::int32 value);
  
  // required int32 SELLPRICE5 = 20;
  inline bool has_sellprice5() const;
  inline void clear_sellprice5();
  static const int kSELLPRICE5FieldNumber = 20;
  inline ::google::protobuf::int32 sellprice5() const;
  inline void set_sellprice5(::google::protobuf::int32 value);
  
  // required double SELLVOL1 = 21;
  inline bool has_sellvol1() const;
  inline void clear_sellvol1();
  static const int kSELLVOL1FieldNumber = 21;
  inline double sellvol1() const;
  inline void set_sellvol1(double value);
  
  // required double SELLVOL2 = 22;
  inline bool has_sellvol2() const;
  inline void clear_sellvol2();
  static const int kSELLVOL2FieldNumber = 22;
  inline double sellvol2() const;
  inline void set_sellvol2(double value);
  
  // required double SELLVOL3 = 23;
  inline bool has_sellvol3() const;
  inline void clear_sellvol3();
  static const int kSELLVOL3FieldNumber = 23;
  inline double sellvol3() const;
  inline void set_sellvol3(double value);
  
  // required double SELLVOL4 = 24;
  inline bool has_sellvol4() const;
  inline void clear_sellvol4();
  static const int kSELLVOL4FieldNumber = 24;
  inline double sellvol4() const;
  inline void set_sellvol4(double value);
  
  // required double SELLVOL5 = 25;
  inline bool has_sellvol5() const;
  inline void clear_sellvol5();
  static const int kSELLVOL5FieldNumber = 25;
  inline double sellvol5() const;
  inline void set_sellvol5(double value);
  
  // required double VOL = 26;
  inline bool has_vol() const;
  inline void clear_vol();
  static const int kVOLFieldNumber = 26;
  inline double vol() const;
  inline void set_vol(double value);
  
  // required double AMOUT = 27;
  inline bool has_amout() const;
  inline void clear_amout();
  static const int kAMOUTFieldNumber = 27;
  inline double amout() const;
  inline void set_amout(double value);
  
  // @@protoc_insertion_point(class_scope:SATDataPB.mREALQDCACHELONG)
 private:
  inline void set_has_current();
  inline void clear_has_current();
  inline void set_has_preclose();
  inline void clear_has_preclose();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_buyprice1();
  inline void clear_has_buyprice1();
  inline void set_has_buyprice2();
  inline void clear_has_buyprice2();
  inline void set_has_buyprice3();
  inline void clear_has_buyprice3();
  inline void set_has_buyprice4();
  inline void clear_has_buyprice4();
  inline void set_has_buyprice5();
  inline void clear_has_buyprice5();
  inline void set_has_buyvol1();
  inline void clear_has_buyvol1();
  inline void set_has_buyvol2();
  inline void clear_has_buyvol2();
  inline void set_has_buyvol3();
  inline void clear_has_buyvol3();
  inline void set_has_buyvol4();
  inline void clear_has_buyvol4();
  inline void set_has_buyvol5();
  inline void clear_has_buyvol5();
  inline void set_has_sellprice1();
  inline void clear_has_sellprice1();
  inline void set_has_sellprice2();
  inline void clear_has_sellprice2();
  inline void set_has_sellprice3();
  inline void clear_has_sellprice3();
  inline void set_has_sellprice4();
  inline void clear_has_sellprice4();
  inline void set_has_sellprice5();
  inline void clear_has_sellprice5();
  inline void set_has_sellvol1();
  inline void clear_has_sellvol1();
  inline void set_has_sellvol2();
  inline void clear_has_sellvol2();
  inline void set_has_sellvol3();
  inline void clear_has_sellvol3();
  inline void set_has_sellvol4();
  inline void clear_has_sellvol4();
  inline void set_has_sellvol5();
  inline void clear_has_sellvol5();
  inline void set_has_vol();
  inline void clear_has_vol();
  inline void set_has_amout();
  inline void clear_has_amout();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 current_;
  ::google::protobuf::int32 preclose_;
  ::google::protobuf::int32 open_;
  ::google::protobuf::int32 high_;
  ::google::protobuf::int32 low_;
  ::google::protobuf::int32 buyprice1_;
  ::google::protobuf::int32 buyprice2_;
  ::google::protobuf::int32 buyprice3_;
  ::google::protobuf::int32 buyprice4_;
  ::google::protobuf::int32 buyprice5_;
  double buyvol1_;
  double buyvol2_;
  double buyvol3_;
  double buyvol4_;
  double buyvol5_;
  ::google::protobuf::int32 sellprice1_;
  ::google::protobuf::int32 sellprice2_;
  ::google::protobuf::int32 sellprice3_;
  ::google::protobuf::int32 sellprice4_;
  double sellvol1_;
  double sellvol2_;
  double sellvol3_;
  double sellvol4_;
  double sellvol5_;
  double vol_;
  double amout_;
  ::google::protobuf::int32 sellprice5_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];
  
  friend void  protobuf_AddDesc_SATDataPB_2eproto();
  friend void protobuf_AssignDesc_SATDataPB_2eproto();
  friend void protobuf_ShutdownFile_SATDataPB_2eproto();
  
  void InitAsDefaultInstance();
  static mREALQDCACHELONG* default_instance_;
};
// -------------------------------------------------------------------

class mQDCACHE : public ::google::protobuf::Message {
 public:
  mQDCACHE();
  virtual ~mQDCACHE();
  
  mQDCACHE(const mQDCACHE& from);
  
  inline mQDCACHE& operator=(const mQDCACHE& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mQDCACHE& default_instance();
  
  void Swap(mQDCACHE* other);
  
  // implements Message ----------------------------------------------
  
  mQDCACHE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mQDCACHE& from);
  void MergeFrom(const mQDCACHE& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 CURRENT = 1;
  inline bool has_current() const;
  inline void clear_current();
  static const int kCURRENTFieldNumber = 1;
  inline ::google::protobuf::int32 current() const;
  inline void set_current(::google::protobuf::int32 value);
  
  // required int32 PRECLOSE = 2;
  inline bool has_preclose() const;
  inline void clear_preclose();
  static const int kPRECLOSEFieldNumber = 2;
  inline ::google::protobuf::int32 preclose() const;
  inline void set_preclose(::google::protobuf::int32 value);
  
  // required int32 OPEN = 3;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOPENFieldNumber = 3;
  inline ::google::protobuf::int32 open() const;
  inline void set_open(::google::protobuf::int32 value);
  
  // required int32 HIGH = 4;
  inline bool has_high() const;
  inline void clear_high();
  static const int kHIGHFieldNumber = 4;
  inline ::google::protobuf::int32 high() const;
  inline void set_high(::google::protobuf::int32 value);
  
  // required int32 LOW = 5;
  inline bool has_low() const;
  inline void clear_low();
  static const int kLOWFieldNumber = 5;
  inline ::google::protobuf::int32 low() const;
  inline void set_low(::google::protobuf::int32 value);
  
  // required int32 BUYPRICE1 = 6;
  inline bool has_buyprice1() const;
  inline void clear_buyprice1();
  static const int kBUYPRICE1FieldNumber = 6;
  inline ::google::protobuf::int32 buyprice1() const;
  inline void set_buyprice1(::google::protobuf::int32 value);
  
  // required int32 BUYPRICE2 = 7;
  inline bool has_buyprice2() const;
  inline void clear_buyprice2();
  static const int kBUYPRICE2FieldNumber = 7;
  inline ::google::protobuf::int32 buyprice2() const;
  inline void set_buyprice2(::google::protobuf::int32 value);
  
  // required int32 BUYPRICE3 = 8;
  inline bool has_buyprice3() const;
  inline void clear_buyprice3();
  static const int kBUYPRICE3FieldNumber = 8;
  inline ::google::protobuf::int32 buyprice3() const;
  inline void set_buyprice3(::google::protobuf::int32 value);
  
  // required int32 BUYPRICE4 = 9;
  inline bool has_buyprice4() const;
  inline void clear_buyprice4();
  static const int kBUYPRICE4FieldNumber = 9;
  inline ::google::protobuf::int32 buyprice4() const;
  inline void set_buyprice4(::google::protobuf::int32 value);
  
  // required int32 BUYPRICE5 = 10;
  inline bool has_buyprice5() const;
  inline void clear_buyprice5();
  static const int kBUYPRICE5FieldNumber = 10;
  inline ::google::protobuf::int32 buyprice5() const;
  inline void set_buyprice5(::google::protobuf::int32 value);
  
  // required double BUYVOL1 = 11;
  inline bool has_buyvol1() const;
  inline void clear_buyvol1();
  static const int kBUYVOL1FieldNumber = 11;
  inline double buyvol1() const;
  inline void set_buyvol1(double value);
  
  // required double BUYVOL2 = 12;
  inline bool has_buyvol2() const;
  inline void clear_buyvol2();
  static const int kBUYVOL2FieldNumber = 12;
  inline double buyvol2() const;
  inline void set_buyvol2(double value);
  
  // required double BUYVOL3 = 13;
  inline bool has_buyvol3() const;
  inline void clear_buyvol3();
  static const int kBUYVOL3FieldNumber = 13;
  inline double buyvol3() const;
  inline void set_buyvol3(double value);
  
  // required double BUYVOL4 = 14;
  inline bool has_buyvol4() const;
  inline void clear_buyvol4();
  static const int kBUYVOL4FieldNumber = 14;
  inline double buyvol4() const;
  inline void set_buyvol4(double value);
  
  // required double BUYVOL5 = 15;
  inline bool has_buyvol5() const;
  inline void clear_buyvol5();
  static const int kBUYVOL5FieldNumber = 15;
  inline double buyvol5() const;
  inline void set_buyvol5(double value);
  
  // required int32 SELLPRICE1 = 16;
  inline bool has_sellprice1() const;
  inline void clear_sellprice1();
  static const int kSELLPRICE1FieldNumber = 16;
  inline ::google::protobuf::int32 sellprice1() const;
  inline void set_sellprice1(::google::protobuf::int32 value);
  
  // required int32 SELLPRICE2 = 17;
  inline bool has_sellprice2() const;
  inline void clear_sellprice2();
  static const int kSELLPRICE2FieldNumber = 17;
  inline ::google::protobuf::int32 sellprice2() const;
  inline void set_sellprice2(::google::protobuf::int32 value);
  
  // required int32 SELLPRICE3 = 18;
  inline bool has_sellprice3() const;
  inline void clear_sellprice3();
  static const int kSELLPRICE3FieldNumber = 18;
  inline ::google::protobuf::int32 sellprice3() const;
  inline void set_sellprice3(::google::protobuf::int32 value);
  
  // required int32 SELLPRICE4 = 19;
  inline bool has_sellprice4() const;
  inline void clear_sellprice4();
  static const int kSELLPRICE4FieldNumber = 19;
  inline ::google::protobuf::int32 sellprice4() const;
  inline void set_sellprice4(::google::protobuf::int32 value);
  
  // required int32 SELLPRICE5 = 20;
  inline bool has_sellprice5() const;
  inline void clear_sellprice5();
  static const int kSELLPRICE5FieldNumber = 20;
  inline ::google::protobuf::int32 sellprice5() const;
  inline void set_sellprice5(::google::protobuf::int32 value);
  
  // required double SELLVOL1 = 21;
  inline bool has_sellvol1() const;
  inline void clear_sellvol1();
  static const int kSELLVOL1FieldNumber = 21;
  inline double sellvol1() const;
  inline void set_sellvol1(double value);
  
  // required double SELLVOL2 = 22;
  inline bool has_sellvol2() const;
  inline void clear_sellvol2();
  static const int kSELLVOL2FieldNumber = 22;
  inline double sellvol2() const;
  inline void set_sellvol2(double value);
  
  // required double SELLVOL3 = 23;
  inline bool has_sellvol3() const;
  inline void clear_sellvol3();
  static const int kSELLVOL3FieldNumber = 23;
  inline double sellvol3() const;
  inline void set_sellvol3(double value);
  
  // required double SELLVOL4 = 24;
  inline bool has_sellvol4() const;
  inline void clear_sellvol4();
  static const int kSELLVOL4FieldNumber = 24;
  inline double sellvol4() const;
  inline void set_sellvol4(double value);
  
  // required double SELLVOL5 = 25;
  inline bool has_sellvol5() const;
  inline void clear_sellvol5();
  static const int kSELLVOL5FieldNumber = 25;
  inline double sellvol5() const;
  inline void set_sellvol5(double value);
  
  // required double VOL = 26;
  inline bool has_vol() const;
  inline void clear_vol();
  static const int kVOLFieldNumber = 26;
  inline double vol() const;
  inline void set_vol(double value);
  
  // required double AMOUT = 27;
  inline bool has_amout() const;
  inline void clear_amout();
  static const int kAMOUTFieldNumber = 27;
  inline double amout() const;
  inline void set_amout(double value);
  
  // required int32 SID = 28;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSIDFieldNumber = 28;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // required int32 Exchange = 29;
  inline bool has_exchange() const;
  inline void clear_exchange();
  static const int kExchangeFieldNumber = 29;
  inline ::google::protobuf::int32 exchange() const;
  inline void set_exchange(::google::protobuf::int32 value);
  
  // required string Name = 30;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 30;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 Time = 31;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 31;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SATDataPB.mQDCACHE)
 private:
  inline void set_has_current();
  inline void clear_has_current();
  inline void set_has_preclose();
  inline void clear_has_preclose();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_buyprice1();
  inline void clear_has_buyprice1();
  inline void set_has_buyprice2();
  inline void clear_has_buyprice2();
  inline void set_has_buyprice3();
  inline void clear_has_buyprice3();
  inline void set_has_buyprice4();
  inline void clear_has_buyprice4();
  inline void set_has_buyprice5();
  inline void clear_has_buyprice5();
  inline void set_has_buyvol1();
  inline void clear_has_buyvol1();
  inline void set_has_buyvol2();
  inline void clear_has_buyvol2();
  inline void set_has_buyvol3();
  inline void clear_has_buyvol3();
  inline void set_has_buyvol4();
  inline void clear_has_buyvol4();
  inline void set_has_buyvol5();
  inline void clear_has_buyvol5();
  inline void set_has_sellprice1();
  inline void clear_has_sellprice1();
  inline void set_has_sellprice2();
  inline void clear_has_sellprice2();
  inline void set_has_sellprice3();
  inline void clear_has_sellprice3();
  inline void set_has_sellprice4();
  inline void clear_has_sellprice4();
  inline void set_has_sellprice5();
  inline void clear_has_sellprice5();
  inline void set_has_sellvol1();
  inline void clear_has_sellvol1();
  inline void set_has_sellvol2();
  inline void clear_has_sellvol2();
  inline void set_has_sellvol3();
  inline void clear_has_sellvol3();
  inline void set_has_sellvol4();
  inline void clear_has_sellvol4();
  inline void set_has_sellvol5();
  inline void clear_has_sellvol5();
  inline void set_has_vol();
  inline void clear_has_vol();
  inline void set_has_amout();
  inline void clear_has_amout();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_exchange();
  inline void clear_has_exchange();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_time();
  inline void clear_has_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 current_;
  ::google::protobuf::int32 preclose_;
  ::google::protobuf::int32 open_;
  ::google::protobuf::int32 high_;
  ::google::protobuf::int32 low_;
  ::google::protobuf::int32 buyprice1_;
  ::google::protobuf::int32 buyprice2_;
  ::google::protobuf::int32 buyprice3_;
  ::google::protobuf::int32 buyprice4_;
  ::google::protobuf::int32 buyprice5_;
  double buyvol1_;
  double buyvol2_;
  double buyvol3_;
  double buyvol4_;
  double buyvol5_;
  ::google::protobuf::int32 sellprice1_;
  ::google::protobuf::int32 sellprice2_;
  ::google::protobuf::int32 sellprice3_;
  ::google::protobuf::int32 sellprice4_;
  double sellvol1_;
  double sellvol2_;
  double sellvol3_;
  ::google::protobuf::int32 sellprice5_;
  ::google::protobuf::int32 sid_;
  double sellvol4_;
  double sellvol5_;
  double vol_;
  double amout_;
  ::std::string* name_;
  ::google::protobuf::int32 exchange_;
  ::google::protobuf::int32 time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(31 + 31) / 32];
  
  friend void  protobuf_AddDesc_SATDataPB_2eproto();
  friend void protobuf_AssignDesc_SATDataPB_2eproto();
  friend void protobuf_ShutdownFile_SATDataPB_2eproto();
  
  void InitAsDefaultInstance();
  static mQDCACHE* default_instance_;
};
// -------------------------------------------------------------------

class mREALQDINFO : public ::google::protobuf::Message {
 public:
  mREALQDINFO();
  virtual ~mREALQDINFO();
  
  mREALQDINFO(const mREALQDINFO& from);
  
  inline mREALQDINFO& operator=(const mREALQDINFO& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mREALQDINFO& default_instance();
  
  void Swap(mREALQDINFO* other);
  
  // implements Message ----------------------------------------------
  
  mREALQDINFO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mREALQDINFO& from);
  void MergeFrom(const mREALQDINFO& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 SID = 1;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSIDFieldNumber = 1;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // required int32 Exchange = 2;
  inline bool has_exchange() const;
  inline void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  inline ::google::protobuf::int32 exchange() const;
  inline void set_exchange(::google::protobuf::int32 value);
  
  // required string Name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 PRECLOSE = 4;
  inline bool has_preclose() const;
  inline void clear_preclose();
  static const int kPRECLOSEFieldNumber = 4;
  inline ::google::protobuf::int32 preclose() const;
  inline void set_preclose(::google::protobuf::int32 value);
  
  // required int32 OPEN = 5;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOPENFieldNumber = 5;
  inline ::google::protobuf::int32 open() const;
  inline void set_open(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SATDataPB.mREALQDINFO)
 private:
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_exchange();
  inline void clear_has_exchange();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_preclose();
  inline void clear_has_preclose();
  inline void set_has_open();
  inline void clear_has_open();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int32 exchange_;
  ::std::string* name_;
  ::google::protobuf::int32 preclose_;
  ::google::protobuf::int32 open_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_SATDataPB_2eproto();
  friend void protobuf_AssignDesc_SATDataPB_2eproto();
  friend void protobuf_ShutdownFile_SATDataPB_2eproto();
  
  void InitAsDefaultInstance();
  static mREALQDINFO* default_instance_;
};
// -------------------------------------------------------------------

class mREALQDLONGBLOCK : public ::google::protobuf::Message {
 public:
  mREALQDLONGBLOCK();
  virtual ~mREALQDLONGBLOCK();
  
  mREALQDLONGBLOCK(const mREALQDLONGBLOCK& from);
  
  inline mREALQDLONGBLOCK& operator=(const mREALQDLONGBLOCK& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mREALQDLONGBLOCK& default_instance();
  
  void Swap(mREALQDLONGBLOCK* other);
  
  // implements Message ----------------------------------------------
  
  mREALQDLONGBLOCK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mREALQDLONGBLOCK& from);
  void MergeFrom(const mREALQDLONGBLOCK& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 Time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // required int32 TimeStamp = 2;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimeStampFieldNumber = 2;
  inline ::google::protobuf::int32 timestamp() const;
  inline void set_timestamp(::google::protobuf::int32 value);
  
  // repeated .SATDataPB.mREALQDCACHELONG LongData = 3;
  inline int longdata_size() const;
  inline void clear_longdata();
  static const int kLongDataFieldNumber = 3;
  inline const ::SATDataPB::mREALQDCACHELONG& longdata(int index) const;
  inline ::SATDataPB::mREALQDCACHELONG* mutable_longdata(int index);
  inline ::SATDataPB::mREALQDCACHELONG* add_longdata();
  inline const ::google::protobuf::RepeatedPtrField< ::SATDataPB::mREALQDCACHELONG >&
      longdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::SATDataPB::mREALQDCACHELONG >*
      mutable_longdata();
  
  // @@protoc_insertion_point(class_scope:SATDataPB.mREALQDLONGBLOCK)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 timestamp_;
  ::google::protobuf::RepeatedPtrField< ::SATDataPB::mREALQDCACHELONG > longdata_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_SATDataPB_2eproto();
  friend void protobuf_AssignDesc_SATDataPB_2eproto();
  friend void protobuf_ShutdownFile_SATDataPB_2eproto();
  
  void InitAsDefaultInstance();
  static mREALQDLONGBLOCK* default_instance_;
};
// -------------------------------------------------------------------

class mREALQDLONGCACHE : public ::google::protobuf::Message {
 public:
  mREALQDLONGCACHE();
  virtual ~mREALQDLONGCACHE();
  
  mREALQDLONGCACHE(const mREALQDLONGCACHE& from);
  
  inline mREALQDLONGCACHE& operator=(const mREALQDLONGCACHE& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mREALQDLONGCACHE& default_instance();
  
  void Swap(mREALQDLONGCACHE* other);
  
  // implements Message ----------------------------------------------
  
  mREALQDLONGCACHE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mREALQDLONGCACHE& from);
  void MergeFrom(const mREALQDLONGCACHE& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 IsUsed = 1;
  inline bool has_isused() const;
  inline void clear_isused();
  static const int kIsUsedFieldNumber = 1;
  inline ::google::protobuf::int32 isused() const;
  inline void set_isused(::google::protobuf::int32 value);
  
  // required int32 Date = 2;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 2;
  inline ::google::protobuf::int32 date() const;
  inline void set_date(::google::protobuf::int32 value);
  
  // required int32 SecNum = 3;
  inline bool has_secnum() const;
  inline void clear_secnum();
  static const int kSecNumFieldNumber = 3;
  inline ::google::protobuf::int32 secnum() const;
  inline void set_secnum(::google::protobuf::int32 value);
  
  // required .SATDataPB.mREALQDLONGBLOCK DataBlock = 4;
  inline bool has_datablock() const;
  inline void clear_datablock();
  static const int kDataBlockFieldNumber = 4;
  inline const ::SATDataPB::mREALQDLONGBLOCK& datablock() const;
  inline ::SATDataPB::mREALQDLONGBLOCK* mutable_datablock();
  inline ::SATDataPB::mREALQDLONGBLOCK* release_datablock();
  
  // repeated .SATDataPB.mREALQDINFO SecInfo = 5;
  inline int secinfo_size() const;
  inline void clear_secinfo();
  static const int kSecInfoFieldNumber = 5;
  inline const ::SATDataPB::mREALQDINFO& secinfo(int index) const;
  inline ::SATDataPB::mREALQDINFO* mutable_secinfo(int index);
  inline ::SATDataPB::mREALQDINFO* add_secinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::SATDataPB::mREALQDINFO >&
      secinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::SATDataPB::mREALQDINFO >*
      mutable_secinfo();
  
  // @@protoc_insertion_point(class_scope:SATDataPB.mREALQDLONGCACHE)
 private:
  inline void set_has_isused();
  inline void clear_has_isused();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_secnum();
  inline void clear_has_secnum();
  inline void set_has_datablock();
  inline void clear_has_datablock();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 isused_;
  ::google::protobuf::int32 date_;
  ::SATDataPB::mREALQDLONGBLOCK* datablock_;
  ::google::protobuf::RepeatedPtrField< ::SATDataPB::mREALQDINFO > secinfo_;
  ::google::protobuf::int32 secnum_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_SATDataPB_2eproto();
  friend void protobuf_AssignDesc_SATDataPB_2eproto();
  friend void protobuf_ShutdownFile_SATDataPB_2eproto();
  
  void InitAsDefaultInstance();
  static mREALQDLONGCACHE* default_instance_;
};
// -------------------------------------------------------------------

class mREQUEST : public ::google::protobuf::Message {
 public:
  mREQUEST();
  virtual ~mREQUEST();
  
  mREQUEST(const mREQUEST& from);
  
  inline mREQUEST& operator=(const mREQUEST& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mREQUEST& default_instance();
  
  void Swap(mREQUEST* other);
  
  // implements Message ----------------------------------------------
  
  mREQUEST* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mREQUEST& from);
  void MergeFrom(const mREQUEST& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 SID = 1;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSIDFieldNumber = 1;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // required int32 Exchange = 2;
  inline bool has_exchange() const;
  inline void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  inline ::google::protobuf::int32 exchange() const;
  inline void set_exchange(::google::protobuf::int32 value);
  
  // required int32 StartDate = 3;
  inline bool has_startdate() const;
  inline void clear_startdate();
  static const int kStartDateFieldNumber = 3;
  inline ::google::protobuf::int32 startdate() const;
  inline void set_startdate(::google::protobuf::int32 value);
  
  // required int32 EndDate = 4;
  inline bool has_enddate() const;
  inline void clear_enddate();
  static const int kEndDateFieldNumber = 4;
  inline ::google::protobuf::int32 enddate() const;
  inline void set_enddate(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SATDataPB.mREQUEST)
 private:
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_exchange();
  inline void clear_has_exchange();
  inline void set_has_startdate();
  inline void clear_has_startdate();
  inline void set_has_enddate();
  inline void clear_has_enddate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int32 exchange_;
  ::google::protobuf::int32 startdate_;
  ::google::protobuf::int32 enddate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_SATDataPB_2eproto();
  friend void protobuf_AssignDesc_SATDataPB_2eproto();
  friend void protobuf_ShutdownFile_SATDataPB_2eproto();
  
  void InitAsDefaultInstance();
  static mREQUEST* default_instance_;
};
// -------------------------------------------------------------------

class mDailyQuote : public ::google::protobuf::Message {
 public:
  mDailyQuote();
  virtual ~mDailyQuote();
  
  mDailyQuote(const mDailyQuote& from);
  
  inline mDailyQuote& operator=(const mDailyQuote& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mDailyQuote& default_instance();
  
  void Swap(mDailyQuote* other);
  
  // implements Message ----------------------------------------------
  
  mDailyQuote* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mDailyQuote& from);
  void MergeFrom(const mDailyQuote& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 SID = 1;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSIDFieldNumber = 1;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // required int32 Date = 2;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 2;
  inline ::google::protobuf::int32 date() const;
  inline void set_date(::google::protobuf::int32 value);
  
  // required int32 PreClose = 3;
  inline bool has_preclose() const;
  inline void clear_preclose();
  static const int kPreCloseFieldNumber = 3;
  inline ::google::protobuf::int32 preclose() const;
  inline void set_preclose(::google::protobuf::int32 value);
  
  // required int32 Open = 4;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 4;
  inline ::google::protobuf::int32 open() const;
  inline void set_open(::google::protobuf::int32 value);
  
  // required int32 High = 5;
  inline bool has_high() const;
  inline void clear_high();
  static const int kHighFieldNumber = 5;
  inline ::google::protobuf::int32 high() const;
  inline void set_high(::google::protobuf::int32 value);
  
  // required int32 Low = 6;
  inline bool has_low() const;
  inline void clear_low();
  static const int kLowFieldNumber = 6;
  inline ::google::protobuf::int32 low() const;
  inline void set_low(::google::protobuf::int32 value);
  
  // required int32 Close = 7;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 7;
  inline ::google::protobuf::int32 close() const;
  inline void set_close(::google::protobuf::int32 value);
  
  // required double Volume = 8;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 8;
  inline double volume() const;
  inline void set_volume(double value);
  
  // required double Amount = 9;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 9;
  inline double amount() const;
  inline void set_amount(double value);
  
  // required double AdjustingFactor = 10;
  inline bool has_adjustingfactor() const;
  inline void clear_adjustingfactor();
  static const int kAdjustingFactorFieldNumber = 10;
  inline double adjustingfactor() const;
  inline void set_adjustingfactor(double value);
  
  // required double Return = 11;
  inline bool has_return_() const;
  inline void clear_return_();
  static const int kReturnFieldNumber = 11;
  inline double return_() const;
  inline void set_return_(double value);
  
  // @@protoc_insertion_point(class_scope:SATDataPB.mDailyQuote)
 private:
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_preclose();
  inline void clear_has_preclose();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_adjustingfactor();
  inline void clear_has_adjustingfactor();
  inline void set_has_return_();
  inline void clear_has_return_();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int32 date_;
  ::google::protobuf::int32 preclose_;
  ::google::protobuf::int32 open_;
  ::google::protobuf::int32 high_;
  ::google::protobuf::int32 low_;
  double volume_;
  double amount_;
  double adjustingfactor_;
  double return__;
  ::google::protobuf::int32 close_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_SATDataPB_2eproto();
  friend void protobuf_AssignDesc_SATDataPB_2eproto();
  friend void protobuf_ShutdownFile_SATDataPB_2eproto();
  
  void InitAsDefaultInstance();
  static mDailyQuote* default_instance_;
};
// -------------------------------------------------------------------

class mFSP : public ::google::protobuf::Message {
 public:
  mFSP();
  virtual ~mFSP();
  
  mFSP(const mFSP& from);
  
  inline mFSP& operator=(const mFSP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mFSP& default_instance();
  
  void Swap(mFSP* other);
  
  // implements Message ----------------------------------------------
  
  mFSP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mFSP& from);
  void MergeFrom(const mFSP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 iSID = 1;
  inline bool has_isid() const;
  inline void clear_isid();
  static const int kISIDFieldNumber = 1;
  inline ::google::protobuf::int32 isid() const;
  inline void set_isid(::google::protobuf::int32 value);
  
  // required int32 iDDJ = 2;
  inline bool has_iddj() const;
  inline void clear_iddj();
  static const int kIDDJFieldNumber = 2;
  inline ::google::protobuf::int32 iddj() const;
  inline void set_iddj(::google::protobuf::int32 value);
  
  // required int32 iDCQ = 3;
  inline bool has_idcq() const;
  inline void clear_idcq();
  static const int kIDCQFieldNumber = 3;
  inline ::google::protobuf::int32 idcq() const;
  inline void set_idcq(::google::protobuf::int32 value);
  
  // required double dPGS = 4;
  inline bool has_dpgs() const;
  inline void clear_dpgs();
  static const int kDPGSFieldNumber = 4;
  inline double dpgs() const;
  inline void set_dpgs(double value);
  
  // required double dPGJ = 5;
  inline bool has_dpgj() const;
  inline void clear_dpgj();
  static const int kDPGJFieldNumber = 5;
  inline double dpgj() const;
  inline void set_dpgj(double value);
  
  // required double dSGS = 6;
  inline bool has_dsgs() const;
  inline void clear_dsgs();
  static const int kDSGSFieldNumber = 6;
  inline double dsgs() const;
  inline void set_dsgs(double value);
  
  // required double dPXS = 7;
  inline bool has_dpxs() const;
  inline void clear_dpxs();
  static const int kDPXSFieldNumber = 7;
  inline double dpxs() const;
  inline void set_dpxs(double value);
  
  // required double dZZS = 8;
  inline bool has_dzzs() const;
  inline void clear_dzzs();
  static const int kDZZSFieldNumber = 8;
  inline double dzzs() const;
  inline void set_dzzs(double value);
  
  // @@protoc_insertion_point(class_scope:SATDataPB.mFSP)
 private:
  inline void set_has_isid();
  inline void clear_has_isid();
  inline void set_has_iddj();
  inline void clear_has_iddj();
  inline void set_has_idcq();
  inline void clear_has_idcq();
  inline void set_has_dpgs();
  inline void clear_has_dpgs();
  inline void set_has_dpgj();
  inline void clear_has_dpgj();
  inline void set_has_dsgs();
  inline void clear_has_dsgs();
  inline void set_has_dpxs();
  inline void clear_has_dpxs();
  inline void set_has_dzzs();
  inline void clear_has_dzzs();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 isid_;
  ::google::protobuf::int32 iddj_;
  double dpgs_;
  double dpgj_;
  double dsgs_;
  double dpxs_;
  double dzzs_;
  ::google::protobuf::int32 idcq_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_SATDataPB_2eproto();
  friend void protobuf_AssignDesc_SATDataPB_2eproto();
  friend void protobuf_ShutdownFile_SATDataPB_2eproto();
  
  void InitAsDefaultInstance();
  static mFSP* default_instance_;
};
// -------------------------------------------------------------------

class QDailyQuote : public ::google::protobuf::Message {
 public:
  QDailyQuote();
  virtual ~QDailyQuote();
  
  QDailyQuote(const QDailyQuote& from);
  
  inline QDailyQuote& operator=(const QDailyQuote& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QDailyQuote& default_instance();
  
  void Swap(QDailyQuote* other);
  
  // implements Message ----------------------------------------------
  
  QDailyQuote* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QDailyQuote& from);
  void MergeFrom(const QDailyQuote& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .SATDataPB.mDailyQuote qDailyQuote = 1;
  inline int qdailyquote_size() const;
  inline void clear_qdailyquote();
  static const int kQDailyQuoteFieldNumber = 1;
  inline const ::SATDataPB::mDailyQuote& qdailyquote(int index) const;
  inline ::SATDataPB::mDailyQuote* mutable_qdailyquote(int index);
  inline ::SATDataPB::mDailyQuote* add_qdailyquote();
  inline const ::google::protobuf::RepeatedPtrField< ::SATDataPB::mDailyQuote >&
      qdailyquote() const;
  inline ::google::protobuf::RepeatedPtrField< ::SATDataPB::mDailyQuote >*
      mutable_qdailyquote();
  
  // @@protoc_insertion_point(class_scope:SATDataPB.QDailyQuote)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::SATDataPB::mDailyQuote > qdailyquote_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_SATDataPB_2eproto();
  friend void protobuf_AssignDesc_SATDataPB_2eproto();
  friend void protobuf_ShutdownFile_SATDataPB_2eproto();
  
  void InitAsDefaultInstance();
  static QDailyQuote* default_instance_;
};
// -------------------------------------------------------------------

class mQDFILEBLOCK : public ::google::protobuf::Message {
 public:
  mQDFILEBLOCK();
  virtual ~mQDFILEBLOCK();
  
  mQDFILEBLOCK(const mQDFILEBLOCK& from);
  
  inline mQDFILEBLOCK& operator=(const mQDFILEBLOCK& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mQDFILEBLOCK& default_instance();
  
  void Swap(mQDFILEBLOCK* other);
  
  // implements Message ----------------------------------------------
  
  mQDFILEBLOCK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mQDFILEBLOCK& from);
  void MergeFrom(const mQDFILEBLOCK& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 dwTime = 1;
  inline bool has_dwtime() const;
  inline void clear_dwtime();
  static const int kDwTimeFieldNumber = 1;
  inline ::google::protobuf::int32 dwtime() const;
  inline void set_dwtime(::google::protobuf::int32 value);
  
  // required int32 dwTimeStamp = 2;
  inline bool has_dwtimestamp() const;
  inline void clear_dwtimestamp();
  static const int kDwTimeStampFieldNumber = 2;
  inline ::google::protobuf::int32 dwtimestamp() const;
  inline void set_dwtimestamp(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SATDataPB.mQDFILEBLOCK)
 private:
  inline void set_has_dwtime();
  inline void clear_has_dwtime();
  inline void set_has_dwtimestamp();
  inline void clear_has_dwtimestamp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 dwtime_;
  ::google::protobuf::int32 dwtimestamp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_SATDataPB_2eproto();
  friend void protobuf_AssignDesc_SATDataPB_2eproto();
  friend void protobuf_ShutdownFile_SATDataPB_2eproto();
  
  void InitAsDefaultInstance();
  static mQDFILEBLOCK* default_instance_;
};
// -------------------------------------------------------------------

class QHFData : public ::google::protobuf::Message {
 public:
  QHFData();
  virtual ~QHFData();
  
  QHFData(const QHFData& from);
  
  inline QHFData& operator=(const QHFData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QHFData& default_instance();
  
  void Swap(QHFData* other);
  
  // implements Message ----------------------------------------------
  
  QHFData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QHFData& from);
  void MergeFrom(const QHFData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .SATDataPB.mQDFILEBLOCK FILEBLOCK = 1;
  inline int fileblock_size() const;
  inline void clear_fileblock();
  static const int kFILEBLOCKFieldNumber = 1;
  inline const ::SATDataPB::mQDFILEBLOCK& fileblock(int index) const;
  inline ::SATDataPB::mQDFILEBLOCK* mutable_fileblock(int index);
  inline ::SATDataPB::mQDFILEBLOCK* add_fileblock();
  inline const ::google::protobuf::RepeatedPtrField< ::SATDataPB::mQDFILEBLOCK >&
      fileblock() const;
  inline ::google::protobuf::RepeatedPtrField< ::SATDataPB::mQDFILEBLOCK >*
      mutable_fileblock();
  
  // repeated .SATDataPB.mQDCACHE CACHELONG = 2;
  inline int cachelong_size() const;
  inline void clear_cachelong();
  static const int kCACHELONGFieldNumber = 2;
  inline const ::SATDataPB::mQDCACHE& cachelong(int index) const;
  inline ::SATDataPB::mQDCACHE* mutable_cachelong(int index);
  inline ::SATDataPB::mQDCACHE* add_cachelong();
  inline const ::google::protobuf::RepeatedPtrField< ::SATDataPB::mQDCACHE >&
      cachelong() const;
  inline ::google::protobuf::RepeatedPtrField< ::SATDataPB::mQDCACHE >*
      mutable_cachelong();
  
  // @@protoc_insertion_point(class_scope:SATDataPB.QHFData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::SATDataPB::mQDFILEBLOCK > fileblock_;
  ::google::protobuf::RepeatedPtrField< ::SATDataPB::mQDCACHE > cachelong_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_SATDataPB_2eproto();
  friend void protobuf_AssignDesc_SATDataPB_2eproto();
  friend void protobuf_ShutdownFile_SATDataPB_2eproto();
  
  void InitAsDefaultInstance();
  static QHFData* default_instance_;
};
// -------------------------------------------------------------------

class QData : public ::google::protobuf::Message {
 public:
  QData();
  virtual ~QData();
  
  QData(const QData& from);
  
  inline QData& operator=(const QData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QData& default_instance();
  
  void Swap(QData* other);
  
  // implements Message ----------------------------------------------
  
  QData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QData& from);
  void MergeFrom(const QData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 qDate = 1;
  inline int qdate_size() const;
  inline void clear_qdate();
  static const int kQDateFieldNumber = 1;
  inline ::google::protobuf::int32 qdate(int index) const;
  inline void set_qdate(int index, ::google::protobuf::int32 value);
  inline void add_qdate(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      qdate() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_qdate();
  
  // @@protoc_insertion_point(class_scope:SATDataPB.QData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > qdate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_SATDataPB_2eproto();
  friend void protobuf_AssignDesc_SATDataPB_2eproto();
  friend void protobuf_ShutdownFile_SATDataPB_2eproto();
  
  void InitAsDefaultInstance();
  static QData* default_instance_;
};
// -------------------------------------------------------------------

class QFSP : public ::google::protobuf::Message {
 public:
  QFSP();
  virtual ~QFSP();
  
  QFSP(const QFSP& from);
  
  inline QFSP& operator=(const QFSP& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QFSP& default_instance();
  
  void Swap(QFSP* other);
  
  // implements Message ----------------------------------------------
  
  QFSP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QFSP& from);
  void MergeFrom(const QFSP& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .SATDataPB.mFSP qFSP = 1;
  inline int qfsp_size() const;
  inline void clear_qfsp();
  static const int kQFSPFieldNumber = 1;
  inline const ::SATDataPB::mFSP& qfsp(int index) const;
  inline ::SATDataPB::mFSP* mutable_qfsp(int index);
  inline ::SATDataPB::mFSP* add_qfsp();
  inline const ::google::protobuf::RepeatedPtrField< ::SATDataPB::mFSP >&
      qfsp() const;
  inline ::google::protobuf::RepeatedPtrField< ::SATDataPB::mFSP >*
      mutable_qfsp();
  
  // @@protoc_insertion_point(class_scope:SATDataPB.QFSP)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::SATDataPB::mFSP > qfsp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_SATDataPB_2eproto();
  friend void protobuf_AssignDesc_SATDataPB_2eproto();
  friend void protobuf_ShutdownFile_SATDataPB_2eproto();
  
  void InitAsDefaultInstance();
  static QFSP* default_instance_;
};
// -------------------------------------------------------------------

class mQD : public ::google::protobuf::Message {
 public:
  mQD();
  virtual ~mQD();
  
  mQD(const mQD& from);
  
  inline mQD& operator=(const mQD& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mQD& default_instance();
  
  void Swap(mQD* other);
  
  // implements Message ----------------------------------------------
  
  mQD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mQD& from);
  void MergeFrom(const mQD& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 Date = 1;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 1;
  inline ::google::protobuf::int32 date() const;
  inline void set_date(::google::protobuf::int32 value);
  
  // required int32 SecNum = 2;
  inline bool has_secnum() const;
  inline void clear_secnum();
  static const int kSecNumFieldNumber = 2;
  inline ::google::protobuf::int32 secnum() const;
  inline void set_secnum(::google::protobuf::int32 value);
  
  // repeated .SATDataPB.mQDCACHE DataBlock = 3;
  inline int datablock_size() const;
  inline void clear_datablock();
  static const int kDataBlockFieldNumber = 3;
  inline const ::SATDataPB::mQDCACHE& datablock(int index) const;
  inline ::SATDataPB::mQDCACHE* mutable_datablock(int index);
  inline ::SATDataPB::mQDCACHE* add_datablock();
  inline const ::google::protobuf::RepeatedPtrField< ::SATDataPB::mQDCACHE >&
      datablock() const;
  inline ::google::protobuf::RepeatedPtrField< ::SATDataPB::mQDCACHE >*
      mutable_datablock();
  
  // @@protoc_insertion_point(class_scope:SATDataPB.mQD)
 private:
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_secnum();
  inline void clear_has_secnum();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 date_;
  ::google::protobuf::int32 secnum_;
  ::google::protobuf::RepeatedPtrField< ::SATDataPB::mQDCACHE > datablock_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_SATDataPB_2eproto();
  friend void protobuf_AssignDesc_SATDataPB_2eproto();
  friend void protobuf_ShutdownFile_SATDataPB_2eproto();
  
  void InitAsDefaultInstance();
  static mQD* default_instance_;
};
// -------------------------------------------------------------------

class QQuoteDataIO : public ::google::protobuf::Message {
 public:
  QQuoteDataIO();
  virtual ~QQuoteDataIO();
  
  QQuoteDataIO(const QQuoteDataIO& from);
  
  inline QQuoteDataIO& operator=(const QQuoteDataIO& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QQuoteDataIO& default_instance();
  
  void Swap(QQuoteDataIO* other);
  
  // implements Message ----------------------------------------------
  
  QQuoteDataIO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QQuoteDataIO& from);
  void MergeFrom(const QQuoteDataIO& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 StampIndex = 1;
  inline bool has_stampindex() const;
  inline void clear_stampindex();
  static const int kStampIndexFieldNumber = 1;
  inline ::google::protobuf::int32 stampindex() const;
  inline void set_stampindex(::google::protobuf::int32 value);
  
  // required .SATDataPB.mQD QuoteData = 2;
  inline bool has_quotedata() const;
  inline void clear_quotedata();
  static const int kQuoteDataFieldNumber = 2;
  inline const ::SATDataPB::mQD& quotedata() const;
  inline ::SATDataPB::mQD* mutable_quotedata();
  inline ::SATDataPB::mQD* release_quotedata();
  
  // @@protoc_insertion_point(class_scope:SATDataPB.QQuoteDataIO)
 private:
  inline void set_has_stampindex();
  inline void clear_has_stampindex();
  inline void set_has_quotedata();
  inline void clear_has_quotedata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::SATDataPB::mQD* quotedata_;
  ::google::protobuf::int32 stampindex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_SATDataPB_2eproto();
  friend void protobuf_AssignDesc_SATDataPB_2eproto();
  friend void protobuf_ShutdownFile_SATDataPB_2eproto();
  
  void InitAsDefaultInstance();
  static QQuoteDataIO* default_instance_;
};
// -------------------------------------------------------------------

class mK : public ::google::protobuf::Message {
 public:
  mK();
  virtual ~mK();
  
  mK(const mK& from);
  
  inline mK& operator=(const mK& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mK& default_instance();
  
  void Swap(mK* other);
  
  // implements Message ----------------------------------------------
  
  mK* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mK& from);
  void MergeFrom(const mK& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 Date = 1;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 1;
  inline ::google::protobuf::int32 date() const;
  inline void set_date(::google::protobuf::int32 value);
  
  // required int32 Time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // required int32 Open = 3;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 3;
  inline ::google::protobuf::int32 open() const;
  inline void set_open(::google::protobuf::int32 value);
  
  // required int32 High = 4;
  inline bool has_high() const;
  inline void clear_high();
  static const int kHighFieldNumber = 4;
  inline ::google::protobuf::int32 high() const;
  inline void set_high(::google::protobuf::int32 value);
  
  // required int32 Low = 5;
  inline bool has_low() const;
  inline void clear_low();
  static const int kLowFieldNumber = 5;
  inline ::google::protobuf::int32 low() const;
  inline void set_low(::google::protobuf::int32 value);
  
  // required int32 Close = 6;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 6;
  inline ::google::protobuf::int32 close() const;
  inline void set_close(::google::protobuf::int32 value);
  
  // required int32 SID = 7;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSIDFieldNumber = 7;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // required int32 Exchange = 8;
  inline bool has_exchange() const;
  inline void clear_exchange();
  static const int kExchangeFieldNumber = 8;
  inline ::google::protobuf::int32 exchange() const;
  inline void set_exchange(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SATDataPB.mK)
 private:
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_exchange();
  inline void clear_has_exchange();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 date_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 open_;
  ::google::protobuf::int32 high_;
  ::google::protobuf::int32 low_;
  ::google::protobuf::int32 close_;
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int32 exchange_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_SATDataPB_2eproto();
  friend void protobuf_AssignDesc_SATDataPB_2eproto();
  friend void protobuf_ShutdownFile_SATDataPB_2eproto();
  
  void InitAsDefaultInstance();
  static mK* default_instance_;
};
// -------------------------------------------------------------------

class QQD : public ::google::protobuf::Message {
 public:
  QQD();
  virtual ~QQD();
  
  QQD(const QQD& from);
  
  inline QQD& operator=(const QQD& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QQD& default_instance();
  
  void Swap(QQD* other);
  
  // implements Message ----------------------------------------------
  
  QQD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QQD& from);
  void MergeFrom(const QQD& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 SecNum = 1;
  inline bool has_secnum() const;
  inline void clear_secnum();
  static const int kSecNumFieldNumber = 1;
  inline ::google::protobuf::int32 secnum() const;
  inline void set_secnum(::google::protobuf::int32 value);
  
  // repeated int32 DateList = 2;
  inline int datelist_size() const;
  inline void clear_datelist();
  static const int kDateListFieldNumber = 2;
  inline ::google::protobuf::int32 datelist(int index) const;
  inline void set_datelist(int index, ::google::protobuf::int32 value);
  inline void add_datelist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      datelist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_datelist();
  
  // repeated .SATDataPB.mK mmK = 3;
  inline int mmk_size() const;
  inline void clear_mmk();
  static const int kMmKFieldNumber = 3;
  inline const ::SATDataPB::mK& mmk(int index) const;
  inline ::SATDataPB::mK* mutable_mmk(int index);
  inline ::SATDataPB::mK* add_mmk();
  inline const ::google::protobuf::RepeatedPtrField< ::SATDataPB::mK >&
      mmk() const;
  inline ::google::protobuf::RepeatedPtrField< ::SATDataPB::mK >*
      mutable_mmk();
  
  // @@protoc_insertion_point(class_scope:SATDataPB.QQD)
 private:
  inline void set_has_secnum();
  inline void clear_has_secnum();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > datelist_;
  ::google::protobuf::RepeatedPtrField< ::SATDataPB::mK > mmk_;
  ::google::protobuf::int32 secnum_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_SATDataPB_2eproto();
  friend void protobuf_AssignDesc_SATDataPB_2eproto();
  friend void protobuf_ShutdownFile_SATDataPB_2eproto();
  
  void InitAsDefaultInstance();
  static QQD* default_instance_;
};
// -------------------------------------------------------------------

class mQDSECINFO : public ::google::protobuf::Message {
 public:
  mQDSECINFO();
  virtual ~mQDSECINFO();
  
  mQDSECINFO(const mQDSECINFO& from);
  
  inline mQDSECINFO& operator=(const mQDSECINFO& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const mQDSECINFO& default_instance();
  
  void Swap(mQDSECINFO* other);
  
  // implements Message ----------------------------------------------
  
  mQDSECINFO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mQDSECINFO& from);
  void MergeFrom(const mQDSECINFO& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 Exchange = 1;
  inline bool has_exchange() const;
  inline void clear_exchange();
  static const int kExchangeFieldNumber = 1;
  inline ::google::protobuf::int32 exchange() const;
  inline void set_exchange(::google::protobuf::int32 value);
  
  // required int32 SID = 2;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSIDFieldNumber = 2;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SATDataPB.mQDSECINFO)
 private:
  inline void set_has_exchange();
  inline void clear_has_exchange();
  inline void set_has_sid();
  inline void clear_has_sid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 exchange_;
  ::google::protobuf::int32 sid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_SATDataPB_2eproto();
  friend void protobuf_AssignDesc_SATDataPB_2eproto();
  friend void protobuf_ShutdownFile_SATDataPB_2eproto();
  
  void InitAsDefaultInstance();
  static mQDSECINFO* default_instance_;
};
// -------------------------------------------------------------------

class QQDSECINFO : public ::google::protobuf::Message {
 public:
  QQDSECINFO();
  virtual ~QQDSECINFO();
  
  QQDSECINFO(const QQDSECINFO& from);
  
  inline QQDSECINFO& operator=(const QQDSECINFO& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QQDSECINFO& default_instance();
  
  void Swap(QQDSECINFO* other);
  
  // implements Message ----------------------------------------------
  
  QQDSECINFO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QQDSECINFO& from);
  void MergeFrom(const QQDSECINFO& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .SATDataPB.mQDSECINFO mmQDSECINFO = 1;
  inline int mmqdsecinfo_size() const;
  inline void clear_mmqdsecinfo();
  static const int kMmQDSECINFOFieldNumber = 1;
  inline const ::SATDataPB::mQDSECINFO& mmqdsecinfo(int index) const;
  inline ::SATDataPB::mQDSECINFO* mutable_mmqdsecinfo(int index);
  inline ::SATDataPB::mQDSECINFO* add_mmqdsecinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::SATDataPB::mQDSECINFO >&
      mmqdsecinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::SATDataPB::mQDSECINFO >*
      mutable_mmqdsecinfo();
  
  // @@protoc_insertion_point(class_scope:SATDataPB.QQDSECINFO)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::SATDataPB::mQDSECINFO > mmqdsecinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_SATDataPB_2eproto();
  friend void protobuf_AssignDesc_SATDataPB_2eproto();
  friend void protobuf_ShutdownFile_SATDataPB_2eproto();
  
  void InitAsDefaultInstance();
  static QQDSECINFO* default_instance_;
};
// ===================================================================


// ===================================================================

// mREALQDCACHELONG

// required int32 CURRENT = 1;
inline bool mREALQDCACHELONG::has_current() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mREALQDCACHELONG::set_has_current() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mREALQDCACHELONG::clear_has_current() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mREALQDCACHELONG::clear_current() {
  current_ = 0;
  clear_has_current();
}
inline ::google::protobuf::int32 mREALQDCACHELONG::current() const {
  return current_;
}
inline void mREALQDCACHELONG::set_current(::google::protobuf::int32 value) {
  set_has_current();
  current_ = value;
}

// required int32 PRECLOSE = 2;
inline bool mREALQDCACHELONG::has_preclose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mREALQDCACHELONG::set_has_preclose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mREALQDCACHELONG::clear_has_preclose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mREALQDCACHELONG::clear_preclose() {
  preclose_ = 0;
  clear_has_preclose();
}
inline ::google::protobuf::int32 mREALQDCACHELONG::preclose() const {
  return preclose_;
}
inline void mREALQDCACHELONG::set_preclose(::google::protobuf::int32 value) {
  set_has_preclose();
  preclose_ = value;
}

// required int32 OPEN = 3;
inline bool mREALQDCACHELONG::has_open() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mREALQDCACHELONG::set_has_open() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mREALQDCACHELONG::clear_has_open() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mREALQDCACHELONG::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline ::google::protobuf::int32 mREALQDCACHELONG::open() const {
  return open_;
}
inline void mREALQDCACHELONG::set_open(::google::protobuf::int32 value) {
  set_has_open();
  open_ = value;
}

// required int32 HIGH = 4;
inline bool mREALQDCACHELONG::has_high() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mREALQDCACHELONG::set_has_high() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mREALQDCACHELONG::clear_has_high() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mREALQDCACHELONG::clear_high() {
  high_ = 0;
  clear_has_high();
}
inline ::google::protobuf::int32 mREALQDCACHELONG::high() const {
  return high_;
}
inline void mREALQDCACHELONG::set_high(::google::protobuf::int32 value) {
  set_has_high();
  high_ = value;
}

// required int32 LOW = 5;
inline bool mREALQDCACHELONG::has_low() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mREALQDCACHELONG::set_has_low() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mREALQDCACHELONG::clear_has_low() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mREALQDCACHELONG::clear_low() {
  low_ = 0;
  clear_has_low();
}
inline ::google::protobuf::int32 mREALQDCACHELONG::low() const {
  return low_;
}
inline void mREALQDCACHELONG::set_low(::google::protobuf::int32 value) {
  set_has_low();
  low_ = value;
}

// required int32 BUYPRICE1 = 6;
inline bool mREALQDCACHELONG::has_buyprice1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mREALQDCACHELONG::set_has_buyprice1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mREALQDCACHELONG::clear_has_buyprice1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mREALQDCACHELONG::clear_buyprice1() {
  buyprice1_ = 0;
  clear_has_buyprice1();
}
inline ::google::protobuf::int32 mREALQDCACHELONG::buyprice1() const {
  return buyprice1_;
}
inline void mREALQDCACHELONG::set_buyprice1(::google::protobuf::int32 value) {
  set_has_buyprice1();
  buyprice1_ = value;
}

// required int32 BUYPRICE2 = 7;
inline bool mREALQDCACHELONG::has_buyprice2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mREALQDCACHELONG::set_has_buyprice2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mREALQDCACHELONG::clear_has_buyprice2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mREALQDCACHELONG::clear_buyprice2() {
  buyprice2_ = 0;
  clear_has_buyprice2();
}
inline ::google::protobuf::int32 mREALQDCACHELONG::buyprice2() const {
  return buyprice2_;
}
inline void mREALQDCACHELONG::set_buyprice2(::google::protobuf::int32 value) {
  set_has_buyprice2();
  buyprice2_ = value;
}

// required int32 BUYPRICE3 = 8;
inline bool mREALQDCACHELONG::has_buyprice3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mREALQDCACHELONG::set_has_buyprice3() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mREALQDCACHELONG::clear_has_buyprice3() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mREALQDCACHELONG::clear_buyprice3() {
  buyprice3_ = 0;
  clear_has_buyprice3();
}
inline ::google::protobuf::int32 mREALQDCACHELONG::buyprice3() const {
  return buyprice3_;
}
inline void mREALQDCACHELONG::set_buyprice3(::google::protobuf::int32 value) {
  set_has_buyprice3();
  buyprice3_ = value;
}

// required int32 BUYPRICE4 = 9;
inline bool mREALQDCACHELONG::has_buyprice4() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void mREALQDCACHELONG::set_has_buyprice4() {
  _has_bits_[0] |= 0x00000100u;
}
inline void mREALQDCACHELONG::clear_has_buyprice4() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void mREALQDCACHELONG::clear_buyprice4() {
  buyprice4_ = 0;
  clear_has_buyprice4();
}
inline ::google::protobuf::int32 mREALQDCACHELONG::buyprice4() const {
  return buyprice4_;
}
inline void mREALQDCACHELONG::set_buyprice4(::google::protobuf::int32 value) {
  set_has_buyprice4();
  buyprice4_ = value;
}

// required int32 BUYPRICE5 = 10;
inline bool mREALQDCACHELONG::has_buyprice5() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void mREALQDCACHELONG::set_has_buyprice5() {
  _has_bits_[0] |= 0x00000200u;
}
inline void mREALQDCACHELONG::clear_has_buyprice5() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void mREALQDCACHELONG::clear_buyprice5() {
  buyprice5_ = 0;
  clear_has_buyprice5();
}
inline ::google::protobuf::int32 mREALQDCACHELONG::buyprice5() const {
  return buyprice5_;
}
inline void mREALQDCACHELONG::set_buyprice5(::google::protobuf::int32 value) {
  set_has_buyprice5();
  buyprice5_ = value;
}

// required double BUYVOL1 = 11;
inline bool mREALQDCACHELONG::has_buyvol1() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void mREALQDCACHELONG::set_has_buyvol1() {
  _has_bits_[0] |= 0x00000400u;
}
inline void mREALQDCACHELONG::clear_has_buyvol1() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void mREALQDCACHELONG::clear_buyvol1() {
  buyvol1_ = 0;
  clear_has_buyvol1();
}
inline double mREALQDCACHELONG::buyvol1() const {
  return buyvol1_;
}
inline void mREALQDCACHELONG::set_buyvol1(double value) {
  set_has_buyvol1();
  buyvol1_ = value;
}

// required double BUYVOL2 = 12;
inline bool mREALQDCACHELONG::has_buyvol2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void mREALQDCACHELONG::set_has_buyvol2() {
  _has_bits_[0] |= 0x00000800u;
}
inline void mREALQDCACHELONG::clear_has_buyvol2() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void mREALQDCACHELONG::clear_buyvol2() {
  buyvol2_ = 0;
  clear_has_buyvol2();
}
inline double mREALQDCACHELONG::buyvol2() const {
  return buyvol2_;
}
inline void mREALQDCACHELONG::set_buyvol2(double value) {
  set_has_buyvol2();
  buyvol2_ = value;
}

// required double BUYVOL3 = 13;
inline bool mREALQDCACHELONG::has_buyvol3() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void mREALQDCACHELONG::set_has_buyvol3() {
  _has_bits_[0] |= 0x00001000u;
}
inline void mREALQDCACHELONG::clear_has_buyvol3() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void mREALQDCACHELONG::clear_buyvol3() {
  buyvol3_ = 0;
  clear_has_buyvol3();
}
inline double mREALQDCACHELONG::buyvol3() const {
  return buyvol3_;
}
inline void mREALQDCACHELONG::set_buyvol3(double value) {
  set_has_buyvol3();
  buyvol3_ = value;
}

// required double BUYVOL4 = 14;
inline bool mREALQDCACHELONG::has_buyvol4() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void mREALQDCACHELONG::set_has_buyvol4() {
  _has_bits_[0] |= 0x00002000u;
}
inline void mREALQDCACHELONG::clear_has_buyvol4() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void mREALQDCACHELONG::clear_buyvol4() {
  buyvol4_ = 0;
  clear_has_buyvol4();
}
inline double mREALQDCACHELONG::buyvol4() const {
  return buyvol4_;
}
inline void mREALQDCACHELONG::set_buyvol4(double value) {
  set_has_buyvol4();
  buyvol4_ = value;
}

// required double BUYVOL5 = 15;
inline bool mREALQDCACHELONG::has_buyvol5() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void mREALQDCACHELONG::set_has_buyvol5() {
  _has_bits_[0] |= 0x00004000u;
}
inline void mREALQDCACHELONG::clear_has_buyvol5() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void mREALQDCACHELONG::clear_buyvol5() {
  buyvol5_ = 0;
  clear_has_buyvol5();
}
inline double mREALQDCACHELONG::buyvol5() const {
  return buyvol5_;
}
inline void mREALQDCACHELONG::set_buyvol5(double value) {
  set_has_buyvol5();
  buyvol5_ = value;
}

// required int32 SELLPRICE1 = 16;
inline bool mREALQDCACHELONG::has_sellprice1() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void mREALQDCACHELONG::set_has_sellprice1() {
  _has_bits_[0] |= 0x00008000u;
}
inline void mREALQDCACHELONG::clear_has_sellprice1() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void mREALQDCACHELONG::clear_sellprice1() {
  sellprice1_ = 0;
  clear_has_sellprice1();
}
inline ::google::protobuf::int32 mREALQDCACHELONG::sellprice1() const {
  return sellprice1_;
}
inline void mREALQDCACHELONG::set_sellprice1(::google::protobuf::int32 value) {
  set_has_sellprice1();
  sellprice1_ = value;
}

// required int32 SELLPRICE2 = 17;
inline bool mREALQDCACHELONG::has_sellprice2() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void mREALQDCACHELONG::set_has_sellprice2() {
  _has_bits_[0] |= 0x00010000u;
}
inline void mREALQDCACHELONG::clear_has_sellprice2() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void mREALQDCACHELONG::clear_sellprice2() {
  sellprice2_ = 0;
  clear_has_sellprice2();
}
inline ::google::protobuf::int32 mREALQDCACHELONG::sellprice2() const {
  return sellprice2_;
}
inline void mREALQDCACHELONG::set_sellprice2(::google::protobuf::int32 value) {
  set_has_sellprice2();
  sellprice2_ = value;
}

// required int32 SELLPRICE3 = 18;
inline bool mREALQDCACHELONG::has_sellprice3() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void mREALQDCACHELONG::set_has_sellprice3() {
  _has_bits_[0] |= 0x00020000u;
}
inline void mREALQDCACHELONG::clear_has_sellprice3() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void mREALQDCACHELONG::clear_sellprice3() {
  sellprice3_ = 0;
  clear_has_sellprice3();
}
inline ::google::protobuf::int32 mREALQDCACHELONG::sellprice3() const {
  return sellprice3_;
}
inline void mREALQDCACHELONG::set_sellprice3(::google::protobuf::int32 value) {
  set_has_sellprice3();
  sellprice3_ = value;
}

// required int32 SELLPRICE4 = 19;
inline bool mREALQDCACHELONG::has_sellprice4() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void mREALQDCACHELONG::set_has_sellprice4() {
  _has_bits_[0] |= 0x00040000u;
}
inline void mREALQDCACHELONG::clear_has_sellprice4() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void mREALQDCACHELONG::clear_sellprice4() {
  sellprice4_ = 0;
  clear_has_sellprice4();
}
inline ::google::protobuf::int32 mREALQDCACHELONG::sellprice4() const {
  return sellprice4_;
}
inline void mREALQDCACHELONG::set_sellprice4(::google::protobuf::int32 value) {
  set_has_sellprice4();
  sellprice4_ = value;
}

// required int32 SELLPRICE5 = 20;
inline bool mREALQDCACHELONG::has_sellprice5() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void mREALQDCACHELONG::set_has_sellprice5() {
  _has_bits_[0] |= 0x00080000u;
}
inline void mREALQDCACHELONG::clear_has_sellprice5() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void mREALQDCACHELONG::clear_sellprice5() {
  sellprice5_ = 0;
  clear_has_sellprice5();
}
inline ::google::protobuf::int32 mREALQDCACHELONG::sellprice5() const {
  return sellprice5_;
}
inline void mREALQDCACHELONG::set_sellprice5(::google::protobuf::int32 value) {
  set_has_sellprice5();
  sellprice5_ = value;
}

// required double SELLVOL1 = 21;
inline bool mREALQDCACHELONG::has_sellvol1() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void mREALQDCACHELONG::set_has_sellvol1() {
  _has_bits_[0] |= 0x00100000u;
}
inline void mREALQDCACHELONG::clear_has_sellvol1() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void mREALQDCACHELONG::clear_sellvol1() {
  sellvol1_ = 0;
  clear_has_sellvol1();
}
inline double mREALQDCACHELONG::sellvol1() const {
  return sellvol1_;
}
inline void mREALQDCACHELONG::set_sellvol1(double value) {
  set_has_sellvol1();
  sellvol1_ = value;
}

// required double SELLVOL2 = 22;
inline bool mREALQDCACHELONG::has_sellvol2() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void mREALQDCACHELONG::set_has_sellvol2() {
  _has_bits_[0] |= 0x00200000u;
}
inline void mREALQDCACHELONG::clear_has_sellvol2() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void mREALQDCACHELONG::clear_sellvol2() {
  sellvol2_ = 0;
  clear_has_sellvol2();
}
inline double mREALQDCACHELONG::sellvol2() const {
  return sellvol2_;
}
inline void mREALQDCACHELONG::set_sellvol2(double value) {
  set_has_sellvol2();
  sellvol2_ = value;
}

// required double SELLVOL3 = 23;
inline bool mREALQDCACHELONG::has_sellvol3() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void mREALQDCACHELONG::set_has_sellvol3() {
  _has_bits_[0] |= 0x00400000u;
}
inline void mREALQDCACHELONG::clear_has_sellvol3() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void mREALQDCACHELONG::clear_sellvol3() {
  sellvol3_ = 0;
  clear_has_sellvol3();
}
inline double mREALQDCACHELONG::sellvol3() const {
  return sellvol3_;
}
inline void mREALQDCACHELONG::set_sellvol3(double value) {
  set_has_sellvol3();
  sellvol3_ = value;
}

// required double SELLVOL4 = 24;
inline bool mREALQDCACHELONG::has_sellvol4() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void mREALQDCACHELONG::set_has_sellvol4() {
  _has_bits_[0] |= 0x00800000u;
}
inline void mREALQDCACHELONG::clear_has_sellvol4() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void mREALQDCACHELONG::clear_sellvol4() {
  sellvol4_ = 0;
  clear_has_sellvol4();
}
inline double mREALQDCACHELONG::sellvol4() const {
  return sellvol4_;
}
inline void mREALQDCACHELONG::set_sellvol4(double value) {
  set_has_sellvol4();
  sellvol4_ = value;
}

// required double SELLVOL5 = 25;
inline bool mREALQDCACHELONG::has_sellvol5() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void mREALQDCACHELONG::set_has_sellvol5() {
  _has_bits_[0] |= 0x01000000u;
}
inline void mREALQDCACHELONG::clear_has_sellvol5() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void mREALQDCACHELONG::clear_sellvol5() {
  sellvol5_ = 0;
  clear_has_sellvol5();
}
inline double mREALQDCACHELONG::sellvol5() const {
  return sellvol5_;
}
inline void mREALQDCACHELONG::set_sellvol5(double value) {
  set_has_sellvol5();
  sellvol5_ = value;
}

// required double VOL = 26;
inline bool mREALQDCACHELONG::has_vol() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void mREALQDCACHELONG::set_has_vol() {
  _has_bits_[0] |= 0x02000000u;
}
inline void mREALQDCACHELONG::clear_has_vol() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void mREALQDCACHELONG::clear_vol() {
  vol_ = 0;
  clear_has_vol();
}
inline double mREALQDCACHELONG::vol() const {
  return vol_;
}
inline void mREALQDCACHELONG::set_vol(double value) {
  set_has_vol();
  vol_ = value;
}

// required double AMOUT = 27;
inline bool mREALQDCACHELONG::has_amout() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void mREALQDCACHELONG::set_has_amout() {
  _has_bits_[0] |= 0x04000000u;
}
inline void mREALQDCACHELONG::clear_has_amout() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void mREALQDCACHELONG::clear_amout() {
  amout_ = 0;
  clear_has_amout();
}
inline double mREALQDCACHELONG::amout() const {
  return amout_;
}
inline void mREALQDCACHELONG::set_amout(double value) {
  set_has_amout();
  amout_ = value;
}

// -------------------------------------------------------------------

// mQDCACHE

// required int32 CURRENT = 1;
inline bool mQDCACHE::has_current() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mQDCACHE::set_has_current() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mQDCACHE::clear_has_current() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mQDCACHE::clear_current() {
  current_ = 0;
  clear_has_current();
}
inline ::google::protobuf::int32 mQDCACHE::current() const {
  return current_;
}
inline void mQDCACHE::set_current(::google::protobuf::int32 value) {
  set_has_current();
  current_ = value;
}

// required int32 PRECLOSE = 2;
inline bool mQDCACHE::has_preclose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mQDCACHE::set_has_preclose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mQDCACHE::clear_has_preclose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mQDCACHE::clear_preclose() {
  preclose_ = 0;
  clear_has_preclose();
}
inline ::google::protobuf::int32 mQDCACHE::preclose() const {
  return preclose_;
}
inline void mQDCACHE::set_preclose(::google::protobuf::int32 value) {
  set_has_preclose();
  preclose_ = value;
}

// required int32 OPEN = 3;
inline bool mQDCACHE::has_open() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mQDCACHE::set_has_open() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mQDCACHE::clear_has_open() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mQDCACHE::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline ::google::protobuf::int32 mQDCACHE::open() const {
  return open_;
}
inline void mQDCACHE::set_open(::google::protobuf::int32 value) {
  set_has_open();
  open_ = value;
}

// required int32 HIGH = 4;
inline bool mQDCACHE::has_high() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mQDCACHE::set_has_high() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mQDCACHE::clear_has_high() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mQDCACHE::clear_high() {
  high_ = 0;
  clear_has_high();
}
inline ::google::protobuf::int32 mQDCACHE::high() const {
  return high_;
}
inline void mQDCACHE::set_high(::google::protobuf::int32 value) {
  set_has_high();
  high_ = value;
}

// required int32 LOW = 5;
inline bool mQDCACHE::has_low() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mQDCACHE::set_has_low() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mQDCACHE::clear_has_low() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mQDCACHE::clear_low() {
  low_ = 0;
  clear_has_low();
}
inline ::google::protobuf::int32 mQDCACHE::low() const {
  return low_;
}
inline void mQDCACHE::set_low(::google::protobuf::int32 value) {
  set_has_low();
  low_ = value;
}

// required int32 BUYPRICE1 = 6;
inline bool mQDCACHE::has_buyprice1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mQDCACHE::set_has_buyprice1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mQDCACHE::clear_has_buyprice1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mQDCACHE::clear_buyprice1() {
  buyprice1_ = 0;
  clear_has_buyprice1();
}
inline ::google::protobuf::int32 mQDCACHE::buyprice1() const {
  return buyprice1_;
}
inline void mQDCACHE::set_buyprice1(::google::protobuf::int32 value) {
  set_has_buyprice1();
  buyprice1_ = value;
}

// required int32 BUYPRICE2 = 7;
inline bool mQDCACHE::has_buyprice2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mQDCACHE::set_has_buyprice2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mQDCACHE::clear_has_buyprice2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mQDCACHE::clear_buyprice2() {
  buyprice2_ = 0;
  clear_has_buyprice2();
}
inline ::google::protobuf::int32 mQDCACHE::buyprice2() const {
  return buyprice2_;
}
inline void mQDCACHE::set_buyprice2(::google::protobuf::int32 value) {
  set_has_buyprice2();
  buyprice2_ = value;
}

// required int32 BUYPRICE3 = 8;
inline bool mQDCACHE::has_buyprice3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mQDCACHE::set_has_buyprice3() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mQDCACHE::clear_has_buyprice3() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mQDCACHE::clear_buyprice3() {
  buyprice3_ = 0;
  clear_has_buyprice3();
}
inline ::google::protobuf::int32 mQDCACHE::buyprice3() const {
  return buyprice3_;
}
inline void mQDCACHE::set_buyprice3(::google::protobuf::int32 value) {
  set_has_buyprice3();
  buyprice3_ = value;
}

// required int32 BUYPRICE4 = 9;
inline bool mQDCACHE::has_buyprice4() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void mQDCACHE::set_has_buyprice4() {
  _has_bits_[0] |= 0x00000100u;
}
inline void mQDCACHE::clear_has_buyprice4() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void mQDCACHE::clear_buyprice4() {
  buyprice4_ = 0;
  clear_has_buyprice4();
}
inline ::google::protobuf::int32 mQDCACHE::buyprice4() const {
  return buyprice4_;
}
inline void mQDCACHE::set_buyprice4(::google::protobuf::int32 value) {
  set_has_buyprice4();
  buyprice4_ = value;
}

// required int32 BUYPRICE5 = 10;
inline bool mQDCACHE::has_buyprice5() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void mQDCACHE::set_has_buyprice5() {
  _has_bits_[0] |= 0x00000200u;
}
inline void mQDCACHE::clear_has_buyprice5() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void mQDCACHE::clear_buyprice5() {
  buyprice5_ = 0;
  clear_has_buyprice5();
}
inline ::google::protobuf::int32 mQDCACHE::buyprice5() const {
  return buyprice5_;
}
inline void mQDCACHE::set_buyprice5(::google::protobuf::int32 value) {
  set_has_buyprice5();
  buyprice5_ = value;
}

// required double BUYVOL1 = 11;
inline bool mQDCACHE::has_buyvol1() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void mQDCACHE::set_has_buyvol1() {
  _has_bits_[0] |= 0x00000400u;
}
inline void mQDCACHE::clear_has_buyvol1() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void mQDCACHE::clear_buyvol1() {
  buyvol1_ = 0;
  clear_has_buyvol1();
}
inline double mQDCACHE::buyvol1() const {
  return buyvol1_;
}
inline void mQDCACHE::set_buyvol1(double value) {
  set_has_buyvol1();
  buyvol1_ = value;
}

// required double BUYVOL2 = 12;
inline bool mQDCACHE::has_buyvol2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void mQDCACHE::set_has_buyvol2() {
  _has_bits_[0] |= 0x00000800u;
}
inline void mQDCACHE::clear_has_buyvol2() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void mQDCACHE::clear_buyvol2() {
  buyvol2_ = 0;
  clear_has_buyvol2();
}
inline double mQDCACHE::buyvol2() const {
  return buyvol2_;
}
inline void mQDCACHE::set_buyvol2(double value) {
  set_has_buyvol2();
  buyvol2_ = value;
}

// required double BUYVOL3 = 13;
inline bool mQDCACHE::has_buyvol3() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void mQDCACHE::set_has_buyvol3() {
  _has_bits_[0] |= 0x00001000u;
}
inline void mQDCACHE::clear_has_buyvol3() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void mQDCACHE::clear_buyvol3() {
  buyvol3_ = 0;
  clear_has_buyvol3();
}
inline double mQDCACHE::buyvol3() const {
  return buyvol3_;
}
inline void mQDCACHE::set_buyvol3(double value) {
  set_has_buyvol3();
  buyvol3_ = value;
}

// required double BUYVOL4 = 14;
inline bool mQDCACHE::has_buyvol4() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void mQDCACHE::set_has_buyvol4() {
  _has_bits_[0] |= 0x00002000u;
}
inline void mQDCACHE::clear_has_buyvol4() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void mQDCACHE::clear_buyvol4() {
  buyvol4_ = 0;
  clear_has_buyvol4();
}
inline double mQDCACHE::buyvol4() const {
  return buyvol4_;
}
inline void mQDCACHE::set_buyvol4(double value) {
  set_has_buyvol4();
  buyvol4_ = value;
}

// required double BUYVOL5 = 15;
inline bool mQDCACHE::has_buyvol5() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void mQDCACHE::set_has_buyvol5() {
  _has_bits_[0] |= 0x00004000u;
}
inline void mQDCACHE::clear_has_buyvol5() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void mQDCACHE::clear_buyvol5() {
  buyvol5_ = 0;
  clear_has_buyvol5();
}
inline double mQDCACHE::buyvol5() const {
  return buyvol5_;
}
inline void mQDCACHE::set_buyvol5(double value) {
  set_has_buyvol5();
  buyvol5_ = value;
}

// required int32 SELLPRICE1 = 16;
inline bool mQDCACHE::has_sellprice1() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void mQDCACHE::set_has_sellprice1() {
  _has_bits_[0] |= 0x00008000u;
}
inline void mQDCACHE::clear_has_sellprice1() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void mQDCACHE::clear_sellprice1() {
  sellprice1_ = 0;
  clear_has_sellprice1();
}
inline ::google::protobuf::int32 mQDCACHE::sellprice1() const {
  return sellprice1_;
}
inline void mQDCACHE::set_sellprice1(::google::protobuf::int32 value) {
  set_has_sellprice1();
  sellprice1_ = value;
}

// required int32 SELLPRICE2 = 17;
inline bool mQDCACHE::has_sellprice2() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void mQDCACHE::set_has_sellprice2() {
  _has_bits_[0] |= 0x00010000u;
}
inline void mQDCACHE::clear_has_sellprice2() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void mQDCACHE::clear_sellprice2() {
  sellprice2_ = 0;
  clear_has_sellprice2();
}
inline ::google::protobuf::int32 mQDCACHE::sellprice2() const {
  return sellprice2_;
}
inline void mQDCACHE::set_sellprice2(::google::protobuf::int32 value) {
  set_has_sellprice2();
  sellprice2_ = value;
}

// required int32 SELLPRICE3 = 18;
inline bool mQDCACHE::has_sellprice3() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void mQDCACHE::set_has_sellprice3() {
  _has_bits_[0] |= 0x00020000u;
}
inline void mQDCACHE::clear_has_sellprice3() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void mQDCACHE::clear_sellprice3() {
  sellprice3_ = 0;
  clear_has_sellprice3();
}
inline ::google::protobuf::int32 mQDCACHE::sellprice3() const {
  return sellprice3_;
}
inline void mQDCACHE::set_sellprice3(::google::protobuf::int32 value) {
  set_has_sellprice3();
  sellprice3_ = value;
}

// required int32 SELLPRICE4 = 19;
inline bool mQDCACHE::has_sellprice4() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void mQDCACHE::set_has_sellprice4() {
  _has_bits_[0] |= 0x00040000u;
}
inline void mQDCACHE::clear_has_sellprice4() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void mQDCACHE::clear_sellprice4() {
  sellprice4_ = 0;
  clear_has_sellprice4();
}
inline ::google::protobuf::int32 mQDCACHE::sellprice4() const {
  return sellprice4_;
}
inline void mQDCACHE::set_sellprice4(::google::protobuf::int32 value) {
  set_has_sellprice4();
  sellprice4_ = value;
}

// required int32 SELLPRICE5 = 20;
inline bool mQDCACHE::has_sellprice5() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void mQDCACHE::set_has_sellprice5() {
  _has_bits_[0] |= 0x00080000u;
}
inline void mQDCACHE::clear_has_sellprice5() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void mQDCACHE::clear_sellprice5() {
  sellprice5_ = 0;
  clear_has_sellprice5();
}
inline ::google::protobuf::int32 mQDCACHE::sellprice5() const {
  return sellprice5_;
}
inline void mQDCACHE::set_sellprice5(::google::protobuf::int32 value) {
  set_has_sellprice5();
  sellprice5_ = value;
}

// required double SELLVOL1 = 21;
inline bool mQDCACHE::has_sellvol1() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void mQDCACHE::set_has_sellvol1() {
  _has_bits_[0] |= 0x00100000u;
}
inline void mQDCACHE::clear_has_sellvol1() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void mQDCACHE::clear_sellvol1() {
  sellvol1_ = 0;
  clear_has_sellvol1();
}
inline double mQDCACHE::sellvol1() const {
  return sellvol1_;
}
inline void mQDCACHE::set_sellvol1(double value) {
  set_has_sellvol1();
  sellvol1_ = value;
}

// required double SELLVOL2 = 22;
inline bool mQDCACHE::has_sellvol2() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void mQDCACHE::set_has_sellvol2() {
  _has_bits_[0] |= 0x00200000u;
}
inline void mQDCACHE::clear_has_sellvol2() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void mQDCACHE::clear_sellvol2() {
  sellvol2_ = 0;
  clear_has_sellvol2();
}
inline double mQDCACHE::sellvol2() const {
  return sellvol2_;
}
inline void mQDCACHE::set_sellvol2(double value) {
  set_has_sellvol2();
  sellvol2_ = value;
}

// required double SELLVOL3 = 23;
inline bool mQDCACHE::has_sellvol3() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void mQDCACHE::set_has_sellvol3() {
  _has_bits_[0] |= 0x00400000u;
}
inline void mQDCACHE::clear_has_sellvol3() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void mQDCACHE::clear_sellvol3() {
  sellvol3_ = 0;
  clear_has_sellvol3();
}
inline double mQDCACHE::sellvol3() const {
  return sellvol3_;
}
inline void mQDCACHE::set_sellvol3(double value) {
  set_has_sellvol3();
  sellvol3_ = value;
}

// required double SELLVOL4 = 24;
inline bool mQDCACHE::has_sellvol4() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void mQDCACHE::set_has_sellvol4() {
  _has_bits_[0] |= 0x00800000u;
}
inline void mQDCACHE::clear_has_sellvol4() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void mQDCACHE::clear_sellvol4() {
  sellvol4_ = 0;
  clear_has_sellvol4();
}
inline double mQDCACHE::sellvol4() const {
  return sellvol4_;
}
inline void mQDCACHE::set_sellvol4(double value) {
  set_has_sellvol4();
  sellvol4_ = value;
}

// required double SELLVOL5 = 25;
inline bool mQDCACHE::has_sellvol5() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void mQDCACHE::set_has_sellvol5() {
  _has_bits_[0] |= 0x01000000u;
}
inline void mQDCACHE::clear_has_sellvol5() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void mQDCACHE::clear_sellvol5() {
  sellvol5_ = 0;
  clear_has_sellvol5();
}
inline double mQDCACHE::sellvol5() const {
  return sellvol5_;
}
inline void mQDCACHE::set_sellvol5(double value) {
  set_has_sellvol5();
  sellvol5_ = value;
}

// required double VOL = 26;
inline bool mQDCACHE::has_vol() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void mQDCACHE::set_has_vol() {
  _has_bits_[0] |= 0x02000000u;
}
inline void mQDCACHE::clear_has_vol() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void mQDCACHE::clear_vol() {
  vol_ = 0;
  clear_has_vol();
}
inline double mQDCACHE::vol() const {
  return vol_;
}
inline void mQDCACHE::set_vol(double value) {
  set_has_vol();
  vol_ = value;
}

// required double AMOUT = 27;
inline bool mQDCACHE::has_amout() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void mQDCACHE::set_has_amout() {
  _has_bits_[0] |= 0x04000000u;
}
inline void mQDCACHE::clear_has_amout() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void mQDCACHE::clear_amout() {
  amout_ = 0;
  clear_has_amout();
}
inline double mQDCACHE::amout() const {
  return amout_;
}
inline void mQDCACHE::set_amout(double value) {
  set_has_amout();
  amout_ = value;
}

// required int32 SID = 28;
inline bool mQDCACHE::has_sid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void mQDCACHE::set_has_sid() {
  _has_bits_[0] |= 0x08000000u;
}
inline void mQDCACHE::clear_has_sid() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void mQDCACHE::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
inline ::google::protobuf::int32 mQDCACHE::sid() const {
  return sid_;
}
inline void mQDCACHE::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
}

// required int32 Exchange = 29;
inline bool mQDCACHE::has_exchange() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void mQDCACHE::set_has_exchange() {
  _has_bits_[0] |= 0x10000000u;
}
inline void mQDCACHE::clear_has_exchange() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void mQDCACHE::clear_exchange() {
  exchange_ = 0;
  clear_has_exchange();
}
inline ::google::protobuf::int32 mQDCACHE::exchange() const {
  return exchange_;
}
inline void mQDCACHE::set_exchange(::google::protobuf::int32 value) {
  set_has_exchange();
  exchange_ = value;
}

// required string Name = 30;
inline bool mQDCACHE::has_name() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void mQDCACHE::set_has_name() {
  _has_bits_[0] |= 0x20000000u;
}
inline void mQDCACHE::clear_has_name() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void mQDCACHE::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& mQDCACHE::name() const {
  return *name_;
}
inline void mQDCACHE::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void mQDCACHE::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void mQDCACHE::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mQDCACHE::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* mQDCACHE::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 Time = 31;
inline bool mQDCACHE::has_time() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void mQDCACHE::set_has_time() {
  _has_bits_[0] |= 0x40000000u;
}
inline void mQDCACHE::clear_has_time() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void mQDCACHE::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 mQDCACHE::time() const {
  return time_;
}
inline void mQDCACHE::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// mREALQDINFO

// required int32 SID = 1;
inline bool mREALQDINFO::has_sid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mREALQDINFO::set_has_sid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mREALQDINFO::clear_has_sid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mREALQDINFO::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
inline ::google::protobuf::int32 mREALQDINFO::sid() const {
  return sid_;
}
inline void mREALQDINFO::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
}

// required int32 Exchange = 2;
inline bool mREALQDINFO::has_exchange() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mREALQDINFO::set_has_exchange() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mREALQDINFO::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mREALQDINFO::clear_exchange() {
  exchange_ = 0;
  clear_has_exchange();
}
inline ::google::protobuf::int32 mREALQDINFO::exchange() const {
  return exchange_;
}
inline void mREALQDINFO::set_exchange(::google::protobuf::int32 value) {
  set_has_exchange();
  exchange_ = value;
}

// required string Name = 3;
inline bool mREALQDINFO::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mREALQDINFO::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mREALQDINFO::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mREALQDINFO::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& mREALQDINFO::name() const {
  return *name_;
}
inline void mREALQDINFO::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void mREALQDINFO::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void mREALQDINFO::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mREALQDINFO::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* mREALQDINFO::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 PRECLOSE = 4;
inline bool mREALQDINFO::has_preclose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mREALQDINFO::set_has_preclose() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mREALQDINFO::clear_has_preclose() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mREALQDINFO::clear_preclose() {
  preclose_ = 0;
  clear_has_preclose();
}
inline ::google::protobuf::int32 mREALQDINFO::preclose() const {
  return preclose_;
}
inline void mREALQDINFO::set_preclose(::google::protobuf::int32 value) {
  set_has_preclose();
  preclose_ = value;
}

// required int32 OPEN = 5;
inline bool mREALQDINFO::has_open() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mREALQDINFO::set_has_open() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mREALQDINFO::clear_has_open() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mREALQDINFO::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline ::google::protobuf::int32 mREALQDINFO::open() const {
  return open_;
}
inline void mREALQDINFO::set_open(::google::protobuf::int32 value) {
  set_has_open();
  open_ = value;
}

// -------------------------------------------------------------------

// mREALQDLONGBLOCK

// required int32 Time = 1;
inline bool mREALQDLONGBLOCK::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mREALQDLONGBLOCK::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mREALQDLONGBLOCK::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mREALQDLONGBLOCK::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 mREALQDLONGBLOCK::time() const {
  return time_;
}
inline void mREALQDLONGBLOCK::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// required int32 TimeStamp = 2;
inline bool mREALQDLONGBLOCK::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mREALQDLONGBLOCK::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mREALQDLONGBLOCK::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mREALQDLONGBLOCK::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 mREALQDLONGBLOCK::timestamp() const {
  return timestamp_;
}
inline void mREALQDLONGBLOCK::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// repeated .SATDataPB.mREALQDCACHELONG LongData = 3;
inline int mREALQDLONGBLOCK::longdata_size() const {
  return longdata_.size();
}
inline void mREALQDLONGBLOCK::clear_longdata() {
  longdata_.Clear();
}
inline const ::SATDataPB::mREALQDCACHELONG& mREALQDLONGBLOCK::longdata(int index) const {
  return longdata_.Get(index);
}
inline ::SATDataPB::mREALQDCACHELONG* mREALQDLONGBLOCK::mutable_longdata(int index) {
  return longdata_.Mutable(index);
}
inline ::SATDataPB::mREALQDCACHELONG* mREALQDLONGBLOCK::add_longdata() {
  return longdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SATDataPB::mREALQDCACHELONG >&
mREALQDLONGBLOCK::longdata() const {
  return longdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::SATDataPB::mREALQDCACHELONG >*
mREALQDLONGBLOCK::mutable_longdata() {
  return &longdata_;
}

// -------------------------------------------------------------------

// mREALQDLONGCACHE

// required int32 IsUsed = 1;
inline bool mREALQDLONGCACHE::has_isused() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mREALQDLONGCACHE::set_has_isused() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mREALQDLONGCACHE::clear_has_isused() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mREALQDLONGCACHE::clear_isused() {
  isused_ = 0;
  clear_has_isused();
}
inline ::google::protobuf::int32 mREALQDLONGCACHE::isused() const {
  return isused_;
}
inline void mREALQDLONGCACHE::set_isused(::google::protobuf::int32 value) {
  set_has_isused();
  isused_ = value;
}

// required int32 Date = 2;
inline bool mREALQDLONGCACHE::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mREALQDLONGCACHE::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mREALQDLONGCACHE::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mREALQDLONGCACHE::clear_date() {
  date_ = 0;
  clear_has_date();
}
inline ::google::protobuf::int32 mREALQDLONGCACHE::date() const {
  return date_;
}
inline void mREALQDLONGCACHE::set_date(::google::protobuf::int32 value) {
  set_has_date();
  date_ = value;
}

// required int32 SecNum = 3;
inline bool mREALQDLONGCACHE::has_secnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mREALQDLONGCACHE::set_has_secnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mREALQDLONGCACHE::clear_has_secnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mREALQDLONGCACHE::clear_secnum() {
  secnum_ = 0;
  clear_has_secnum();
}
inline ::google::protobuf::int32 mREALQDLONGCACHE::secnum() const {
  return secnum_;
}
inline void mREALQDLONGCACHE::set_secnum(::google::protobuf::int32 value) {
  set_has_secnum();
  secnum_ = value;
}

// required .SATDataPB.mREALQDLONGBLOCK DataBlock = 4;
inline bool mREALQDLONGCACHE::has_datablock() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mREALQDLONGCACHE::set_has_datablock() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mREALQDLONGCACHE::clear_has_datablock() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mREALQDLONGCACHE::clear_datablock() {
  if (datablock_ != NULL) datablock_->::SATDataPB::mREALQDLONGBLOCK::Clear();
  clear_has_datablock();
}
inline const ::SATDataPB::mREALQDLONGBLOCK& mREALQDLONGCACHE::datablock() const {
  return datablock_ != NULL ? *datablock_ : *default_instance_->datablock_;
}
inline ::SATDataPB::mREALQDLONGBLOCK* mREALQDLONGCACHE::mutable_datablock() {
  set_has_datablock();
  if (datablock_ == NULL) datablock_ = new ::SATDataPB::mREALQDLONGBLOCK;
  return datablock_;
}
inline ::SATDataPB::mREALQDLONGBLOCK* mREALQDLONGCACHE::release_datablock() {
  clear_has_datablock();
  ::SATDataPB::mREALQDLONGBLOCK* temp = datablock_;
  datablock_ = NULL;
  return temp;
}

// repeated .SATDataPB.mREALQDINFO SecInfo = 5;
inline int mREALQDLONGCACHE::secinfo_size() const {
  return secinfo_.size();
}
inline void mREALQDLONGCACHE::clear_secinfo() {
  secinfo_.Clear();
}
inline const ::SATDataPB::mREALQDINFO& mREALQDLONGCACHE::secinfo(int index) const {
  return secinfo_.Get(index);
}
inline ::SATDataPB::mREALQDINFO* mREALQDLONGCACHE::mutable_secinfo(int index) {
  return secinfo_.Mutable(index);
}
inline ::SATDataPB::mREALQDINFO* mREALQDLONGCACHE::add_secinfo() {
  return secinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SATDataPB::mREALQDINFO >&
mREALQDLONGCACHE::secinfo() const {
  return secinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::SATDataPB::mREALQDINFO >*
mREALQDLONGCACHE::mutable_secinfo() {
  return &secinfo_;
}

// -------------------------------------------------------------------

// mREQUEST

// required int32 SID = 1;
inline bool mREQUEST::has_sid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mREQUEST::set_has_sid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mREQUEST::clear_has_sid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mREQUEST::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
inline ::google::protobuf::int32 mREQUEST::sid() const {
  return sid_;
}
inline void mREQUEST::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
}

// required int32 Exchange = 2;
inline bool mREQUEST::has_exchange() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mREQUEST::set_has_exchange() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mREQUEST::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mREQUEST::clear_exchange() {
  exchange_ = 0;
  clear_has_exchange();
}
inline ::google::protobuf::int32 mREQUEST::exchange() const {
  return exchange_;
}
inline void mREQUEST::set_exchange(::google::protobuf::int32 value) {
  set_has_exchange();
  exchange_ = value;
}

// required int32 StartDate = 3;
inline bool mREQUEST::has_startdate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mREQUEST::set_has_startdate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mREQUEST::clear_has_startdate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mREQUEST::clear_startdate() {
  startdate_ = 0;
  clear_has_startdate();
}
inline ::google::protobuf::int32 mREQUEST::startdate() const {
  return startdate_;
}
inline void mREQUEST::set_startdate(::google::protobuf::int32 value) {
  set_has_startdate();
  startdate_ = value;
}

// required int32 EndDate = 4;
inline bool mREQUEST::has_enddate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mREQUEST::set_has_enddate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mREQUEST::clear_has_enddate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mREQUEST::clear_enddate() {
  enddate_ = 0;
  clear_has_enddate();
}
inline ::google::protobuf::int32 mREQUEST::enddate() const {
  return enddate_;
}
inline void mREQUEST::set_enddate(::google::protobuf::int32 value) {
  set_has_enddate();
  enddate_ = value;
}

// -------------------------------------------------------------------

// mDailyQuote

// required int32 SID = 1;
inline bool mDailyQuote::has_sid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mDailyQuote::set_has_sid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mDailyQuote::clear_has_sid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mDailyQuote::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
inline ::google::protobuf::int32 mDailyQuote::sid() const {
  return sid_;
}
inline void mDailyQuote::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
}

// required int32 Date = 2;
inline bool mDailyQuote::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mDailyQuote::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mDailyQuote::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mDailyQuote::clear_date() {
  date_ = 0;
  clear_has_date();
}
inline ::google::protobuf::int32 mDailyQuote::date() const {
  return date_;
}
inline void mDailyQuote::set_date(::google::protobuf::int32 value) {
  set_has_date();
  date_ = value;
}

// required int32 PreClose = 3;
inline bool mDailyQuote::has_preclose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mDailyQuote::set_has_preclose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mDailyQuote::clear_has_preclose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mDailyQuote::clear_preclose() {
  preclose_ = 0;
  clear_has_preclose();
}
inline ::google::protobuf::int32 mDailyQuote::preclose() const {
  return preclose_;
}
inline void mDailyQuote::set_preclose(::google::protobuf::int32 value) {
  set_has_preclose();
  preclose_ = value;
}

// required int32 Open = 4;
inline bool mDailyQuote::has_open() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mDailyQuote::set_has_open() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mDailyQuote::clear_has_open() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mDailyQuote::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline ::google::protobuf::int32 mDailyQuote::open() const {
  return open_;
}
inline void mDailyQuote::set_open(::google::protobuf::int32 value) {
  set_has_open();
  open_ = value;
}

// required int32 High = 5;
inline bool mDailyQuote::has_high() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mDailyQuote::set_has_high() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mDailyQuote::clear_has_high() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mDailyQuote::clear_high() {
  high_ = 0;
  clear_has_high();
}
inline ::google::protobuf::int32 mDailyQuote::high() const {
  return high_;
}
inline void mDailyQuote::set_high(::google::protobuf::int32 value) {
  set_has_high();
  high_ = value;
}

// required int32 Low = 6;
inline bool mDailyQuote::has_low() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mDailyQuote::set_has_low() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mDailyQuote::clear_has_low() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mDailyQuote::clear_low() {
  low_ = 0;
  clear_has_low();
}
inline ::google::protobuf::int32 mDailyQuote::low() const {
  return low_;
}
inline void mDailyQuote::set_low(::google::protobuf::int32 value) {
  set_has_low();
  low_ = value;
}

// required int32 Close = 7;
inline bool mDailyQuote::has_close() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mDailyQuote::set_has_close() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mDailyQuote::clear_has_close() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mDailyQuote::clear_close() {
  close_ = 0;
  clear_has_close();
}
inline ::google::protobuf::int32 mDailyQuote::close() const {
  return close_;
}
inline void mDailyQuote::set_close(::google::protobuf::int32 value) {
  set_has_close();
  close_ = value;
}

// required double Volume = 8;
inline bool mDailyQuote::has_volume() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mDailyQuote::set_has_volume() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mDailyQuote::clear_has_volume() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mDailyQuote::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
inline double mDailyQuote::volume() const {
  return volume_;
}
inline void mDailyQuote::set_volume(double value) {
  set_has_volume();
  volume_ = value;
}

// required double Amount = 9;
inline bool mDailyQuote::has_amount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void mDailyQuote::set_has_amount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void mDailyQuote::clear_has_amount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void mDailyQuote::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline double mDailyQuote::amount() const {
  return amount_;
}
inline void mDailyQuote::set_amount(double value) {
  set_has_amount();
  amount_ = value;
}

// required double AdjustingFactor = 10;
inline bool mDailyQuote::has_adjustingfactor() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void mDailyQuote::set_has_adjustingfactor() {
  _has_bits_[0] |= 0x00000200u;
}
inline void mDailyQuote::clear_has_adjustingfactor() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void mDailyQuote::clear_adjustingfactor() {
  adjustingfactor_ = 0;
  clear_has_adjustingfactor();
}
inline double mDailyQuote::adjustingfactor() const {
  return adjustingfactor_;
}
inline void mDailyQuote::set_adjustingfactor(double value) {
  set_has_adjustingfactor();
  adjustingfactor_ = value;
}

// required double Return = 11;
inline bool mDailyQuote::has_return_() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void mDailyQuote::set_has_return_() {
  _has_bits_[0] |= 0x00000400u;
}
inline void mDailyQuote::clear_has_return_() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void mDailyQuote::clear_return_() {
  return__ = 0;
  clear_has_return_();
}
inline double mDailyQuote::return_() const {
  return return__;
}
inline void mDailyQuote::set_return_(double value) {
  set_has_return_();
  return__ = value;
}

// -------------------------------------------------------------------

// mFSP

// required int32 iSID = 1;
inline bool mFSP::has_isid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mFSP::set_has_isid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mFSP::clear_has_isid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mFSP::clear_isid() {
  isid_ = 0;
  clear_has_isid();
}
inline ::google::protobuf::int32 mFSP::isid() const {
  return isid_;
}
inline void mFSP::set_isid(::google::protobuf::int32 value) {
  set_has_isid();
  isid_ = value;
}

// required int32 iDDJ = 2;
inline bool mFSP::has_iddj() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mFSP::set_has_iddj() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mFSP::clear_has_iddj() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mFSP::clear_iddj() {
  iddj_ = 0;
  clear_has_iddj();
}
inline ::google::protobuf::int32 mFSP::iddj() const {
  return iddj_;
}
inline void mFSP::set_iddj(::google::protobuf::int32 value) {
  set_has_iddj();
  iddj_ = value;
}

// required int32 iDCQ = 3;
inline bool mFSP::has_idcq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mFSP::set_has_idcq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mFSP::clear_has_idcq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mFSP::clear_idcq() {
  idcq_ = 0;
  clear_has_idcq();
}
inline ::google::protobuf::int32 mFSP::idcq() const {
  return idcq_;
}
inline void mFSP::set_idcq(::google::protobuf::int32 value) {
  set_has_idcq();
  idcq_ = value;
}

// required double dPGS = 4;
inline bool mFSP::has_dpgs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mFSP::set_has_dpgs() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mFSP::clear_has_dpgs() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mFSP::clear_dpgs() {
  dpgs_ = 0;
  clear_has_dpgs();
}
inline double mFSP::dpgs() const {
  return dpgs_;
}
inline void mFSP::set_dpgs(double value) {
  set_has_dpgs();
  dpgs_ = value;
}

// required double dPGJ = 5;
inline bool mFSP::has_dpgj() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mFSP::set_has_dpgj() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mFSP::clear_has_dpgj() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mFSP::clear_dpgj() {
  dpgj_ = 0;
  clear_has_dpgj();
}
inline double mFSP::dpgj() const {
  return dpgj_;
}
inline void mFSP::set_dpgj(double value) {
  set_has_dpgj();
  dpgj_ = value;
}

// required double dSGS = 6;
inline bool mFSP::has_dsgs() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mFSP::set_has_dsgs() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mFSP::clear_has_dsgs() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mFSP::clear_dsgs() {
  dsgs_ = 0;
  clear_has_dsgs();
}
inline double mFSP::dsgs() const {
  return dsgs_;
}
inline void mFSP::set_dsgs(double value) {
  set_has_dsgs();
  dsgs_ = value;
}

// required double dPXS = 7;
inline bool mFSP::has_dpxs() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mFSP::set_has_dpxs() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mFSP::clear_has_dpxs() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mFSP::clear_dpxs() {
  dpxs_ = 0;
  clear_has_dpxs();
}
inline double mFSP::dpxs() const {
  return dpxs_;
}
inline void mFSP::set_dpxs(double value) {
  set_has_dpxs();
  dpxs_ = value;
}

// required double dZZS = 8;
inline bool mFSP::has_dzzs() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mFSP::set_has_dzzs() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mFSP::clear_has_dzzs() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mFSP::clear_dzzs() {
  dzzs_ = 0;
  clear_has_dzzs();
}
inline double mFSP::dzzs() const {
  return dzzs_;
}
inline void mFSP::set_dzzs(double value) {
  set_has_dzzs();
  dzzs_ = value;
}

// -------------------------------------------------------------------

// QDailyQuote

// repeated .SATDataPB.mDailyQuote qDailyQuote = 1;
inline int QDailyQuote::qdailyquote_size() const {
  return qdailyquote_.size();
}
inline void QDailyQuote::clear_qdailyquote() {
  qdailyquote_.Clear();
}
inline const ::SATDataPB::mDailyQuote& QDailyQuote::qdailyquote(int index) const {
  return qdailyquote_.Get(index);
}
inline ::SATDataPB::mDailyQuote* QDailyQuote::mutable_qdailyquote(int index) {
  return qdailyquote_.Mutable(index);
}
inline ::SATDataPB::mDailyQuote* QDailyQuote::add_qdailyquote() {
  return qdailyquote_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SATDataPB::mDailyQuote >&
QDailyQuote::qdailyquote() const {
  return qdailyquote_;
}
inline ::google::protobuf::RepeatedPtrField< ::SATDataPB::mDailyQuote >*
QDailyQuote::mutable_qdailyquote() {
  return &qdailyquote_;
}

// -------------------------------------------------------------------

// mQDFILEBLOCK

// required int32 dwTime = 1;
inline bool mQDFILEBLOCK::has_dwtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mQDFILEBLOCK::set_has_dwtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mQDFILEBLOCK::clear_has_dwtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mQDFILEBLOCK::clear_dwtime() {
  dwtime_ = 0;
  clear_has_dwtime();
}
inline ::google::protobuf::int32 mQDFILEBLOCK::dwtime() const {
  return dwtime_;
}
inline void mQDFILEBLOCK::set_dwtime(::google::protobuf::int32 value) {
  set_has_dwtime();
  dwtime_ = value;
}

// required int32 dwTimeStamp = 2;
inline bool mQDFILEBLOCK::has_dwtimestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mQDFILEBLOCK::set_has_dwtimestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mQDFILEBLOCK::clear_has_dwtimestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mQDFILEBLOCK::clear_dwtimestamp() {
  dwtimestamp_ = 0;
  clear_has_dwtimestamp();
}
inline ::google::protobuf::int32 mQDFILEBLOCK::dwtimestamp() const {
  return dwtimestamp_;
}
inline void mQDFILEBLOCK::set_dwtimestamp(::google::protobuf::int32 value) {
  set_has_dwtimestamp();
  dwtimestamp_ = value;
}

// -------------------------------------------------------------------

// QHFData

// repeated .SATDataPB.mQDFILEBLOCK FILEBLOCK = 1;
inline int QHFData::fileblock_size() const {
  return fileblock_.size();
}
inline void QHFData::clear_fileblock() {
  fileblock_.Clear();
}
inline const ::SATDataPB::mQDFILEBLOCK& QHFData::fileblock(int index) const {
  return fileblock_.Get(index);
}
inline ::SATDataPB::mQDFILEBLOCK* QHFData::mutable_fileblock(int index) {
  return fileblock_.Mutable(index);
}
inline ::SATDataPB::mQDFILEBLOCK* QHFData::add_fileblock() {
  return fileblock_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SATDataPB::mQDFILEBLOCK >&
QHFData::fileblock() const {
  return fileblock_;
}
inline ::google::protobuf::RepeatedPtrField< ::SATDataPB::mQDFILEBLOCK >*
QHFData::mutable_fileblock() {
  return &fileblock_;
}

// repeated .SATDataPB.mQDCACHE CACHELONG = 2;
inline int QHFData::cachelong_size() const {
  return cachelong_.size();
}
inline void QHFData::clear_cachelong() {
  cachelong_.Clear();
}
inline const ::SATDataPB::mQDCACHE& QHFData::cachelong(int index) const {
  return cachelong_.Get(index);
}
inline ::SATDataPB::mQDCACHE* QHFData::mutable_cachelong(int index) {
  return cachelong_.Mutable(index);
}
inline ::SATDataPB::mQDCACHE* QHFData::add_cachelong() {
  return cachelong_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SATDataPB::mQDCACHE >&
QHFData::cachelong() const {
  return cachelong_;
}
inline ::google::protobuf::RepeatedPtrField< ::SATDataPB::mQDCACHE >*
QHFData::mutable_cachelong() {
  return &cachelong_;
}

// -------------------------------------------------------------------

// QData

// repeated int32 qDate = 1;
inline int QData::qdate_size() const {
  return qdate_.size();
}
inline void QData::clear_qdate() {
  qdate_.Clear();
}
inline ::google::protobuf::int32 QData::qdate(int index) const {
  return qdate_.Get(index);
}
inline void QData::set_qdate(int index, ::google::protobuf::int32 value) {
  qdate_.Set(index, value);
}
inline void QData::add_qdate(::google::protobuf::int32 value) {
  qdate_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QData::qdate() const {
  return qdate_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QData::mutable_qdate() {
  return &qdate_;
}

// -------------------------------------------------------------------

// QFSP

// repeated .SATDataPB.mFSP qFSP = 1;
inline int QFSP::qfsp_size() const {
  return qfsp_.size();
}
inline void QFSP::clear_qfsp() {
  qfsp_.Clear();
}
inline const ::SATDataPB::mFSP& QFSP::qfsp(int index) const {
  return qfsp_.Get(index);
}
inline ::SATDataPB::mFSP* QFSP::mutable_qfsp(int index) {
  return qfsp_.Mutable(index);
}
inline ::SATDataPB::mFSP* QFSP::add_qfsp() {
  return qfsp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SATDataPB::mFSP >&
QFSP::qfsp() const {
  return qfsp_;
}
inline ::google::protobuf::RepeatedPtrField< ::SATDataPB::mFSP >*
QFSP::mutable_qfsp() {
  return &qfsp_;
}

// -------------------------------------------------------------------

// mQD

// required int32 Date = 1;
inline bool mQD::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mQD::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mQD::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mQD::clear_date() {
  date_ = 0;
  clear_has_date();
}
inline ::google::protobuf::int32 mQD::date() const {
  return date_;
}
inline void mQD::set_date(::google::protobuf::int32 value) {
  set_has_date();
  date_ = value;
}

// required int32 SecNum = 2;
inline bool mQD::has_secnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mQD::set_has_secnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mQD::clear_has_secnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mQD::clear_secnum() {
  secnum_ = 0;
  clear_has_secnum();
}
inline ::google::protobuf::int32 mQD::secnum() const {
  return secnum_;
}
inline void mQD::set_secnum(::google::protobuf::int32 value) {
  set_has_secnum();
  secnum_ = value;
}

// repeated .SATDataPB.mQDCACHE DataBlock = 3;
inline int mQD::datablock_size() const {
  return datablock_.size();
}
inline void mQD::clear_datablock() {
  datablock_.Clear();
}
inline const ::SATDataPB::mQDCACHE& mQD::datablock(int index) const {
  return datablock_.Get(index);
}
inline ::SATDataPB::mQDCACHE* mQD::mutable_datablock(int index) {
  return datablock_.Mutable(index);
}
inline ::SATDataPB::mQDCACHE* mQD::add_datablock() {
  return datablock_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SATDataPB::mQDCACHE >&
mQD::datablock() const {
  return datablock_;
}
inline ::google::protobuf::RepeatedPtrField< ::SATDataPB::mQDCACHE >*
mQD::mutable_datablock() {
  return &datablock_;
}

// -------------------------------------------------------------------

// QQuoteDataIO

// required int32 StampIndex = 1;
inline bool QQuoteDataIO::has_stampindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QQuoteDataIO::set_has_stampindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QQuoteDataIO::clear_has_stampindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QQuoteDataIO::clear_stampindex() {
  stampindex_ = 0;
  clear_has_stampindex();
}
inline ::google::protobuf::int32 QQuoteDataIO::stampindex() const {
  return stampindex_;
}
inline void QQuoteDataIO::set_stampindex(::google::protobuf::int32 value) {
  set_has_stampindex();
  stampindex_ = value;
}

// required .SATDataPB.mQD QuoteData = 2;
inline bool QQuoteDataIO::has_quotedata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QQuoteDataIO::set_has_quotedata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QQuoteDataIO::clear_has_quotedata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QQuoteDataIO::clear_quotedata() {
  if (quotedata_ != NULL) quotedata_->::SATDataPB::mQD::Clear();
  clear_has_quotedata();
}
inline const ::SATDataPB::mQD& QQuoteDataIO::quotedata() const {
  return quotedata_ != NULL ? *quotedata_ : *default_instance_->quotedata_;
}
inline ::SATDataPB::mQD* QQuoteDataIO::mutable_quotedata() {
  set_has_quotedata();
  if (quotedata_ == NULL) quotedata_ = new ::SATDataPB::mQD;
  return quotedata_;
}
inline ::SATDataPB::mQD* QQuoteDataIO::release_quotedata() {
  clear_has_quotedata();
  ::SATDataPB::mQD* temp = quotedata_;
  quotedata_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// mK

// required int32 Date = 1;
inline bool mK::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mK::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mK::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mK::clear_date() {
  date_ = 0;
  clear_has_date();
}
inline ::google::protobuf::int32 mK::date() const {
  return date_;
}
inline void mK::set_date(::google::protobuf::int32 value) {
  set_has_date();
  date_ = value;
}

// required int32 Time = 2;
inline bool mK::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mK::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mK::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mK::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 mK::time() const {
  return time_;
}
inline void mK::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// required int32 Open = 3;
inline bool mK::has_open() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mK::set_has_open() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mK::clear_has_open() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mK::clear_open() {
  open_ = 0;
  clear_has_open();
}
inline ::google::protobuf::int32 mK::open() const {
  return open_;
}
inline void mK::set_open(::google::protobuf::int32 value) {
  set_has_open();
  open_ = value;
}

// required int32 High = 4;
inline bool mK::has_high() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mK::set_has_high() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mK::clear_has_high() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mK::clear_high() {
  high_ = 0;
  clear_has_high();
}
inline ::google::protobuf::int32 mK::high() const {
  return high_;
}
inline void mK::set_high(::google::protobuf::int32 value) {
  set_has_high();
  high_ = value;
}

// required int32 Low = 5;
inline bool mK::has_low() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mK::set_has_low() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mK::clear_has_low() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mK::clear_low() {
  low_ = 0;
  clear_has_low();
}
inline ::google::protobuf::int32 mK::low() const {
  return low_;
}
inline void mK::set_low(::google::protobuf::int32 value) {
  set_has_low();
  low_ = value;
}

// required int32 Close = 6;
inline bool mK::has_close() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mK::set_has_close() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mK::clear_has_close() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mK::clear_close() {
  close_ = 0;
  clear_has_close();
}
inline ::google::protobuf::int32 mK::close() const {
  return close_;
}
inline void mK::set_close(::google::protobuf::int32 value) {
  set_has_close();
  close_ = value;
}

// required int32 SID = 7;
inline bool mK::has_sid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mK::set_has_sid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mK::clear_has_sid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mK::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
inline ::google::protobuf::int32 mK::sid() const {
  return sid_;
}
inline void mK::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
}

// required int32 Exchange = 8;
inline bool mK::has_exchange() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mK::set_has_exchange() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mK::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mK::clear_exchange() {
  exchange_ = 0;
  clear_has_exchange();
}
inline ::google::protobuf::int32 mK::exchange() const {
  return exchange_;
}
inline void mK::set_exchange(::google::protobuf::int32 value) {
  set_has_exchange();
  exchange_ = value;
}

// -------------------------------------------------------------------

// QQD

// required int32 SecNum = 1;
inline bool QQD::has_secnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QQD::set_has_secnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QQD::clear_has_secnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QQD::clear_secnum() {
  secnum_ = 0;
  clear_has_secnum();
}
inline ::google::protobuf::int32 QQD::secnum() const {
  return secnum_;
}
inline void QQD::set_secnum(::google::protobuf::int32 value) {
  set_has_secnum();
  secnum_ = value;
}

// repeated int32 DateList = 2;
inline int QQD::datelist_size() const {
  return datelist_.size();
}
inline void QQD::clear_datelist() {
  datelist_.Clear();
}
inline ::google::protobuf::int32 QQD::datelist(int index) const {
  return datelist_.Get(index);
}
inline void QQD::set_datelist(int index, ::google::protobuf::int32 value) {
  datelist_.Set(index, value);
}
inline void QQD::add_datelist(::google::protobuf::int32 value) {
  datelist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QQD::datelist() const {
  return datelist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QQD::mutable_datelist() {
  return &datelist_;
}

// repeated .SATDataPB.mK mmK = 3;
inline int QQD::mmk_size() const {
  return mmk_.size();
}
inline void QQD::clear_mmk() {
  mmk_.Clear();
}
inline const ::SATDataPB::mK& QQD::mmk(int index) const {
  return mmk_.Get(index);
}
inline ::SATDataPB::mK* QQD::mutable_mmk(int index) {
  return mmk_.Mutable(index);
}
inline ::SATDataPB::mK* QQD::add_mmk() {
  return mmk_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SATDataPB::mK >&
QQD::mmk() const {
  return mmk_;
}
inline ::google::protobuf::RepeatedPtrField< ::SATDataPB::mK >*
QQD::mutable_mmk() {
  return &mmk_;
}

// -------------------------------------------------------------------

// mQDSECINFO

// required int32 Exchange = 1;
inline bool mQDSECINFO::has_exchange() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mQDSECINFO::set_has_exchange() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mQDSECINFO::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mQDSECINFO::clear_exchange() {
  exchange_ = 0;
  clear_has_exchange();
}
inline ::google::protobuf::int32 mQDSECINFO::exchange() const {
  return exchange_;
}
inline void mQDSECINFO::set_exchange(::google::protobuf::int32 value) {
  set_has_exchange();
  exchange_ = value;
}

// required int32 SID = 2;
inline bool mQDSECINFO::has_sid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mQDSECINFO::set_has_sid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mQDSECINFO::clear_has_sid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mQDSECINFO::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
inline ::google::protobuf::int32 mQDSECINFO::sid() const {
  return sid_;
}
inline void mQDSECINFO::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
}

// -------------------------------------------------------------------

// QQDSECINFO

// repeated .SATDataPB.mQDSECINFO mmQDSECINFO = 1;
inline int QQDSECINFO::mmqdsecinfo_size() const {
  return mmqdsecinfo_.size();
}
inline void QQDSECINFO::clear_mmqdsecinfo() {
  mmqdsecinfo_.Clear();
}
inline const ::SATDataPB::mQDSECINFO& QQDSECINFO::mmqdsecinfo(int index) const {
  return mmqdsecinfo_.Get(index);
}
inline ::SATDataPB::mQDSECINFO* QQDSECINFO::mutable_mmqdsecinfo(int index) {
  return mmqdsecinfo_.Mutable(index);
}
inline ::SATDataPB::mQDSECINFO* QQDSECINFO::add_mmqdsecinfo() {
  return mmqdsecinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SATDataPB::mQDSECINFO >&
QQDSECINFO::mmqdsecinfo() const {
  return mmqdsecinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::SATDataPB::mQDSECINFO >*
QQDSECINFO::mutable_mmqdsecinfo() {
  return &mmqdsecinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SATDataPB

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SATDataPB_2eproto__INCLUDED
