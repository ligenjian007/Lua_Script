// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HSComm.proto

#ifndef PROTOBUF_HSComm_2eproto__INCLUDED
#define PROTOBUF_HSComm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace HSCommPB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_HSComm_2eproto();
void protobuf_AssignDesc_HSComm_2eproto();
void protobuf_ShutdownFile_HSComm_2eproto();

class enums;
class clientCheckRequest;
class clientCheckRequest_call;
class clientCheckResponse;
class clientCheckResponse_result;
class entrustStockRequest;
class entrustStockRequest_call;
class entrustStockResponse;
class entrustStockResponse_result;
class cancelEntrustRequest;
class cancelEntrustRequest_call;
class cancelEntrustResponse;
class cancelEntrustResponse_result;
class queryEntrustRequest;
class queryEntrustRequest_call;
class queryEntrustResponse;
class queryEntrustResponse_result;
class queryEntrustResponse_result_entrust;
class queryStockRequest;
class queryStockRequest_call;
class queryStockResponse;
class queryStockResponse_result;
class queryStockResponse_result_stock;
class queryFundRequest;
class queryFundRequest_call;
class queryFundResponse;
class queryFundResponse_result;
class queryFundResponse_result_currency;
class queryShareholderRequest;
class queryShareholderRequest_call;
class queryShareholderResponse;
class queryShareholderResponse_result;
class queryShareholderResponse_result_shareholder;
class queryBusinessRequest;
class queryBusinessRequest_call;
class queryBusinessResponse;
class queryBusinessResponse_result;
class queryBusinessResponse_result_business;
class getEntrustByLocalIDRequest;
class getEntrustByLocalIDRequest_call;
class getEntrustByLocalIDResponse;
class getEntrustByLocalIDResponse_result;
class queryOrdersRequest;
class queryOrdersRequest_call;
class queryOrdersResponse;
class queryOrdersResponse_result;
class queryOrdersResponse_result_query;
class queryCapitalRequest;
class queryCapitalRequest_call;
class queryCapitalResponse;
class queryCapitalResponse_result;
class queryCapitalResponse_result_capital;
class entrustCancelRequest;
class entrustCancelRequest_call;
class entrustCancleResponse;
class entrustCancleResponse_result;

enum enums_accountType {
  enums_accountType_noneAccountType = 0,
  enums_accountType_fund = 1,
  enums_accountType_shareholder = 2,
  enums_accountType_fundcard = 3,
  enums_accountType_bank = 4,
  enums_accountType_stock = 5,
  enums_accountType_client = 6,
  enums_accountType_futures = 7
};
bool enums_accountType_IsValid(int value);
const enums_accountType enums_accountType_accountType_MIN = enums_accountType_noneAccountType;
const enums_accountType enums_accountType_accountType_MAX = enums_accountType_futures;
const int enums_accountType_accountType_ARRAYSIZE = enums_accountType_accountType_MAX + 1;

const ::google::protobuf::EnumDescriptor* enums_accountType_descriptor();
inline const ::std::string& enums_accountType_Name(enums_accountType value) {
  return ::google::protobuf::internal::NameOfEnum(
    enums_accountType_descriptor(), value);
}
inline bool enums_accountType_Parse(
    const ::std::string& name, enums_accountType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enums_accountType>(
    enums_accountType_descriptor(), name, value);
}
enum enums_exchangeType {
  enums_exchangeType_noneExchangeType = 0,
  enums_exchangeType_unknown = 1,
  enums_exchangeType_shanghai = 2,
  enums_exchangeType_shenzhen = 3,
  enums_exchangeType_specialTransferA = 4,
  enums_exchangeType_specialTransferB = 5,
  enums_exchangeType_shanghaiB = 6,
  enums_exchangeType_shenzhenB = 7,
  enums_exchangeType_zhengzhouFutures = 8,
  enums_exchangeType_dalianFutures = 9,
  enums_exchangeType_shanghaiFutures = 10,
  enums_exchangeType_financialFutures = 11
};
bool enums_exchangeType_IsValid(int value);
const enums_exchangeType enums_exchangeType_exchangeType_MIN = enums_exchangeType_noneExchangeType;
const enums_exchangeType enums_exchangeType_exchangeType_MAX = enums_exchangeType_financialFutures;
const int enums_exchangeType_exchangeType_ARRAYSIZE = enums_exchangeType_exchangeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* enums_exchangeType_descriptor();
inline const ::std::string& enums_exchangeType_Name(enums_exchangeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    enums_exchangeType_descriptor(), value);
}
inline bool enums_exchangeType_Parse(
    const ::std::string& name, enums_exchangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enums_exchangeType>(
    enums_exchangeType_descriptor(), name, value);
}
enum enums_moneyType {
  enums_moneyType_noneMoneyType = 0,
  enums_moneyType_rmb = 1,
  enums_moneyType_dollar = 2,
  enums_moneyType_hkdollar = 3
};
bool enums_moneyType_IsValid(int value);
const enums_moneyType enums_moneyType_moneyType_MIN = enums_moneyType_noneMoneyType;
const enums_moneyType enums_moneyType_moneyType_MAX = enums_moneyType_hkdollar;
const int enums_moneyType_moneyType_ARRAYSIZE = enums_moneyType_moneyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* enums_moneyType_descriptor();
inline const ::std::string& enums_moneyType_Name(enums_moneyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    enums_moneyType_descriptor(), value);
}
inline bool enums_moneyType_Parse(
    const ::std::string& name, enums_moneyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enums_moneyType>(
    enums_moneyType_descriptor(), name, value);
}
enum enums_squareFlag {
  enums_squareFlag_noneSquareFlag = 0,
  enums_squareFlag_local = 1,
  enums_squareFlag_secbank = 2,
  enums_squareFlag_cts = 3
};
bool enums_squareFlag_IsValid(int value);
const enums_squareFlag enums_squareFlag_squareFlag_MIN = enums_squareFlag_noneSquareFlag;
const enums_squareFlag enums_squareFlag_squareFlag_MAX = enums_squareFlag_cts;
const int enums_squareFlag_squareFlag_ARRAYSIZE = enums_squareFlag_squareFlag_MAX + 1;

const ::google::protobuf::EnumDescriptor* enums_squareFlag_descriptor();
inline const ::std::string& enums_squareFlag_Name(enums_squareFlag value) {
  return ::google::protobuf::internal::NameOfEnum(
    enums_squareFlag_descriptor(), value);
}
inline bool enums_squareFlag_Parse(
    const ::std::string& name, enums_squareFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enums_squareFlag>(
    enums_squareFlag_descriptor(), name, value);
}
enum enums_entrustWay {
  enums_entrustWay_noneEntrustWay = 0,
  enums_entrustWay_self = 1,
  enums_entrustWay_phone = 2,
  enums_entrustWay_proxy = 3,
  enums_entrustWay_remote = 4,
  enums_entrustWay_counter = 5,
  enums_entrustWay_roaming = 6,
  enums_entrustWay_branch = 7,
  enums_entrustWay_web = 8,
  enums_entrustWay_mobile = 9,
  enums_entrustWay_vip = 10
};
bool enums_entrustWay_IsValid(int value);
const enums_entrustWay enums_entrustWay_entrustWay_MIN = enums_entrustWay_noneEntrustWay;
const enums_entrustWay enums_entrustWay_entrustWay_MAX = enums_entrustWay_vip;
const int enums_entrustWay_entrustWay_ARRAYSIZE = enums_entrustWay_entrustWay_MAX + 1;

const ::google::protobuf::EnumDescriptor* enums_entrustWay_descriptor();
inline const ::std::string& enums_entrustWay_Name(enums_entrustWay value) {
  return ::google::protobuf::internal::NameOfEnum(
    enums_entrustWay_descriptor(), value);
}
inline bool enums_entrustWay_Parse(
    const ::std::string& name, enums_entrustWay* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enums_entrustWay>(
    enums_entrustWay_descriptor(), name, value);
}
enum enums_sysStatus {
  enums_sysStatus_noneSysStatus = 0,
  enums_sysStatus_stopped = 1,
  enums_sysStatus_on = 2,
  enums_sysStatus_testing = 3,
  enums_sysStatus_maintenance = 4,
  enums_sysStatus_closed = 5
};
bool enums_sysStatus_IsValid(int value);
const enums_sysStatus enums_sysStatus_sysStatus_MIN = enums_sysStatus_noneSysStatus;
const enums_sysStatus enums_sysStatus_sysStatus_MAX = enums_sysStatus_closed;
const int enums_sysStatus_sysStatus_ARRAYSIZE = enums_sysStatus_sysStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* enums_sysStatus_descriptor();
inline const ::std::string& enums_sysStatus_Name(enums_sysStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    enums_sysStatus_descriptor(), value);
}
inline bool enums_sysStatus_Parse(
    const ::std::string& name, enums_sysStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enums_sysStatus>(
    enums_sysStatus_descriptor(), name, value);
}
enum enums_entrustBS {
  enums_entrustBS_noneEntrustBS = 0,
  enums_entrustBS_buy = 1,
  enums_entrustBS_sell = 2
};
bool enums_entrustBS_IsValid(int value);
const enums_entrustBS enums_entrustBS_entrustBS_MIN = enums_entrustBS_noneEntrustBS;
const enums_entrustBS enums_entrustBS_entrustBS_MAX = enums_entrustBS_sell;
const int enums_entrustBS_entrustBS_ARRAYSIZE = enums_entrustBS_entrustBS_MAX + 1;

const ::google::protobuf::EnumDescriptor* enums_entrustBS_descriptor();
inline const ::std::string& enums_entrustBS_Name(enums_entrustBS value) {
  return ::google::protobuf::internal::NameOfEnum(
    enums_entrustBS_descriptor(), value);
}
inline bool enums_entrustBS_Parse(
    const ::std::string& name, enums_entrustBS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enums_entrustBS>(
    enums_entrustBS_descriptor(), name, value);
}
enum enums_holderStatus {
  enums_holderStatus_noneHolderStatus = 0,
  enums_holderStatus_normal = 1,
  enums_holderStatus_freezed = 2,
  enums_holderStatus_lost = 3,
  enums_holderStatus_canceled = 4,
  enums_holderStatus_hibernated = 5,
  enums_holderStatus_riskTreatment = 6,
  enums_holderStatus_unqualified = 7,
  enums_holderStatus_locked = 8
};
bool enums_holderStatus_IsValid(int value);
const enums_holderStatus enums_holderStatus_holderStatus_MIN = enums_holderStatus_noneHolderStatus;
const enums_holderStatus enums_holderStatus_holderStatus_MAX = enums_holderStatus_locked;
const int enums_holderStatus_holderStatus_ARRAYSIZE = enums_holderStatus_holderStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* enums_holderStatus_descriptor();
inline const ::std::string& enums_holderStatus_Name(enums_holderStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    enums_holderStatus_descriptor(), value);
}
inline bool enums_holderStatus_Parse(
    const ::std::string& name, enums_holderStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enums_holderStatus>(
    enums_holderStatus_descriptor(), name, value);
}
enum enums_businessStatus {
  enums_businessStatus_noneBusinessStatus = 0,
  enums_businessStatus_done = 1,
  enums_businessStatus_invalid = 2,
  enums_businessStatus_confirmed = 3
};
bool enums_businessStatus_IsValid(int value);
const enums_businessStatus enums_businessStatus_businessStatus_MIN = enums_businessStatus_noneBusinessStatus;
const enums_businessStatus enums_businessStatus_businessStatus_MAX = enums_businessStatus_confirmed;
const int enums_businessStatus_businessStatus_ARRAYSIZE = enums_businessStatus_businessStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* enums_businessStatus_descriptor();
inline const ::std::string& enums_businessStatus_Name(enums_businessStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    enums_businessStatus_descriptor(), value);
}
inline bool enums_businessStatus_Parse(
    const ::std::string& name, enums_businessStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enums_businessStatus>(
    enums_businessStatus_descriptor(), name, value);
}
enum enums_businessType {
  enums_businessType_noneBusinessType = 0,
  enums_businessType_buysell = 1,
  enums_businessType_query = 2,
  enums_businessType_withdraw = 3
};
bool enums_businessType_IsValid(int value);
const enums_businessType enums_businessType_businessType_MIN = enums_businessType_noneBusinessType;
const enums_businessType enums_businessType_businessType_MAX = enums_businessType_withdraw;
const int enums_businessType_businessType_ARRAYSIZE = enums_businessType_businessType_MAX + 1;

const ::google::protobuf::EnumDescriptor* enums_businessType_descriptor();
inline const ::std::string& enums_businessType_Name(enums_businessType value) {
  return ::google::protobuf::internal::NameOfEnum(
    enums_businessType_descriptor(), value);
}
inline bool enums_businessType_Parse(
    const ::std::string& name, enums_businessType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enums_businessType>(
    enums_businessType_descriptor(), name, value);
}
// ===================================================================

class enums : public ::google::protobuf::Message {
 public:
  enums();
  virtual ~enums();
  
  enums(const enums& from);
  
  inline enums& operator=(const enums& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const enums& default_instance();
  
  void Swap(enums* other);
  
  // implements Message ----------------------------------------------
  
  enums* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enums& from);
  void MergeFrom(const enums& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef enums_accountType accountType;
  static const accountType noneAccountType = enums_accountType_noneAccountType;
  static const accountType fund = enums_accountType_fund;
  static const accountType shareholder = enums_accountType_shareholder;
  static const accountType fundcard = enums_accountType_fundcard;
  static const accountType bank = enums_accountType_bank;
  static const accountType stock = enums_accountType_stock;
  static const accountType client = enums_accountType_client;
  static const accountType futures = enums_accountType_futures;
  static inline bool accountType_IsValid(int value) {
    return enums_accountType_IsValid(value);
  }
  static const accountType accountType_MIN =
    enums_accountType_accountType_MIN;
  static const accountType accountType_MAX =
    enums_accountType_accountType_MAX;
  static const int accountType_ARRAYSIZE =
    enums_accountType_accountType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  accountType_descriptor() {
    return enums_accountType_descriptor();
  }
  static inline const ::std::string& accountType_Name(accountType value) {
    return enums_accountType_Name(value);
  }
  static inline bool accountType_Parse(const ::std::string& name,
      accountType* value) {
    return enums_accountType_Parse(name, value);
  }
  
  typedef enums_exchangeType exchangeType;
  static const exchangeType noneExchangeType = enums_exchangeType_noneExchangeType;
  static const exchangeType unknown = enums_exchangeType_unknown;
  static const exchangeType shanghai = enums_exchangeType_shanghai;
  static const exchangeType shenzhen = enums_exchangeType_shenzhen;
  static const exchangeType specialTransferA = enums_exchangeType_specialTransferA;
  static const exchangeType specialTransferB = enums_exchangeType_specialTransferB;
  static const exchangeType shanghaiB = enums_exchangeType_shanghaiB;
  static const exchangeType shenzhenB = enums_exchangeType_shenzhenB;
  static const exchangeType zhengzhouFutures = enums_exchangeType_zhengzhouFutures;
  static const exchangeType dalianFutures = enums_exchangeType_dalianFutures;
  static const exchangeType shanghaiFutures = enums_exchangeType_shanghaiFutures;
  static const exchangeType financialFutures = enums_exchangeType_financialFutures;
  static inline bool exchangeType_IsValid(int value) {
    return enums_exchangeType_IsValid(value);
  }
  static const exchangeType exchangeType_MIN =
    enums_exchangeType_exchangeType_MIN;
  static const exchangeType exchangeType_MAX =
    enums_exchangeType_exchangeType_MAX;
  static const int exchangeType_ARRAYSIZE =
    enums_exchangeType_exchangeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  exchangeType_descriptor() {
    return enums_exchangeType_descriptor();
  }
  static inline const ::std::string& exchangeType_Name(exchangeType value) {
    return enums_exchangeType_Name(value);
  }
  static inline bool exchangeType_Parse(const ::std::string& name,
      exchangeType* value) {
    return enums_exchangeType_Parse(name, value);
  }
  
  typedef enums_moneyType moneyType;
  static const moneyType noneMoneyType = enums_moneyType_noneMoneyType;
  static const moneyType rmb = enums_moneyType_rmb;
  static const moneyType dollar = enums_moneyType_dollar;
  static const moneyType hkdollar = enums_moneyType_hkdollar;
  static inline bool moneyType_IsValid(int value) {
    return enums_moneyType_IsValid(value);
  }
  static const moneyType moneyType_MIN =
    enums_moneyType_moneyType_MIN;
  static const moneyType moneyType_MAX =
    enums_moneyType_moneyType_MAX;
  static const int moneyType_ARRAYSIZE =
    enums_moneyType_moneyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  moneyType_descriptor() {
    return enums_moneyType_descriptor();
  }
  static inline const ::std::string& moneyType_Name(moneyType value) {
    return enums_moneyType_Name(value);
  }
  static inline bool moneyType_Parse(const ::std::string& name,
      moneyType* value) {
    return enums_moneyType_Parse(name, value);
  }
  
  typedef enums_squareFlag squareFlag;
  static const squareFlag noneSquareFlag = enums_squareFlag_noneSquareFlag;
  static const squareFlag local = enums_squareFlag_local;
  static const squareFlag secbank = enums_squareFlag_secbank;
  static const squareFlag cts = enums_squareFlag_cts;
  static inline bool squareFlag_IsValid(int value) {
    return enums_squareFlag_IsValid(value);
  }
  static const squareFlag squareFlag_MIN =
    enums_squareFlag_squareFlag_MIN;
  static const squareFlag squareFlag_MAX =
    enums_squareFlag_squareFlag_MAX;
  static const int squareFlag_ARRAYSIZE =
    enums_squareFlag_squareFlag_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  squareFlag_descriptor() {
    return enums_squareFlag_descriptor();
  }
  static inline const ::std::string& squareFlag_Name(squareFlag value) {
    return enums_squareFlag_Name(value);
  }
  static inline bool squareFlag_Parse(const ::std::string& name,
      squareFlag* value) {
    return enums_squareFlag_Parse(name, value);
  }
  
  typedef enums_entrustWay entrustWay;
  static const entrustWay noneEntrustWay = enums_entrustWay_noneEntrustWay;
  static const entrustWay self = enums_entrustWay_self;
  static const entrustWay phone = enums_entrustWay_phone;
  static const entrustWay proxy = enums_entrustWay_proxy;
  static const entrustWay remote = enums_entrustWay_remote;
  static const entrustWay counter = enums_entrustWay_counter;
  static const entrustWay roaming = enums_entrustWay_roaming;
  static const entrustWay branch = enums_entrustWay_branch;
  static const entrustWay web = enums_entrustWay_web;
  static const entrustWay mobile = enums_entrustWay_mobile;
  static const entrustWay vip = enums_entrustWay_vip;
  static inline bool entrustWay_IsValid(int value) {
    return enums_entrustWay_IsValid(value);
  }
  static const entrustWay entrustWay_MIN =
    enums_entrustWay_entrustWay_MIN;
  static const entrustWay entrustWay_MAX =
    enums_entrustWay_entrustWay_MAX;
  static const int entrustWay_ARRAYSIZE =
    enums_entrustWay_entrustWay_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  entrustWay_descriptor() {
    return enums_entrustWay_descriptor();
  }
  static inline const ::std::string& entrustWay_Name(entrustWay value) {
    return enums_entrustWay_Name(value);
  }
  static inline bool entrustWay_Parse(const ::std::string& name,
      entrustWay* value) {
    return enums_entrustWay_Parse(name, value);
  }
  
  typedef enums_sysStatus sysStatus;
  static const sysStatus noneSysStatus = enums_sysStatus_noneSysStatus;
  static const sysStatus stopped = enums_sysStatus_stopped;
  static const sysStatus on = enums_sysStatus_on;
  static const sysStatus testing = enums_sysStatus_testing;
  static const sysStatus maintenance = enums_sysStatus_maintenance;
  static const sysStatus closed = enums_sysStatus_closed;
  static inline bool sysStatus_IsValid(int value) {
    return enums_sysStatus_IsValid(value);
  }
  static const sysStatus sysStatus_MIN =
    enums_sysStatus_sysStatus_MIN;
  static const sysStatus sysStatus_MAX =
    enums_sysStatus_sysStatus_MAX;
  static const int sysStatus_ARRAYSIZE =
    enums_sysStatus_sysStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  sysStatus_descriptor() {
    return enums_sysStatus_descriptor();
  }
  static inline const ::std::string& sysStatus_Name(sysStatus value) {
    return enums_sysStatus_Name(value);
  }
  static inline bool sysStatus_Parse(const ::std::string& name,
      sysStatus* value) {
    return enums_sysStatus_Parse(name, value);
  }
  
  typedef enums_entrustBS entrustBS;
  static const entrustBS noneEntrustBS = enums_entrustBS_noneEntrustBS;
  static const entrustBS buy = enums_entrustBS_buy;
  static const entrustBS sell = enums_entrustBS_sell;
  static inline bool entrustBS_IsValid(int value) {
    return enums_entrustBS_IsValid(value);
  }
  static const entrustBS entrustBS_MIN =
    enums_entrustBS_entrustBS_MIN;
  static const entrustBS entrustBS_MAX =
    enums_entrustBS_entrustBS_MAX;
  static const int entrustBS_ARRAYSIZE =
    enums_entrustBS_entrustBS_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  entrustBS_descriptor() {
    return enums_entrustBS_descriptor();
  }
  static inline const ::std::string& entrustBS_Name(entrustBS value) {
    return enums_entrustBS_Name(value);
  }
  static inline bool entrustBS_Parse(const ::std::string& name,
      entrustBS* value) {
    return enums_entrustBS_Parse(name, value);
  }
  
  typedef enums_holderStatus holderStatus;
  static const holderStatus noneHolderStatus = enums_holderStatus_noneHolderStatus;
  static const holderStatus normal = enums_holderStatus_normal;
  static const holderStatus freezed = enums_holderStatus_freezed;
  static const holderStatus lost = enums_holderStatus_lost;
  static const holderStatus canceled = enums_holderStatus_canceled;
  static const holderStatus hibernated = enums_holderStatus_hibernated;
  static const holderStatus riskTreatment = enums_holderStatus_riskTreatment;
  static const holderStatus unqualified = enums_holderStatus_unqualified;
  static const holderStatus locked = enums_holderStatus_locked;
  static inline bool holderStatus_IsValid(int value) {
    return enums_holderStatus_IsValid(value);
  }
  static const holderStatus holderStatus_MIN =
    enums_holderStatus_holderStatus_MIN;
  static const holderStatus holderStatus_MAX =
    enums_holderStatus_holderStatus_MAX;
  static const int holderStatus_ARRAYSIZE =
    enums_holderStatus_holderStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  holderStatus_descriptor() {
    return enums_holderStatus_descriptor();
  }
  static inline const ::std::string& holderStatus_Name(holderStatus value) {
    return enums_holderStatus_Name(value);
  }
  static inline bool holderStatus_Parse(const ::std::string& name,
      holderStatus* value) {
    return enums_holderStatus_Parse(name, value);
  }
  
  typedef enums_businessStatus businessStatus;
  static const businessStatus noneBusinessStatus = enums_businessStatus_noneBusinessStatus;
  static const businessStatus done = enums_businessStatus_done;
  static const businessStatus invalid = enums_businessStatus_invalid;
  static const businessStatus confirmed = enums_businessStatus_confirmed;
  static inline bool businessStatus_IsValid(int value) {
    return enums_businessStatus_IsValid(value);
  }
  static const businessStatus businessStatus_MIN =
    enums_businessStatus_businessStatus_MIN;
  static const businessStatus businessStatus_MAX =
    enums_businessStatus_businessStatus_MAX;
  static const int businessStatus_ARRAYSIZE =
    enums_businessStatus_businessStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  businessStatus_descriptor() {
    return enums_businessStatus_descriptor();
  }
  static inline const ::std::string& businessStatus_Name(businessStatus value) {
    return enums_businessStatus_Name(value);
  }
  static inline bool businessStatus_Parse(const ::std::string& name,
      businessStatus* value) {
    return enums_businessStatus_Parse(name, value);
  }
  
  typedef enums_businessType businessType;
  static const businessType noneBusinessType = enums_businessType_noneBusinessType;
  static const businessType buysell = enums_businessType_buysell;
  static const businessType query = enums_businessType_query;
  static const businessType withdraw = enums_businessType_withdraw;
  static inline bool businessType_IsValid(int value) {
    return enums_businessType_IsValid(value);
  }
  static const businessType businessType_MIN =
    enums_businessType_businessType_MIN;
  static const businessType businessType_MAX =
    enums_businessType_businessType_MAX;
  static const int businessType_ARRAYSIZE =
    enums_businessType_businessType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  businessType_descriptor() {
    return enums_businessType_descriptor();
  }
  static inline const ::std::string& businessType_Name(businessType value) {
    return enums_businessType_Name(value);
  }
  static inline bool businessType_Parse(const ::std::string& name,
      businessType* value) {
    return enums_businessType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:HSCommPB.enums)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static enums* default_instance_;
};
// -------------------------------------------------------------------

class clientCheckRequest_call : public ::google::protobuf::Message {
 public:
  clientCheckRequest_call();
  virtual ~clientCheckRequest_call();
  
  clientCheckRequest_call(const clientCheckRequest_call& from);
  
  inline clientCheckRequest_call& operator=(const clientCheckRequest_call& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const clientCheckRequest_call& default_instance();
  
  void Swap(clientCheckRequest_call* other);
  
  // implements Message ----------------------------------------------
  
  clientCheckRequest_call* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const clientCheckRequest_call& from);
  void MergeFrom(const clientCheckRequest_call& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .HSCommPB.enums.accountType accountType = 1;
  inline bool has_accounttype() const;
  inline void clear_accounttype();
  static const int kAccountTypeFieldNumber = 1;
  inline ::HSCommPB::enums_accountType accounttype() const;
  inline void set_accounttype(::HSCommPB::enums_accountType value);
  
  // required string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  
  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // optional .HSCommPB.enums.exchangeType exchangeType = 4 [default = noneExchangeType];
  inline bool has_exchangetype() const;
  inline void clear_exchangetype();
  static const int kExchangeTypeFieldNumber = 4;
  inline ::HSCommPB::enums_exchangeType exchangetype() const;
  inline void set_exchangetype(::HSCommPB::enums_exchangeType value);
  
  // optional string bankNo = 5 [default = ""];
  inline bool has_bankno() const;
  inline void clear_bankno();
  static const int kBankNoFieldNumber = 5;
  inline const ::std::string& bankno() const;
  inline void set_bankno(const ::std::string& value);
  inline void set_bankno(const char* value);
  inline void set_bankno(const char* value, size_t size);
  inline ::std::string* mutable_bankno();
  inline ::std::string* release_bankno();
  
  // optional .HSCommPB.enums.entrustWay entrustWay = 6 [default = self];
  inline bool has_entrustway() const;
  inline void clear_entrustway();
  static const int kEntrustWayFieldNumber = 6;
  inline ::HSCommPB::enums_entrustWay entrustway() const;
  inline void set_entrustway(::HSCommPB::enums_entrustWay value);
  
  // optional string branchNo = 7 [default = ""];
  inline bool has_branchno() const;
  inline void clear_branchno();
  static const int kBranchNoFieldNumber = 7;
  inline const ::std::string& branchno() const;
  inline void set_branchno(const ::std::string& value);
  inline void set_branchno(const char* value);
  inline void set_branchno(const char* value, size_t size);
  inline ::std::string* mutable_branchno();
  inline ::std::string* release_branchno();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.clientCheckRequest.call)
 private:
  inline void set_has_accounttype();
  inline void clear_has_accounttype();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_exchangetype();
  inline void clear_has_exchangetype();
  inline void set_has_bankno();
  inline void clear_has_bankno();
  inline void set_has_entrustway();
  inline void clear_has_entrustway();
  inline void set_has_branchno();
  inline void clear_has_branchno();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* account_;
  int accounttype_;
  int exchangetype_;
  ::std::string* password_;
  ::std::string* bankno_;
  ::std::string* branchno_;
  int entrustway_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static clientCheckRequest_call* default_instance_;
};
// -------------------------------------------------------------------

class clientCheckRequest : public ::google::protobuf::Message {
 public:
  clientCheckRequest();
  virtual ~clientCheckRequest();
  
  clientCheckRequest(const clientCheckRequest& from);
  
  inline clientCheckRequest& operator=(const clientCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const clientCheckRequest& default_instance();
  
  void Swap(clientCheckRequest* other);
  
  // implements Message ----------------------------------------------
  
  clientCheckRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const clientCheckRequest& from);
  void MergeFrom(const clientCheckRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef clientCheckRequest_call call;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.clientCheckRequest.call requests = 1;
  inline int requests_size() const;
  inline void clear_requests();
  static const int kRequestsFieldNumber = 1;
  inline const ::HSCommPB::clientCheckRequest_call& requests(int index) const;
  inline ::HSCommPB::clientCheckRequest_call* mutable_requests(int index);
  inline ::HSCommPB::clientCheckRequest_call* add_requests();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::clientCheckRequest_call >&
      requests() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::clientCheckRequest_call >*
      mutable_requests();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.clientCheckRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::clientCheckRequest_call > requests_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static clientCheckRequest* default_instance_;
};
// -------------------------------------------------------------------

class clientCheckResponse_result : public ::google::protobuf::Message {
 public:
  clientCheckResponse_result();
  virtual ~clientCheckResponse_result();
  
  clientCheckResponse_result(const clientCheckResponse_result& from);
  
  inline clientCheckResponse_result& operator=(const clientCheckResponse_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const clientCheckResponse_result& default_instance();
  
  void Swap(clientCheckResponse_result* other);
  
  // implements Message ----------------------------------------------
  
  clientCheckResponse_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const clientCheckResponse_result& from);
  void MergeFrom(const clientCheckResponse_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string clientID = 1;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientIDFieldNumber = 1;
  inline const ::std::string& clientid() const;
  inline void set_clientid(const ::std::string& value);
  inline void set_clientid(const char* value);
  inline void set_clientid(const char* value, size_t size);
  inline ::std::string* mutable_clientid();
  inline ::std::string* release_clientid();
  
  // required string clientName = 2;
  inline bool has_clientname() const;
  inline void clear_clientname();
  static const int kClientNameFieldNumber = 2;
  inline const ::std::string& clientname() const;
  inline void set_clientname(const ::std::string& value);
  inline void set_clientname(const char* value);
  inline void set_clientname(const char* value, size_t size);
  inline ::std::string* mutable_clientname();
  inline ::std::string* release_clientname();
  
  // required string branchNo = 3;
  inline bool has_branchno() const;
  inline void clear_branchno();
  static const int kBranchNoFieldNumber = 3;
  inline const ::std::string& branchno() const;
  inline void set_branchno(const ::std::string& value);
  inline void set_branchno(const char* value);
  inline void set_branchno(const char* value, size_t size);
  inline ::std::string* mutable_branchno();
  inline ::std::string* release_branchno();
  
  // required string enableBalance = 4;
  inline bool has_enablebalance() const;
  inline void clear_enablebalance();
  static const int kEnableBalanceFieldNumber = 4;
  inline const ::std::string& enablebalance() const;
  inline void set_enablebalance(const ::std::string& value);
  inline void set_enablebalance(const char* value);
  inline void set_enablebalance(const char* value, size_t size);
  inline ::std::string* mutable_enablebalance();
  inline ::std::string* release_enablebalance();
  
  // required string currentBalance = 5;
  inline bool has_currentbalance() const;
  inline void clear_currentbalance();
  static const int kCurrentBalanceFieldNumber = 5;
  inline const ::std::string& currentbalance() const;
  inline void set_currentbalance(const ::std::string& value);
  inline void set_currentbalance(const char* value);
  inline void set_currentbalance(const char* value, size_t size);
  inline ::std::string* mutable_currentbalance();
  inline ::std::string* release_currentbalance();
  
  // required string fundAccount = 6;
  inline bool has_fundaccount() const;
  inline void clear_fundaccount();
  static const int kFundAccountFieldNumber = 6;
  inline const ::std::string& fundaccount() const;
  inline void set_fundaccount(const ::std::string& value);
  inline void set_fundaccount(const char* value);
  inline void set_fundaccount(const char* value, size_t size);
  inline ::std::string* mutable_fundaccount();
  inline ::std::string* release_fundaccount();
  
  // required int32 fundAccountCount = 7;
  inline bool has_fundaccountcount() const;
  inline void clear_fundaccountcount();
  static const int kFundAccountCountFieldNumber = 7;
  inline ::google::protobuf::int32 fundaccountcount() const;
  inline void set_fundaccountcount(::google::protobuf::int32 value);
  
  // required .HSCommPB.enums.sysStatus sysStatus = 8;
  inline bool has_sysstatus() const;
  inline void clear_sysstatus();
  static const int kSysStatusFieldNumber = 8;
  inline ::HSCommPB::enums_sysStatus sysstatus() const;
  inline void set_sysstatus(::HSCommPB::enums_sysStatus value);
  
  // required string sysStatusName = 9;
  inline bool has_sysstatusname() const;
  inline void clear_sysstatusname();
  static const int kSysStatusNameFieldNumber = 9;
  inline const ::std::string& sysstatusname() const;
  inline void set_sysstatusname(const ::std::string& value);
  inline void set_sysstatusname(const char* value);
  inline void set_sysstatusname(const char* value, size_t size);
  inline ::std::string* mutable_sysstatusname();
  inline ::std::string* release_sysstatusname();
  
  // required int32 moneyCount = 10;
  inline bool has_moneycount() const;
  inline void clear_moneycount();
  static const int kMoneyCountFieldNumber = 10;
  inline ::google::protobuf::int32 moneycount() const;
  inline void set_moneycount(::google::protobuf::int32 value);
  
  // required .HSCommPB.enums.squareFlag squareFlag = 11;
  inline bool has_squareflag() const;
  inline void clear_squareflag();
  static const int kSquareFlagFieldNumber = 11;
  inline ::HSCommPB::enums_squareFlag squareflag() const;
  inline void set_squareflag(::HSCommPB::enums_squareFlag value);
  
  // required string clientRights = 12;
  inline bool has_clientrights() const;
  inline void clear_clientrights();
  static const int kClientRightsFieldNumber = 12;
  inline const ::std::string& clientrights() const;
  inline void set_clientrights(const ::std::string& value);
  inline void set_clientrights(const char* value);
  inline void set_clientrights(const char* value, size_t size);
  inline ::std::string* mutable_clientrights();
  inline ::std::string* release_clientrights();
  
  // required string companyName = 13;
  inline bool has_companyname() const;
  inline void clear_companyname();
  static const int kCompanyNameFieldNumber = 13;
  inline const ::std::string& companyname() const;
  inline void set_companyname(const ::std::string& value);
  inline void set_companyname(const char* value);
  inline void set_companyname(const char* value, size_t size);
  inline ::std::string* mutable_companyname();
  inline ::std::string* release_companyname();
  
  // optional int32 errorNo = 14 [default = 0];
  inline bool has_errorno() const;
  inline void clear_errorno();
  static const int kErrorNoFieldNumber = 14;
  inline ::google::protobuf::int32 errorno() const;
  inline void set_errorno(::google::protobuf::int32 value);
  
  // optional string errorMsg = 15 [default = ""];
  inline bool has_errormsg() const;
  inline void clear_errormsg();
  static const int kErrorMsgFieldNumber = 15;
  inline const ::std::string& errormsg() const;
  inline void set_errormsg(const ::std::string& value);
  inline void set_errormsg(const char* value);
  inline void set_errormsg(const char* value, size_t size);
  inline ::std::string* mutable_errormsg();
  inline ::std::string* release_errormsg();
  
  // optional int32 currentDate = 16 [default = 0];
  inline bool has_currentdate() const;
  inline void clear_currentdate();
  static const int kCurrentDateFieldNumber = 16;
  inline ::google::protobuf::int32 currentdate() const;
  inline void set_currentdate(::google::protobuf::int32 value);
  
  // optional int32 lastIP = 17 [default = 0];
  inline bool has_lastip() const;
  inline void clear_lastip();
  static const int kLastIPFieldNumber = 17;
  inline ::google::protobuf::int32 lastip() const;
  inline void set_lastip(::google::protobuf::int32 value);
  
  // optional int64 lastLoginTime = 18 [default = 0];
  inline bool has_lastlogintime() const;
  inline void clear_lastlogintime();
  static const int kLastLoginTimeFieldNumber = 18;
  inline ::google::protobuf::int64 lastlogintime() const;
  inline void set_lastlogintime(::google::protobuf::int64 value);
  
  // optional string bankNo = 19 [default = ""];
  inline bool has_bankno() const;
  inline void clear_bankno();
  static const int kBankNoFieldNumber = 19;
  inline const ::std::string& bankno() const;
  inline void set_bankno(const ::std::string& value);
  inline void set_bankno(const char* value);
  inline void set_bankno(const char* value, size_t size);
  inline ::std::string* mutable_bankno();
  inline ::std::string* release_bankno();
  
  // optional string remark = 20 [default = ""];
  inline bool has_remark() const;
  inline void clear_remark();
  static const int kRemarkFieldNumber = 20;
  inline const ::std::string& remark() const;
  inline void set_remark(const ::std::string& value);
  inline void set_remark(const char* value);
  inline void set_remark(const char* value, size_t size);
  inline ::std::string* mutable_remark();
  inline ::std::string* release_remark();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.clientCheckResponse.result)
 private:
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_clientname();
  inline void clear_has_clientname();
  inline void set_has_branchno();
  inline void clear_has_branchno();
  inline void set_has_enablebalance();
  inline void clear_has_enablebalance();
  inline void set_has_currentbalance();
  inline void clear_has_currentbalance();
  inline void set_has_fundaccount();
  inline void clear_has_fundaccount();
  inline void set_has_fundaccountcount();
  inline void clear_has_fundaccountcount();
  inline void set_has_sysstatus();
  inline void clear_has_sysstatus();
  inline void set_has_sysstatusname();
  inline void clear_has_sysstatusname();
  inline void set_has_moneycount();
  inline void clear_has_moneycount();
  inline void set_has_squareflag();
  inline void clear_has_squareflag();
  inline void set_has_clientrights();
  inline void clear_has_clientrights();
  inline void set_has_companyname();
  inline void clear_has_companyname();
  inline void set_has_errorno();
  inline void clear_has_errorno();
  inline void set_has_errormsg();
  inline void clear_has_errormsg();
  inline void set_has_currentdate();
  inline void clear_has_currentdate();
  inline void set_has_lastip();
  inline void clear_has_lastip();
  inline void set_has_lastlogintime();
  inline void clear_has_lastlogintime();
  inline void set_has_bankno();
  inline void clear_has_bankno();
  inline void set_has_remark();
  inline void clear_has_remark();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* clientid_;
  ::std::string* clientname_;
  ::std::string* branchno_;
  ::std::string* enablebalance_;
  ::std::string* currentbalance_;
  ::std::string* fundaccount_;
  ::google::protobuf::int32 fundaccountcount_;
  int sysstatus_;
  ::std::string* sysstatusname_;
  ::google::protobuf::int32 moneycount_;
  int squareflag_;
  ::std::string* clientrights_;
  ::std::string* companyname_;
  ::std::string* errormsg_;
  ::google::protobuf::int32 errorno_;
  ::google::protobuf::int32 currentdate_;
  ::google::protobuf::int64 lastlogintime_;
  ::std::string* bankno_;
  ::std::string* remark_;
  ::google::protobuf::int32 lastip_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static clientCheckResponse_result* default_instance_;
};
// -------------------------------------------------------------------

class clientCheckResponse : public ::google::protobuf::Message {
 public:
  clientCheckResponse();
  virtual ~clientCheckResponse();
  
  clientCheckResponse(const clientCheckResponse& from);
  
  inline clientCheckResponse& operator=(const clientCheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const clientCheckResponse& default_instance();
  
  void Swap(clientCheckResponse* other);
  
  // implements Message ----------------------------------------------
  
  clientCheckResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const clientCheckResponse& from);
  void MergeFrom(const clientCheckResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef clientCheckResponse_result result;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.clientCheckResponse.result responses = 1;
  inline int responses_size() const;
  inline void clear_responses();
  static const int kResponsesFieldNumber = 1;
  inline const ::HSCommPB::clientCheckResponse_result& responses(int index) const;
  inline ::HSCommPB::clientCheckResponse_result* mutable_responses(int index);
  inline ::HSCommPB::clientCheckResponse_result* add_responses();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::clientCheckResponse_result >&
      responses() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::clientCheckResponse_result >*
      mutable_responses();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.clientCheckResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::clientCheckResponse_result > responses_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static clientCheckResponse* default_instance_;
};
// -------------------------------------------------------------------

class entrustStockRequest_call : public ::google::protobuf::Message {
 public:
  entrustStockRequest_call();
  virtual ~entrustStockRequest_call();
  
  entrustStockRequest_call(const entrustStockRequest_call& from);
  
  inline entrustStockRequest_call& operator=(const entrustStockRequest_call& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const entrustStockRequest_call& default_instance();
  
  void Swap(entrustStockRequest_call* other);
  
  // implements Message ----------------------------------------------
  
  entrustStockRequest_call* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const entrustStockRequest_call& from);
  void MergeFrom(const entrustStockRequest_call& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 localID = 1;
  inline bool has_localid() const;
  inline void clear_localid();
  static const int kLocalIDFieldNumber = 1;
  inline ::google::protobuf::int64 localid() const;
  inline void set_localid(::google::protobuf::int64 value);
  
  // required string branchNo = 2;
  inline bool has_branchno() const;
  inline void clear_branchno();
  static const int kBranchNoFieldNumber = 2;
  inline const ::std::string& branchno() const;
  inline void set_branchno(const ::std::string& value);
  inline void set_branchno(const char* value);
  inline void set_branchno(const char* value, size_t size);
  inline ::std::string* mutable_branchno();
  inline ::std::string* release_branchno();
  
  // required string fundAccount = 3;
  inline bool has_fundaccount() const;
  inline void clear_fundaccount();
  static const int kFundAccountFieldNumber = 3;
  inline const ::std::string& fundaccount() const;
  inline void set_fundaccount(const ::std::string& value);
  inline void set_fundaccount(const char* value);
  inline void set_fundaccount(const char* value, size_t size);
  inline ::std::string* mutable_fundaccount();
  inline ::std::string* release_fundaccount();
  
  // required string password = 4;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 4;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // required .HSCommPB.enums.exchangeType exchangeType = 5;
  inline bool has_exchangetype() const;
  inline void clear_exchangetype();
  static const int kExchangeTypeFieldNumber = 5;
  inline ::HSCommPB::enums_exchangeType exchangetype() const;
  inline void set_exchangetype(::HSCommPB::enums_exchangeType value);
  
  // required string stockAccount = 6;
  inline bool has_stockaccount() const;
  inline void clear_stockaccount();
  static const int kStockAccountFieldNumber = 6;
  inline const ::std::string& stockaccount() const;
  inline void set_stockaccount(const ::std::string& value);
  inline void set_stockaccount(const char* value);
  inline void set_stockaccount(const char* value, size_t size);
  inline ::std::string* mutable_stockaccount();
  inline ::std::string* release_stockaccount();
  
  // required string stockCode = 7;
  inline bool has_stockcode() const;
  inline void clear_stockcode();
  static const int kStockCodeFieldNumber = 7;
  inline const ::std::string& stockcode() const;
  inline void set_stockcode(const ::std::string& value);
  inline void set_stockcode(const char* value);
  inline void set_stockcode(const char* value, size_t size);
  inline ::std::string* mutable_stockcode();
  inline ::std::string* release_stockcode();
  
  // required int64 entrustAmount = 8;
  inline bool has_entrustamount() const;
  inline void clear_entrustamount();
  static const int kEntrustAmountFieldNumber = 8;
  inline ::google::protobuf::int64 entrustamount() const;
  inline void set_entrustamount(::google::protobuf::int64 value);
  
  // required int64 entrustPrice = 9;
  inline bool has_entrustprice() const;
  inline void clear_entrustprice();
  static const int kEntrustPriceFieldNumber = 9;
  inline ::google::protobuf::int64 entrustprice() const;
  inline void set_entrustprice(::google::protobuf::int64 value);
  
  // required .HSCommPB.enums.entrustBS entrustBS = 10;
  inline bool has_entrustbs() const;
  inline void clear_entrustbs();
  static const int kEntrustBSFieldNumber = 10;
  inline ::HSCommPB::enums_entrustBS entrustbs() const;
  inline void set_entrustbs(::HSCommPB::enums_entrustBS value);
  
  // @@protoc_insertion_point(class_scope:HSCommPB.entrustStockRequest.call)
 private:
  inline void set_has_localid();
  inline void clear_has_localid();
  inline void set_has_branchno();
  inline void clear_has_branchno();
  inline void set_has_fundaccount();
  inline void clear_has_fundaccount();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_exchangetype();
  inline void clear_has_exchangetype();
  inline void set_has_stockaccount();
  inline void clear_has_stockaccount();
  inline void set_has_stockcode();
  inline void clear_has_stockcode();
  inline void set_has_entrustamount();
  inline void clear_has_entrustamount();
  inline void set_has_entrustprice();
  inline void clear_has_entrustprice();
  inline void set_has_entrustbs();
  inline void clear_has_entrustbs();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 localid_;
  ::std::string* branchno_;
  ::std::string* fundaccount_;
  ::std::string* password_;
  ::std::string* stockaccount_;
  ::std::string* stockcode_;
  int exchangetype_;
  int entrustbs_;
  ::google::protobuf::int64 entrustamount_;
  ::google::protobuf::int64 entrustprice_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static entrustStockRequest_call* default_instance_;
};
// -------------------------------------------------------------------

class entrustStockRequest : public ::google::protobuf::Message {
 public:
  entrustStockRequest();
  virtual ~entrustStockRequest();
  
  entrustStockRequest(const entrustStockRequest& from);
  
  inline entrustStockRequest& operator=(const entrustStockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const entrustStockRequest& default_instance();
  
  void Swap(entrustStockRequest* other);
  
  // implements Message ----------------------------------------------
  
  entrustStockRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const entrustStockRequest& from);
  void MergeFrom(const entrustStockRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef entrustStockRequest_call call;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.entrustStockRequest.call requests = 1;
  inline int requests_size() const;
  inline void clear_requests();
  static const int kRequestsFieldNumber = 1;
  inline const ::HSCommPB::entrustStockRequest_call& requests(int index) const;
  inline ::HSCommPB::entrustStockRequest_call* mutable_requests(int index);
  inline ::HSCommPB::entrustStockRequest_call* add_requests();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::entrustStockRequest_call >&
      requests() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::entrustStockRequest_call >*
      mutable_requests();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.entrustStockRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::entrustStockRequest_call > requests_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static entrustStockRequest* default_instance_;
};
// -------------------------------------------------------------------

class entrustStockResponse_result : public ::google::protobuf::Message {
 public:
  entrustStockResponse_result();
  virtual ~entrustStockResponse_result();
  
  entrustStockResponse_result(const entrustStockResponse_result& from);
  
  inline entrustStockResponse_result& operator=(const entrustStockResponse_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const entrustStockResponse_result& default_instance();
  
  void Swap(entrustStockResponse_result* other);
  
  // implements Message ----------------------------------------------
  
  entrustStockResponse_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const entrustStockResponse_result& from);
  void MergeFrom(const entrustStockResponse_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 localID = 1;
  inline bool has_localid() const;
  inline void clear_localid();
  static const int kLocalIDFieldNumber = 1;
  inline ::google::protobuf::int64 localid() const;
  inline void set_localid(::google::protobuf::int64 value);
  
  // required string entrustNo = 2;
  inline bool has_entrustno() const;
  inline void clear_entrustno();
  static const int kEntrustNoFieldNumber = 2;
  inline const ::std::string& entrustno() const;
  inline void set_entrustno(const ::std::string& value);
  inline void set_entrustno(const char* value);
  inline void set_entrustno(const char* value, size_t size);
  inline ::std::string* mutable_entrustno();
  inline ::std::string* release_entrustno();
  
  // optional int32 errorNo = 14 [default = 0];
  inline bool has_errorno() const;
  inline void clear_errorno();
  static const int kErrorNoFieldNumber = 14;
  inline ::google::protobuf::int32 errorno() const;
  inline void set_errorno(::google::protobuf::int32 value);
  
  // optional string errorMsg = 15 [default = ""];
  inline bool has_errormsg() const;
  inline void clear_errormsg();
  static const int kErrorMsgFieldNumber = 15;
  inline const ::std::string& errormsg() const;
  inline void set_errormsg(const ::std::string& value);
  inline void set_errormsg(const char* value);
  inline void set_errormsg(const char* value, size_t size);
  inline ::std::string* mutable_errormsg();
  inline ::std::string* release_errormsg();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.entrustStockResponse.result)
 private:
  inline void set_has_localid();
  inline void clear_has_localid();
  inline void set_has_entrustno();
  inline void clear_has_entrustno();
  inline void set_has_errorno();
  inline void clear_has_errorno();
  inline void set_has_errormsg();
  inline void clear_has_errormsg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 localid_;
  ::std::string* entrustno_;
  ::std::string* errormsg_;
  ::google::protobuf::int32 errorno_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static entrustStockResponse_result* default_instance_;
};
// -------------------------------------------------------------------

class entrustStockResponse : public ::google::protobuf::Message {
 public:
  entrustStockResponse();
  virtual ~entrustStockResponse();
  
  entrustStockResponse(const entrustStockResponse& from);
  
  inline entrustStockResponse& operator=(const entrustStockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const entrustStockResponse& default_instance();
  
  void Swap(entrustStockResponse* other);
  
  // implements Message ----------------------------------------------
  
  entrustStockResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const entrustStockResponse& from);
  void MergeFrom(const entrustStockResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef entrustStockResponse_result result;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.entrustStockResponse.result responses = 1;
  inline int responses_size() const;
  inline void clear_responses();
  static const int kResponsesFieldNumber = 1;
  inline const ::HSCommPB::entrustStockResponse_result& responses(int index) const;
  inline ::HSCommPB::entrustStockResponse_result* mutable_responses(int index);
  inline ::HSCommPB::entrustStockResponse_result* add_responses();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::entrustStockResponse_result >&
      responses() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::entrustStockResponse_result >*
      mutable_responses();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.entrustStockResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::entrustStockResponse_result > responses_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static entrustStockResponse* default_instance_;
};
// -------------------------------------------------------------------

class cancelEntrustRequest_call : public ::google::protobuf::Message {
 public:
  cancelEntrustRequest_call();
  virtual ~cancelEntrustRequest_call();
  
  cancelEntrustRequest_call(const cancelEntrustRequest_call& from);
  
  inline cancelEntrustRequest_call& operator=(const cancelEntrustRequest_call& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const cancelEntrustRequest_call& default_instance();
  
  void Swap(cancelEntrustRequest_call* other);
  
  // implements Message ----------------------------------------------
  
  cancelEntrustRequest_call* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cancelEntrustRequest_call& from);
  void MergeFrom(const cancelEntrustRequest_call& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string branchNo = 1;
  inline bool has_branchno() const;
  inline void clear_branchno();
  static const int kBranchNoFieldNumber = 1;
  inline const ::std::string& branchno() const;
  inline void set_branchno(const ::std::string& value);
  inline void set_branchno(const char* value);
  inline void set_branchno(const char* value, size_t size);
  inline ::std::string* mutable_branchno();
  inline ::std::string* release_branchno();
  
  // required string fundAccount = 2;
  inline bool has_fundaccount() const;
  inline void clear_fundaccount();
  static const int kFundAccountFieldNumber = 2;
  inline const ::std::string& fundaccount() const;
  inline void set_fundaccount(const ::std::string& value);
  inline void set_fundaccount(const char* value);
  inline void set_fundaccount(const char* value, size_t size);
  inline ::std::string* mutable_fundaccount();
  inline ::std::string* release_fundaccount();
  
  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // required string entrustNo = 4;
  inline bool has_entrustno() const;
  inline void clear_entrustno();
  static const int kEntrustNoFieldNumber = 4;
  inline const ::std::string& entrustno() const;
  inline void set_entrustno(const ::std::string& value);
  inline void set_entrustno(const char* value);
  inline void set_entrustno(const char* value, size_t size);
  inline ::std::string* mutable_entrustno();
  inline ::std::string* release_entrustno();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.cancelEntrustRequest.call)
 private:
  inline void set_has_branchno();
  inline void clear_has_branchno();
  inline void set_has_fundaccount();
  inline void clear_has_fundaccount();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_entrustno();
  inline void clear_has_entrustno();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* branchno_;
  ::std::string* fundaccount_;
  ::std::string* password_;
  ::std::string* entrustno_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static cancelEntrustRequest_call* default_instance_;
};
// -------------------------------------------------------------------

class cancelEntrustRequest : public ::google::protobuf::Message {
 public:
  cancelEntrustRequest();
  virtual ~cancelEntrustRequest();
  
  cancelEntrustRequest(const cancelEntrustRequest& from);
  
  inline cancelEntrustRequest& operator=(const cancelEntrustRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const cancelEntrustRequest& default_instance();
  
  void Swap(cancelEntrustRequest* other);
  
  // implements Message ----------------------------------------------
  
  cancelEntrustRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cancelEntrustRequest& from);
  void MergeFrom(const cancelEntrustRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef cancelEntrustRequest_call call;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.cancelEntrustRequest.call requests = 1;
  inline int requests_size() const;
  inline void clear_requests();
  static const int kRequestsFieldNumber = 1;
  inline const ::HSCommPB::cancelEntrustRequest_call& requests(int index) const;
  inline ::HSCommPB::cancelEntrustRequest_call* mutable_requests(int index);
  inline ::HSCommPB::cancelEntrustRequest_call* add_requests();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::cancelEntrustRequest_call >&
      requests() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::cancelEntrustRequest_call >*
      mutable_requests();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.cancelEntrustRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::cancelEntrustRequest_call > requests_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static cancelEntrustRequest* default_instance_;
};
// -------------------------------------------------------------------

class cancelEntrustResponse_result : public ::google::protobuf::Message {
 public:
  cancelEntrustResponse_result();
  virtual ~cancelEntrustResponse_result();
  
  cancelEntrustResponse_result(const cancelEntrustResponse_result& from);
  
  inline cancelEntrustResponse_result& operator=(const cancelEntrustResponse_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const cancelEntrustResponse_result& default_instance();
  
  void Swap(cancelEntrustResponse_result* other);
  
  // implements Message ----------------------------------------------
  
  cancelEntrustResponse_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cancelEntrustResponse_result& from);
  void MergeFrom(const cancelEntrustResponse_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string entrustNo = 1;
  inline bool has_entrustno() const;
  inline void clear_entrustno();
  static const int kEntrustNoFieldNumber = 1;
  inline const ::std::string& entrustno() const;
  inline void set_entrustno(const ::std::string& value);
  inline void set_entrustno(const char* value);
  inline void set_entrustno(const char* value, size_t size);
  inline ::std::string* mutable_entrustno();
  inline ::std::string* release_entrustno();
  
  // optional int32 errorNo = 14 [default = 0];
  inline bool has_errorno() const;
  inline void clear_errorno();
  static const int kErrorNoFieldNumber = 14;
  inline ::google::protobuf::int32 errorno() const;
  inline void set_errorno(::google::protobuf::int32 value);
  
  // optional string errorMsg = 15 [default = ""];
  inline bool has_errormsg() const;
  inline void clear_errormsg();
  static const int kErrorMsgFieldNumber = 15;
  inline const ::std::string& errormsg() const;
  inline void set_errormsg(const ::std::string& value);
  inline void set_errormsg(const char* value);
  inline void set_errormsg(const char* value, size_t size);
  inline ::std::string* mutable_errormsg();
  inline ::std::string* release_errormsg();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.cancelEntrustResponse.result)
 private:
  inline void set_has_entrustno();
  inline void clear_has_entrustno();
  inline void set_has_errorno();
  inline void clear_has_errorno();
  inline void set_has_errormsg();
  inline void clear_has_errormsg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* entrustno_;
  ::std::string* errormsg_;
  ::google::protobuf::int32 errorno_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static cancelEntrustResponse_result* default_instance_;
};
// -------------------------------------------------------------------

class cancelEntrustResponse : public ::google::protobuf::Message {
 public:
  cancelEntrustResponse();
  virtual ~cancelEntrustResponse();
  
  cancelEntrustResponse(const cancelEntrustResponse& from);
  
  inline cancelEntrustResponse& operator=(const cancelEntrustResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const cancelEntrustResponse& default_instance();
  
  void Swap(cancelEntrustResponse* other);
  
  // implements Message ----------------------------------------------
  
  cancelEntrustResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const cancelEntrustResponse& from);
  void MergeFrom(const cancelEntrustResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef cancelEntrustResponse_result result;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.cancelEntrustResponse.result responses = 1;
  inline int responses_size() const;
  inline void clear_responses();
  static const int kResponsesFieldNumber = 1;
  inline const ::HSCommPB::cancelEntrustResponse_result& responses(int index) const;
  inline ::HSCommPB::cancelEntrustResponse_result* mutable_responses(int index);
  inline ::HSCommPB::cancelEntrustResponse_result* add_responses();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::cancelEntrustResponse_result >&
      responses() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::cancelEntrustResponse_result >*
      mutable_responses();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.cancelEntrustResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::cancelEntrustResponse_result > responses_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static cancelEntrustResponse* default_instance_;
};
// -------------------------------------------------------------------

class queryEntrustRequest_call : public ::google::protobuf::Message {
 public:
  queryEntrustRequest_call();
  virtual ~queryEntrustRequest_call();
  
  queryEntrustRequest_call(const queryEntrustRequest_call& from);
  
  inline queryEntrustRequest_call& operator=(const queryEntrustRequest_call& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryEntrustRequest_call& default_instance();
  
  void Swap(queryEntrustRequest_call* other);
  
  // implements Message ----------------------------------------------
  
  queryEntrustRequest_call* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryEntrustRequest_call& from);
  void MergeFrom(const queryEntrustRequest_call& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string branchNo = 1;
  inline bool has_branchno() const;
  inline void clear_branchno();
  static const int kBranchNoFieldNumber = 1;
  inline const ::std::string& branchno() const;
  inline void set_branchno(const ::std::string& value);
  inline void set_branchno(const char* value);
  inline void set_branchno(const char* value, size_t size);
  inline ::std::string* mutable_branchno();
  inline ::std::string* release_branchno();
  
  // required string fundAccount = 2;
  inline bool has_fundaccount() const;
  inline void clear_fundaccount();
  static const int kFundAccountFieldNumber = 2;
  inline const ::std::string& fundaccount() const;
  inline void set_fundaccount(const ::std::string& value);
  inline void set_fundaccount(const char* value);
  inline void set_fundaccount(const char* value, size_t size);
  inline ::std::string* mutable_fundaccount();
  inline ::std::string* release_fundaccount();
  
  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // optional string entrustNo = 4 [default = ""];
  inline bool has_entrustno() const;
  inline void clear_entrustno();
  static const int kEntrustNoFieldNumber = 4;
  inline const ::std::string& entrustno() const;
  inline void set_entrustno(const ::std::string& value);
  inline void set_entrustno(const char* value);
  inline void set_entrustno(const char* value, size_t size);
  inline ::std::string* mutable_entrustno();
  inline ::std::string* release_entrustno();
  
  // optional bool queryOnlyCancelable = 5 [default = false];
  inline bool has_queryonlycancelable() const;
  inline void clear_queryonlycancelable();
  static const int kQueryOnlyCancelableFieldNumber = 5;
  inline bool queryonlycancelable() const;
  inline void set_queryonlycancelable(bool value);
  
  // optional int32 requestNumber = 6 [default = 1000];
  inline bool has_requestnumber() const;
  inline void clear_requestnumber();
  static const int kRequestNumberFieldNumber = 6;
  inline ::google::protobuf::int32 requestnumber() const;
  inline void set_requestnumber(::google::protobuf::int32 value);
  
  // optional string lastPositionString = 7 [default = ""];
  inline bool has_lastpositionstring() const;
  inline void clear_lastpositionstring();
  static const int kLastPositionStringFieldNumber = 7;
  inline const ::std::string& lastpositionstring() const;
  inline void set_lastpositionstring(const ::std::string& value);
  inline void set_lastpositionstring(const char* value);
  inline void set_lastpositionstring(const char* value, size_t size);
  inline ::std::string* mutable_lastpositionstring();
  inline ::std::string* release_lastpositionstring();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryEntrustRequest.call)
 private:
  inline void set_has_branchno();
  inline void clear_has_branchno();
  inline void set_has_fundaccount();
  inline void clear_has_fundaccount();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_entrustno();
  inline void clear_has_entrustno();
  inline void set_has_queryonlycancelable();
  inline void clear_has_queryonlycancelable();
  inline void set_has_requestnumber();
  inline void clear_has_requestnumber();
  inline void set_has_lastpositionstring();
  inline void clear_has_lastpositionstring();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* branchno_;
  ::std::string* fundaccount_;
  ::std::string* password_;
  ::std::string* entrustno_;
  bool queryonlycancelable_;
  ::google::protobuf::int32 requestnumber_;
  ::std::string* lastpositionstring_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryEntrustRequest_call* default_instance_;
};
// -------------------------------------------------------------------

class queryEntrustRequest : public ::google::protobuf::Message {
 public:
  queryEntrustRequest();
  virtual ~queryEntrustRequest();
  
  queryEntrustRequest(const queryEntrustRequest& from);
  
  inline queryEntrustRequest& operator=(const queryEntrustRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryEntrustRequest& default_instance();
  
  void Swap(queryEntrustRequest* other);
  
  // implements Message ----------------------------------------------
  
  queryEntrustRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryEntrustRequest& from);
  void MergeFrom(const queryEntrustRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef queryEntrustRequest_call call;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.queryEntrustRequest.call requests = 1;
  inline int requests_size() const;
  inline void clear_requests();
  static const int kRequestsFieldNumber = 1;
  inline const ::HSCommPB::queryEntrustRequest_call& requests(int index) const;
  inline ::HSCommPB::queryEntrustRequest_call* mutable_requests(int index);
  inline ::HSCommPB::queryEntrustRequest_call* add_requests();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryEntrustRequest_call >&
      requests() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryEntrustRequest_call >*
      mutable_requests();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryEntrustRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryEntrustRequest_call > requests_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryEntrustRequest* default_instance_;
};
// -------------------------------------------------------------------

class queryEntrustResponse_result_entrust : public ::google::protobuf::Message {
 public:
  queryEntrustResponse_result_entrust();
  virtual ~queryEntrustResponse_result_entrust();
  
  queryEntrustResponse_result_entrust(const queryEntrustResponse_result_entrust& from);
  
  inline queryEntrustResponse_result_entrust& operator=(const queryEntrustResponse_result_entrust& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryEntrustResponse_result_entrust& default_instance();
  
  void Swap(queryEntrustResponse_result_entrust* other);
  
  // implements Message ----------------------------------------------
  
  queryEntrustResponse_result_entrust* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryEntrustResponse_result_entrust& from);
  void MergeFrom(const queryEntrustResponse_result_entrust& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string entrustNo = 1;
  inline bool has_entrustno() const;
  inline void clear_entrustno();
  static const int kEntrustNoFieldNumber = 1;
  inline const ::std::string& entrustno() const;
  inline void set_entrustno(const ::std::string& value);
  inline void set_entrustno(const char* value);
  inline void set_entrustno(const char* value, size_t size);
  inline ::std::string* mutable_entrustno();
  inline ::std::string* release_entrustno();
  
  // required string stockCode = 2;
  inline bool has_stockcode() const;
  inline void clear_stockcode();
  static const int kStockCodeFieldNumber = 2;
  inline const ::std::string& stockcode() const;
  inline void set_stockcode(const ::std::string& value);
  inline void set_stockcode(const char* value);
  inline void set_stockcode(const char* value, size_t size);
  inline ::std::string* mutable_stockcode();
  inline ::std::string* release_stockcode();
  
  // required string stockName = 3;
  inline bool has_stockname() const;
  inline void clear_stockname();
  static const int kStockNameFieldNumber = 3;
  inline const ::std::string& stockname() const;
  inline void set_stockname(const ::std::string& value);
  inline void set_stockname(const char* value);
  inline void set_stockname(const char* value, size_t size);
  inline ::std::string* mutable_stockname();
  inline ::std::string* release_stockname();
  
  // required .HSCommPB.enums.entrustBS entrustBS = 4;
  inline bool has_entrustbs() const;
  inline void clear_entrustbs();
  static const int kEntrustBSFieldNumber = 4;
  inline ::HSCommPB::enums_entrustBS entrustbs() const;
  inline void set_entrustbs(::HSCommPB::enums_entrustBS value);
  
  // required int64 entrustAmount = 5;
  inline bool has_entrustamount() const;
  inline void clear_entrustamount();
  static const int kEntrustAmountFieldNumber = 5;
  inline ::google::protobuf::int64 entrustamount() const;
  inline void set_entrustamount(::google::protobuf::int64 value);
  
  // required int64 entrustPrice = 6;
  inline bool has_entrustprice() const;
  inline void clear_entrustprice();
  static const int kEntrustPriceFieldNumber = 6;
  inline ::google::protobuf::int64 entrustprice() const;
  inline void set_entrustprice(::google::protobuf::int64 value);
  
  // required int64 businessAmount = 7;
  inline bool has_businessamount() const;
  inline void clear_businessamount();
  static const int kBusinessAmountFieldNumber = 7;
  inline ::google::protobuf::int64 businessamount() const;
  inline void set_businessamount(::google::protobuf::int64 value);
  
  // required int64 businessPrice = 8;
  inline bool has_businessprice() const;
  inline void clear_businessprice();
  static const int kBusinessPriceFieldNumber = 8;
  inline ::google::protobuf::int64 businessprice() const;
  inline void set_businessprice(::google::protobuf::int64 value);
  
  // required int64 cancelvol = 9;
  inline bool has_cancelvol() const;
  inline void clear_cancelvol();
  static const int kCancelvolFieldNumber = 9;
  inline ::google::protobuf::int64 cancelvol() const;
  inline void set_cancelvol(::google::protobuf::int64 value);
  
  // required int64 internalsid = 10;
  inline bool has_internalsid() const;
  inline void clear_internalsid();
  static const int kInternalsidFieldNumber = 10;
  inline ::google::protobuf::int64 internalsid() const;
  inline void set_internalsid(::google::protobuf::int64 value);
  
  // required int64 FEEandTAX = 11;
  inline bool has_feeandtax() const;
  inline void clear_feeandtax();
  static const int kFEEandTAXFieldNumber = 11;
  inline ::google::protobuf::int64 feeandtax() const;
  inline void set_feeandtax(::google::protobuf::int64 value);
  
  // required int64 tradedone = 12;
  inline bool has_tradedone() const;
  inline void clear_tradedone();
  static const int kTradedoneFieldNumber = 12;
  inline ::google::protobuf::int64 tradedone() const;
  inline void set_tradedone(::google::protobuf::int64 value);
  
  // required int64 success = 13;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 13;
  inline ::google::protobuf::int64 success() const;
  inline void set_success(::google::protobuf::int64 value);
  
  // optional string invalidInfo = 14;
  inline bool has_invalidinfo() const;
  inline void clear_invalidinfo();
  static const int kInvalidInfoFieldNumber = 14;
  inline const ::std::string& invalidinfo() const;
  inline void set_invalidinfo(const ::std::string& value);
  inline void set_invalidinfo(const char* value);
  inline void set_invalidinfo(const char* value, size_t size);
  inline ::std::string* mutable_invalidinfo();
  inline ::std::string* release_invalidinfo();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryEntrustResponse.result.entrust)
 private:
  inline void set_has_entrustno();
  inline void clear_has_entrustno();
  inline void set_has_stockcode();
  inline void clear_has_stockcode();
  inline void set_has_stockname();
  inline void clear_has_stockname();
  inline void set_has_entrustbs();
  inline void clear_has_entrustbs();
  inline void set_has_entrustamount();
  inline void clear_has_entrustamount();
  inline void set_has_entrustprice();
  inline void clear_has_entrustprice();
  inline void set_has_businessamount();
  inline void clear_has_businessamount();
  inline void set_has_businessprice();
  inline void clear_has_businessprice();
  inline void set_has_cancelvol();
  inline void clear_has_cancelvol();
  inline void set_has_internalsid();
  inline void clear_has_internalsid();
  inline void set_has_feeandtax();
  inline void clear_has_feeandtax();
  inline void set_has_tradedone();
  inline void clear_has_tradedone();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_invalidinfo();
  inline void clear_has_invalidinfo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* entrustno_;
  ::std::string* stockcode_;
  ::std::string* stockname_;
  ::google::protobuf::int64 entrustamount_;
  ::google::protobuf::int64 entrustprice_;
  ::google::protobuf::int64 businessamount_;
  ::google::protobuf::int64 businessprice_;
  ::google::protobuf::int64 cancelvol_;
  ::google::protobuf::int64 internalsid_;
  ::google::protobuf::int64 feeandtax_;
  ::google::protobuf::int64 tradedone_;
  ::google::protobuf::int64 success_;
  ::std::string* invalidinfo_;
  int entrustbs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryEntrustResponse_result_entrust* default_instance_;
};
// -------------------------------------------------------------------

class queryEntrustResponse_result : public ::google::protobuf::Message {
 public:
  queryEntrustResponse_result();
  virtual ~queryEntrustResponse_result();
  
  queryEntrustResponse_result(const queryEntrustResponse_result& from);
  
  inline queryEntrustResponse_result& operator=(const queryEntrustResponse_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryEntrustResponse_result& default_instance();
  
  void Swap(queryEntrustResponse_result* other);
  
  // implements Message ----------------------------------------------
  
  queryEntrustResponse_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryEntrustResponse_result& from);
  void MergeFrom(const queryEntrustResponse_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef queryEntrustResponse_result_entrust entrust;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.queryEntrustResponse.result.entrust entrusts = 1;
  inline int entrusts_size() const;
  inline void clear_entrusts();
  static const int kEntrustsFieldNumber = 1;
  inline const ::HSCommPB::queryEntrustResponse_result_entrust& entrusts(int index) const;
  inline ::HSCommPB::queryEntrustResponse_result_entrust* mutable_entrusts(int index);
  inline ::HSCommPB::queryEntrustResponse_result_entrust* add_entrusts();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryEntrustResponse_result_entrust >&
      entrusts() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryEntrustResponse_result_entrust >*
      mutable_entrusts();
  
  // required string lastPositionString = 2;
  inline bool has_lastpositionstring() const;
  inline void clear_lastpositionstring();
  static const int kLastPositionStringFieldNumber = 2;
  inline const ::std::string& lastpositionstring() const;
  inline void set_lastpositionstring(const ::std::string& value);
  inline void set_lastpositionstring(const char* value);
  inline void set_lastpositionstring(const char* value, size_t size);
  inline ::std::string* mutable_lastpositionstring();
  inline ::std::string* release_lastpositionstring();
  
  // optional int32 errorNo = 14 [default = 0];
  inline bool has_errorno() const;
  inline void clear_errorno();
  static const int kErrorNoFieldNumber = 14;
  inline ::google::protobuf::int32 errorno() const;
  inline void set_errorno(::google::protobuf::int32 value);
  
  // optional string errorMsg = 15 [default = ""];
  inline bool has_errormsg() const;
  inline void clear_errormsg();
  static const int kErrorMsgFieldNumber = 15;
  inline const ::std::string& errormsg() const;
  inline void set_errormsg(const ::std::string& value);
  inline void set_errormsg(const char* value);
  inline void set_errormsg(const char* value, size_t size);
  inline ::std::string* mutable_errormsg();
  inline ::std::string* release_errormsg();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryEntrustResponse.result)
 private:
  inline void set_has_lastpositionstring();
  inline void clear_has_lastpositionstring();
  inline void set_has_errorno();
  inline void clear_has_errorno();
  inline void set_has_errormsg();
  inline void clear_has_errormsg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryEntrustResponse_result_entrust > entrusts_;
  ::std::string* lastpositionstring_;
  ::std::string* errormsg_;
  ::google::protobuf::int32 errorno_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryEntrustResponse_result* default_instance_;
};
// -------------------------------------------------------------------

class queryEntrustResponse : public ::google::protobuf::Message {
 public:
  queryEntrustResponse();
  virtual ~queryEntrustResponse();
  
  queryEntrustResponse(const queryEntrustResponse& from);
  
  inline queryEntrustResponse& operator=(const queryEntrustResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryEntrustResponse& default_instance();
  
  void Swap(queryEntrustResponse* other);
  
  // implements Message ----------------------------------------------
  
  queryEntrustResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryEntrustResponse& from);
  void MergeFrom(const queryEntrustResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef queryEntrustResponse_result result;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.queryEntrustResponse.result responses = 1;
  inline int responses_size() const;
  inline void clear_responses();
  static const int kResponsesFieldNumber = 1;
  inline const ::HSCommPB::queryEntrustResponse_result& responses(int index) const;
  inline ::HSCommPB::queryEntrustResponse_result* mutable_responses(int index);
  inline ::HSCommPB::queryEntrustResponse_result* add_responses();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryEntrustResponse_result >&
      responses() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryEntrustResponse_result >*
      mutable_responses();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryEntrustResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryEntrustResponse_result > responses_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryEntrustResponse* default_instance_;
};
// -------------------------------------------------------------------

class queryStockRequest_call : public ::google::protobuf::Message {
 public:
  queryStockRequest_call();
  virtual ~queryStockRequest_call();
  
  queryStockRequest_call(const queryStockRequest_call& from);
  
  inline queryStockRequest_call& operator=(const queryStockRequest_call& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryStockRequest_call& default_instance();
  
  void Swap(queryStockRequest_call* other);
  
  // implements Message ----------------------------------------------
  
  queryStockRequest_call* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryStockRequest_call& from);
  void MergeFrom(const queryStockRequest_call& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string branchNo = 1;
  inline bool has_branchno() const;
  inline void clear_branchno();
  static const int kBranchNoFieldNumber = 1;
  inline const ::std::string& branchno() const;
  inline void set_branchno(const ::std::string& value);
  inline void set_branchno(const char* value);
  inline void set_branchno(const char* value, size_t size);
  inline ::std::string* mutable_branchno();
  inline ::std::string* release_branchno();
  
  // required string fundAccount = 2;
  inline bool has_fundaccount() const;
  inline void clear_fundaccount();
  static const int kFundAccountFieldNumber = 2;
  inline const ::std::string& fundaccount() const;
  inline void set_fundaccount(const ::std::string& value);
  inline void set_fundaccount(const char* value);
  inline void set_fundaccount(const char* value, size_t size);
  inline ::std::string* mutable_fundaccount();
  inline ::std::string* release_fundaccount();
  
  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // optional .HSCommPB.enums.exchangeType exchangeType = 4 [default = noneExchangeType];
  inline bool has_exchangetype() const;
  inline void clear_exchangetype();
  static const int kExchangeTypeFieldNumber = 4;
  inline ::HSCommPB::enums_exchangeType exchangetype() const;
  inline void set_exchangetype(::HSCommPB::enums_exchangeType value);
  
  // optional string stockCode = 5 [default = ""];
  inline bool has_stockcode() const;
  inline void clear_stockcode();
  static const int kStockCodeFieldNumber = 5;
  inline const ::std::string& stockcode() const;
  inline void set_stockcode(const ::std::string& value);
  inline void set_stockcode(const char* value);
  inline void set_stockcode(const char* value, size_t size);
  inline ::std::string* mutable_stockcode();
  inline ::std::string* release_stockcode();
  
  // optional int32 requestNumber = 6 [default = 1000];
  inline bool has_requestnumber() const;
  inline void clear_requestnumber();
  static const int kRequestNumberFieldNumber = 6;
  inline ::google::protobuf::int32 requestnumber() const;
  inline void set_requestnumber(::google::protobuf::int32 value);
  
  // optional string lastPositionString = 7 [default = ""];
  inline bool has_lastpositionstring() const;
  inline void clear_lastpositionstring();
  static const int kLastPositionStringFieldNumber = 7;
  inline const ::std::string& lastpositionstring() const;
  inline void set_lastpositionstring(const ::std::string& value);
  inline void set_lastpositionstring(const char* value);
  inline void set_lastpositionstring(const char* value, size_t size);
  inline ::std::string* mutable_lastpositionstring();
  inline ::std::string* release_lastpositionstring();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryStockRequest.call)
 private:
  inline void set_has_branchno();
  inline void clear_has_branchno();
  inline void set_has_fundaccount();
  inline void clear_has_fundaccount();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_exchangetype();
  inline void clear_has_exchangetype();
  inline void set_has_stockcode();
  inline void clear_has_stockcode();
  inline void set_has_requestnumber();
  inline void clear_has_requestnumber();
  inline void set_has_lastpositionstring();
  inline void clear_has_lastpositionstring();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* branchno_;
  ::std::string* fundaccount_;
  ::std::string* password_;
  ::std::string* stockcode_;
  int exchangetype_;
  ::google::protobuf::int32 requestnumber_;
  ::std::string* lastpositionstring_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryStockRequest_call* default_instance_;
};
// -------------------------------------------------------------------

class queryStockRequest : public ::google::protobuf::Message {
 public:
  queryStockRequest();
  virtual ~queryStockRequest();
  
  queryStockRequest(const queryStockRequest& from);
  
  inline queryStockRequest& operator=(const queryStockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryStockRequest& default_instance();
  
  void Swap(queryStockRequest* other);
  
  // implements Message ----------------------------------------------
  
  queryStockRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryStockRequest& from);
  void MergeFrom(const queryStockRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef queryStockRequest_call call;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.queryStockRequest.call requests = 1;
  inline int requests_size() const;
  inline void clear_requests();
  static const int kRequestsFieldNumber = 1;
  inline const ::HSCommPB::queryStockRequest_call& requests(int index) const;
  inline ::HSCommPB::queryStockRequest_call* mutable_requests(int index);
  inline ::HSCommPB::queryStockRequest_call* add_requests();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryStockRequest_call >&
      requests() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryStockRequest_call >*
      mutable_requests();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryStockRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryStockRequest_call > requests_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryStockRequest* default_instance_;
};
// -------------------------------------------------------------------

class queryStockResponse_result_stock : public ::google::protobuf::Message {
 public:
  queryStockResponse_result_stock();
  virtual ~queryStockResponse_result_stock();
  
  queryStockResponse_result_stock(const queryStockResponse_result_stock& from);
  
  inline queryStockResponse_result_stock& operator=(const queryStockResponse_result_stock& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryStockResponse_result_stock& default_instance();
  
  void Swap(queryStockResponse_result_stock* other);
  
  // implements Message ----------------------------------------------
  
  queryStockResponse_result_stock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryStockResponse_result_stock& from);
  void MergeFrom(const queryStockResponse_result_stock& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .HSCommPB.enums.exchangeType exchangeType = 1;
  inline bool has_exchangetype() const;
  inline void clear_exchangetype();
  static const int kExchangeTypeFieldNumber = 1;
  inline ::HSCommPB::enums_exchangeType exchangetype() const;
  inline void set_exchangetype(::HSCommPB::enums_exchangeType value);
  
  // required string stockAccount = 2;
  inline bool has_stockaccount() const;
  inline void clear_stockaccount();
  static const int kStockAccountFieldNumber = 2;
  inline const ::std::string& stockaccount() const;
  inline void set_stockaccount(const ::std::string& value);
  inline void set_stockaccount(const char* value);
  inline void set_stockaccount(const char* value, size_t size);
  inline ::std::string* mutable_stockaccount();
  inline ::std::string* release_stockaccount();
  
  // required string stockCode = 3;
  inline bool has_stockcode() const;
  inline void clear_stockcode();
  static const int kStockCodeFieldNumber = 3;
  inline const ::std::string& stockcode() const;
  inline void set_stockcode(const ::std::string& value);
  inline void set_stockcode(const char* value);
  inline void set_stockcode(const char* value, size_t size);
  inline ::std::string* mutable_stockcode();
  inline ::std::string* release_stockcode();
  
  // required string stockName = 4;
  inline bool has_stockname() const;
  inline void clear_stockname();
  static const int kStockNameFieldNumber = 4;
  inline const ::std::string& stockname() const;
  inline void set_stockname(const ::std::string& value);
  inline void set_stockname(const char* value);
  inline void set_stockname(const char* value, size_t size);
  inline ::std::string* mutable_stockname();
  inline ::std::string* release_stockname();
  
  // required int64 currentAmount = 5;
  inline bool has_currentamount() const;
  inline void clear_currentamount();
  static const int kCurrentAmountFieldNumber = 5;
  inline ::google::protobuf::int64 currentamount() const;
  inline void set_currentamount(::google::protobuf::int64 value);
  
  // required int64 enableAmount = 6;
  inline bool has_enableamount() const;
  inline void clear_enableamount();
  static const int kEnableAmountFieldNumber = 6;
  inline ::google::protobuf::int64 enableamount() const;
  inline void set_enableamount(::google::protobuf::int64 value);
  
  // required int64 lastPrice = 7;
  inline bool has_lastprice() const;
  inline void clear_lastprice();
  static const int kLastPriceFieldNumber = 7;
  inline ::google::protobuf::int64 lastprice() const;
  inline void set_lastprice(::google::protobuf::int64 value);
  
  // required int64 costPrice = 8;
  inline bool has_costprice() const;
  inline void clear_costprice();
  static const int kCostPriceFieldNumber = 8;
  inline ::google::protobuf::int64 costprice() const;
  inline void set_costprice(::google::protobuf::int64 value);
  
  // required int64 incomeBalance = 9;
  inline bool has_incomebalance() const;
  inline void clear_incomebalance();
  static const int kIncomeBalanceFieldNumber = 9;
  inline ::google::protobuf::int64 incomebalance() const;
  inline void set_incomebalance(::google::protobuf::int64 value);
  
  // required int64 marketValue = 10;
  inline bool has_marketvalue() const;
  inline void clear_marketvalue();
  static const int kMarketValueFieldNumber = 10;
  inline ::google::protobuf::int64 marketvalue() const;
  inline void set_marketvalue(::google::protobuf::int64 value);
  
  // required sint64 sumBuyAmount = 17 [default = -1];
  inline bool has_sumbuyamount() const;
  inline void clear_sumbuyamount();
  static const int kSumBuyAmountFieldNumber = 17;
  inline ::google::protobuf::int64 sumbuyamount() const;
  inline void set_sumbuyamount(::google::protobuf::int64 value);
  
  // required sint64 sumBuyBalance = 18 [default = -1];
  inline bool has_sumbuybalance() const;
  inline void clear_sumbuybalance();
  static const int kSumBuyBalanceFieldNumber = 18;
  inline ::google::protobuf::int64 sumbuybalance() const;
  inline void set_sumbuybalance(::google::protobuf::int64 value);
  
  // required sint64 realBuyAmount = 19 [default = -1];
  inline bool has_realbuyamount() const;
  inline void clear_realbuyamount();
  static const int kRealBuyAmountFieldNumber = 19;
  inline ::google::protobuf::int64 realbuyamount() const;
  inline void set_realbuyamount(::google::protobuf::int64 value);
  
  // required sint64 realBuyBalance = 20 [default = -1];
  inline bool has_realbuybalance() const;
  inline void clear_realbuybalance();
  static const int kRealBuyBalanceFieldNumber = 20;
  inline ::google::protobuf::int64 realbuybalance() const;
  inline void set_realbuybalance(::google::protobuf::int64 value);
  
  // required sint64 sumSellAmount = 21 [default = -1];
  inline bool has_sumsellamount() const;
  inline void clear_sumsellamount();
  static const int kSumSellAmountFieldNumber = 21;
  inline ::google::protobuf::int64 sumsellamount() const;
  inline void set_sumsellamount(::google::protobuf::int64 value);
  
  // required sint64 sumSellBalance = 22 [default = -1];
  inline bool has_sumsellbalance() const;
  inline void clear_sumsellbalance();
  static const int kSumSellBalanceFieldNumber = 22;
  inline ::google::protobuf::int64 sumsellbalance() const;
  inline void set_sumsellbalance(::google::protobuf::int64 value);
  
  // required sint64 realSellAmount = 23 [default = -1];
  inline bool has_realsellamount() const;
  inline void clear_realsellamount();
  static const int kRealSellAmountFieldNumber = 23;
  inline ::google::protobuf::int64 realsellamount() const;
  inline void set_realsellamount(::google::protobuf::int64 value);
  
  // required sint64 realSellBalance = 24 [default = -1];
  inline bool has_realsellbalance() const;
  inline void clear_realsellbalance();
  static const int kRealSellBalanceFieldNumber = 24;
  inline ::google::protobuf::int64 realsellbalance() const;
  inline void set_realsellbalance(::google::protobuf::int64 value);
  
  // required sint64 correctAmount = 25 [default = -1];
  inline bool has_correctamount() const;
  inline void clear_correctamount();
  static const int kCorrectAmountFieldNumber = 25;
  inline ::google::protobuf::int64 correctamount() const;
  inline void set_correctamount(::google::protobuf::int64 value);
  
  // required sint64 incomeBalanceNofare = 26 [default = -1];
  inline bool has_incomebalancenofare() const;
  inline void clear_incomebalancenofare();
  static const int kIncomeBalanceNofareFieldNumber = 26;
  inline ::google::protobuf::int64 incomebalancenofare() const;
  inline void set_incomebalancenofare(::google::protobuf::int64 value);
  
  // required sint64 uncomeBuyAmount = 27 [default = -1];
  inline bool has_uncomebuyamount() const;
  inline void clear_uncomebuyamount();
  static const int kUncomeBuyAmountFieldNumber = 27;
  inline ::google::protobuf::int64 uncomebuyamount() const;
  inline void set_uncomebuyamount(::google::protobuf::int64 value);
  
  // required sint64 uncomeSellAmount = 28 [default = -1];
  inline bool has_uncomesellamount() const;
  inline void clear_uncomesellamount();
  static const int kUncomeSellAmountFieldNumber = 28;
  inline ::google::protobuf::int64 uncomesellamount() const;
  inline void set_uncomesellamount(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryStockResponse.result.stock)
 private:
  inline void set_has_exchangetype();
  inline void clear_has_exchangetype();
  inline void set_has_stockaccount();
  inline void clear_has_stockaccount();
  inline void set_has_stockcode();
  inline void clear_has_stockcode();
  inline void set_has_stockname();
  inline void clear_has_stockname();
  inline void set_has_currentamount();
  inline void clear_has_currentamount();
  inline void set_has_enableamount();
  inline void clear_has_enableamount();
  inline void set_has_lastprice();
  inline void clear_has_lastprice();
  inline void set_has_costprice();
  inline void clear_has_costprice();
  inline void set_has_incomebalance();
  inline void clear_has_incomebalance();
  inline void set_has_marketvalue();
  inline void clear_has_marketvalue();
  inline void set_has_sumbuyamount();
  inline void clear_has_sumbuyamount();
  inline void set_has_sumbuybalance();
  inline void clear_has_sumbuybalance();
  inline void set_has_realbuyamount();
  inline void clear_has_realbuyamount();
  inline void set_has_realbuybalance();
  inline void clear_has_realbuybalance();
  inline void set_has_sumsellamount();
  inline void clear_has_sumsellamount();
  inline void set_has_sumsellbalance();
  inline void clear_has_sumsellbalance();
  inline void set_has_realsellamount();
  inline void clear_has_realsellamount();
  inline void set_has_realsellbalance();
  inline void clear_has_realsellbalance();
  inline void set_has_correctamount();
  inline void clear_has_correctamount();
  inline void set_has_incomebalancenofare();
  inline void clear_has_incomebalancenofare();
  inline void set_has_uncomebuyamount();
  inline void clear_has_uncomebuyamount();
  inline void set_has_uncomesellamount();
  inline void clear_has_uncomesellamount();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* stockaccount_;
  ::std::string* stockcode_;
  ::std::string* stockname_;
  ::google::protobuf::int64 currentamount_;
  ::google::protobuf::int64 enableamount_;
  ::google::protobuf::int64 lastprice_;
  ::google::protobuf::int64 costprice_;
  ::google::protobuf::int64 incomebalance_;
  ::google::protobuf::int64 marketvalue_;
  ::google::protobuf::int64 sumbuyamount_;
  ::google::protobuf::int64 sumbuybalance_;
  ::google::protobuf::int64 realbuyamount_;
  ::google::protobuf::int64 realbuybalance_;
  ::google::protobuf::int64 sumsellamount_;
  ::google::protobuf::int64 sumsellbalance_;
  ::google::protobuf::int64 realsellamount_;
  ::google::protobuf::int64 realsellbalance_;
  ::google::protobuf::int64 correctamount_;
  ::google::protobuf::int64 incomebalancenofare_;
  ::google::protobuf::int64 uncomebuyamount_;
  ::google::protobuf::int64 uncomesellamount_;
  int exchangetype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryStockResponse_result_stock* default_instance_;
};
// -------------------------------------------------------------------

class queryStockResponse_result : public ::google::protobuf::Message {
 public:
  queryStockResponse_result();
  virtual ~queryStockResponse_result();
  
  queryStockResponse_result(const queryStockResponse_result& from);
  
  inline queryStockResponse_result& operator=(const queryStockResponse_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryStockResponse_result& default_instance();
  
  void Swap(queryStockResponse_result* other);
  
  // implements Message ----------------------------------------------
  
  queryStockResponse_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryStockResponse_result& from);
  void MergeFrom(const queryStockResponse_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef queryStockResponse_result_stock stock;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.queryStockResponse.result.stock stocks = 1;
  inline int stocks_size() const;
  inline void clear_stocks();
  static const int kStocksFieldNumber = 1;
  inline const ::HSCommPB::queryStockResponse_result_stock& stocks(int index) const;
  inline ::HSCommPB::queryStockResponse_result_stock* mutable_stocks(int index);
  inline ::HSCommPB::queryStockResponse_result_stock* add_stocks();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryStockResponse_result_stock >&
      stocks() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryStockResponse_result_stock >*
      mutable_stocks();
  
  // required string lastPositionString = 2;
  inline bool has_lastpositionstring() const;
  inline void clear_lastpositionstring();
  static const int kLastPositionStringFieldNumber = 2;
  inline const ::std::string& lastpositionstring() const;
  inline void set_lastpositionstring(const ::std::string& value);
  inline void set_lastpositionstring(const char* value);
  inline void set_lastpositionstring(const char* value, size_t size);
  inline ::std::string* mutable_lastpositionstring();
  inline ::std::string* release_lastpositionstring();
  
  // optional int32 errorNo = 14 [default = 0];
  inline bool has_errorno() const;
  inline void clear_errorno();
  static const int kErrorNoFieldNumber = 14;
  inline ::google::protobuf::int32 errorno() const;
  inline void set_errorno(::google::protobuf::int32 value);
  
  // optional string errorMsg = 15 [default = ""];
  inline bool has_errormsg() const;
  inline void clear_errormsg();
  static const int kErrorMsgFieldNumber = 15;
  inline const ::std::string& errormsg() const;
  inline void set_errormsg(const ::std::string& value);
  inline void set_errormsg(const char* value);
  inline void set_errormsg(const char* value, size_t size);
  inline ::std::string* mutable_errormsg();
  inline ::std::string* release_errormsg();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryStockResponse.result)
 private:
  inline void set_has_lastpositionstring();
  inline void clear_has_lastpositionstring();
  inline void set_has_errorno();
  inline void clear_has_errorno();
  inline void set_has_errormsg();
  inline void clear_has_errormsg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryStockResponse_result_stock > stocks_;
  ::std::string* lastpositionstring_;
  ::std::string* errormsg_;
  ::google::protobuf::int32 errorno_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryStockResponse_result* default_instance_;
};
// -------------------------------------------------------------------

class queryStockResponse : public ::google::protobuf::Message {
 public:
  queryStockResponse();
  virtual ~queryStockResponse();
  
  queryStockResponse(const queryStockResponse& from);
  
  inline queryStockResponse& operator=(const queryStockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryStockResponse& default_instance();
  
  void Swap(queryStockResponse* other);
  
  // implements Message ----------------------------------------------
  
  queryStockResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryStockResponse& from);
  void MergeFrom(const queryStockResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef queryStockResponse_result result;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.queryStockResponse.result responses = 1;
  inline int responses_size() const;
  inline void clear_responses();
  static const int kResponsesFieldNumber = 1;
  inline const ::HSCommPB::queryStockResponse_result& responses(int index) const;
  inline ::HSCommPB::queryStockResponse_result* mutable_responses(int index);
  inline ::HSCommPB::queryStockResponse_result* add_responses();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryStockResponse_result >&
      responses() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryStockResponse_result >*
      mutable_responses();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryStockResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryStockResponse_result > responses_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryStockResponse* default_instance_;
};
// -------------------------------------------------------------------

class queryFundRequest_call : public ::google::protobuf::Message {
 public:
  queryFundRequest_call();
  virtual ~queryFundRequest_call();
  
  queryFundRequest_call(const queryFundRequest_call& from);
  
  inline queryFundRequest_call& operator=(const queryFundRequest_call& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryFundRequest_call& default_instance();
  
  void Swap(queryFundRequest_call* other);
  
  // implements Message ----------------------------------------------
  
  queryFundRequest_call* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryFundRequest_call& from);
  void MergeFrom(const queryFundRequest_call& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string branchNo = 1;
  inline bool has_branchno() const;
  inline void clear_branchno();
  static const int kBranchNoFieldNumber = 1;
  inline const ::std::string& branchno() const;
  inline void set_branchno(const ::std::string& value);
  inline void set_branchno(const char* value);
  inline void set_branchno(const char* value, size_t size);
  inline ::std::string* mutable_branchno();
  inline ::std::string* release_branchno();
  
  // required string fundAccount = 2;
  inline bool has_fundaccount() const;
  inline void clear_fundaccount();
  static const int kFundAccountFieldNumber = 2;
  inline const ::std::string& fundaccount() const;
  inline void set_fundaccount(const ::std::string& value);
  inline void set_fundaccount(const char* value);
  inline void set_fundaccount(const char* value, size_t size);
  inline ::std::string* mutable_fundaccount();
  inline ::std::string* release_fundaccount();
  
  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // optional .HSCommPB.enums.moneyType moneyType = 4 [default = noneMoneyType];
  inline bool has_moneytype() const;
  inline void clear_moneytype();
  static const int kMoneyTypeFieldNumber = 4;
  inline ::HSCommPB::enums_moneyType moneytype() const;
  inline void set_moneytype(::HSCommPB::enums_moneyType value);
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryFundRequest.call)
 private:
  inline void set_has_branchno();
  inline void clear_has_branchno();
  inline void set_has_fundaccount();
  inline void clear_has_fundaccount();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_moneytype();
  inline void clear_has_moneytype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* branchno_;
  ::std::string* fundaccount_;
  ::std::string* password_;
  int moneytype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryFundRequest_call* default_instance_;
};
// -------------------------------------------------------------------

class queryFundRequest : public ::google::protobuf::Message {
 public:
  queryFundRequest();
  virtual ~queryFundRequest();
  
  queryFundRequest(const queryFundRequest& from);
  
  inline queryFundRequest& operator=(const queryFundRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryFundRequest& default_instance();
  
  void Swap(queryFundRequest* other);
  
  // implements Message ----------------------------------------------
  
  queryFundRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryFundRequest& from);
  void MergeFrom(const queryFundRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef queryFundRequest_call call;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.queryFundRequest.call requests = 1;
  inline int requests_size() const;
  inline void clear_requests();
  static const int kRequestsFieldNumber = 1;
  inline const ::HSCommPB::queryFundRequest_call& requests(int index) const;
  inline ::HSCommPB::queryFundRequest_call* mutable_requests(int index);
  inline ::HSCommPB::queryFundRequest_call* add_requests();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryFundRequest_call >&
      requests() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryFundRequest_call >*
      mutable_requests();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryFundRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryFundRequest_call > requests_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryFundRequest* default_instance_;
};
// -------------------------------------------------------------------

class queryFundResponse_result_currency : public ::google::protobuf::Message {
 public:
  queryFundResponse_result_currency();
  virtual ~queryFundResponse_result_currency();
  
  queryFundResponse_result_currency(const queryFundResponse_result_currency& from);
  
  inline queryFundResponse_result_currency& operator=(const queryFundResponse_result_currency& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryFundResponse_result_currency& default_instance();
  
  void Swap(queryFundResponse_result_currency* other);
  
  // implements Message ----------------------------------------------
  
  queryFundResponse_result_currency* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryFundResponse_result_currency& from);
  void MergeFrom(const queryFundResponse_result_currency& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .HSCommPB.enums.moneyType moneyType = 1 [default = noneMoneyType];
  inline bool has_moneytype() const;
  inline void clear_moneytype();
  static const int kMoneyTypeFieldNumber = 1;
  inline ::HSCommPB::enums_moneyType moneytype() const;
  inline void set_moneytype(::HSCommPB::enums_moneyType value);
  
  // required int64 currentBalance = 2;
  inline bool has_currentbalance() const;
  inline void clear_currentbalance();
  static const int kCurrentBalanceFieldNumber = 2;
  inline ::google::protobuf::int64 currentbalance() const;
  inline void set_currentbalance(::google::protobuf::int64 value);
  
  // required int64 enableBalance = 3;
  inline bool has_enablebalance() const;
  inline void clear_enablebalance();
  static const int kEnableBalanceFieldNumber = 3;
  inline ::google::protobuf::int64 enablebalance() const;
  inline void set_enablebalance(::google::protobuf::int64 value);
  
  // required int64 fetchBalance = 4;
  inline bool has_fetchbalance() const;
  inline void clear_fetchbalance();
  static const int kFetchBalanceFieldNumber = 4;
  inline ::google::protobuf::int64 fetchbalance() const;
  inline void set_fetchbalance(::google::protobuf::int64 value);
  
  // required int64 interest = 5;
  inline bool has_interest() const;
  inline void clear_interest();
  static const int kInterestFieldNumber = 5;
  inline ::google::protobuf::int64 interest() const;
  inline void set_interest(::google::protobuf::int64 value);
  
  // required int64 assetBalance = 6;
  inline bool has_assetbalance() const;
  inline void clear_assetbalance();
  static const int kAssetBalanceFieldNumber = 6;
  inline ::google::protobuf::int64 assetbalance() const;
  inline void set_assetbalance(::google::protobuf::int64 value);
  
  // required int64 fetchCash = 7;
  inline bool has_fetchcash() const;
  inline void clear_fetchcash();
  static const int kFetchCashFieldNumber = 7;
  inline ::google::protobuf::int64 fetchcash() const;
  inline void set_fetchcash(::google::protobuf::int64 value);
  
  // required int64 fundBalance = 8;
  inline bool has_fundbalance() const;
  inline void clear_fundbalance();
  static const int kFundBalanceFieldNumber = 8;
  inline ::google::protobuf::int64 fundbalance() const;
  inline void set_fundbalance(::google::protobuf::int64 value);
  
  // required int64 marketValue = 9;
  inline bool has_marketvalue() const;
  inline void clear_marketvalue();
  static const int kMarketValueFieldNumber = 9;
  inline ::google::protobuf::int64 marketvalue() const;
  inline void set_marketvalue(::google::protobuf::int64 value);
  
  // required int64 opfundMarketValue = 10;
  inline bool has_opfundmarketvalue() const;
  inline void clear_opfundmarketvalue();
  static const int kOpfundMarketValueFieldNumber = 10;
  inline ::google::protobuf::int64 opfundmarketvalue() const;
  inline void set_opfundmarketvalue(::google::protobuf::int64 value);
  
  // required int64 preInterest = 11;
  inline bool has_preinterest() const;
  inline void clear_preinterest();
  static const int kPreInterestFieldNumber = 11;
  inline ::google::protobuf::int64 preinterest() const;
  inline void set_preinterest(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryFundResponse.result.currency)
 private:
  inline void set_has_moneytype();
  inline void clear_has_moneytype();
  inline void set_has_currentbalance();
  inline void clear_has_currentbalance();
  inline void set_has_enablebalance();
  inline void clear_has_enablebalance();
  inline void set_has_fetchbalance();
  inline void clear_has_fetchbalance();
  inline void set_has_interest();
  inline void clear_has_interest();
  inline void set_has_assetbalance();
  inline void clear_has_assetbalance();
  inline void set_has_fetchcash();
  inline void clear_has_fetchcash();
  inline void set_has_fundbalance();
  inline void clear_has_fundbalance();
  inline void set_has_marketvalue();
  inline void clear_has_marketvalue();
  inline void set_has_opfundmarketvalue();
  inline void clear_has_opfundmarketvalue();
  inline void set_has_preinterest();
  inline void clear_has_preinterest();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 currentbalance_;
  ::google::protobuf::int64 enablebalance_;
  ::google::protobuf::int64 fetchbalance_;
  ::google::protobuf::int64 interest_;
  ::google::protobuf::int64 assetbalance_;
  ::google::protobuf::int64 fetchcash_;
  ::google::protobuf::int64 fundbalance_;
  ::google::protobuf::int64 marketvalue_;
  ::google::protobuf::int64 opfundmarketvalue_;
  ::google::protobuf::int64 preinterest_;
  int moneytype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryFundResponse_result_currency* default_instance_;
};
// -------------------------------------------------------------------

class queryFundResponse_result : public ::google::protobuf::Message {
 public:
  queryFundResponse_result();
  virtual ~queryFundResponse_result();
  
  queryFundResponse_result(const queryFundResponse_result& from);
  
  inline queryFundResponse_result& operator=(const queryFundResponse_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryFundResponse_result& default_instance();
  
  void Swap(queryFundResponse_result* other);
  
  // implements Message ----------------------------------------------
  
  queryFundResponse_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryFundResponse_result& from);
  void MergeFrom(const queryFundResponse_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef queryFundResponse_result_currency currency;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.queryFundResponse.result.currency money = 1;
  inline int money_size() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 1;
  inline const ::HSCommPB::queryFundResponse_result_currency& money(int index) const;
  inline ::HSCommPB::queryFundResponse_result_currency* mutable_money(int index);
  inline ::HSCommPB::queryFundResponse_result_currency* add_money();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryFundResponse_result_currency >&
      money() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryFundResponse_result_currency >*
      mutable_money();
  
  // optional int32 errorNo = 14 [default = 0];
  inline bool has_errorno() const;
  inline void clear_errorno();
  static const int kErrorNoFieldNumber = 14;
  inline ::google::protobuf::int32 errorno() const;
  inline void set_errorno(::google::protobuf::int32 value);
  
  // optional string errorMsg = 15 [default = ""];
  inline bool has_errormsg() const;
  inline void clear_errormsg();
  static const int kErrorMsgFieldNumber = 15;
  inline const ::std::string& errormsg() const;
  inline void set_errormsg(const ::std::string& value);
  inline void set_errormsg(const char* value);
  inline void set_errormsg(const char* value, size_t size);
  inline ::std::string* mutable_errormsg();
  inline ::std::string* release_errormsg();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryFundResponse.result)
 private:
  inline void set_has_errorno();
  inline void clear_has_errorno();
  inline void set_has_errormsg();
  inline void clear_has_errormsg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryFundResponse_result_currency > money_;
  ::std::string* errormsg_;
  ::google::protobuf::int32 errorno_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryFundResponse_result* default_instance_;
};
// -------------------------------------------------------------------

class queryFundResponse : public ::google::protobuf::Message {
 public:
  queryFundResponse();
  virtual ~queryFundResponse();
  
  queryFundResponse(const queryFundResponse& from);
  
  inline queryFundResponse& operator=(const queryFundResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryFundResponse& default_instance();
  
  void Swap(queryFundResponse* other);
  
  // implements Message ----------------------------------------------
  
  queryFundResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryFundResponse& from);
  void MergeFrom(const queryFundResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef queryFundResponse_result result;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.queryFundResponse.result responses = 1;
  inline int responses_size() const;
  inline void clear_responses();
  static const int kResponsesFieldNumber = 1;
  inline const ::HSCommPB::queryFundResponse_result& responses(int index) const;
  inline ::HSCommPB::queryFundResponse_result* mutable_responses(int index);
  inline ::HSCommPB::queryFundResponse_result* add_responses();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryFundResponse_result >&
      responses() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryFundResponse_result >*
      mutable_responses();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryFundResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryFundResponse_result > responses_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryFundResponse* default_instance_;
};
// -------------------------------------------------------------------

class queryShareholderRequest_call : public ::google::protobuf::Message {
 public:
  queryShareholderRequest_call();
  virtual ~queryShareholderRequest_call();
  
  queryShareholderRequest_call(const queryShareholderRequest_call& from);
  
  inline queryShareholderRequest_call& operator=(const queryShareholderRequest_call& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryShareholderRequest_call& default_instance();
  
  void Swap(queryShareholderRequest_call* other);
  
  // implements Message ----------------------------------------------
  
  queryShareholderRequest_call* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryShareholderRequest_call& from);
  void MergeFrom(const queryShareholderRequest_call& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string branchNo = 1;
  inline bool has_branchno() const;
  inline void clear_branchno();
  static const int kBranchNoFieldNumber = 1;
  inline const ::std::string& branchno() const;
  inline void set_branchno(const ::std::string& value);
  inline void set_branchno(const char* value);
  inline void set_branchno(const char* value, size_t size);
  inline ::std::string* mutable_branchno();
  inline ::std::string* release_branchno();
  
  // required string fundAccount = 2;
  inline bool has_fundaccount() const;
  inline void clear_fundaccount();
  static const int kFundAccountFieldNumber = 2;
  inline const ::std::string& fundaccount() const;
  inline void set_fundaccount(const ::std::string& value);
  inline void set_fundaccount(const char* value);
  inline void set_fundaccount(const char* value, size_t size);
  inline ::std::string* mutable_fundaccount();
  inline ::std::string* release_fundaccount();
  
  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // optional .HSCommPB.enums.exchangeType exchangeType = 4 [default = noneExchangeType];
  inline bool has_exchangetype() const;
  inline void clear_exchangetype();
  static const int kExchangeTypeFieldNumber = 4;
  inline ::HSCommPB::enums_exchangeType exchangetype() const;
  inline void set_exchangetype(::HSCommPB::enums_exchangeType value);
  
  // optional string stockCode = 5 [default = ""];
  inline bool has_stockcode() const;
  inline void clear_stockcode();
  static const int kStockCodeFieldNumber = 5;
  inline const ::std::string& stockcode() const;
  inline void set_stockcode(const ::std::string& value);
  inline void set_stockcode(const char* value);
  inline void set_stockcode(const char* value, size_t size);
  inline ::std::string* mutable_stockcode();
  inline ::std::string* release_stockcode();
  
  // optional int32 requestNumber = 6 [default = 1000];
  inline bool has_requestnumber() const;
  inline void clear_requestnumber();
  static const int kRequestNumberFieldNumber = 6;
  inline ::google::protobuf::int32 requestnumber() const;
  inline void set_requestnumber(::google::protobuf::int32 value);
  
  // optional string lastPositionString = 7 [default = ""];
  inline bool has_lastpositionstring() const;
  inline void clear_lastpositionstring();
  static const int kLastPositionStringFieldNumber = 7;
  inline const ::std::string& lastpositionstring() const;
  inline void set_lastpositionstring(const ::std::string& value);
  inline void set_lastpositionstring(const char* value);
  inline void set_lastpositionstring(const char* value, size_t size);
  inline ::std::string* mutable_lastpositionstring();
  inline ::std::string* release_lastpositionstring();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryShareholderRequest.call)
 private:
  inline void set_has_branchno();
  inline void clear_has_branchno();
  inline void set_has_fundaccount();
  inline void clear_has_fundaccount();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_exchangetype();
  inline void clear_has_exchangetype();
  inline void set_has_stockcode();
  inline void clear_has_stockcode();
  inline void set_has_requestnumber();
  inline void clear_has_requestnumber();
  inline void set_has_lastpositionstring();
  inline void clear_has_lastpositionstring();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* branchno_;
  ::std::string* fundaccount_;
  ::std::string* password_;
  ::std::string* stockcode_;
  int exchangetype_;
  ::google::protobuf::int32 requestnumber_;
  ::std::string* lastpositionstring_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryShareholderRequest_call* default_instance_;
};
// -------------------------------------------------------------------

class queryShareholderRequest : public ::google::protobuf::Message {
 public:
  queryShareholderRequest();
  virtual ~queryShareholderRequest();
  
  queryShareholderRequest(const queryShareholderRequest& from);
  
  inline queryShareholderRequest& operator=(const queryShareholderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryShareholderRequest& default_instance();
  
  void Swap(queryShareholderRequest* other);
  
  // implements Message ----------------------------------------------
  
  queryShareholderRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryShareholderRequest& from);
  void MergeFrom(const queryShareholderRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef queryShareholderRequest_call call;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.queryShareholderRequest.call requests = 1;
  inline int requests_size() const;
  inline void clear_requests();
  static const int kRequestsFieldNumber = 1;
  inline const ::HSCommPB::queryShareholderRequest_call& requests(int index) const;
  inline ::HSCommPB::queryShareholderRequest_call* mutable_requests(int index);
  inline ::HSCommPB::queryShareholderRequest_call* add_requests();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryShareholderRequest_call >&
      requests() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryShareholderRequest_call >*
      mutable_requests();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryShareholderRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryShareholderRequest_call > requests_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryShareholderRequest* default_instance_;
};
// -------------------------------------------------------------------

class queryShareholderResponse_result_shareholder : public ::google::protobuf::Message {
 public:
  queryShareholderResponse_result_shareholder();
  virtual ~queryShareholderResponse_result_shareholder();
  
  queryShareholderResponse_result_shareholder(const queryShareholderResponse_result_shareholder& from);
  
  inline queryShareholderResponse_result_shareholder& operator=(const queryShareholderResponse_result_shareholder& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryShareholderResponse_result_shareholder& default_instance();
  
  void Swap(queryShareholderResponse_result_shareholder* other);
  
  // implements Message ----------------------------------------------
  
  queryShareholderResponse_result_shareholder* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryShareholderResponse_result_shareholder& from);
  void MergeFrom(const queryShareholderResponse_result_shareholder& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .HSCommPB.enums.exchangeType exchangeType = 1;
  inline bool has_exchangetype() const;
  inline void clear_exchangetype();
  static const int kExchangeTypeFieldNumber = 1;
  inline ::HSCommPB::enums_exchangeType exchangetype() const;
  inline void set_exchangetype(::HSCommPB::enums_exchangeType value);
  
  // required string exchangeName = 2;
  inline bool has_exchangename() const;
  inline void clear_exchangename();
  static const int kExchangeNameFieldNumber = 2;
  inline const ::std::string& exchangename() const;
  inline void set_exchangename(const ::std::string& value);
  inline void set_exchangename(const char* value);
  inline void set_exchangename(const char* value, size_t size);
  inline ::std::string* mutable_exchangename();
  inline ::std::string* release_exchangename();
  
  // required string stockAccount = 3;
  inline bool has_stockaccount() const;
  inline void clear_stockaccount();
  static const int kStockAccountFieldNumber = 3;
  inline const ::std::string& stockaccount() const;
  inline void set_stockaccount(const ::std::string& value);
  inline void set_stockaccount(const char* value);
  inline void set_stockaccount(const char* value, size_t size);
  inline ::std::string* mutable_stockaccount();
  inline ::std::string* release_stockaccount();
  
  // required .HSCommPB.enums.holderStatus holderStatus = 4;
  inline bool has_holderstatus() const;
  inline void clear_holderstatus();
  static const int kHolderStatusFieldNumber = 4;
  inline ::HSCommPB::enums_holderStatus holderstatus() const;
  inline void set_holderstatus(::HSCommPB::enums_holderStatus value);
  
  // required bool mainShareHolder = 5;
  inline bool has_mainshareholder() const;
  inline void clear_mainshareholder();
  static const int kMainShareHolderFieldNumber = 5;
  inline bool mainshareholder() const;
  inline void set_mainshareholder(bool value);
  
  // optional string seatNo = 6 [default = ""];
  inline bool has_seatno() const;
  inline void clear_seatno();
  static const int kSeatNoFieldNumber = 6;
  inline const ::std::string& seatno() const;
  inline void set_seatno(const ::std::string& value);
  inline void set_seatno(const char* value);
  inline void set_seatno(const char* value, size_t size);
  inline ::std::string* mutable_seatno();
  inline ::std::string* release_seatno();
  
  // optional sint64 enableAmount = 7 [default = -1];
  inline bool has_enableamount() const;
  inline void clear_enableamount();
  static const int kEnableAmountFieldNumber = 7;
  inline ::google::protobuf::int64 enableamount() const;
  inline void set_enableamount(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryShareholderResponse.result.shareholder)
 private:
  inline void set_has_exchangetype();
  inline void clear_has_exchangetype();
  inline void set_has_exchangename();
  inline void clear_has_exchangename();
  inline void set_has_stockaccount();
  inline void clear_has_stockaccount();
  inline void set_has_holderstatus();
  inline void clear_has_holderstatus();
  inline void set_has_mainshareholder();
  inline void clear_has_mainshareholder();
  inline void set_has_seatno();
  inline void clear_has_seatno();
  inline void set_has_enableamount();
  inline void clear_has_enableamount();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* exchangename_;
  int exchangetype_;
  int holderstatus_;
  ::std::string* stockaccount_;
  ::std::string* seatno_;
  ::google::protobuf::int64 enableamount_;
  bool mainshareholder_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryShareholderResponse_result_shareholder* default_instance_;
};
// -------------------------------------------------------------------

class queryShareholderResponse_result : public ::google::protobuf::Message {
 public:
  queryShareholderResponse_result();
  virtual ~queryShareholderResponse_result();
  
  queryShareholderResponse_result(const queryShareholderResponse_result& from);
  
  inline queryShareholderResponse_result& operator=(const queryShareholderResponse_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryShareholderResponse_result& default_instance();
  
  void Swap(queryShareholderResponse_result* other);
  
  // implements Message ----------------------------------------------
  
  queryShareholderResponse_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryShareholderResponse_result& from);
  void MergeFrom(const queryShareholderResponse_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef queryShareholderResponse_result_shareholder shareholder;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.queryShareholderResponse.result.shareholder shareholders = 1;
  inline int shareholders_size() const;
  inline void clear_shareholders();
  static const int kShareholdersFieldNumber = 1;
  inline const ::HSCommPB::queryShareholderResponse_result_shareholder& shareholders(int index) const;
  inline ::HSCommPB::queryShareholderResponse_result_shareholder* mutable_shareholders(int index);
  inline ::HSCommPB::queryShareholderResponse_result_shareholder* add_shareholders();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryShareholderResponse_result_shareholder >&
      shareholders() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryShareholderResponse_result_shareholder >*
      mutable_shareholders();
  
  // required string lastPositionString = 2;
  inline bool has_lastpositionstring() const;
  inline void clear_lastpositionstring();
  static const int kLastPositionStringFieldNumber = 2;
  inline const ::std::string& lastpositionstring() const;
  inline void set_lastpositionstring(const ::std::string& value);
  inline void set_lastpositionstring(const char* value);
  inline void set_lastpositionstring(const char* value, size_t size);
  inline ::std::string* mutable_lastpositionstring();
  inline ::std::string* release_lastpositionstring();
  
  // optional int32 errorNo = 14 [default = 0];
  inline bool has_errorno() const;
  inline void clear_errorno();
  static const int kErrorNoFieldNumber = 14;
  inline ::google::protobuf::int32 errorno() const;
  inline void set_errorno(::google::protobuf::int32 value);
  
  // optional string errorMsg = 15 [default = ""];
  inline bool has_errormsg() const;
  inline void clear_errormsg();
  static const int kErrorMsgFieldNumber = 15;
  inline const ::std::string& errormsg() const;
  inline void set_errormsg(const ::std::string& value);
  inline void set_errormsg(const char* value);
  inline void set_errormsg(const char* value, size_t size);
  inline ::std::string* mutable_errormsg();
  inline ::std::string* release_errormsg();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryShareholderResponse.result)
 private:
  inline void set_has_lastpositionstring();
  inline void clear_has_lastpositionstring();
  inline void set_has_errorno();
  inline void clear_has_errorno();
  inline void set_has_errormsg();
  inline void clear_has_errormsg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryShareholderResponse_result_shareholder > shareholders_;
  ::std::string* lastpositionstring_;
  ::std::string* errormsg_;
  ::google::protobuf::int32 errorno_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryShareholderResponse_result* default_instance_;
};
// -------------------------------------------------------------------

class queryShareholderResponse : public ::google::protobuf::Message {
 public:
  queryShareholderResponse();
  virtual ~queryShareholderResponse();
  
  queryShareholderResponse(const queryShareholderResponse& from);
  
  inline queryShareholderResponse& operator=(const queryShareholderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryShareholderResponse& default_instance();
  
  void Swap(queryShareholderResponse* other);
  
  // implements Message ----------------------------------------------
  
  queryShareholderResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryShareholderResponse& from);
  void MergeFrom(const queryShareholderResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef queryShareholderResponse_result result;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.queryShareholderResponse.result responses = 1;
  inline int responses_size() const;
  inline void clear_responses();
  static const int kResponsesFieldNumber = 1;
  inline const ::HSCommPB::queryShareholderResponse_result& responses(int index) const;
  inline ::HSCommPB::queryShareholderResponse_result* mutable_responses(int index);
  inline ::HSCommPB::queryShareholderResponse_result* add_responses();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryShareholderResponse_result >&
      responses() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryShareholderResponse_result >*
      mutable_responses();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryShareholderResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryShareholderResponse_result > responses_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryShareholderResponse* default_instance_;
};
// -------------------------------------------------------------------

class queryBusinessRequest_call : public ::google::protobuf::Message {
 public:
  queryBusinessRequest_call();
  virtual ~queryBusinessRequest_call();
  
  queryBusinessRequest_call(const queryBusinessRequest_call& from);
  
  inline queryBusinessRequest_call& operator=(const queryBusinessRequest_call& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryBusinessRequest_call& default_instance();
  
  void Swap(queryBusinessRequest_call* other);
  
  // implements Message ----------------------------------------------
  
  queryBusinessRequest_call* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryBusinessRequest_call& from);
  void MergeFrom(const queryBusinessRequest_call& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string branchNo = 1;
  inline bool has_branchno() const;
  inline void clear_branchno();
  static const int kBranchNoFieldNumber = 1;
  inline const ::std::string& branchno() const;
  inline void set_branchno(const ::std::string& value);
  inline void set_branchno(const char* value);
  inline void set_branchno(const char* value, size_t size);
  inline ::std::string* mutable_branchno();
  inline ::std::string* release_branchno();
  
  // required string fundAccount = 2;
  inline bool has_fundaccount() const;
  inline void clear_fundaccount();
  static const int kFundAccountFieldNumber = 2;
  inline const ::std::string& fundaccount() const;
  inline void set_fundaccount(const ::std::string& value);
  inline void set_fundaccount(const char* value);
  inline void set_fundaccount(const char* value, size_t size);
  inline ::std::string* mutable_fundaccount();
  inline ::std::string* release_fundaccount();
  
  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // optional int32 startDate = 4 [default = 0];
  inline bool has_startdate() const;
  inline void clear_startdate();
  static const int kStartDateFieldNumber = 4;
  inline ::google::protobuf::int32 startdate() const;
  inline void set_startdate(::google::protobuf::int32 value);
  
  // optional int32 endDate = 5 [default = 0];
  inline bool has_enddate() const;
  inline void clear_enddate();
  static const int kEndDateFieldNumber = 5;
  inline ::google::protobuf::int32 enddate() const;
  inline void set_enddate(::google::protobuf::int32 value);
  
  // optional .HSCommPB.enums.exchangeType exchangeType = 6 [default = noneExchangeType];
  inline bool has_exchangetype() const;
  inline void clear_exchangetype();
  static const int kExchangeTypeFieldNumber = 6;
  inline ::HSCommPB::enums_exchangeType exchangetype() const;
  inline void set_exchangetype(::HSCommPB::enums_exchangeType value);
  
  // optional string stockCode = 7 [default = ""];
  inline bool has_stockcode() const;
  inline void clear_stockcode();
  static const int kStockCodeFieldNumber = 7;
  inline const ::std::string& stockcode() const;
  inline void set_stockcode(const ::std::string& value);
  inline void set_stockcode(const char* value);
  inline void set_stockcode(const char* value, size_t size);
  inline ::std::string* mutable_stockcode();
  inline ::std::string* release_stockcode();
  
  // optional int32 requestNumber = 8 [default = 1000];
  inline bool has_requestnumber() const;
  inline void clear_requestnumber();
  static const int kRequestNumberFieldNumber = 8;
  inline ::google::protobuf::int32 requestnumber() const;
  inline void set_requestnumber(::google::protobuf::int32 value);
  
  // optional string lastPositionString = 9 [default = ""];
  inline bool has_lastpositionstring() const;
  inline void clear_lastpositionstring();
  static const int kLastPositionStringFieldNumber = 9;
  inline const ::std::string& lastpositionstring() const;
  inline void set_lastpositionstring(const ::std::string& value);
  inline void set_lastpositionstring(const char* value);
  inline void set_lastpositionstring(const char* value, size_t size);
  inline ::std::string* mutable_lastpositionstring();
  inline ::std::string* release_lastpositionstring();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryBusinessRequest.call)
 private:
  inline void set_has_branchno();
  inline void clear_has_branchno();
  inline void set_has_fundaccount();
  inline void clear_has_fundaccount();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_startdate();
  inline void clear_has_startdate();
  inline void set_has_enddate();
  inline void clear_has_enddate();
  inline void set_has_exchangetype();
  inline void clear_has_exchangetype();
  inline void set_has_stockcode();
  inline void clear_has_stockcode();
  inline void set_has_requestnumber();
  inline void clear_has_requestnumber();
  inline void set_has_lastpositionstring();
  inline void clear_has_lastpositionstring();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* branchno_;
  ::std::string* fundaccount_;
  ::std::string* password_;
  ::google::protobuf::int32 startdate_;
  ::google::protobuf::int32 enddate_;
  ::std::string* stockcode_;
  int exchangetype_;
  ::google::protobuf::int32 requestnumber_;
  ::std::string* lastpositionstring_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryBusinessRequest_call* default_instance_;
};
// -------------------------------------------------------------------

class queryBusinessRequest : public ::google::protobuf::Message {
 public:
  queryBusinessRequest();
  virtual ~queryBusinessRequest();
  
  queryBusinessRequest(const queryBusinessRequest& from);
  
  inline queryBusinessRequest& operator=(const queryBusinessRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryBusinessRequest& default_instance();
  
  void Swap(queryBusinessRequest* other);
  
  // implements Message ----------------------------------------------
  
  queryBusinessRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryBusinessRequest& from);
  void MergeFrom(const queryBusinessRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef queryBusinessRequest_call call;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.queryBusinessRequest.call requests = 1;
  inline int requests_size() const;
  inline void clear_requests();
  static const int kRequestsFieldNumber = 1;
  inline const ::HSCommPB::queryBusinessRequest_call& requests(int index) const;
  inline ::HSCommPB::queryBusinessRequest_call* mutable_requests(int index);
  inline ::HSCommPB::queryBusinessRequest_call* add_requests();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryBusinessRequest_call >&
      requests() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryBusinessRequest_call >*
      mutable_requests();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryBusinessRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryBusinessRequest_call > requests_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryBusinessRequest* default_instance_;
};
// -------------------------------------------------------------------

class queryBusinessResponse_result_business : public ::google::protobuf::Message {
 public:
  queryBusinessResponse_result_business();
  virtual ~queryBusinessResponse_result_business();
  
  queryBusinessResponse_result_business(const queryBusinessResponse_result_business& from);
  
  inline queryBusinessResponse_result_business& operator=(const queryBusinessResponse_result_business& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryBusinessResponse_result_business& default_instance();
  
  void Swap(queryBusinessResponse_result_business* other);
  
  // implements Message ----------------------------------------------
  
  queryBusinessResponse_result_business* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryBusinessResponse_result_business& from);
  void MergeFrom(const queryBusinessResponse_result_business& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 date = 1;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 1;
  inline ::google::protobuf::int32 date() const;
  inline void set_date(::google::protobuf::int32 value);
  
  // required int32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);
  
  // required .HSCommPB.enums.exchangeType exchangeType = 3;
  inline bool has_exchangetype() const;
  inline void clear_exchangetype();
  static const int kExchangeTypeFieldNumber = 3;
  inline ::HSCommPB::enums_exchangeType exchangetype() const;
  inline void set_exchangetype(::HSCommPB::enums_exchangeType value);
  
  // required string stockAccount = 4;
  inline bool has_stockaccount() const;
  inline void clear_stockaccount();
  static const int kStockAccountFieldNumber = 4;
  inline const ::std::string& stockaccount() const;
  inline void set_stockaccount(const ::std::string& value);
  inline void set_stockaccount(const char* value);
  inline void set_stockaccount(const char* value, size_t size);
  inline ::std::string* mutable_stockaccount();
  inline ::std::string* release_stockaccount();
  
  // required string stockCode = 5;
  inline bool has_stockcode() const;
  inline void clear_stockcode();
  static const int kStockCodeFieldNumber = 5;
  inline const ::std::string& stockcode() const;
  inline void set_stockcode(const ::std::string& value);
  inline void set_stockcode(const char* value);
  inline void set_stockcode(const char* value, size_t size);
  inline ::std::string* mutable_stockcode();
  inline ::std::string* release_stockcode();
  
  // required string stockName = 6;
  inline bool has_stockname() const;
  inline void clear_stockname();
  static const int kStockNameFieldNumber = 6;
  inline const ::std::string& stockname() const;
  inline void set_stockname(const ::std::string& value);
  inline void set_stockname(const char* value);
  inline void set_stockname(const char* value, size_t size);
  inline ::std::string* mutable_stockname();
  inline ::std::string* release_stockname();
  
  // required .HSCommPB.enums.entrustBS entrustBS = 7;
  inline bool has_entrustbs() const;
  inline void clear_entrustbs();
  static const int kEntrustBSFieldNumber = 7;
  inline ::HSCommPB::enums_entrustBS entrustbs() const;
  inline void set_entrustbs(::HSCommPB::enums_entrustBS value);
  
  // required int64 businessAmount = 8;
  inline bool has_businessamount() const;
  inline void clear_businessamount();
  static const int kBusinessAmountFieldNumber = 8;
  inline ::google::protobuf::int64 businessamount() const;
  inline void set_businessamount(::google::protobuf::int64 value);
  
  // required int64 businessPrice = 9;
  inline bool has_businessprice() const;
  inline void clear_businessprice();
  static const int kBusinessPriceFieldNumber = 9;
  inline ::google::protobuf::int64 businessprice() const;
  inline void set_businessprice(::google::protobuf::int64 value);
  
  // required int64 businessBalance = 10;
  inline bool has_businessbalance() const;
  inline void clear_businessbalance();
  static const int kBusinessBalanceFieldNumber = 10;
  inline ::google::protobuf::int64 businessbalance() const;
  inline void set_businessbalance(::google::protobuf::int64 value);
  
  // required int32 businessTimes = 11;
  inline bool has_businesstimes() const;
  inline void clear_businesstimes();
  static const int kBusinessTimesFieldNumber = 11;
  inline ::google::protobuf::int32 businesstimes() const;
  inline void set_businesstimes(::google::protobuf::int32 value);
  
  // required .HSCommPB.enums.businessStatus businessStatus = 12;
  inline bool has_businessstatus() const;
  inline void clear_businessstatus();
  static const int kBusinessStatusFieldNumber = 12;
  inline ::HSCommPB::enums_businessStatus businessstatus() const;
  inline void set_businessstatus(::HSCommPB::enums_businessStatus value);
  
  // required .HSCommPB.enums.businessType businessType = 13;
  inline bool has_businesstype() const;
  inline void clear_businesstype();
  static const int kBusinessTypeFieldNumber = 13;
  inline ::HSCommPB::enums_businessType businesstype() const;
  inline void set_businesstype(::HSCommPB::enums_businessType value);
  
  // required string entrustNo = 14;
  inline bool has_entrustno() const;
  inline void clear_entrustno();
  static const int kEntrustNoFieldNumber = 14;
  inline const ::std::string& entrustno() const;
  inline void set_entrustno(const ::std::string& value);
  inline void set_entrustno(const char* value);
  inline void set_entrustno(const char* value, size_t size);
  inline ::std::string* mutable_entrustno();
  inline ::std::string* release_entrustno();
  
  // required string reportNo = 15;
  inline bool has_reportno() const;
  inline void clear_reportno();
  static const int kReportNoFieldNumber = 15;
  inline const ::std::string& reportno() const;
  inline void set_reportno(const ::std::string& value);
  inline void set_reportno(const char* value);
  inline void set_reportno(const char* value, size_t size);
  inline ::std::string* mutable_reportno();
  inline ::std::string* release_reportno();
  
  // optional string remark = 16 [default = ""];
  inline bool has_remark() const;
  inline void clear_remark();
  static const int kRemarkFieldNumber = 16;
  inline const ::std::string& remark() const;
  inline void set_remark(const ::std::string& value);
  inline void set_remark(const char* value);
  inline void set_remark(const char* value, size_t size);
  inline ::std::string* mutable_remark();
  inline ::std::string* release_remark();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryBusinessResponse.result.business)
 private:
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_exchangetype();
  inline void clear_has_exchangetype();
  inline void set_has_stockaccount();
  inline void clear_has_stockaccount();
  inline void set_has_stockcode();
  inline void clear_has_stockcode();
  inline void set_has_stockname();
  inline void clear_has_stockname();
  inline void set_has_entrustbs();
  inline void clear_has_entrustbs();
  inline void set_has_businessamount();
  inline void clear_has_businessamount();
  inline void set_has_businessprice();
  inline void clear_has_businessprice();
  inline void set_has_businessbalance();
  inline void clear_has_businessbalance();
  inline void set_has_businesstimes();
  inline void clear_has_businesstimes();
  inline void set_has_businessstatus();
  inline void clear_has_businessstatus();
  inline void set_has_businesstype();
  inline void clear_has_businesstype();
  inline void set_has_entrustno();
  inline void clear_has_entrustno();
  inline void set_has_reportno();
  inline void clear_has_reportno();
  inline void set_has_remark();
  inline void clear_has_remark();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 date_;
  ::google::protobuf::int32 time_;
  ::std::string* stockaccount_;
  ::std::string* stockcode_;
  int exchangetype_;
  int entrustbs_;
  ::std::string* stockname_;
  ::google::protobuf::int64 businessamount_;
  ::google::protobuf::int64 businessprice_;
  ::google::protobuf::int64 businessbalance_;
  ::google::protobuf::int32 businesstimes_;
  int businessstatus_;
  ::std::string* entrustno_;
  ::std::string* reportno_;
  ::std::string* remark_;
  int businesstype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryBusinessResponse_result_business* default_instance_;
};
// -------------------------------------------------------------------

class queryBusinessResponse_result : public ::google::protobuf::Message {
 public:
  queryBusinessResponse_result();
  virtual ~queryBusinessResponse_result();
  
  queryBusinessResponse_result(const queryBusinessResponse_result& from);
  
  inline queryBusinessResponse_result& operator=(const queryBusinessResponse_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryBusinessResponse_result& default_instance();
  
  void Swap(queryBusinessResponse_result* other);
  
  // implements Message ----------------------------------------------
  
  queryBusinessResponse_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryBusinessResponse_result& from);
  void MergeFrom(const queryBusinessResponse_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef queryBusinessResponse_result_business business;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.queryBusinessResponse.result.business businesses = 1;
  inline int businesses_size() const;
  inline void clear_businesses();
  static const int kBusinessesFieldNumber = 1;
  inline const ::HSCommPB::queryBusinessResponse_result_business& businesses(int index) const;
  inline ::HSCommPB::queryBusinessResponse_result_business* mutable_businesses(int index);
  inline ::HSCommPB::queryBusinessResponse_result_business* add_businesses();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryBusinessResponse_result_business >&
      businesses() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryBusinessResponse_result_business >*
      mutable_businesses();
  
  // required string lastPositionString = 2;
  inline bool has_lastpositionstring() const;
  inline void clear_lastpositionstring();
  static const int kLastPositionStringFieldNumber = 2;
  inline const ::std::string& lastpositionstring() const;
  inline void set_lastpositionstring(const ::std::string& value);
  inline void set_lastpositionstring(const char* value);
  inline void set_lastpositionstring(const char* value, size_t size);
  inline ::std::string* mutable_lastpositionstring();
  inline ::std::string* release_lastpositionstring();
  
  // optional int32 errorNo = 14 [default = 0];
  inline bool has_errorno() const;
  inline void clear_errorno();
  static const int kErrorNoFieldNumber = 14;
  inline ::google::protobuf::int32 errorno() const;
  inline void set_errorno(::google::protobuf::int32 value);
  
  // optional string errorMsg = 15 [default = ""];
  inline bool has_errormsg() const;
  inline void clear_errormsg();
  static const int kErrorMsgFieldNumber = 15;
  inline const ::std::string& errormsg() const;
  inline void set_errormsg(const ::std::string& value);
  inline void set_errormsg(const char* value);
  inline void set_errormsg(const char* value, size_t size);
  inline ::std::string* mutable_errormsg();
  inline ::std::string* release_errormsg();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryBusinessResponse.result)
 private:
  inline void set_has_lastpositionstring();
  inline void clear_has_lastpositionstring();
  inline void set_has_errorno();
  inline void clear_has_errorno();
  inline void set_has_errormsg();
  inline void clear_has_errormsg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryBusinessResponse_result_business > businesses_;
  ::std::string* lastpositionstring_;
  ::std::string* errormsg_;
  ::google::protobuf::int32 errorno_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryBusinessResponse_result* default_instance_;
};
// -------------------------------------------------------------------

class queryBusinessResponse : public ::google::protobuf::Message {
 public:
  queryBusinessResponse();
  virtual ~queryBusinessResponse();
  
  queryBusinessResponse(const queryBusinessResponse& from);
  
  inline queryBusinessResponse& operator=(const queryBusinessResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryBusinessResponse& default_instance();
  
  void Swap(queryBusinessResponse* other);
  
  // implements Message ----------------------------------------------
  
  queryBusinessResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryBusinessResponse& from);
  void MergeFrom(const queryBusinessResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef queryBusinessResponse_result result;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.queryBusinessResponse.result responses = 1;
  inline int responses_size() const;
  inline void clear_responses();
  static const int kResponsesFieldNumber = 1;
  inline const ::HSCommPB::queryBusinessResponse_result& responses(int index) const;
  inline ::HSCommPB::queryBusinessResponse_result* mutable_responses(int index);
  inline ::HSCommPB::queryBusinessResponse_result* add_responses();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryBusinessResponse_result >&
      responses() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryBusinessResponse_result >*
      mutable_responses();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryBusinessResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryBusinessResponse_result > responses_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryBusinessResponse* default_instance_;
};
// -------------------------------------------------------------------

class getEntrustByLocalIDRequest_call : public ::google::protobuf::Message {
 public:
  getEntrustByLocalIDRequest_call();
  virtual ~getEntrustByLocalIDRequest_call();
  
  getEntrustByLocalIDRequest_call(const getEntrustByLocalIDRequest_call& from);
  
  inline getEntrustByLocalIDRequest_call& operator=(const getEntrustByLocalIDRequest_call& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const getEntrustByLocalIDRequest_call& default_instance();
  
  void Swap(getEntrustByLocalIDRequest_call* other);
  
  // implements Message ----------------------------------------------
  
  getEntrustByLocalIDRequest_call* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getEntrustByLocalIDRequest_call& from);
  void MergeFrom(const getEntrustByLocalIDRequest_call& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 localID = 1;
  inline bool has_localid() const;
  inline void clear_localid();
  static const int kLocalIDFieldNumber = 1;
  inline ::google::protobuf::int64 localid() const;
  inline void set_localid(::google::protobuf::int64 value);
  
  // required string fundAccount = 2;
  inline bool has_fundaccount() const;
  inline void clear_fundaccount();
  static const int kFundAccountFieldNumber = 2;
  inline const ::std::string& fundaccount() const;
  inline void set_fundaccount(const ::std::string& value);
  inline void set_fundaccount(const char* value);
  inline void set_fundaccount(const char* value, size_t size);
  inline ::std::string* mutable_fundaccount();
  inline ::std::string* release_fundaccount();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.getEntrustByLocalIDRequest.call)
 private:
  inline void set_has_localid();
  inline void clear_has_localid();
  inline void set_has_fundaccount();
  inline void clear_has_fundaccount();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 localid_;
  ::std::string* fundaccount_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static getEntrustByLocalIDRequest_call* default_instance_;
};
// -------------------------------------------------------------------

class getEntrustByLocalIDRequest : public ::google::protobuf::Message {
 public:
  getEntrustByLocalIDRequest();
  virtual ~getEntrustByLocalIDRequest();
  
  getEntrustByLocalIDRequest(const getEntrustByLocalIDRequest& from);
  
  inline getEntrustByLocalIDRequest& operator=(const getEntrustByLocalIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const getEntrustByLocalIDRequest& default_instance();
  
  void Swap(getEntrustByLocalIDRequest* other);
  
  // implements Message ----------------------------------------------
  
  getEntrustByLocalIDRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getEntrustByLocalIDRequest& from);
  void MergeFrom(const getEntrustByLocalIDRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef getEntrustByLocalIDRequest_call call;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.getEntrustByLocalIDRequest.call requests = 1;
  inline int requests_size() const;
  inline void clear_requests();
  static const int kRequestsFieldNumber = 1;
  inline const ::HSCommPB::getEntrustByLocalIDRequest_call& requests(int index) const;
  inline ::HSCommPB::getEntrustByLocalIDRequest_call* mutable_requests(int index);
  inline ::HSCommPB::getEntrustByLocalIDRequest_call* add_requests();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::getEntrustByLocalIDRequest_call >&
      requests() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::getEntrustByLocalIDRequest_call >*
      mutable_requests();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.getEntrustByLocalIDRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::getEntrustByLocalIDRequest_call > requests_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static getEntrustByLocalIDRequest* default_instance_;
};
// -------------------------------------------------------------------

class getEntrustByLocalIDResponse_result : public ::google::protobuf::Message {
 public:
  getEntrustByLocalIDResponse_result();
  virtual ~getEntrustByLocalIDResponse_result();
  
  getEntrustByLocalIDResponse_result(const getEntrustByLocalIDResponse_result& from);
  
  inline getEntrustByLocalIDResponse_result& operator=(const getEntrustByLocalIDResponse_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const getEntrustByLocalIDResponse_result& default_instance();
  
  void Swap(getEntrustByLocalIDResponse_result* other);
  
  // implements Message ----------------------------------------------
  
  getEntrustByLocalIDResponse_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getEntrustByLocalIDResponse_result& from);
  void MergeFrom(const getEntrustByLocalIDResponse_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 localID = 1;
  inline bool has_localid() const;
  inline void clear_localid();
  static const int kLocalIDFieldNumber = 1;
  inline ::google::protobuf::int64 localid() const;
  inline void set_localid(::google::protobuf::int64 value);
  
  // required string fundAccount = 2;
  inline bool has_fundaccount() const;
  inline void clear_fundaccount();
  static const int kFundAccountFieldNumber = 2;
  inline const ::std::string& fundaccount() const;
  inline void set_fundaccount(const ::std::string& value);
  inline void set_fundaccount(const char* value);
  inline void set_fundaccount(const char* value, size_t size);
  inline ::std::string* mutable_fundaccount();
  inline ::std::string* release_fundaccount();
  
  // required string entrustNo = 3;
  inline bool has_entrustno() const;
  inline void clear_entrustno();
  static const int kEntrustNoFieldNumber = 3;
  inline const ::std::string& entrustno() const;
  inline void set_entrustno(const ::std::string& value);
  inline void set_entrustno(const char* value);
  inline void set_entrustno(const char* value, size_t size);
  inline ::std::string* mutable_entrustno();
  inline ::std::string* release_entrustno();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.getEntrustByLocalIDResponse.result)
 private:
  inline void set_has_localid();
  inline void clear_has_localid();
  inline void set_has_fundaccount();
  inline void clear_has_fundaccount();
  inline void set_has_entrustno();
  inline void clear_has_entrustno();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 localid_;
  ::std::string* fundaccount_;
  ::std::string* entrustno_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static getEntrustByLocalIDResponse_result* default_instance_;
};
// -------------------------------------------------------------------

class getEntrustByLocalIDResponse : public ::google::protobuf::Message {
 public:
  getEntrustByLocalIDResponse();
  virtual ~getEntrustByLocalIDResponse();
  
  getEntrustByLocalIDResponse(const getEntrustByLocalIDResponse& from);
  
  inline getEntrustByLocalIDResponse& operator=(const getEntrustByLocalIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const getEntrustByLocalIDResponse& default_instance();
  
  void Swap(getEntrustByLocalIDResponse* other);
  
  // implements Message ----------------------------------------------
  
  getEntrustByLocalIDResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const getEntrustByLocalIDResponse& from);
  void MergeFrom(const getEntrustByLocalIDResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef getEntrustByLocalIDResponse_result result;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.getEntrustByLocalIDResponse.result responses = 1;
  inline int responses_size() const;
  inline void clear_responses();
  static const int kResponsesFieldNumber = 1;
  inline const ::HSCommPB::getEntrustByLocalIDResponse_result& responses(int index) const;
  inline ::HSCommPB::getEntrustByLocalIDResponse_result* mutable_responses(int index);
  inline ::HSCommPB::getEntrustByLocalIDResponse_result* add_responses();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::getEntrustByLocalIDResponse_result >&
      responses() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::getEntrustByLocalIDResponse_result >*
      mutable_responses();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.getEntrustByLocalIDResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::getEntrustByLocalIDResponse_result > responses_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static getEntrustByLocalIDResponse* default_instance_;
};
// -------------------------------------------------------------------

class queryOrdersRequest_call : public ::google::protobuf::Message {
 public:
  queryOrdersRequest_call();
  virtual ~queryOrdersRequest_call();
  
  queryOrdersRequest_call(const queryOrdersRequest_call& from);
  
  inline queryOrdersRequest_call& operator=(const queryOrdersRequest_call& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryOrdersRequest_call& default_instance();
  
  void Swap(queryOrdersRequest_call* other);
  
  // implements Message ----------------------------------------------
  
  queryOrdersRequest_call* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryOrdersRequest_call& from);
  void MergeFrom(const queryOrdersRequest_call& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // required int64 date = 3;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 3;
  inline ::google::protobuf::int64 date() const;
  inline void set_date(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryOrdersRequest.call)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_date();
  inline void clear_has_date();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* username_;
  ::std::string* password_;
  ::google::protobuf::int64 date_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryOrdersRequest_call* default_instance_;
};
// -------------------------------------------------------------------

class queryOrdersRequest : public ::google::protobuf::Message {
 public:
  queryOrdersRequest();
  virtual ~queryOrdersRequest();
  
  queryOrdersRequest(const queryOrdersRequest& from);
  
  inline queryOrdersRequest& operator=(const queryOrdersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryOrdersRequest& default_instance();
  
  void Swap(queryOrdersRequest* other);
  
  // implements Message ----------------------------------------------
  
  queryOrdersRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryOrdersRequest& from);
  void MergeFrom(const queryOrdersRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef queryOrdersRequest_call call;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.queryOrdersRequest.call requests = 1;
  inline int requests_size() const;
  inline void clear_requests();
  static const int kRequestsFieldNumber = 1;
  inline const ::HSCommPB::queryOrdersRequest_call& requests(int index) const;
  inline ::HSCommPB::queryOrdersRequest_call* mutable_requests(int index);
  inline ::HSCommPB::queryOrdersRequest_call* add_requests();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryOrdersRequest_call >&
      requests() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryOrdersRequest_call >*
      mutable_requests();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryOrdersRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryOrdersRequest_call > requests_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryOrdersRequest* default_instance_;
};
// -------------------------------------------------------------------

class queryOrdersResponse_result_query : public ::google::protobuf::Message {
 public:
  queryOrdersResponse_result_query();
  virtual ~queryOrdersResponse_result_query();
  
  queryOrdersResponse_result_query(const queryOrdersResponse_result_query& from);
  
  inline queryOrdersResponse_result_query& operator=(const queryOrdersResponse_result_query& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryOrdersResponse_result_query& default_instance();
  
  void Swap(queryOrdersResponse_result_query* other);
  
  // implements Message ----------------------------------------------
  
  queryOrdersResponse_result_query* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryOrdersResponse_result_query& from);
  void MergeFrom(const queryOrdersResponse_result_query& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 returndate = 1;
  inline bool has_returndate() const;
  inline void clear_returndate();
  static const int kReturndateFieldNumber = 1;
  inline ::google::protobuf::int64 returndate() const;
  inline void set_returndate(::google::protobuf::int64 value);
  
  // required string secuname = 2;
  inline bool has_secuname() const;
  inline void clear_secuname();
  static const int kSecunameFieldNumber = 2;
  inline const ::std::string& secuname() const;
  inline void set_secuname(const ::std::string& value);
  inline void set_secuname(const char* value);
  inline void set_secuname(const char* value, size_t size);
  inline ::std::string* mutable_secuname();
  inline ::std::string* release_secuname();
  
  // required string code = 3;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 3;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  
  // required string direction = 4;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 4;
  inline const ::std::string& direction() const;
  inline void set_direction(const ::std::string& value);
  inline void set_direction(const char* value);
  inline void set_direction(const char* value, size_t size);
  inline ::std::string* mutable_direction();
  inline ::std::string* release_direction();
  
  // required int64 ordervol = 5;
  inline bool has_ordervol() const;
  inline void clear_ordervol();
  static const int kOrdervolFieldNumber = 5;
  inline ::google::protobuf::int64 ordervol() const;
  inline void set_ordervol(::google::protobuf::int64 value);
  
  // required int64 orderprice = 6;
  inline bool has_orderprice() const;
  inline void clear_orderprice();
  static const int kOrderpriceFieldNumber = 6;
  inline ::google::protobuf::int64 orderprice() const;
  inline void set_orderprice(::google::protobuf::int64 value);
  
  // required int64 averageprice = 7;
  inline bool has_averageprice() const;
  inline void clear_averageprice();
  static const int kAveragepriceFieldNumber = 7;
  inline ::google::protobuf::int64 averageprice() const;
  inline void set_averageprice(::google::protobuf::int64 value);
  
  // required int64 tradevol = 8;
  inline bool has_tradevol() const;
  inline void clear_tradevol();
  static const int kTradevolFieldNumber = 8;
  inline ::google::protobuf::int64 tradevol() const;
  inline void set_tradevol(::google::protobuf::int64 value);
  
  // required int64 cancelvol = 9;
  inline bool has_cancelvol() const;
  inline void clear_cancelvol();
  static const int kCancelvolFieldNumber = 9;
  inline ::google::protobuf::int64 cancelvol() const;
  inline void set_cancelvol(::google::protobuf::int64 value);
  
  // required string flag = 10;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 10;
  inline const ::std::string& flag() const;
  inline void set_flag(const ::std::string& value);
  inline void set_flag(const char* value);
  inline void set_flag(const char* value, size_t size);
  inline ::std::string* mutable_flag();
  inline ::std::string* release_flag();
  
  // required string adddatetime = 11;
  inline bool has_adddatetime() const;
  inline void clear_adddatetime();
  static const int kAdddatetimeFieldNumber = 11;
  inline const ::std::string& adddatetime() const;
  inline void set_adddatetime(const ::std::string& value);
  inline void set_adddatetime(const char* value);
  inline void set_adddatetime(const char* value, size_t size);
  inline ::std::string* mutable_adddatetime();
  inline ::std::string* release_adddatetime();
  
  // required int64 acid = 12;
  inline bool has_acid() const;
  inline void clear_acid();
  static const int kAcidFieldNumber = 12;
  inline ::google::protobuf::int64 acid() const;
  inline void set_acid(::google::protobuf::int64 value);
  
  // required int64 oid = 13;
  inline bool has_oid() const;
  inline void clear_oid();
  static const int kOidFieldNumber = 13;
  inline ::google::protobuf::int64 oid() const;
  inline void set_oid(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryOrdersResponse.result.query)
 private:
  inline void set_has_returndate();
  inline void clear_has_returndate();
  inline void set_has_secuname();
  inline void clear_has_secuname();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_ordervol();
  inline void clear_has_ordervol();
  inline void set_has_orderprice();
  inline void clear_has_orderprice();
  inline void set_has_averageprice();
  inline void clear_has_averageprice();
  inline void set_has_tradevol();
  inline void clear_has_tradevol();
  inline void set_has_cancelvol();
  inline void clear_has_cancelvol();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_adddatetime();
  inline void clear_has_adddatetime();
  inline void set_has_acid();
  inline void clear_has_acid();
  inline void set_has_oid();
  inline void clear_has_oid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 returndate_;
  ::std::string* secuname_;
  ::std::string* code_;
  ::std::string* direction_;
  ::google::protobuf::int64 ordervol_;
  ::google::protobuf::int64 orderprice_;
  ::google::protobuf::int64 averageprice_;
  ::google::protobuf::int64 tradevol_;
  ::google::protobuf::int64 cancelvol_;
  ::std::string* flag_;
  ::std::string* adddatetime_;
  ::google::protobuf::int64 acid_;
  ::google::protobuf::int64 oid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryOrdersResponse_result_query* default_instance_;
};
// -------------------------------------------------------------------

class queryOrdersResponse_result : public ::google::protobuf::Message {
 public:
  queryOrdersResponse_result();
  virtual ~queryOrdersResponse_result();
  
  queryOrdersResponse_result(const queryOrdersResponse_result& from);
  
  inline queryOrdersResponse_result& operator=(const queryOrdersResponse_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryOrdersResponse_result& default_instance();
  
  void Swap(queryOrdersResponse_result* other);
  
  // implements Message ----------------------------------------------
  
  queryOrdersResponse_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryOrdersResponse_result& from);
  void MergeFrom(const queryOrdersResponse_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef queryOrdersResponse_result_query query;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.queryOrdersResponse.result.query queries = 1;
  inline int queries_size() const;
  inline void clear_queries();
  static const int kQueriesFieldNumber = 1;
  inline const ::HSCommPB::queryOrdersResponse_result_query& queries(int index) const;
  inline ::HSCommPB::queryOrdersResponse_result_query* mutable_queries(int index);
  inline ::HSCommPB::queryOrdersResponse_result_query* add_queries();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryOrdersResponse_result_query >&
      queries() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryOrdersResponse_result_query >*
      mutable_queries();
  
  // optional int32 errorNo = 2 [default = 0];
  inline bool has_errorno() const;
  inline void clear_errorno();
  static const int kErrorNoFieldNumber = 2;
  inline ::google::protobuf::int32 errorno() const;
  inline void set_errorno(::google::protobuf::int32 value);
  
  // optional string errorMsg = 3 [default = ""];
  inline bool has_errormsg() const;
  inline void clear_errormsg();
  static const int kErrorMsgFieldNumber = 3;
  inline const ::std::string& errormsg() const;
  inline void set_errormsg(const ::std::string& value);
  inline void set_errormsg(const char* value);
  inline void set_errormsg(const char* value, size_t size);
  inline ::std::string* mutable_errormsg();
  inline ::std::string* release_errormsg();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryOrdersResponse.result)
 private:
  inline void set_has_errorno();
  inline void clear_has_errorno();
  inline void set_has_errormsg();
  inline void clear_has_errormsg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryOrdersResponse_result_query > queries_;
  ::std::string* errormsg_;
  ::google::protobuf::int32 errorno_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryOrdersResponse_result* default_instance_;
};
// -------------------------------------------------------------------

class queryOrdersResponse : public ::google::protobuf::Message {
 public:
  queryOrdersResponse();
  virtual ~queryOrdersResponse();
  
  queryOrdersResponse(const queryOrdersResponse& from);
  
  inline queryOrdersResponse& operator=(const queryOrdersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryOrdersResponse& default_instance();
  
  void Swap(queryOrdersResponse* other);
  
  // implements Message ----------------------------------------------
  
  queryOrdersResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryOrdersResponse& from);
  void MergeFrom(const queryOrdersResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef queryOrdersResponse_result result;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.queryOrdersResponse.result responses = 1;
  inline int responses_size() const;
  inline void clear_responses();
  static const int kResponsesFieldNumber = 1;
  inline const ::HSCommPB::queryOrdersResponse_result& responses(int index) const;
  inline ::HSCommPB::queryOrdersResponse_result* mutable_responses(int index);
  inline ::HSCommPB::queryOrdersResponse_result* add_responses();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryOrdersResponse_result >&
      responses() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryOrdersResponse_result >*
      mutable_responses();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryOrdersResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryOrdersResponse_result > responses_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryOrdersResponse* default_instance_;
};
// -------------------------------------------------------------------

class queryCapitalRequest_call : public ::google::protobuf::Message {
 public:
  queryCapitalRequest_call();
  virtual ~queryCapitalRequest_call();
  
  queryCapitalRequest_call(const queryCapitalRequest_call& from);
  
  inline queryCapitalRequest_call& operator=(const queryCapitalRequest_call& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryCapitalRequest_call& default_instance();
  
  void Swap(queryCapitalRequest_call* other);
  
  // implements Message ----------------------------------------------
  
  queryCapitalRequest_call* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryCapitalRequest_call& from);
  void MergeFrom(const queryCapitalRequest_call& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 accountid = 1;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 1;
  inline ::google::protobuf::int64 accountid() const;
  inline void set_accountid(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryCapitalRequest.call)
 private:
  inline void set_has_accountid();
  inline void clear_has_accountid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 accountid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryCapitalRequest_call* default_instance_;
};
// -------------------------------------------------------------------

class queryCapitalRequest : public ::google::protobuf::Message {
 public:
  queryCapitalRequest();
  virtual ~queryCapitalRequest();
  
  queryCapitalRequest(const queryCapitalRequest& from);
  
  inline queryCapitalRequest& operator=(const queryCapitalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryCapitalRequest& default_instance();
  
  void Swap(queryCapitalRequest* other);
  
  // implements Message ----------------------------------------------
  
  queryCapitalRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryCapitalRequest& from);
  void MergeFrom(const queryCapitalRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef queryCapitalRequest_call call;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.queryCapitalRequest.call requests = 1;
  inline int requests_size() const;
  inline void clear_requests();
  static const int kRequestsFieldNumber = 1;
  inline const ::HSCommPB::queryCapitalRequest_call& requests(int index) const;
  inline ::HSCommPB::queryCapitalRequest_call* mutable_requests(int index);
  inline ::HSCommPB::queryCapitalRequest_call* add_requests();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryCapitalRequest_call >&
      requests() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryCapitalRequest_call >*
      mutable_requests();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryCapitalRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryCapitalRequest_call > requests_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryCapitalRequest* default_instance_;
};
// -------------------------------------------------------------------

class queryCapitalResponse_result_capital : public ::google::protobuf::Message {
 public:
  queryCapitalResponse_result_capital();
  virtual ~queryCapitalResponse_result_capital();
  
  queryCapitalResponse_result_capital(const queryCapitalResponse_result_capital& from);
  
  inline queryCapitalResponse_result_capital& operator=(const queryCapitalResponse_result_capital& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryCapitalResponse_result_capital& default_instance();
  
  void Swap(queryCapitalResponse_result_capital* other);
  
  // implements Message ----------------------------------------------
  
  queryCapitalResponse_result_capital* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryCapitalResponse_result_capital& from);
  void MergeFrom(const queryCapitalResponse_result_capital& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);
  
  // required int64 exchangeid = 2;
  inline bool has_exchangeid() const;
  inline void clear_exchangeid();
  static const int kExchangeidFieldNumber = 2;
  inline ::google::protobuf::int64 exchangeid() const;
  inline void set_exchangeid(::google::protobuf::int64 value);
  
  // required int64 currencytype = 3;
  inline bool has_currencytype() const;
  inline void clear_currencytype();
  static const int kCurrencytypeFieldNumber = 3;
  inline ::google::protobuf::int64 currencytype() const;
  inline void set_currencytype(::google::protobuf::int64 value);
  
  // required int64 amounts = 4;
  inline bool has_amounts() const;
  inline void clear_amounts();
  static const int kAmountsFieldNumber = 4;
  inline ::google::protobuf::int64 amounts() const;
  inline void set_amounts(::google::protobuf::int64 value);
  
  // required int64 freeamounts = 5;
  inline bool has_freeamounts() const;
  inline void clear_freeamounts();
  static const int kFreeamountsFieldNumber = 5;
  inline ::google::protobuf::int64 freeamounts() const;
  inline void set_freeamounts(::google::protobuf::int64 value);
  
  // required int64 frozenamount = 6;
  inline bool has_frozenamount() const;
  inline void clear_frozenamount();
  static const int kFrozenamountFieldNumber = 6;
  inline ::google::protobuf::int64 frozenamount() const;
  inline void set_frozenamount(::google::protobuf::int64 value);
  
  // required int64 margin = 7;
  inline bool has_margin() const;
  inline void clear_margin();
  static const int kMarginFieldNumber = 7;
  inline ::google::protobuf::int64 margin() const;
  inline void set_margin(::google::protobuf::int64 value);
  
  // required int64 floatingPL = 8;
  inline bool has_floatingpl() const;
  inline void clear_floatingpl();
  static const int kFloatingPLFieldNumber = 8;
  inline ::google::protobuf::int64 floatingpl() const;
  inline void set_floatingpl(::google::protobuf::int64 value);
  
  // required int64 equity = 9;
  inline bool has_equity() const;
  inline void clear_equity();
  static const int kEquityFieldNumber = 9;
  inline ::google::protobuf::int64 equity() const;
  inline void set_equity(::google::protobuf::int64 value);
  
  // required int64 accountid = 10;
  inline bool has_accountid() const;
  inline void clear_accountid();
  static const int kAccountidFieldNumber = 10;
  inline ::google::protobuf::int64 accountid() const;
  inline void set_accountid(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryCapitalResponse.result.capital)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_exchangeid();
  inline void clear_has_exchangeid();
  inline void set_has_currencytype();
  inline void clear_has_currencytype();
  inline void set_has_amounts();
  inline void clear_has_amounts();
  inline void set_has_freeamounts();
  inline void clear_has_freeamounts();
  inline void set_has_frozenamount();
  inline void clear_has_frozenamount();
  inline void set_has_margin();
  inline void clear_has_margin();
  inline void set_has_floatingpl();
  inline void clear_has_floatingpl();
  inline void set_has_equity();
  inline void clear_has_equity();
  inline void set_has_accountid();
  inline void clear_has_accountid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 exchangeid_;
  ::google::protobuf::int64 currencytype_;
  ::google::protobuf::int64 amounts_;
  ::google::protobuf::int64 freeamounts_;
  ::google::protobuf::int64 frozenamount_;
  ::google::protobuf::int64 margin_;
  ::google::protobuf::int64 floatingpl_;
  ::google::protobuf::int64 equity_;
  ::google::protobuf::int64 accountid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryCapitalResponse_result_capital* default_instance_;
};
// -------------------------------------------------------------------

class queryCapitalResponse_result : public ::google::protobuf::Message {
 public:
  queryCapitalResponse_result();
  virtual ~queryCapitalResponse_result();
  
  queryCapitalResponse_result(const queryCapitalResponse_result& from);
  
  inline queryCapitalResponse_result& operator=(const queryCapitalResponse_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryCapitalResponse_result& default_instance();
  
  void Swap(queryCapitalResponse_result* other);
  
  // implements Message ----------------------------------------------
  
  queryCapitalResponse_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryCapitalResponse_result& from);
  void MergeFrom(const queryCapitalResponse_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef queryCapitalResponse_result_capital capital;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.queryCapitalResponse.result.capital capitals = 1;
  inline int capitals_size() const;
  inline void clear_capitals();
  static const int kCapitalsFieldNumber = 1;
  inline const ::HSCommPB::queryCapitalResponse_result_capital& capitals(int index) const;
  inline ::HSCommPB::queryCapitalResponse_result_capital* mutable_capitals(int index);
  inline ::HSCommPB::queryCapitalResponse_result_capital* add_capitals();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryCapitalResponse_result_capital >&
      capitals() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryCapitalResponse_result_capital >*
      mutable_capitals();
  
  // optional int32 errorNo = 2 [default = 0];
  inline bool has_errorno() const;
  inline void clear_errorno();
  static const int kErrorNoFieldNumber = 2;
  inline ::google::protobuf::int32 errorno() const;
  inline void set_errorno(::google::protobuf::int32 value);
  
  // optional string errorMsg = 3 [default = ""];
  inline bool has_errormsg() const;
  inline void clear_errormsg();
  static const int kErrorMsgFieldNumber = 3;
  inline const ::std::string& errormsg() const;
  inline void set_errormsg(const ::std::string& value);
  inline void set_errormsg(const char* value);
  inline void set_errormsg(const char* value, size_t size);
  inline ::std::string* mutable_errormsg();
  inline ::std::string* release_errormsg();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryCapitalResponse.result)
 private:
  inline void set_has_errorno();
  inline void clear_has_errorno();
  inline void set_has_errormsg();
  inline void clear_has_errormsg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryCapitalResponse_result_capital > capitals_;
  ::std::string* errormsg_;
  ::google::protobuf::int32 errorno_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryCapitalResponse_result* default_instance_;
};
// -------------------------------------------------------------------

class queryCapitalResponse : public ::google::protobuf::Message {
 public:
  queryCapitalResponse();
  virtual ~queryCapitalResponse();
  
  queryCapitalResponse(const queryCapitalResponse& from);
  
  inline queryCapitalResponse& operator=(const queryCapitalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const queryCapitalResponse& default_instance();
  
  void Swap(queryCapitalResponse* other);
  
  // implements Message ----------------------------------------------
  
  queryCapitalResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryCapitalResponse& from);
  void MergeFrom(const queryCapitalResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef queryCapitalResponse_result result;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.queryCapitalResponse.result responses = 1;
  inline int responses_size() const;
  inline void clear_responses();
  static const int kResponsesFieldNumber = 1;
  inline const ::HSCommPB::queryCapitalResponse_result& responses(int index) const;
  inline ::HSCommPB::queryCapitalResponse_result* mutable_responses(int index);
  inline ::HSCommPB::queryCapitalResponse_result* add_responses();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryCapitalResponse_result >&
      responses() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryCapitalResponse_result >*
      mutable_responses();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.queryCapitalResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryCapitalResponse_result > responses_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static queryCapitalResponse* default_instance_;
};
// -------------------------------------------------------------------

class entrustCancelRequest_call : public ::google::protobuf::Message {
 public:
  entrustCancelRequest_call();
  virtual ~entrustCancelRequest_call();
  
  entrustCancelRequest_call(const entrustCancelRequest_call& from);
  
  inline entrustCancelRequest_call& operator=(const entrustCancelRequest_call& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const entrustCancelRequest_call& default_instance();
  
  void Swap(entrustCancelRequest_call* other);
  
  // implements Message ----------------------------------------------
  
  entrustCancelRequest_call* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const entrustCancelRequest_call& from);
  void MergeFrom(const entrustCancelRequest_call& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // required int64 OMID = 3;
  inline bool has_omid() const;
  inline void clear_omid();
  static const int kOMIDFieldNumber = 3;
  inline ::google::protobuf::int64 omid() const;
  inline void set_omid(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:HSCommPB.entrustCancelRequest.call)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_omid();
  inline void clear_has_omid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* username_;
  ::std::string* password_;
  ::google::protobuf::int64 omid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static entrustCancelRequest_call* default_instance_;
};
// -------------------------------------------------------------------

class entrustCancelRequest : public ::google::protobuf::Message {
 public:
  entrustCancelRequest();
  virtual ~entrustCancelRequest();
  
  entrustCancelRequest(const entrustCancelRequest& from);
  
  inline entrustCancelRequest& operator=(const entrustCancelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const entrustCancelRequest& default_instance();
  
  void Swap(entrustCancelRequest* other);
  
  // implements Message ----------------------------------------------
  
  entrustCancelRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const entrustCancelRequest& from);
  void MergeFrom(const entrustCancelRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef entrustCancelRequest_call call;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.entrustCancelRequest.call requests = 1;
  inline int requests_size() const;
  inline void clear_requests();
  static const int kRequestsFieldNumber = 1;
  inline const ::HSCommPB::entrustCancelRequest_call& requests(int index) const;
  inline ::HSCommPB::entrustCancelRequest_call* mutable_requests(int index);
  inline ::HSCommPB::entrustCancelRequest_call* add_requests();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::entrustCancelRequest_call >&
      requests() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::entrustCancelRequest_call >*
      mutable_requests();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.entrustCancelRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::entrustCancelRequest_call > requests_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static entrustCancelRequest* default_instance_;
};
// -------------------------------------------------------------------

class entrustCancleResponse_result : public ::google::protobuf::Message {
 public:
  entrustCancleResponse_result();
  virtual ~entrustCancleResponse_result();
  
  entrustCancleResponse_result(const entrustCancleResponse_result& from);
  
  inline entrustCancleResponse_result& operator=(const entrustCancleResponse_result& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const entrustCancleResponse_result& default_instance();
  
  void Swap(entrustCancleResponse_result* other);
  
  // implements Message ----------------------------------------------
  
  entrustCancleResponse_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const entrustCancleResponse_result& from);
  void MergeFrom(const entrustCancleResponse_result& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline ::google::protobuf::int64 success() const;
  inline void set_success(::google::protobuf::int64 value);
  
  // required string errormsg = 2;
  inline bool has_errormsg() const;
  inline void clear_errormsg();
  static const int kErrormsgFieldNumber = 2;
  inline const ::std::string& errormsg() const;
  inline void set_errormsg(const ::std::string& value);
  inline void set_errormsg(const char* value);
  inline void set_errormsg(const char* value, size_t size);
  inline ::std::string* mutable_errormsg();
  inline ::std::string* release_errormsg();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.entrustCancleResponse.result)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_errormsg();
  inline void clear_has_errormsg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 success_;
  ::std::string* errormsg_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static entrustCancleResponse_result* default_instance_;
};
// -------------------------------------------------------------------

class entrustCancleResponse : public ::google::protobuf::Message {
 public:
  entrustCancleResponse();
  virtual ~entrustCancleResponse();
  
  entrustCancleResponse(const entrustCancleResponse& from);
  
  inline entrustCancleResponse& operator=(const entrustCancleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const entrustCancleResponse& default_instance();
  
  void Swap(entrustCancleResponse* other);
  
  // implements Message ----------------------------------------------
  
  entrustCancleResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const entrustCancleResponse& from);
  void MergeFrom(const entrustCancleResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef entrustCancleResponse_result result;
  
  // accessors -------------------------------------------------------
  
  // repeated .HSCommPB.entrustCancleResponse.result responses = 1;
  inline int responses_size() const;
  inline void clear_responses();
  static const int kResponsesFieldNumber = 1;
  inline const ::HSCommPB::entrustCancleResponse_result& responses(int index) const;
  inline ::HSCommPB::entrustCancleResponse_result* mutable_responses(int index);
  inline ::HSCommPB::entrustCancleResponse_result* add_responses();
  inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::entrustCancleResponse_result >&
      responses() const;
  inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::entrustCancleResponse_result >*
      mutable_responses();
  
  // @@protoc_insertion_point(class_scope:HSCommPB.entrustCancleResponse)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::HSCommPB::entrustCancleResponse_result > responses_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_HSComm_2eproto();
  friend void protobuf_AssignDesc_HSComm_2eproto();
  friend void protobuf_ShutdownFile_HSComm_2eproto();
  
  void InitAsDefaultInstance();
  static entrustCancleResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// enums

// -------------------------------------------------------------------

// clientCheckRequest_call

// required .HSCommPB.enums.accountType accountType = 1;
inline bool clientCheckRequest_call::has_accounttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void clientCheckRequest_call::set_has_accounttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void clientCheckRequest_call::clear_has_accounttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void clientCheckRequest_call::clear_accounttype() {
  accounttype_ = 0;
  clear_has_accounttype();
}
inline ::HSCommPB::enums_accountType clientCheckRequest_call::accounttype() const {
  return static_cast< ::HSCommPB::enums_accountType >(accounttype_);
}
inline void clientCheckRequest_call::set_accounttype(::HSCommPB::enums_accountType value) {
  GOOGLE_DCHECK(::HSCommPB::enums_accountType_IsValid(value));
  set_has_accounttype();
  accounttype_ = value;
}

// required string account = 2;
inline bool clientCheckRequest_call::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void clientCheckRequest_call::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void clientCheckRequest_call::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void clientCheckRequest_call::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& clientCheckRequest_call::account() const {
  return *account_;
}
inline void clientCheckRequest_call::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void clientCheckRequest_call::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void clientCheckRequest_call::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* clientCheckRequest_call::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* clientCheckRequest_call::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string password = 3;
inline bool clientCheckRequest_call::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void clientCheckRequest_call::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void clientCheckRequest_call::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void clientCheckRequest_call::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& clientCheckRequest_call::password() const {
  return *password_;
}
inline void clientCheckRequest_call::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void clientCheckRequest_call::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void clientCheckRequest_call::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* clientCheckRequest_call::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* clientCheckRequest_call::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .HSCommPB.enums.exchangeType exchangeType = 4 [default = noneExchangeType];
inline bool clientCheckRequest_call::has_exchangetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void clientCheckRequest_call::set_has_exchangetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void clientCheckRequest_call::clear_has_exchangetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void clientCheckRequest_call::clear_exchangetype() {
  exchangetype_ = 0;
  clear_has_exchangetype();
}
inline ::HSCommPB::enums_exchangeType clientCheckRequest_call::exchangetype() const {
  return static_cast< ::HSCommPB::enums_exchangeType >(exchangetype_);
}
inline void clientCheckRequest_call::set_exchangetype(::HSCommPB::enums_exchangeType value) {
  GOOGLE_DCHECK(::HSCommPB::enums_exchangeType_IsValid(value));
  set_has_exchangetype();
  exchangetype_ = value;
}

// optional string bankNo = 5 [default = ""];
inline bool clientCheckRequest_call::has_bankno() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void clientCheckRequest_call::set_has_bankno() {
  _has_bits_[0] |= 0x00000010u;
}
inline void clientCheckRequest_call::clear_has_bankno() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void clientCheckRequest_call::clear_bankno() {
  if (bankno_ != &::google::protobuf::internal::kEmptyString) {
    bankno_->clear();
  }
  clear_has_bankno();
}
inline const ::std::string& clientCheckRequest_call::bankno() const {
  return *bankno_;
}
inline void clientCheckRequest_call::set_bankno(const ::std::string& value) {
  set_has_bankno();
  if (bankno_ == &::google::protobuf::internal::kEmptyString) {
    bankno_ = new ::std::string;
  }
  bankno_->assign(value);
}
inline void clientCheckRequest_call::set_bankno(const char* value) {
  set_has_bankno();
  if (bankno_ == &::google::protobuf::internal::kEmptyString) {
    bankno_ = new ::std::string;
  }
  bankno_->assign(value);
}
inline void clientCheckRequest_call::set_bankno(const char* value, size_t size) {
  set_has_bankno();
  if (bankno_ == &::google::protobuf::internal::kEmptyString) {
    bankno_ = new ::std::string;
  }
  bankno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* clientCheckRequest_call::mutable_bankno() {
  set_has_bankno();
  if (bankno_ == &::google::protobuf::internal::kEmptyString) {
    bankno_ = new ::std::string;
  }
  return bankno_;
}
inline ::std::string* clientCheckRequest_call::release_bankno() {
  clear_has_bankno();
  if (bankno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankno_;
    bankno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .HSCommPB.enums.entrustWay entrustWay = 6 [default = self];
inline bool clientCheckRequest_call::has_entrustway() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void clientCheckRequest_call::set_has_entrustway() {
  _has_bits_[0] |= 0x00000020u;
}
inline void clientCheckRequest_call::clear_has_entrustway() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void clientCheckRequest_call::clear_entrustway() {
  entrustway_ = 1;
  clear_has_entrustway();
}
inline ::HSCommPB::enums_entrustWay clientCheckRequest_call::entrustway() const {
  return static_cast< ::HSCommPB::enums_entrustWay >(entrustway_);
}
inline void clientCheckRequest_call::set_entrustway(::HSCommPB::enums_entrustWay value) {
  GOOGLE_DCHECK(::HSCommPB::enums_entrustWay_IsValid(value));
  set_has_entrustway();
  entrustway_ = value;
}

// optional string branchNo = 7 [default = ""];
inline bool clientCheckRequest_call::has_branchno() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void clientCheckRequest_call::set_has_branchno() {
  _has_bits_[0] |= 0x00000040u;
}
inline void clientCheckRequest_call::clear_has_branchno() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void clientCheckRequest_call::clear_branchno() {
  if (branchno_ != &::google::protobuf::internal::kEmptyString) {
    branchno_->clear();
  }
  clear_has_branchno();
}
inline const ::std::string& clientCheckRequest_call::branchno() const {
  return *branchno_;
}
inline void clientCheckRequest_call::set_branchno(const ::std::string& value) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(value);
}
inline void clientCheckRequest_call::set_branchno(const char* value) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(value);
}
inline void clientCheckRequest_call::set_branchno(const char* value, size_t size) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* clientCheckRequest_call::mutable_branchno() {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  return branchno_;
}
inline ::std::string* clientCheckRequest_call::release_branchno() {
  clear_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = branchno_;
    branchno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// clientCheckRequest

// repeated .HSCommPB.clientCheckRequest.call requests = 1;
inline int clientCheckRequest::requests_size() const {
  return requests_.size();
}
inline void clientCheckRequest::clear_requests() {
  requests_.Clear();
}
inline const ::HSCommPB::clientCheckRequest_call& clientCheckRequest::requests(int index) const {
  return requests_.Get(index);
}
inline ::HSCommPB::clientCheckRequest_call* clientCheckRequest::mutable_requests(int index) {
  return requests_.Mutable(index);
}
inline ::HSCommPB::clientCheckRequest_call* clientCheckRequest::add_requests() {
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::clientCheckRequest_call >&
clientCheckRequest::requests() const {
  return requests_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::clientCheckRequest_call >*
clientCheckRequest::mutable_requests() {
  return &requests_;
}

// -------------------------------------------------------------------

// clientCheckResponse_result

// required string clientID = 1;
inline bool clientCheckResponse_result::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void clientCheckResponse_result::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void clientCheckResponse_result::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void clientCheckResponse_result::clear_clientid() {
  if (clientid_ != &::google::protobuf::internal::kEmptyString) {
    clientid_->clear();
  }
  clear_has_clientid();
}
inline const ::std::string& clientCheckResponse_result::clientid() const {
  return *clientid_;
}
inline void clientCheckResponse_result::set_clientid(const ::std::string& value) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(value);
}
inline void clientCheckResponse_result::set_clientid(const char* value) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(value);
}
inline void clientCheckResponse_result::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* clientCheckResponse_result::mutable_clientid() {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    clientid_ = new ::std::string;
  }
  return clientid_;
}
inline ::std::string* clientCheckResponse_result::release_clientid() {
  clear_has_clientid();
  if (clientid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientid_;
    clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string clientName = 2;
inline bool clientCheckResponse_result::has_clientname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void clientCheckResponse_result::set_has_clientname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void clientCheckResponse_result::clear_has_clientname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void clientCheckResponse_result::clear_clientname() {
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    clientname_->clear();
  }
  clear_has_clientname();
}
inline const ::std::string& clientCheckResponse_result::clientname() const {
  return *clientname_;
}
inline void clientCheckResponse_result::set_clientname(const ::std::string& value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void clientCheckResponse_result::set_clientname(const char* value) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(value);
}
inline void clientCheckResponse_result::set_clientname(const char* value, size_t size) {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  clientname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* clientCheckResponse_result::mutable_clientname() {
  set_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    clientname_ = new ::std::string;
  }
  return clientname_;
}
inline ::std::string* clientCheckResponse_result::release_clientname() {
  clear_has_clientname();
  if (clientname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientname_;
    clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string branchNo = 3;
inline bool clientCheckResponse_result::has_branchno() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void clientCheckResponse_result::set_has_branchno() {
  _has_bits_[0] |= 0x00000004u;
}
inline void clientCheckResponse_result::clear_has_branchno() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void clientCheckResponse_result::clear_branchno() {
  if (branchno_ != &::google::protobuf::internal::kEmptyString) {
    branchno_->clear();
  }
  clear_has_branchno();
}
inline const ::std::string& clientCheckResponse_result::branchno() const {
  return *branchno_;
}
inline void clientCheckResponse_result::set_branchno(const ::std::string& value) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(value);
}
inline void clientCheckResponse_result::set_branchno(const char* value) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(value);
}
inline void clientCheckResponse_result::set_branchno(const char* value, size_t size) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* clientCheckResponse_result::mutable_branchno() {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  return branchno_;
}
inline ::std::string* clientCheckResponse_result::release_branchno() {
  clear_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = branchno_;
    branchno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string enableBalance = 4;
inline bool clientCheckResponse_result::has_enablebalance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void clientCheckResponse_result::set_has_enablebalance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void clientCheckResponse_result::clear_has_enablebalance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void clientCheckResponse_result::clear_enablebalance() {
  if (enablebalance_ != &::google::protobuf::internal::kEmptyString) {
    enablebalance_->clear();
  }
  clear_has_enablebalance();
}
inline const ::std::string& clientCheckResponse_result::enablebalance() const {
  return *enablebalance_;
}
inline void clientCheckResponse_result::set_enablebalance(const ::std::string& value) {
  set_has_enablebalance();
  if (enablebalance_ == &::google::protobuf::internal::kEmptyString) {
    enablebalance_ = new ::std::string;
  }
  enablebalance_->assign(value);
}
inline void clientCheckResponse_result::set_enablebalance(const char* value) {
  set_has_enablebalance();
  if (enablebalance_ == &::google::protobuf::internal::kEmptyString) {
    enablebalance_ = new ::std::string;
  }
  enablebalance_->assign(value);
}
inline void clientCheckResponse_result::set_enablebalance(const char* value, size_t size) {
  set_has_enablebalance();
  if (enablebalance_ == &::google::protobuf::internal::kEmptyString) {
    enablebalance_ = new ::std::string;
  }
  enablebalance_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* clientCheckResponse_result::mutable_enablebalance() {
  set_has_enablebalance();
  if (enablebalance_ == &::google::protobuf::internal::kEmptyString) {
    enablebalance_ = new ::std::string;
  }
  return enablebalance_;
}
inline ::std::string* clientCheckResponse_result::release_enablebalance() {
  clear_has_enablebalance();
  if (enablebalance_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = enablebalance_;
    enablebalance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string currentBalance = 5;
inline bool clientCheckResponse_result::has_currentbalance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void clientCheckResponse_result::set_has_currentbalance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void clientCheckResponse_result::clear_has_currentbalance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void clientCheckResponse_result::clear_currentbalance() {
  if (currentbalance_ != &::google::protobuf::internal::kEmptyString) {
    currentbalance_->clear();
  }
  clear_has_currentbalance();
}
inline const ::std::string& clientCheckResponse_result::currentbalance() const {
  return *currentbalance_;
}
inline void clientCheckResponse_result::set_currentbalance(const ::std::string& value) {
  set_has_currentbalance();
  if (currentbalance_ == &::google::protobuf::internal::kEmptyString) {
    currentbalance_ = new ::std::string;
  }
  currentbalance_->assign(value);
}
inline void clientCheckResponse_result::set_currentbalance(const char* value) {
  set_has_currentbalance();
  if (currentbalance_ == &::google::protobuf::internal::kEmptyString) {
    currentbalance_ = new ::std::string;
  }
  currentbalance_->assign(value);
}
inline void clientCheckResponse_result::set_currentbalance(const char* value, size_t size) {
  set_has_currentbalance();
  if (currentbalance_ == &::google::protobuf::internal::kEmptyString) {
    currentbalance_ = new ::std::string;
  }
  currentbalance_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* clientCheckResponse_result::mutable_currentbalance() {
  set_has_currentbalance();
  if (currentbalance_ == &::google::protobuf::internal::kEmptyString) {
    currentbalance_ = new ::std::string;
  }
  return currentbalance_;
}
inline ::std::string* clientCheckResponse_result::release_currentbalance() {
  clear_has_currentbalance();
  if (currentbalance_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = currentbalance_;
    currentbalance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string fundAccount = 6;
inline bool clientCheckResponse_result::has_fundaccount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void clientCheckResponse_result::set_has_fundaccount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void clientCheckResponse_result::clear_has_fundaccount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void clientCheckResponse_result::clear_fundaccount() {
  if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
    fundaccount_->clear();
  }
  clear_has_fundaccount();
}
inline const ::std::string& clientCheckResponse_result::fundaccount() const {
  return *fundaccount_;
}
inline void clientCheckResponse_result::set_fundaccount(const ::std::string& value) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(value);
}
inline void clientCheckResponse_result::set_fundaccount(const char* value) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(value);
}
inline void clientCheckResponse_result::set_fundaccount(const char* value, size_t size) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* clientCheckResponse_result::mutable_fundaccount() {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  return fundaccount_;
}
inline ::std::string* clientCheckResponse_result::release_fundaccount() {
  clear_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fundaccount_;
    fundaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 fundAccountCount = 7;
inline bool clientCheckResponse_result::has_fundaccountcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void clientCheckResponse_result::set_has_fundaccountcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void clientCheckResponse_result::clear_has_fundaccountcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void clientCheckResponse_result::clear_fundaccountcount() {
  fundaccountcount_ = 0;
  clear_has_fundaccountcount();
}
inline ::google::protobuf::int32 clientCheckResponse_result::fundaccountcount() const {
  return fundaccountcount_;
}
inline void clientCheckResponse_result::set_fundaccountcount(::google::protobuf::int32 value) {
  set_has_fundaccountcount();
  fundaccountcount_ = value;
}

// required .HSCommPB.enums.sysStatus sysStatus = 8;
inline bool clientCheckResponse_result::has_sysstatus() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void clientCheckResponse_result::set_has_sysstatus() {
  _has_bits_[0] |= 0x00000080u;
}
inline void clientCheckResponse_result::clear_has_sysstatus() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void clientCheckResponse_result::clear_sysstatus() {
  sysstatus_ = 0;
  clear_has_sysstatus();
}
inline ::HSCommPB::enums_sysStatus clientCheckResponse_result::sysstatus() const {
  return static_cast< ::HSCommPB::enums_sysStatus >(sysstatus_);
}
inline void clientCheckResponse_result::set_sysstatus(::HSCommPB::enums_sysStatus value) {
  GOOGLE_DCHECK(::HSCommPB::enums_sysStatus_IsValid(value));
  set_has_sysstatus();
  sysstatus_ = value;
}

// required string sysStatusName = 9;
inline bool clientCheckResponse_result::has_sysstatusname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void clientCheckResponse_result::set_has_sysstatusname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void clientCheckResponse_result::clear_has_sysstatusname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void clientCheckResponse_result::clear_sysstatusname() {
  if (sysstatusname_ != &::google::protobuf::internal::kEmptyString) {
    sysstatusname_->clear();
  }
  clear_has_sysstatusname();
}
inline const ::std::string& clientCheckResponse_result::sysstatusname() const {
  return *sysstatusname_;
}
inline void clientCheckResponse_result::set_sysstatusname(const ::std::string& value) {
  set_has_sysstatusname();
  if (sysstatusname_ == &::google::protobuf::internal::kEmptyString) {
    sysstatusname_ = new ::std::string;
  }
  sysstatusname_->assign(value);
}
inline void clientCheckResponse_result::set_sysstatusname(const char* value) {
  set_has_sysstatusname();
  if (sysstatusname_ == &::google::protobuf::internal::kEmptyString) {
    sysstatusname_ = new ::std::string;
  }
  sysstatusname_->assign(value);
}
inline void clientCheckResponse_result::set_sysstatusname(const char* value, size_t size) {
  set_has_sysstatusname();
  if (sysstatusname_ == &::google::protobuf::internal::kEmptyString) {
    sysstatusname_ = new ::std::string;
  }
  sysstatusname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* clientCheckResponse_result::mutable_sysstatusname() {
  set_has_sysstatusname();
  if (sysstatusname_ == &::google::protobuf::internal::kEmptyString) {
    sysstatusname_ = new ::std::string;
  }
  return sysstatusname_;
}
inline ::std::string* clientCheckResponse_result::release_sysstatusname() {
  clear_has_sysstatusname();
  if (sysstatusname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sysstatusname_;
    sysstatusname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 moneyCount = 10;
inline bool clientCheckResponse_result::has_moneycount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void clientCheckResponse_result::set_has_moneycount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void clientCheckResponse_result::clear_has_moneycount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void clientCheckResponse_result::clear_moneycount() {
  moneycount_ = 0;
  clear_has_moneycount();
}
inline ::google::protobuf::int32 clientCheckResponse_result::moneycount() const {
  return moneycount_;
}
inline void clientCheckResponse_result::set_moneycount(::google::protobuf::int32 value) {
  set_has_moneycount();
  moneycount_ = value;
}

// required .HSCommPB.enums.squareFlag squareFlag = 11;
inline bool clientCheckResponse_result::has_squareflag() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void clientCheckResponse_result::set_has_squareflag() {
  _has_bits_[0] |= 0x00000400u;
}
inline void clientCheckResponse_result::clear_has_squareflag() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void clientCheckResponse_result::clear_squareflag() {
  squareflag_ = 0;
  clear_has_squareflag();
}
inline ::HSCommPB::enums_squareFlag clientCheckResponse_result::squareflag() const {
  return static_cast< ::HSCommPB::enums_squareFlag >(squareflag_);
}
inline void clientCheckResponse_result::set_squareflag(::HSCommPB::enums_squareFlag value) {
  GOOGLE_DCHECK(::HSCommPB::enums_squareFlag_IsValid(value));
  set_has_squareflag();
  squareflag_ = value;
}

// required string clientRights = 12;
inline bool clientCheckResponse_result::has_clientrights() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void clientCheckResponse_result::set_has_clientrights() {
  _has_bits_[0] |= 0x00000800u;
}
inline void clientCheckResponse_result::clear_has_clientrights() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void clientCheckResponse_result::clear_clientrights() {
  if (clientrights_ != &::google::protobuf::internal::kEmptyString) {
    clientrights_->clear();
  }
  clear_has_clientrights();
}
inline const ::std::string& clientCheckResponse_result::clientrights() const {
  return *clientrights_;
}
inline void clientCheckResponse_result::set_clientrights(const ::std::string& value) {
  set_has_clientrights();
  if (clientrights_ == &::google::protobuf::internal::kEmptyString) {
    clientrights_ = new ::std::string;
  }
  clientrights_->assign(value);
}
inline void clientCheckResponse_result::set_clientrights(const char* value) {
  set_has_clientrights();
  if (clientrights_ == &::google::protobuf::internal::kEmptyString) {
    clientrights_ = new ::std::string;
  }
  clientrights_->assign(value);
}
inline void clientCheckResponse_result::set_clientrights(const char* value, size_t size) {
  set_has_clientrights();
  if (clientrights_ == &::google::protobuf::internal::kEmptyString) {
    clientrights_ = new ::std::string;
  }
  clientrights_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* clientCheckResponse_result::mutable_clientrights() {
  set_has_clientrights();
  if (clientrights_ == &::google::protobuf::internal::kEmptyString) {
    clientrights_ = new ::std::string;
  }
  return clientrights_;
}
inline ::std::string* clientCheckResponse_result::release_clientrights() {
  clear_has_clientrights();
  if (clientrights_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientrights_;
    clientrights_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string companyName = 13;
inline bool clientCheckResponse_result::has_companyname() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void clientCheckResponse_result::set_has_companyname() {
  _has_bits_[0] |= 0x00001000u;
}
inline void clientCheckResponse_result::clear_has_companyname() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void clientCheckResponse_result::clear_companyname() {
  if (companyname_ != &::google::protobuf::internal::kEmptyString) {
    companyname_->clear();
  }
  clear_has_companyname();
}
inline const ::std::string& clientCheckResponse_result::companyname() const {
  return *companyname_;
}
inline void clientCheckResponse_result::set_companyname(const ::std::string& value) {
  set_has_companyname();
  if (companyname_ == &::google::protobuf::internal::kEmptyString) {
    companyname_ = new ::std::string;
  }
  companyname_->assign(value);
}
inline void clientCheckResponse_result::set_companyname(const char* value) {
  set_has_companyname();
  if (companyname_ == &::google::protobuf::internal::kEmptyString) {
    companyname_ = new ::std::string;
  }
  companyname_->assign(value);
}
inline void clientCheckResponse_result::set_companyname(const char* value, size_t size) {
  set_has_companyname();
  if (companyname_ == &::google::protobuf::internal::kEmptyString) {
    companyname_ = new ::std::string;
  }
  companyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* clientCheckResponse_result::mutable_companyname() {
  set_has_companyname();
  if (companyname_ == &::google::protobuf::internal::kEmptyString) {
    companyname_ = new ::std::string;
  }
  return companyname_;
}
inline ::std::string* clientCheckResponse_result::release_companyname() {
  clear_has_companyname();
  if (companyname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = companyname_;
    companyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 errorNo = 14 [default = 0];
inline bool clientCheckResponse_result::has_errorno() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void clientCheckResponse_result::set_has_errorno() {
  _has_bits_[0] |= 0x00002000u;
}
inline void clientCheckResponse_result::clear_has_errorno() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void clientCheckResponse_result::clear_errorno() {
  errorno_ = 0;
  clear_has_errorno();
}
inline ::google::protobuf::int32 clientCheckResponse_result::errorno() const {
  return errorno_;
}
inline void clientCheckResponse_result::set_errorno(::google::protobuf::int32 value) {
  set_has_errorno();
  errorno_ = value;
}

// optional string errorMsg = 15 [default = ""];
inline bool clientCheckResponse_result::has_errormsg() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void clientCheckResponse_result::set_has_errormsg() {
  _has_bits_[0] |= 0x00004000u;
}
inline void clientCheckResponse_result::clear_has_errormsg() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void clientCheckResponse_result::clear_errormsg() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    errormsg_->clear();
  }
  clear_has_errormsg();
}
inline const ::std::string& clientCheckResponse_result::errormsg() const {
  return *errormsg_;
}
inline void clientCheckResponse_result::set_errormsg(const ::std::string& value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void clientCheckResponse_result::set_errormsg(const char* value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void clientCheckResponse_result::set_errormsg(const char* value, size_t size) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* clientCheckResponse_result::mutable_errormsg() {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  return errormsg_;
}
inline ::std::string* clientCheckResponse_result::release_errormsg() {
  clear_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errormsg_;
    errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 currentDate = 16 [default = 0];
inline bool clientCheckResponse_result::has_currentdate() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void clientCheckResponse_result::set_has_currentdate() {
  _has_bits_[0] |= 0x00008000u;
}
inline void clientCheckResponse_result::clear_has_currentdate() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void clientCheckResponse_result::clear_currentdate() {
  currentdate_ = 0;
  clear_has_currentdate();
}
inline ::google::protobuf::int32 clientCheckResponse_result::currentdate() const {
  return currentdate_;
}
inline void clientCheckResponse_result::set_currentdate(::google::protobuf::int32 value) {
  set_has_currentdate();
  currentdate_ = value;
}

// optional int32 lastIP = 17 [default = 0];
inline bool clientCheckResponse_result::has_lastip() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void clientCheckResponse_result::set_has_lastip() {
  _has_bits_[0] |= 0x00010000u;
}
inline void clientCheckResponse_result::clear_has_lastip() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void clientCheckResponse_result::clear_lastip() {
  lastip_ = 0;
  clear_has_lastip();
}
inline ::google::protobuf::int32 clientCheckResponse_result::lastip() const {
  return lastip_;
}
inline void clientCheckResponse_result::set_lastip(::google::protobuf::int32 value) {
  set_has_lastip();
  lastip_ = value;
}

// optional int64 lastLoginTime = 18 [default = 0];
inline bool clientCheckResponse_result::has_lastlogintime() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void clientCheckResponse_result::set_has_lastlogintime() {
  _has_bits_[0] |= 0x00020000u;
}
inline void clientCheckResponse_result::clear_has_lastlogintime() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void clientCheckResponse_result::clear_lastlogintime() {
  lastlogintime_ = GOOGLE_LONGLONG(0);
  clear_has_lastlogintime();
}
inline ::google::protobuf::int64 clientCheckResponse_result::lastlogintime() const {
  return lastlogintime_;
}
inline void clientCheckResponse_result::set_lastlogintime(::google::protobuf::int64 value) {
  set_has_lastlogintime();
  lastlogintime_ = value;
}

// optional string bankNo = 19 [default = ""];
inline bool clientCheckResponse_result::has_bankno() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void clientCheckResponse_result::set_has_bankno() {
  _has_bits_[0] |= 0x00040000u;
}
inline void clientCheckResponse_result::clear_has_bankno() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void clientCheckResponse_result::clear_bankno() {
  if (bankno_ != &::google::protobuf::internal::kEmptyString) {
    bankno_->clear();
  }
  clear_has_bankno();
}
inline const ::std::string& clientCheckResponse_result::bankno() const {
  return *bankno_;
}
inline void clientCheckResponse_result::set_bankno(const ::std::string& value) {
  set_has_bankno();
  if (bankno_ == &::google::protobuf::internal::kEmptyString) {
    bankno_ = new ::std::string;
  }
  bankno_->assign(value);
}
inline void clientCheckResponse_result::set_bankno(const char* value) {
  set_has_bankno();
  if (bankno_ == &::google::protobuf::internal::kEmptyString) {
    bankno_ = new ::std::string;
  }
  bankno_->assign(value);
}
inline void clientCheckResponse_result::set_bankno(const char* value, size_t size) {
  set_has_bankno();
  if (bankno_ == &::google::protobuf::internal::kEmptyString) {
    bankno_ = new ::std::string;
  }
  bankno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* clientCheckResponse_result::mutable_bankno() {
  set_has_bankno();
  if (bankno_ == &::google::protobuf::internal::kEmptyString) {
    bankno_ = new ::std::string;
  }
  return bankno_;
}
inline ::std::string* clientCheckResponse_result::release_bankno() {
  clear_has_bankno();
  if (bankno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bankno_;
    bankno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string remark = 20 [default = ""];
inline bool clientCheckResponse_result::has_remark() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void clientCheckResponse_result::set_has_remark() {
  _has_bits_[0] |= 0x00080000u;
}
inline void clientCheckResponse_result::clear_has_remark() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void clientCheckResponse_result::clear_remark() {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    remark_->clear();
  }
  clear_has_remark();
}
inline const ::std::string& clientCheckResponse_result::remark() const {
  return *remark_;
}
inline void clientCheckResponse_result::set_remark(const ::std::string& value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void clientCheckResponse_result::set_remark(const char* value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void clientCheckResponse_result::set_remark(const char* value, size_t size) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* clientCheckResponse_result::mutable_remark() {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  return remark_;
}
inline ::std::string* clientCheckResponse_result::release_remark() {
  clear_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remark_;
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// clientCheckResponse

// repeated .HSCommPB.clientCheckResponse.result responses = 1;
inline int clientCheckResponse::responses_size() const {
  return responses_.size();
}
inline void clientCheckResponse::clear_responses() {
  responses_.Clear();
}
inline const ::HSCommPB::clientCheckResponse_result& clientCheckResponse::responses(int index) const {
  return responses_.Get(index);
}
inline ::HSCommPB::clientCheckResponse_result* clientCheckResponse::mutable_responses(int index) {
  return responses_.Mutable(index);
}
inline ::HSCommPB::clientCheckResponse_result* clientCheckResponse::add_responses() {
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::clientCheckResponse_result >&
clientCheckResponse::responses() const {
  return responses_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::clientCheckResponse_result >*
clientCheckResponse::mutable_responses() {
  return &responses_;
}

// -------------------------------------------------------------------

// entrustStockRequest_call

// required int64 localID = 1;
inline bool entrustStockRequest_call::has_localid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void entrustStockRequest_call::set_has_localid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void entrustStockRequest_call::clear_has_localid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void entrustStockRequest_call::clear_localid() {
  localid_ = GOOGLE_LONGLONG(0);
  clear_has_localid();
}
inline ::google::protobuf::int64 entrustStockRequest_call::localid() const {
  return localid_;
}
inline void entrustStockRequest_call::set_localid(::google::protobuf::int64 value) {
  set_has_localid();
  localid_ = value;
}

// required string branchNo = 2;
inline bool entrustStockRequest_call::has_branchno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void entrustStockRequest_call::set_has_branchno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void entrustStockRequest_call::clear_has_branchno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void entrustStockRequest_call::clear_branchno() {
  if (branchno_ != &::google::protobuf::internal::kEmptyString) {
    branchno_->clear();
  }
  clear_has_branchno();
}
inline const ::std::string& entrustStockRequest_call::branchno() const {
  return *branchno_;
}
inline void entrustStockRequest_call::set_branchno(const ::std::string& value) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(value);
}
inline void entrustStockRequest_call::set_branchno(const char* value) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(value);
}
inline void entrustStockRequest_call::set_branchno(const char* value, size_t size) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* entrustStockRequest_call::mutable_branchno() {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  return branchno_;
}
inline ::std::string* entrustStockRequest_call::release_branchno() {
  clear_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = branchno_;
    branchno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string fundAccount = 3;
inline bool entrustStockRequest_call::has_fundaccount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void entrustStockRequest_call::set_has_fundaccount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void entrustStockRequest_call::clear_has_fundaccount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void entrustStockRequest_call::clear_fundaccount() {
  if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
    fundaccount_->clear();
  }
  clear_has_fundaccount();
}
inline const ::std::string& entrustStockRequest_call::fundaccount() const {
  return *fundaccount_;
}
inline void entrustStockRequest_call::set_fundaccount(const ::std::string& value) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(value);
}
inline void entrustStockRequest_call::set_fundaccount(const char* value) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(value);
}
inline void entrustStockRequest_call::set_fundaccount(const char* value, size_t size) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* entrustStockRequest_call::mutable_fundaccount() {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  return fundaccount_;
}
inline ::std::string* entrustStockRequest_call::release_fundaccount() {
  clear_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fundaccount_;
    fundaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string password = 4;
inline bool entrustStockRequest_call::has_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void entrustStockRequest_call::set_has_password() {
  _has_bits_[0] |= 0x00000008u;
}
inline void entrustStockRequest_call::clear_has_password() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void entrustStockRequest_call::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& entrustStockRequest_call::password() const {
  return *password_;
}
inline void entrustStockRequest_call::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void entrustStockRequest_call::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void entrustStockRequest_call::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* entrustStockRequest_call::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* entrustStockRequest_call::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .HSCommPB.enums.exchangeType exchangeType = 5;
inline bool entrustStockRequest_call::has_exchangetype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void entrustStockRequest_call::set_has_exchangetype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void entrustStockRequest_call::clear_has_exchangetype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void entrustStockRequest_call::clear_exchangetype() {
  exchangetype_ = 0;
  clear_has_exchangetype();
}
inline ::HSCommPB::enums_exchangeType entrustStockRequest_call::exchangetype() const {
  return static_cast< ::HSCommPB::enums_exchangeType >(exchangetype_);
}
inline void entrustStockRequest_call::set_exchangetype(::HSCommPB::enums_exchangeType value) {
  GOOGLE_DCHECK(::HSCommPB::enums_exchangeType_IsValid(value));
  set_has_exchangetype();
  exchangetype_ = value;
}

// required string stockAccount = 6;
inline bool entrustStockRequest_call::has_stockaccount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void entrustStockRequest_call::set_has_stockaccount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void entrustStockRequest_call::clear_has_stockaccount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void entrustStockRequest_call::clear_stockaccount() {
  if (stockaccount_ != &::google::protobuf::internal::kEmptyString) {
    stockaccount_->clear();
  }
  clear_has_stockaccount();
}
inline const ::std::string& entrustStockRequest_call::stockaccount() const {
  return *stockaccount_;
}
inline void entrustStockRequest_call::set_stockaccount(const ::std::string& value) {
  set_has_stockaccount();
  if (stockaccount_ == &::google::protobuf::internal::kEmptyString) {
    stockaccount_ = new ::std::string;
  }
  stockaccount_->assign(value);
}
inline void entrustStockRequest_call::set_stockaccount(const char* value) {
  set_has_stockaccount();
  if (stockaccount_ == &::google::protobuf::internal::kEmptyString) {
    stockaccount_ = new ::std::string;
  }
  stockaccount_->assign(value);
}
inline void entrustStockRequest_call::set_stockaccount(const char* value, size_t size) {
  set_has_stockaccount();
  if (stockaccount_ == &::google::protobuf::internal::kEmptyString) {
    stockaccount_ = new ::std::string;
  }
  stockaccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* entrustStockRequest_call::mutable_stockaccount() {
  set_has_stockaccount();
  if (stockaccount_ == &::google::protobuf::internal::kEmptyString) {
    stockaccount_ = new ::std::string;
  }
  return stockaccount_;
}
inline ::std::string* entrustStockRequest_call::release_stockaccount() {
  clear_has_stockaccount();
  if (stockaccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stockaccount_;
    stockaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string stockCode = 7;
inline bool entrustStockRequest_call::has_stockcode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void entrustStockRequest_call::set_has_stockcode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void entrustStockRequest_call::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void entrustStockRequest_call::clear_stockcode() {
  if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
    stockcode_->clear();
  }
  clear_has_stockcode();
}
inline const ::std::string& entrustStockRequest_call::stockcode() const {
  return *stockcode_;
}
inline void entrustStockRequest_call::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(value);
}
inline void entrustStockRequest_call::set_stockcode(const char* value) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(value);
}
inline void entrustStockRequest_call::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* entrustStockRequest_call::mutable_stockcode() {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  return stockcode_;
}
inline ::std::string* entrustStockRequest_call::release_stockcode() {
  clear_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stockcode_;
    stockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 entrustAmount = 8;
inline bool entrustStockRequest_call::has_entrustamount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void entrustStockRequest_call::set_has_entrustamount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void entrustStockRequest_call::clear_has_entrustamount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void entrustStockRequest_call::clear_entrustamount() {
  entrustamount_ = GOOGLE_LONGLONG(0);
  clear_has_entrustamount();
}
inline ::google::protobuf::int64 entrustStockRequest_call::entrustamount() const {
  return entrustamount_;
}
inline void entrustStockRequest_call::set_entrustamount(::google::protobuf::int64 value) {
  set_has_entrustamount();
  entrustamount_ = value;
}

// required int64 entrustPrice = 9;
inline bool entrustStockRequest_call::has_entrustprice() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void entrustStockRequest_call::set_has_entrustprice() {
  _has_bits_[0] |= 0x00000100u;
}
inline void entrustStockRequest_call::clear_has_entrustprice() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void entrustStockRequest_call::clear_entrustprice() {
  entrustprice_ = GOOGLE_LONGLONG(0);
  clear_has_entrustprice();
}
inline ::google::protobuf::int64 entrustStockRequest_call::entrustprice() const {
  return entrustprice_;
}
inline void entrustStockRequest_call::set_entrustprice(::google::protobuf::int64 value) {
  set_has_entrustprice();
  entrustprice_ = value;
}

// required .HSCommPB.enums.entrustBS entrustBS = 10;
inline bool entrustStockRequest_call::has_entrustbs() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void entrustStockRequest_call::set_has_entrustbs() {
  _has_bits_[0] |= 0x00000200u;
}
inline void entrustStockRequest_call::clear_has_entrustbs() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void entrustStockRequest_call::clear_entrustbs() {
  entrustbs_ = 0;
  clear_has_entrustbs();
}
inline ::HSCommPB::enums_entrustBS entrustStockRequest_call::entrustbs() const {
  return static_cast< ::HSCommPB::enums_entrustBS >(entrustbs_);
}
inline void entrustStockRequest_call::set_entrustbs(::HSCommPB::enums_entrustBS value) {
  GOOGLE_DCHECK(::HSCommPB::enums_entrustBS_IsValid(value));
  set_has_entrustbs();
  entrustbs_ = value;
}

// -------------------------------------------------------------------

// entrustStockRequest

// repeated .HSCommPB.entrustStockRequest.call requests = 1;
inline int entrustStockRequest::requests_size() const {
  return requests_.size();
}
inline void entrustStockRequest::clear_requests() {
  requests_.Clear();
}
inline const ::HSCommPB::entrustStockRequest_call& entrustStockRequest::requests(int index) const {
  return requests_.Get(index);
}
inline ::HSCommPB::entrustStockRequest_call* entrustStockRequest::mutable_requests(int index) {
  return requests_.Mutable(index);
}
inline ::HSCommPB::entrustStockRequest_call* entrustStockRequest::add_requests() {
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::entrustStockRequest_call >&
entrustStockRequest::requests() const {
  return requests_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::entrustStockRequest_call >*
entrustStockRequest::mutable_requests() {
  return &requests_;
}

// -------------------------------------------------------------------

// entrustStockResponse_result

// required int64 localID = 1;
inline bool entrustStockResponse_result::has_localid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void entrustStockResponse_result::set_has_localid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void entrustStockResponse_result::clear_has_localid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void entrustStockResponse_result::clear_localid() {
  localid_ = GOOGLE_LONGLONG(0);
  clear_has_localid();
}
inline ::google::protobuf::int64 entrustStockResponse_result::localid() const {
  return localid_;
}
inline void entrustStockResponse_result::set_localid(::google::protobuf::int64 value) {
  set_has_localid();
  localid_ = value;
}

// required string entrustNo = 2;
inline bool entrustStockResponse_result::has_entrustno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void entrustStockResponse_result::set_has_entrustno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void entrustStockResponse_result::clear_has_entrustno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void entrustStockResponse_result::clear_entrustno() {
  if (entrustno_ != &::google::protobuf::internal::kEmptyString) {
    entrustno_->clear();
  }
  clear_has_entrustno();
}
inline const ::std::string& entrustStockResponse_result::entrustno() const {
  return *entrustno_;
}
inline void entrustStockResponse_result::set_entrustno(const ::std::string& value) {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  entrustno_->assign(value);
}
inline void entrustStockResponse_result::set_entrustno(const char* value) {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  entrustno_->assign(value);
}
inline void entrustStockResponse_result::set_entrustno(const char* value, size_t size) {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  entrustno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* entrustStockResponse_result::mutable_entrustno() {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  return entrustno_;
}
inline ::std::string* entrustStockResponse_result::release_entrustno() {
  clear_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = entrustno_;
    entrustno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 errorNo = 14 [default = 0];
inline bool entrustStockResponse_result::has_errorno() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void entrustStockResponse_result::set_has_errorno() {
  _has_bits_[0] |= 0x00000004u;
}
inline void entrustStockResponse_result::clear_has_errorno() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void entrustStockResponse_result::clear_errorno() {
  errorno_ = 0;
  clear_has_errorno();
}
inline ::google::protobuf::int32 entrustStockResponse_result::errorno() const {
  return errorno_;
}
inline void entrustStockResponse_result::set_errorno(::google::protobuf::int32 value) {
  set_has_errorno();
  errorno_ = value;
}

// optional string errorMsg = 15 [default = ""];
inline bool entrustStockResponse_result::has_errormsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void entrustStockResponse_result::set_has_errormsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void entrustStockResponse_result::clear_has_errormsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void entrustStockResponse_result::clear_errormsg() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    errormsg_->clear();
  }
  clear_has_errormsg();
}
inline const ::std::string& entrustStockResponse_result::errormsg() const {
  return *errormsg_;
}
inline void entrustStockResponse_result::set_errormsg(const ::std::string& value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void entrustStockResponse_result::set_errormsg(const char* value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void entrustStockResponse_result::set_errormsg(const char* value, size_t size) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* entrustStockResponse_result::mutable_errormsg() {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  return errormsg_;
}
inline ::std::string* entrustStockResponse_result::release_errormsg() {
  clear_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errormsg_;
    errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// entrustStockResponse

// repeated .HSCommPB.entrustStockResponse.result responses = 1;
inline int entrustStockResponse::responses_size() const {
  return responses_.size();
}
inline void entrustStockResponse::clear_responses() {
  responses_.Clear();
}
inline const ::HSCommPB::entrustStockResponse_result& entrustStockResponse::responses(int index) const {
  return responses_.Get(index);
}
inline ::HSCommPB::entrustStockResponse_result* entrustStockResponse::mutable_responses(int index) {
  return responses_.Mutable(index);
}
inline ::HSCommPB::entrustStockResponse_result* entrustStockResponse::add_responses() {
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::entrustStockResponse_result >&
entrustStockResponse::responses() const {
  return responses_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::entrustStockResponse_result >*
entrustStockResponse::mutable_responses() {
  return &responses_;
}

// -------------------------------------------------------------------

// cancelEntrustRequest_call

// required string branchNo = 1;
inline bool cancelEntrustRequest_call::has_branchno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cancelEntrustRequest_call::set_has_branchno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cancelEntrustRequest_call::clear_has_branchno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cancelEntrustRequest_call::clear_branchno() {
  if (branchno_ != &::google::protobuf::internal::kEmptyString) {
    branchno_->clear();
  }
  clear_has_branchno();
}
inline const ::std::string& cancelEntrustRequest_call::branchno() const {
  return *branchno_;
}
inline void cancelEntrustRequest_call::set_branchno(const ::std::string& value) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(value);
}
inline void cancelEntrustRequest_call::set_branchno(const char* value) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(value);
}
inline void cancelEntrustRequest_call::set_branchno(const char* value, size_t size) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cancelEntrustRequest_call::mutable_branchno() {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  return branchno_;
}
inline ::std::string* cancelEntrustRequest_call::release_branchno() {
  clear_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = branchno_;
    branchno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string fundAccount = 2;
inline bool cancelEntrustRequest_call::has_fundaccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cancelEntrustRequest_call::set_has_fundaccount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cancelEntrustRequest_call::clear_has_fundaccount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cancelEntrustRequest_call::clear_fundaccount() {
  if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
    fundaccount_->clear();
  }
  clear_has_fundaccount();
}
inline const ::std::string& cancelEntrustRequest_call::fundaccount() const {
  return *fundaccount_;
}
inline void cancelEntrustRequest_call::set_fundaccount(const ::std::string& value) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(value);
}
inline void cancelEntrustRequest_call::set_fundaccount(const char* value) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(value);
}
inline void cancelEntrustRequest_call::set_fundaccount(const char* value, size_t size) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cancelEntrustRequest_call::mutable_fundaccount() {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  return fundaccount_;
}
inline ::std::string* cancelEntrustRequest_call::release_fundaccount() {
  clear_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fundaccount_;
    fundaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string password = 3;
inline bool cancelEntrustRequest_call::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cancelEntrustRequest_call::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cancelEntrustRequest_call::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cancelEntrustRequest_call::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& cancelEntrustRequest_call::password() const {
  return *password_;
}
inline void cancelEntrustRequest_call::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void cancelEntrustRequest_call::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void cancelEntrustRequest_call::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cancelEntrustRequest_call::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* cancelEntrustRequest_call::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string entrustNo = 4;
inline bool cancelEntrustRequest_call::has_entrustno() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cancelEntrustRequest_call::set_has_entrustno() {
  _has_bits_[0] |= 0x00000008u;
}
inline void cancelEntrustRequest_call::clear_has_entrustno() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void cancelEntrustRequest_call::clear_entrustno() {
  if (entrustno_ != &::google::protobuf::internal::kEmptyString) {
    entrustno_->clear();
  }
  clear_has_entrustno();
}
inline const ::std::string& cancelEntrustRequest_call::entrustno() const {
  return *entrustno_;
}
inline void cancelEntrustRequest_call::set_entrustno(const ::std::string& value) {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  entrustno_->assign(value);
}
inline void cancelEntrustRequest_call::set_entrustno(const char* value) {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  entrustno_->assign(value);
}
inline void cancelEntrustRequest_call::set_entrustno(const char* value, size_t size) {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  entrustno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cancelEntrustRequest_call::mutable_entrustno() {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  return entrustno_;
}
inline ::std::string* cancelEntrustRequest_call::release_entrustno() {
  clear_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = entrustno_;
    entrustno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// cancelEntrustRequest

// repeated .HSCommPB.cancelEntrustRequest.call requests = 1;
inline int cancelEntrustRequest::requests_size() const {
  return requests_.size();
}
inline void cancelEntrustRequest::clear_requests() {
  requests_.Clear();
}
inline const ::HSCommPB::cancelEntrustRequest_call& cancelEntrustRequest::requests(int index) const {
  return requests_.Get(index);
}
inline ::HSCommPB::cancelEntrustRequest_call* cancelEntrustRequest::mutable_requests(int index) {
  return requests_.Mutable(index);
}
inline ::HSCommPB::cancelEntrustRequest_call* cancelEntrustRequest::add_requests() {
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::cancelEntrustRequest_call >&
cancelEntrustRequest::requests() const {
  return requests_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::cancelEntrustRequest_call >*
cancelEntrustRequest::mutable_requests() {
  return &requests_;
}

// -------------------------------------------------------------------

// cancelEntrustResponse_result

// required string entrustNo = 1;
inline bool cancelEntrustResponse_result::has_entrustno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cancelEntrustResponse_result::set_has_entrustno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void cancelEntrustResponse_result::clear_has_entrustno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void cancelEntrustResponse_result::clear_entrustno() {
  if (entrustno_ != &::google::protobuf::internal::kEmptyString) {
    entrustno_->clear();
  }
  clear_has_entrustno();
}
inline const ::std::string& cancelEntrustResponse_result::entrustno() const {
  return *entrustno_;
}
inline void cancelEntrustResponse_result::set_entrustno(const ::std::string& value) {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  entrustno_->assign(value);
}
inline void cancelEntrustResponse_result::set_entrustno(const char* value) {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  entrustno_->assign(value);
}
inline void cancelEntrustResponse_result::set_entrustno(const char* value, size_t size) {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  entrustno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cancelEntrustResponse_result::mutable_entrustno() {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  return entrustno_;
}
inline ::std::string* cancelEntrustResponse_result::release_entrustno() {
  clear_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = entrustno_;
    entrustno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 errorNo = 14 [default = 0];
inline bool cancelEntrustResponse_result::has_errorno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cancelEntrustResponse_result::set_has_errorno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void cancelEntrustResponse_result::clear_has_errorno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void cancelEntrustResponse_result::clear_errorno() {
  errorno_ = 0;
  clear_has_errorno();
}
inline ::google::protobuf::int32 cancelEntrustResponse_result::errorno() const {
  return errorno_;
}
inline void cancelEntrustResponse_result::set_errorno(::google::protobuf::int32 value) {
  set_has_errorno();
  errorno_ = value;
}

// optional string errorMsg = 15 [default = ""];
inline bool cancelEntrustResponse_result::has_errormsg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cancelEntrustResponse_result::set_has_errormsg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void cancelEntrustResponse_result::clear_has_errormsg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void cancelEntrustResponse_result::clear_errormsg() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    errormsg_->clear();
  }
  clear_has_errormsg();
}
inline const ::std::string& cancelEntrustResponse_result::errormsg() const {
  return *errormsg_;
}
inline void cancelEntrustResponse_result::set_errormsg(const ::std::string& value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void cancelEntrustResponse_result::set_errormsg(const char* value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void cancelEntrustResponse_result::set_errormsg(const char* value, size_t size) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* cancelEntrustResponse_result::mutable_errormsg() {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  return errormsg_;
}
inline ::std::string* cancelEntrustResponse_result::release_errormsg() {
  clear_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errormsg_;
    errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// cancelEntrustResponse

// repeated .HSCommPB.cancelEntrustResponse.result responses = 1;
inline int cancelEntrustResponse::responses_size() const {
  return responses_.size();
}
inline void cancelEntrustResponse::clear_responses() {
  responses_.Clear();
}
inline const ::HSCommPB::cancelEntrustResponse_result& cancelEntrustResponse::responses(int index) const {
  return responses_.Get(index);
}
inline ::HSCommPB::cancelEntrustResponse_result* cancelEntrustResponse::mutable_responses(int index) {
  return responses_.Mutable(index);
}
inline ::HSCommPB::cancelEntrustResponse_result* cancelEntrustResponse::add_responses() {
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::cancelEntrustResponse_result >&
cancelEntrustResponse::responses() const {
  return responses_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::cancelEntrustResponse_result >*
cancelEntrustResponse::mutable_responses() {
  return &responses_;
}

// -------------------------------------------------------------------

// queryEntrustRequest_call

// required string branchNo = 1;
inline bool queryEntrustRequest_call::has_branchno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void queryEntrustRequest_call::set_has_branchno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void queryEntrustRequest_call::clear_has_branchno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void queryEntrustRequest_call::clear_branchno() {
  if (branchno_ != &::google::protobuf::internal::kEmptyString) {
    branchno_->clear();
  }
  clear_has_branchno();
}
inline const ::std::string& queryEntrustRequest_call::branchno() const {
  return *branchno_;
}
inline void queryEntrustRequest_call::set_branchno(const ::std::string& value) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(value);
}
inline void queryEntrustRequest_call::set_branchno(const char* value) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(value);
}
inline void queryEntrustRequest_call::set_branchno(const char* value, size_t size) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryEntrustRequest_call::mutable_branchno() {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  return branchno_;
}
inline ::std::string* queryEntrustRequest_call::release_branchno() {
  clear_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = branchno_;
    branchno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string fundAccount = 2;
inline bool queryEntrustRequest_call::has_fundaccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void queryEntrustRequest_call::set_has_fundaccount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void queryEntrustRequest_call::clear_has_fundaccount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void queryEntrustRequest_call::clear_fundaccount() {
  if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
    fundaccount_->clear();
  }
  clear_has_fundaccount();
}
inline const ::std::string& queryEntrustRequest_call::fundaccount() const {
  return *fundaccount_;
}
inline void queryEntrustRequest_call::set_fundaccount(const ::std::string& value) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(value);
}
inline void queryEntrustRequest_call::set_fundaccount(const char* value) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(value);
}
inline void queryEntrustRequest_call::set_fundaccount(const char* value, size_t size) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryEntrustRequest_call::mutable_fundaccount() {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  return fundaccount_;
}
inline ::std::string* queryEntrustRequest_call::release_fundaccount() {
  clear_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fundaccount_;
    fundaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string password = 3;
inline bool queryEntrustRequest_call::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void queryEntrustRequest_call::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void queryEntrustRequest_call::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void queryEntrustRequest_call::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& queryEntrustRequest_call::password() const {
  return *password_;
}
inline void queryEntrustRequest_call::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void queryEntrustRequest_call::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void queryEntrustRequest_call::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryEntrustRequest_call::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* queryEntrustRequest_call::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string entrustNo = 4 [default = ""];
inline bool queryEntrustRequest_call::has_entrustno() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void queryEntrustRequest_call::set_has_entrustno() {
  _has_bits_[0] |= 0x00000008u;
}
inline void queryEntrustRequest_call::clear_has_entrustno() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void queryEntrustRequest_call::clear_entrustno() {
  if (entrustno_ != &::google::protobuf::internal::kEmptyString) {
    entrustno_->clear();
  }
  clear_has_entrustno();
}
inline const ::std::string& queryEntrustRequest_call::entrustno() const {
  return *entrustno_;
}
inline void queryEntrustRequest_call::set_entrustno(const ::std::string& value) {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  entrustno_->assign(value);
}
inline void queryEntrustRequest_call::set_entrustno(const char* value) {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  entrustno_->assign(value);
}
inline void queryEntrustRequest_call::set_entrustno(const char* value, size_t size) {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  entrustno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryEntrustRequest_call::mutable_entrustno() {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  return entrustno_;
}
inline ::std::string* queryEntrustRequest_call::release_entrustno() {
  clear_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = entrustno_;
    entrustno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool queryOnlyCancelable = 5 [default = false];
inline bool queryEntrustRequest_call::has_queryonlycancelable() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void queryEntrustRequest_call::set_has_queryonlycancelable() {
  _has_bits_[0] |= 0x00000010u;
}
inline void queryEntrustRequest_call::clear_has_queryonlycancelable() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void queryEntrustRequest_call::clear_queryonlycancelable() {
  queryonlycancelable_ = false;
  clear_has_queryonlycancelable();
}
inline bool queryEntrustRequest_call::queryonlycancelable() const {
  return queryonlycancelable_;
}
inline void queryEntrustRequest_call::set_queryonlycancelable(bool value) {
  set_has_queryonlycancelable();
  queryonlycancelable_ = value;
}

// optional int32 requestNumber = 6 [default = 1000];
inline bool queryEntrustRequest_call::has_requestnumber() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void queryEntrustRequest_call::set_has_requestnumber() {
  _has_bits_[0] |= 0x00000020u;
}
inline void queryEntrustRequest_call::clear_has_requestnumber() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void queryEntrustRequest_call::clear_requestnumber() {
  requestnumber_ = 1000;
  clear_has_requestnumber();
}
inline ::google::protobuf::int32 queryEntrustRequest_call::requestnumber() const {
  return requestnumber_;
}
inline void queryEntrustRequest_call::set_requestnumber(::google::protobuf::int32 value) {
  set_has_requestnumber();
  requestnumber_ = value;
}

// optional string lastPositionString = 7 [default = ""];
inline bool queryEntrustRequest_call::has_lastpositionstring() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void queryEntrustRequest_call::set_has_lastpositionstring() {
  _has_bits_[0] |= 0x00000040u;
}
inline void queryEntrustRequest_call::clear_has_lastpositionstring() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void queryEntrustRequest_call::clear_lastpositionstring() {
  if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_->clear();
  }
  clear_has_lastpositionstring();
}
inline const ::std::string& queryEntrustRequest_call::lastpositionstring() const {
  return *lastpositionstring_;
}
inline void queryEntrustRequest_call::set_lastpositionstring(const ::std::string& value) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(value);
}
inline void queryEntrustRequest_call::set_lastpositionstring(const char* value) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(value);
}
inline void queryEntrustRequest_call::set_lastpositionstring(const char* value, size_t size) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryEntrustRequest_call::mutable_lastpositionstring() {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  return lastpositionstring_;
}
inline ::std::string* queryEntrustRequest_call::release_lastpositionstring() {
  clear_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lastpositionstring_;
    lastpositionstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// queryEntrustRequest

// repeated .HSCommPB.queryEntrustRequest.call requests = 1;
inline int queryEntrustRequest::requests_size() const {
  return requests_.size();
}
inline void queryEntrustRequest::clear_requests() {
  requests_.Clear();
}
inline const ::HSCommPB::queryEntrustRequest_call& queryEntrustRequest::requests(int index) const {
  return requests_.Get(index);
}
inline ::HSCommPB::queryEntrustRequest_call* queryEntrustRequest::mutable_requests(int index) {
  return requests_.Mutable(index);
}
inline ::HSCommPB::queryEntrustRequest_call* queryEntrustRequest::add_requests() {
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryEntrustRequest_call >&
queryEntrustRequest::requests() const {
  return requests_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryEntrustRequest_call >*
queryEntrustRequest::mutable_requests() {
  return &requests_;
}

// -------------------------------------------------------------------

// queryEntrustResponse_result_entrust

// required string entrustNo = 1;
inline bool queryEntrustResponse_result_entrust::has_entrustno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void queryEntrustResponse_result_entrust::set_has_entrustno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void queryEntrustResponse_result_entrust::clear_has_entrustno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void queryEntrustResponse_result_entrust::clear_entrustno() {
  if (entrustno_ != &::google::protobuf::internal::kEmptyString) {
    entrustno_->clear();
  }
  clear_has_entrustno();
}
inline const ::std::string& queryEntrustResponse_result_entrust::entrustno() const {
  return *entrustno_;
}
inline void queryEntrustResponse_result_entrust::set_entrustno(const ::std::string& value) {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  entrustno_->assign(value);
}
inline void queryEntrustResponse_result_entrust::set_entrustno(const char* value) {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  entrustno_->assign(value);
}
inline void queryEntrustResponse_result_entrust::set_entrustno(const char* value, size_t size) {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  entrustno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryEntrustResponse_result_entrust::mutable_entrustno() {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  return entrustno_;
}
inline ::std::string* queryEntrustResponse_result_entrust::release_entrustno() {
  clear_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = entrustno_;
    entrustno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string stockCode = 2;
inline bool queryEntrustResponse_result_entrust::has_stockcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void queryEntrustResponse_result_entrust::set_has_stockcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void queryEntrustResponse_result_entrust::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void queryEntrustResponse_result_entrust::clear_stockcode() {
  if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
    stockcode_->clear();
  }
  clear_has_stockcode();
}
inline const ::std::string& queryEntrustResponse_result_entrust::stockcode() const {
  return *stockcode_;
}
inline void queryEntrustResponse_result_entrust::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(value);
}
inline void queryEntrustResponse_result_entrust::set_stockcode(const char* value) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(value);
}
inline void queryEntrustResponse_result_entrust::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryEntrustResponse_result_entrust::mutable_stockcode() {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  return stockcode_;
}
inline ::std::string* queryEntrustResponse_result_entrust::release_stockcode() {
  clear_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stockcode_;
    stockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string stockName = 3;
inline bool queryEntrustResponse_result_entrust::has_stockname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void queryEntrustResponse_result_entrust::set_has_stockname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void queryEntrustResponse_result_entrust::clear_has_stockname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void queryEntrustResponse_result_entrust::clear_stockname() {
  if (stockname_ != &::google::protobuf::internal::kEmptyString) {
    stockname_->clear();
  }
  clear_has_stockname();
}
inline const ::std::string& queryEntrustResponse_result_entrust::stockname() const {
  return *stockname_;
}
inline void queryEntrustResponse_result_entrust::set_stockname(const ::std::string& value) {
  set_has_stockname();
  if (stockname_ == &::google::protobuf::internal::kEmptyString) {
    stockname_ = new ::std::string;
  }
  stockname_->assign(value);
}
inline void queryEntrustResponse_result_entrust::set_stockname(const char* value) {
  set_has_stockname();
  if (stockname_ == &::google::protobuf::internal::kEmptyString) {
    stockname_ = new ::std::string;
  }
  stockname_->assign(value);
}
inline void queryEntrustResponse_result_entrust::set_stockname(const char* value, size_t size) {
  set_has_stockname();
  if (stockname_ == &::google::protobuf::internal::kEmptyString) {
    stockname_ = new ::std::string;
  }
  stockname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryEntrustResponse_result_entrust::mutable_stockname() {
  set_has_stockname();
  if (stockname_ == &::google::protobuf::internal::kEmptyString) {
    stockname_ = new ::std::string;
  }
  return stockname_;
}
inline ::std::string* queryEntrustResponse_result_entrust::release_stockname() {
  clear_has_stockname();
  if (stockname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stockname_;
    stockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .HSCommPB.enums.entrustBS entrustBS = 4;
inline bool queryEntrustResponse_result_entrust::has_entrustbs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void queryEntrustResponse_result_entrust::set_has_entrustbs() {
  _has_bits_[0] |= 0x00000008u;
}
inline void queryEntrustResponse_result_entrust::clear_has_entrustbs() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void queryEntrustResponse_result_entrust::clear_entrustbs() {
  entrustbs_ = 0;
  clear_has_entrustbs();
}
inline ::HSCommPB::enums_entrustBS queryEntrustResponse_result_entrust::entrustbs() const {
  return static_cast< ::HSCommPB::enums_entrustBS >(entrustbs_);
}
inline void queryEntrustResponse_result_entrust::set_entrustbs(::HSCommPB::enums_entrustBS value) {
  GOOGLE_DCHECK(::HSCommPB::enums_entrustBS_IsValid(value));
  set_has_entrustbs();
  entrustbs_ = value;
}

// required int64 entrustAmount = 5;
inline bool queryEntrustResponse_result_entrust::has_entrustamount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void queryEntrustResponse_result_entrust::set_has_entrustamount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void queryEntrustResponse_result_entrust::clear_has_entrustamount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void queryEntrustResponse_result_entrust::clear_entrustamount() {
  entrustamount_ = GOOGLE_LONGLONG(0);
  clear_has_entrustamount();
}
inline ::google::protobuf::int64 queryEntrustResponse_result_entrust::entrustamount() const {
  return entrustamount_;
}
inline void queryEntrustResponse_result_entrust::set_entrustamount(::google::protobuf::int64 value) {
  set_has_entrustamount();
  entrustamount_ = value;
}

// required int64 entrustPrice = 6;
inline bool queryEntrustResponse_result_entrust::has_entrustprice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void queryEntrustResponse_result_entrust::set_has_entrustprice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void queryEntrustResponse_result_entrust::clear_has_entrustprice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void queryEntrustResponse_result_entrust::clear_entrustprice() {
  entrustprice_ = GOOGLE_LONGLONG(0);
  clear_has_entrustprice();
}
inline ::google::protobuf::int64 queryEntrustResponse_result_entrust::entrustprice() const {
  return entrustprice_;
}
inline void queryEntrustResponse_result_entrust::set_entrustprice(::google::protobuf::int64 value) {
  set_has_entrustprice();
  entrustprice_ = value;
}

// required int64 businessAmount = 7;
inline bool queryEntrustResponse_result_entrust::has_businessamount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void queryEntrustResponse_result_entrust::set_has_businessamount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void queryEntrustResponse_result_entrust::clear_has_businessamount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void queryEntrustResponse_result_entrust::clear_businessamount() {
  businessamount_ = GOOGLE_LONGLONG(0);
  clear_has_businessamount();
}
inline ::google::protobuf::int64 queryEntrustResponse_result_entrust::businessamount() const {
  return businessamount_;
}
inline void queryEntrustResponse_result_entrust::set_businessamount(::google::protobuf::int64 value) {
  set_has_businessamount();
  businessamount_ = value;
}

// required int64 businessPrice = 8;
inline bool queryEntrustResponse_result_entrust::has_businessprice() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void queryEntrustResponse_result_entrust::set_has_businessprice() {
  _has_bits_[0] |= 0x00000080u;
}
inline void queryEntrustResponse_result_entrust::clear_has_businessprice() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void queryEntrustResponse_result_entrust::clear_businessprice() {
  businessprice_ = GOOGLE_LONGLONG(0);
  clear_has_businessprice();
}
inline ::google::protobuf::int64 queryEntrustResponse_result_entrust::businessprice() const {
  return businessprice_;
}
inline void queryEntrustResponse_result_entrust::set_businessprice(::google::protobuf::int64 value) {
  set_has_businessprice();
  businessprice_ = value;
}

// required int64 cancelvol = 9;
inline bool queryEntrustResponse_result_entrust::has_cancelvol() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void queryEntrustResponse_result_entrust::set_has_cancelvol() {
  _has_bits_[0] |= 0x00000100u;
}
inline void queryEntrustResponse_result_entrust::clear_has_cancelvol() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void queryEntrustResponse_result_entrust::clear_cancelvol() {
  cancelvol_ = GOOGLE_LONGLONG(0);
  clear_has_cancelvol();
}
inline ::google::protobuf::int64 queryEntrustResponse_result_entrust::cancelvol() const {
  return cancelvol_;
}
inline void queryEntrustResponse_result_entrust::set_cancelvol(::google::protobuf::int64 value) {
  set_has_cancelvol();
  cancelvol_ = value;
}

// required int64 internalsid = 10;
inline bool queryEntrustResponse_result_entrust::has_internalsid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void queryEntrustResponse_result_entrust::set_has_internalsid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void queryEntrustResponse_result_entrust::clear_has_internalsid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void queryEntrustResponse_result_entrust::clear_internalsid() {
  internalsid_ = GOOGLE_LONGLONG(0);
  clear_has_internalsid();
}
inline ::google::protobuf::int64 queryEntrustResponse_result_entrust::internalsid() const {
  return internalsid_;
}
inline void queryEntrustResponse_result_entrust::set_internalsid(::google::protobuf::int64 value) {
  set_has_internalsid();
  internalsid_ = value;
}

// required int64 FEEandTAX = 11;
inline bool queryEntrustResponse_result_entrust::has_feeandtax() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void queryEntrustResponse_result_entrust::set_has_feeandtax() {
  _has_bits_[0] |= 0x00000400u;
}
inline void queryEntrustResponse_result_entrust::clear_has_feeandtax() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void queryEntrustResponse_result_entrust::clear_feeandtax() {
  feeandtax_ = GOOGLE_LONGLONG(0);
  clear_has_feeandtax();
}
inline ::google::protobuf::int64 queryEntrustResponse_result_entrust::feeandtax() const {
  return feeandtax_;
}
inline void queryEntrustResponse_result_entrust::set_feeandtax(::google::protobuf::int64 value) {
  set_has_feeandtax();
  feeandtax_ = value;
}

// required int64 tradedone = 12;
inline bool queryEntrustResponse_result_entrust::has_tradedone() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void queryEntrustResponse_result_entrust::set_has_tradedone() {
  _has_bits_[0] |= 0x00000800u;
}
inline void queryEntrustResponse_result_entrust::clear_has_tradedone() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void queryEntrustResponse_result_entrust::clear_tradedone() {
  tradedone_ = GOOGLE_LONGLONG(0);
  clear_has_tradedone();
}
inline ::google::protobuf::int64 queryEntrustResponse_result_entrust::tradedone() const {
  return tradedone_;
}
inline void queryEntrustResponse_result_entrust::set_tradedone(::google::protobuf::int64 value) {
  set_has_tradedone();
  tradedone_ = value;
}

// required int64 success = 13;
inline bool queryEntrustResponse_result_entrust::has_success() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void queryEntrustResponse_result_entrust::set_has_success() {
  _has_bits_[0] |= 0x00001000u;
}
inline void queryEntrustResponse_result_entrust::clear_has_success() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void queryEntrustResponse_result_entrust::clear_success() {
  success_ = GOOGLE_LONGLONG(0);
  clear_has_success();
}
inline ::google::protobuf::int64 queryEntrustResponse_result_entrust::success() const {
  return success_;
}
inline void queryEntrustResponse_result_entrust::set_success(::google::protobuf::int64 value) {
  set_has_success();
  success_ = value;
}

// optional string invalidInfo = 14;
inline bool queryEntrustResponse_result_entrust::has_invalidinfo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void queryEntrustResponse_result_entrust::set_has_invalidinfo() {
  _has_bits_[0] |= 0x00002000u;
}
inline void queryEntrustResponse_result_entrust::clear_has_invalidinfo() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void queryEntrustResponse_result_entrust::clear_invalidinfo() {
  if (invalidinfo_ != &::google::protobuf::internal::kEmptyString) {
    invalidinfo_->clear();
  }
  clear_has_invalidinfo();
}
inline const ::std::string& queryEntrustResponse_result_entrust::invalidinfo() const {
  return *invalidinfo_;
}
inline void queryEntrustResponse_result_entrust::set_invalidinfo(const ::std::string& value) {
  set_has_invalidinfo();
  if (invalidinfo_ == &::google::protobuf::internal::kEmptyString) {
    invalidinfo_ = new ::std::string;
  }
  invalidinfo_->assign(value);
}
inline void queryEntrustResponse_result_entrust::set_invalidinfo(const char* value) {
  set_has_invalidinfo();
  if (invalidinfo_ == &::google::protobuf::internal::kEmptyString) {
    invalidinfo_ = new ::std::string;
  }
  invalidinfo_->assign(value);
}
inline void queryEntrustResponse_result_entrust::set_invalidinfo(const char* value, size_t size) {
  set_has_invalidinfo();
  if (invalidinfo_ == &::google::protobuf::internal::kEmptyString) {
    invalidinfo_ = new ::std::string;
  }
  invalidinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryEntrustResponse_result_entrust::mutable_invalidinfo() {
  set_has_invalidinfo();
  if (invalidinfo_ == &::google::protobuf::internal::kEmptyString) {
    invalidinfo_ = new ::std::string;
  }
  return invalidinfo_;
}
inline ::std::string* queryEntrustResponse_result_entrust::release_invalidinfo() {
  clear_has_invalidinfo();
  if (invalidinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = invalidinfo_;
    invalidinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// queryEntrustResponse_result

// repeated .HSCommPB.queryEntrustResponse.result.entrust entrusts = 1;
inline int queryEntrustResponse_result::entrusts_size() const {
  return entrusts_.size();
}
inline void queryEntrustResponse_result::clear_entrusts() {
  entrusts_.Clear();
}
inline const ::HSCommPB::queryEntrustResponse_result_entrust& queryEntrustResponse_result::entrusts(int index) const {
  return entrusts_.Get(index);
}
inline ::HSCommPB::queryEntrustResponse_result_entrust* queryEntrustResponse_result::mutable_entrusts(int index) {
  return entrusts_.Mutable(index);
}
inline ::HSCommPB::queryEntrustResponse_result_entrust* queryEntrustResponse_result::add_entrusts() {
  return entrusts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryEntrustResponse_result_entrust >&
queryEntrustResponse_result::entrusts() const {
  return entrusts_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryEntrustResponse_result_entrust >*
queryEntrustResponse_result::mutable_entrusts() {
  return &entrusts_;
}

// required string lastPositionString = 2;
inline bool queryEntrustResponse_result::has_lastpositionstring() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void queryEntrustResponse_result::set_has_lastpositionstring() {
  _has_bits_[0] |= 0x00000002u;
}
inline void queryEntrustResponse_result::clear_has_lastpositionstring() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void queryEntrustResponse_result::clear_lastpositionstring() {
  if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_->clear();
  }
  clear_has_lastpositionstring();
}
inline const ::std::string& queryEntrustResponse_result::lastpositionstring() const {
  return *lastpositionstring_;
}
inline void queryEntrustResponse_result::set_lastpositionstring(const ::std::string& value) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(value);
}
inline void queryEntrustResponse_result::set_lastpositionstring(const char* value) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(value);
}
inline void queryEntrustResponse_result::set_lastpositionstring(const char* value, size_t size) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryEntrustResponse_result::mutable_lastpositionstring() {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  return lastpositionstring_;
}
inline ::std::string* queryEntrustResponse_result::release_lastpositionstring() {
  clear_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lastpositionstring_;
    lastpositionstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 errorNo = 14 [default = 0];
inline bool queryEntrustResponse_result::has_errorno() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void queryEntrustResponse_result::set_has_errorno() {
  _has_bits_[0] |= 0x00000004u;
}
inline void queryEntrustResponse_result::clear_has_errorno() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void queryEntrustResponse_result::clear_errorno() {
  errorno_ = 0;
  clear_has_errorno();
}
inline ::google::protobuf::int32 queryEntrustResponse_result::errorno() const {
  return errorno_;
}
inline void queryEntrustResponse_result::set_errorno(::google::protobuf::int32 value) {
  set_has_errorno();
  errorno_ = value;
}

// optional string errorMsg = 15 [default = ""];
inline bool queryEntrustResponse_result::has_errormsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void queryEntrustResponse_result::set_has_errormsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void queryEntrustResponse_result::clear_has_errormsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void queryEntrustResponse_result::clear_errormsg() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    errormsg_->clear();
  }
  clear_has_errormsg();
}
inline const ::std::string& queryEntrustResponse_result::errormsg() const {
  return *errormsg_;
}
inline void queryEntrustResponse_result::set_errormsg(const ::std::string& value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void queryEntrustResponse_result::set_errormsg(const char* value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void queryEntrustResponse_result::set_errormsg(const char* value, size_t size) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryEntrustResponse_result::mutable_errormsg() {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  return errormsg_;
}
inline ::std::string* queryEntrustResponse_result::release_errormsg() {
  clear_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errormsg_;
    errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// queryEntrustResponse

// repeated .HSCommPB.queryEntrustResponse.result responses = 1;
inline int queryEntrustResponse::responses_size() const {
  return responses_.size();
}
inline void queryEntrustResponse::clear_responses() {
  responses_.Clear();
}
inline const ::HSCommPB::queryEntrustResponse_result& queryEntrustResponse::responses(int index) const {
  return responses_.Get(index);
}
inline ::HSCommPB::queryEntrustResponse_result* queryEntrustResponse::mutable_responses(int index) {
  return responses_.Mutable(index);
}
inline ::HSCommPB::queryEntrustResponse_result* queryEntrustResponse::add_responses() {
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryEntrustResponse_result >&
queryEntrustResponse::responses() const {
  return responses_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryEntrustResponse_result >*
queryEntrustResponse::mutable_responses() {
  return &responses_;
}

// -------------------------------------------------------------------

// queryStockRequest_call

// required string branchNo = 1;
inline bool queryStockRequest_call::has_branchno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void queryStockRequest_call::set_has_branchno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void queryStockRequest_call::clear_has_branchno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void queryStockRequest_call::clear_branchno() {
  if (branchno_ != &::google::protobuf::internal::kEmptyString) {
    branchno_->clear();
  }
  clear_has_branchno();
}
inline const ::std::string& queryStockRequest_call::branchno() const {
  return *branchno_;
}
inline void queryStockRequest_call::set_branchno(const ::std::string& value) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(value);
}
inline void queryStockRequest_call::set_branchno(const char* value) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(value);
}
inline void queryStockRequest_call::set_branchno(const char* value, size_t size) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryStockRequest_call::mutable_branchno() {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  return branchno_;
}
inline ::std::string* queryStockRequest_call::release_branchno() {
  clear_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = branchno_;
    branchno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string fundAccount = 2;
inline bool queryStockRequest_call::has_fundaccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void queryStockRequest_call::set_has_fundaccount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void queryStockRequest_call::clear_has_fundaccount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void queryStockRequest_call::clear_fundaccount() {
  if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
    fundaccount_->clear();
  }
  clear_has_fundaccount();
}
inline const ::std::string& queryStockRequest_call::fundaccount() const {
  return *fundaccount_;
}
inline void queryStockRequest_call::set_fundaccount(const ::std::string& value) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(value);
}
inline void queryStockRequest_call::set_fundaccount(const char* value) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(value);
}
inline void queryStockRequest_call::set_fundaccount(const char* value, size_t size) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryStockRequest_call::mutable_fundaccount() {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  return fundaccount_;
}
inline ::std::string* queryStockRequest_call::release_fundaccount() {
  clear_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fundaccount_;
    fundaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string password = 3;
inline bool queryStockRequest_call::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void queryStockRequest_call::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void queryStockRequest_call::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void queryStockRequest_call::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& queryStockRequest_call::password() const {
  return *password_;
}
inline void queryStockRequest_call::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void queryStockRequest_call::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void queryStockRequest_call::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryStockRequest_call::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* queryStockRequest_call::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .HSCommPB.enums.exchangeType exchangeType = 4 [default = noneExchangeType];
inline bool queryStockRequest_call::has_exchangetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void queryStockRequest_call::set_has_exchangetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void queryStockRequest_call::clear_has_exchangetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void queryStockRequest_call::clear_exchangetype() {
  exchangetype_ = 0;
  clear_has_exchangetype();
}
inline ::HSCommPB::enums_exchangeType queryStockRequest_call::exchangetype() const {
  return static_cast< ::HSCommPB::enums_exchangeType >(exchangetype_);
}
inline void queryStockRequest_call::set_exchangetype(::HSCommPB::enums_exchangeType value) {
  GOOGLE_DCHECK(::HSCommPB::enums_exchangeType_IsValid(value));
  set_has_exchangetype();
  exchangetype_ = value;
}

// optional string stockCode = 5 [default = ""];
inline bool queryStockRequest_call::has_stockcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void queryStockRequest_call::set_has_stockcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void queryStockRequest_call::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void queryStockRequest_call::clear_stockcode() {
  if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
    stockcode_->clear();
  }
  clear_has_stockcode();
}
inline const ::std::string& queryStockRequest_call::stockcode() const {
  return *stockcode_;
}
inline void queryStockRequest_call::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(value);
}
inline void queryStockRequest_call::set_stockcode(const char* value) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(value);
}
inline void queryStockRequest_call::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryStockRequest_call::mutable_stockcode() {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  return stockcode_;
}
inline ::std::string* queryStockRequest_call::release_stockcode() {
  clear_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stockcode_;
    stockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 requestNumber = 6 [default = 1000];
inline bool queryStockRequest_call::has_requestnumber() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void queryStockRequest_call::set_has_requestnumber() {
  _has_bits_[0] |= 0x00000020u;
}
inline void queryStockRequest_call::clear_has_requestnumber() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void queryStockRequest_call::clear_requestnumber() {
  requestnumber_ = 1000;
  clear_has_requestnumber();
}
inline ::google::protobuf::int32 queryStockRequest_call::requestnumber() const {
  return requestnumber_;
}
inline void queryStockRequest_call::set_requestnumber(::google::protobuf::int32 value) {
  set_has_requestnumber();
  requestnumber_ = value;
}

// optional string lastPositionString = 7 [default = ""];
inline bool queryStockRequest_call::has_lastpositionstring() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void queryStockRequest_call::set_has_lastpositionstring() {
  _has_bits_[0] |= 0x00000040u;
}
inline void queryStockRequest_call::clear_has_lastpositionstring() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void queryStockRequest_call::clear_lastpositionstring() {
  if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_->clear();
  }
  clear_has_lastpositionstring();
}
inline const ::std::string& queryStockRequest_call::lastpositionstring() const {
  return *lastpositionstring_;
}
inline void queryStockRequest_call::set_lastpositionstring(const ::std::string& value) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(value);
}
inline void queryStockRequest_call::set_lastpositionstring(const char* value) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(value);
}
inline void queryStockRequest_call::set_lastpositionstring(const char* value, size_t size) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryStockRequest_call::mutable_lastpositionstring() {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  return lastpositionstring_;
}
inline ::std::string* queryStockRequest_call::release_lastpositionstring() {
  clear_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lastpositionstring_;
    lastpositionstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// queryStockRequest

// repeated .HSCommPB.queryStockRequest.call requests = 1;
inline int queryStockRequest::requests_size() const {
  return requests_.size();
}
inline void queryStockRequest::clear_requests() {
  requests_.Clear();
}
inline const ::HSCommPB::queryStockRequest_call& queryStockRequest::requests(int index) const {
  return requests_.Get(index);
}
inline ::HSCommPB::queryStockRequest_call* queryStockRequest::mutable_requests(int index) {
  return requests_.Mutable(index);
}
inline ::HSCommPB::queryStockRequest_call* queryStockRequest::add_requests() {
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryStockRequest_call >&
queryStockRequest::requests() const {
  return requests_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryStockRequest_call >*
queryStockRequest::mutable_requests() {
  return &requests_;
}

// -------------------------------------------------------------------

// queryStockResponse_result_stock

// required .HSCommPB.enums.exchangeType exchangeType = 1;
inline bool queryStockResponse_result_stock::has_exchangetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void queryStockResponse_result_stock::set_has_exchangetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void queryStockResponse_result_stock::clear_has_exchangetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void queryStockResponse_result_stock::clear_exchangetype() {
  exchangetype_ = 0;
  clear_has_exchangetype();
}
inline ::HSCommPB::enums_exchangeType queryStockResponse_result_stock::exchangetype() const {
  return static_cast< ::HSCommPB::enums_exchangeType >(exchangetype_);
}
inline void queryStockResponse_result_stock::set_exchangetype(::HSCommPB::enums_exchangeType value) {
  GOOGLE_DCHECK(::HSCommPB::enums_exchangeType_IsValid(value));
  set_has_exchangetype();
  exchangetype_ = value;
}

// required string stockAccount = 2;
inline bool queryStockResponse_result_stock::has_stockaccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void queryStockResponse_result_stock::set_has_stockaccount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void queryStockResponse_result_stock::clear_has_stockaccount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void queryStockResponse_result_stock::clear_stockaccount() {
  if (stockaccount_ != &::google::protobuf::internal::kEmptyString) {
    stockaccount_->clear();
  }
  clear_has_stockaccount();
}
inline const ::std::string& queryStockResponse_result_stock::stockaccount() const {
  return *stockaccount_;
}
inline void queryStockResponse_result_stock::set_stockaccount(const ::std::string& value) {
  set_has_stockaccount();
  if (stockaccount_ == &::google::protobuf::internal::kEmptyString) {
    stockaccount_ = new ::std::string;
  }
  stockaccount_->assign(value);
}
inline void queryStockResponse_result_stock::set_stockaccount(const char* value) {
  set_has_stockaccount();
  if (stockaccount_ == &::google::protobuf::internal::kEmptyString) {
    stockaccount_ = new ::std::string;
  }
  stockaccount_->assign(value);
}
inline void queryStockResponse_result_stock::set_stockaccount(const char* value, size_t size) {
  set_has_stockaccount();
  if (stockaccount_ == &::google::protobuf::internal::kEmptyString) {
    stockaccount_ = new ::std::string;
  }
  stockaccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryStockResponse_result_stock::mutable_stockaccount() {
  set_has_stockaccount();
  if (stockaccount_ == &::google::protobuf::internal::kEmptyString) {
    stockaccount_ = new ::std::string;
  }
  return stockaccount_;
}
inline ::std::string* queryStockResponse_result_stock::release_stockaccount() {
  clear_has_stockaccount();
  if (stockaccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stockaccount_;
    stockaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string stockCode = 3;
inline bool queryStockResponse_result_stock::has_stockcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void queryStockResponse_result_stock::set_has_stockcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void queryStockResponse_result_stock::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void queryStockResponse_result_stock::clear_stockcode() {
  if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
    stockcode_->clear();
  }
  clear_has_stockcode();
}
inline const ::std::string& queryStockResponse_result_stock::stockcode() const {
  return *stockcode_;
}
inline void queryStockResponse_result_stock::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(value);
}
inline void queryStockResponse_result_stock::set_stockcode(const char* value) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(value);
}
inline void queryStockResponse_result_stock::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryStockResponse_result_stock::mutable_stockcode() {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  return stockcode_;
}
inline ::std::string* queryStockResponse_result_stock::release_stockcode() {
  clear_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stockcode_;
    stockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string stockName = 4;
inline bool queryStockResponse_result_stock::has_stockname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void queryStockResponse_result_stock::set_has_stockname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void queryStockResponse_result_stock::clear_has_stockname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void queryStockResponse_result_stock::clear_stockname() {
  if (stockname_ != &::google::protobuf::internal::kEmptyString) {
    stockname_->clear();
  }
  clear_has_stockname();
}
inline const ::std::string& queryStockResponse_result_stock::stockname() const {
  return *stockname_;
}
inline void queryStockResponse_result_stock::set_stockname(const ::std::string& value) {
  set_has_stockname();
  if (stockname_ == &::google::protobuf::internal::kEmptyString) {
    stockname_ = new ::std::string;
  }
  stockname_->assign(value);
}
inline void queryStockResponse_result_stock::set_stockname(const char* value) {
  set_has_stockname();
  if (stockname_ == &::google::protobuf::internal::kEmptyString) {
    stockname_ = new ::std::string;
  }
  stockname_->assign(value);
}
inline void queryStockResponse_result_stock::set_stockname(const char* value, size_t size) {
  set_has_stockname();
  if (stockname_ == &::google::protobuf::internal::kEmptyString) {
    stockname_ = new ::std::string;
  }
  stockname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryStockResponse_result_stock::mutable_stockname() {
  set_has_stockname();
  if (stockname_ == &::google::protobuf::internal::kEmptyString) {
    stockname_ = new ::std::string;
  }
  return stockname_;
}
inline ::std::string* queryStockResponse_result_stock::release_stockname() {
  clear_has_stockname();
  if (stockname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stockname_;
    stockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 currentAmount = 5;
inline bool queryStockResponse_result_stock::has_currentamount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void queryStockResponse_result_stock::set_has_currentamount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void queryStockResponse_result_stock::clear_has_currentamount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void queryStockResponse_result_stock::clear_currentamount() {
  currentamount_ = GOOGLE_LONGLONG(0);
  clear_has_currentamount();
}
inline ::google::protobuf::int64 queryStockResponse_result_stock::currentamount() const {
  return currentamount_;
}
inline void queryStockResponse_result_stock::set_currentamount(::google::protobuf::int64 value) {
  set_has_currentamount();
  currentamount_ = value;
}

// required int64 enableAmount = 6;
inline bool queryStockResponse_result_stock::has_enableamount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void queryStockResponse_result_stock::set_has_enableamount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void queryStockResponse_result_stock::clear_has_enableamount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void queryStockResponse_result_stock::clear_enableamount() {
  enableamount_ = GOOGLE_LONGLONG(0);
  clear_has_enableamount();
}
inline ::google::protobuf::int64 queryStockResponse_result_stock::enableamount() const {
  return enableamount_;
}
inline void queryStockResponse_result_stock::set_enableamount(::google::protobuf::int64 value) {
  set_has_enableamount();
  enableamount_ = value;
}

// required int64 lastPrice = 7;
inline bool queryStockResponse_result_stock::has_lastprice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void queryStockResponse_result_stock::set_has_lastprice() {
  _has_bits_[0] |= 0x00000040u;
}
inline void queryStockResponse_result_stock::clear_has_lastprice() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void queryStockResponse_result_stock::clear_lastprice() {
  lastprice_ = GOOGLE_LONGLONG(0);
  clear_has_lastprice();
}
inline ::google::protobuf::int64 queryStockResponse_result_stock::lastprice() const {
  return lastprice_;
}
inline void queryStockResponse_result_stock::set_lastprice(::google::protobuf::int64 value) {
  set_has_lastprice();
  lastprice_ = value;
}

// required int64 costPrice = 8;
inline bool queryStockResponse_result_stock::has_costprice() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void queryStockResponse_result_stock::set_has_costprice() {
  _has_bits_[0] |= 0x00000080u;
}
inline void queryStockResponse_result_stock::clear_has_costprice() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void queryStockResponse_result_stock::clear_costprice() {
  costprice_ = GOOGLE_LONGLONG(0);
  clear_has_costprice();
}
inline ::google::protobuf::int64 queryStockResponse_result_stock::costprice() const {
  return costprice_;
}
inline void queryStockResponse_result_stock::set_costprice(::google::protobuf::int64 value) {
  set_has_costprice();
  costprice_ = value;
}

// required int64 incomeBalance = 9;
inline bool queryStockResponse_result_stock::has_incomebalance() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void queryStockResponse_result_stock::set_has_incomebalance() {
  _has_bits_[0] |= 0x00000100u;
}
inline void queryStockResponse_result_stock::clear_has_incomebalance() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void queryStockResponse_result_stock::clear_incomebalance() {
  incomebalance_ = GOOGLE_LONGLONG(0);
  clear_has_incomebalance();
}
inline ::google::protobuf::int64 queryStockResponse_result_stock::incomebalance() const {
  return incomebalance_;
}
inline void queryStockResponse_result_stock::set_incomebalance(::google::protobuf::int64 value) {
  set_has_incomebalance();
  incomebalance_ = value;
}

// required int64 marketValue = 10;
inline bool queryStockResponse_result_stock::has_marketvalue() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void queryStockResponse_result_stock::set_has_marketvalue() {
  _has_bits_[0] |= 0x00000200u;
}
inline void queryStockResponse_result_stock::clear_has_marketvalue() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void queryStockResponse_result_stock::clear_marketvalue() {
  marketvalue_ = GOOGLE_LONGLONG(0);
  clear_has_marketvalue();
}
inline ::google::protobuf::int64 queryStockResponse_result_stock::marketvalue() const {
  return marketvalue_;
}
inline void queryStockResponse_result_stock::set_marketvalue(::google::protobuf::int64 value) {
  set_has_marketvalue();
  marketvalue_ = value;
}

// required sint64 sumBuyAmount = 17 [default = -1];
inline bool queryStockResponse_result_stock::has_sumbuyamount() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void queryStockResponse_result_stock::set_has_sumbuyamount() {
  _has_bits_[0] |= 0x00000400u;
}
inline void queryStockResponse_result_stock::clear_has_sumbuyamount() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void queryStockResponse_result_stock::clear_sumbuyamount() {
  sumbuyamount_ = GOOGLE_LONGLONG(-1);
  clear_has_sumbuyamount();
}
inline ::google::protobuf::int64 queryStockResponse_result_stock::sumbuyamount() const {
  return sumbuyamount_;
}
inline void queryStockResponse_result_stock::set_sumbuyamount(::google::protobuf::int64 value) {
  set_has_sumbuyamount();
  sumbuyamount_ = value;
}

// required sint64 sumBuyBalance = 18 [default = -1];
inline bool queryStockResponse_result_stock::has_sumbuybalance() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void queryStockResponse_result_stock::set_has_sumbuybalance() {
  _has_bits_[0] |= 0x00000800u;
}
inline void queryStockResponse_result_stock::clear_has_sumbuybalance() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void queryStockResponse_result_stock::clear_sumbuybalance() {
  sumbuybalance_ = GOOGLE_LONGLONG(-1);
  clear_has_sumbuybalance();
}
inline ::google::protobuf::int64 queryStockResponse_result_stock::sumbuybalance() const {
  return sumbuybalance_;
}
inline void queryStockResponse_result_stock::set_sumbuybalance(::google::protobuf::int64 value) {
  set_has_sumbuybalance();
  sumbuybalance_ = value;
}

// required sint64 realBuyAmount = 19 [default = -1];
inline bool queryStockResponse_result_stock::has_realbuyamount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void queryStockResponse_result_stock::set_has_realbuyamount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void queryStockResponse_result_stock::clear_has_realbuyamount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void queryStockResponse_result_stock::clear_realbuyamount() {
  realbuyamount_ = GOOGLE_LONGLONG(-1);
  clear_has_realbuyamount();
}
inline ::google::protobuf::int64 queryStockResponse_result_stock::realbuyamount() const {
  return realbuyamount_;
}
inline void queryStockResponse_result_stock::set_realbuyamount(::google::protobuf::int64 value) {
  set_has_realbuyamount();
  realbuyamount_ = value;
}

// required sint64 realBuyBalance = 20 [default = -1];
inline bool queryStockResponse_result_stock::has_realbuybalance() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void queryStockResponse_result_stock::set_has_realbuybalance() {
  _has_bits_[0] |= 0x00002000u;
}
inline void queryStockResponse_result_stock::clear_has_realbuybalance() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void queryStockResponse_result_stock::clear_realbuybalance() {
  realbuybalance_ = GOOGLE_LONGLONG(-1);
  clear_has_realbuybalance();
}
inline ::google::protobuf::int64 queryStockResponse_result_stock::realbuybalance() const {
  return realbuybalance_;
}
inline void queryStockResponse_result_stock::set_realbuybalance(::google::protobuf::int64 value) {
  set_has_realbuybalance();
  realbuybalance_ = value;
}

// required sint64 sumSellAmount = 21 [default = -1];
inline bool queryStockResponse_result_stock::has_sumsellamount() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void queryStockResponse_result_stock::set_has_sumsellamount() {
  _has_bits_[0] |= 0x00004000u;
}
inline void queryStockResponse_result_stock::clear_has_sumsellamount() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void queryStockResponse_result_stock::clear_sumsellamount() {
  sumsellamount_ = GOOGLE_LONGLONG(-1);
  clear_has_sumsellamount();
}
inline ::google::protobuf::int64 queryStockResponse_result_stock::sumsellamount() const {
  return sumsellamount_;
}
inline void queryStockResponse_result_stock::set_sumsellamount(::google::protobuf::int64 value) {
  set_has_sumsellamount();
  sumsellamount_ = value;
}

// required sint64 sumSellBalance = 22 [default = -1];
inline bool queryStockResponse_result_stock::has_sumsellbalance() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void queryStockResponse_result_stock::set_has_sumsellbalance() {
  _has_bits_[0] |= 0x00008000u;
}
inline void queryStockResponse_result_stock::clear_has_sumsellbalance() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void queryStockResponse_result_stock::clear_sumsellbalance() {
  sumsellbalance_ = GOOGLE_LONGLONG(-1);
  clear_has_sumsellbalance();
}
inline ::google::protobuf::int64 queryStockResponse_result_stock::sumsellbalance() const {
  return sumsellbalance_;
}
inline void queryStockResponse_result_stock::set_sumsellbalance(::google::protobuf::int64 value) {
  set_has_sumsellbalance();
  sumsellbalance_ = value;
}

// required sint64 realSellAmount = 23 [default = -1];
inline bool queryStockResponse_result_stock::has_realsellamount() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void queryStockResponse_result_stock::set_has_realsellamount() {
  _has_bits_[0] |= 0x00010000u;
}
inline void queryStockResponse_result_stock::clear_has_realsellamount() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void queryStockResponse_result_stock::clear_realsellamount() {
  realsellamount_ = GOOGLE_LONGLONG(-1);
  clear_has_realsellamount();
}
inline ::google::protobuf::int64 queryStockResponse_result_stock::realsellamount() const {
  return realsellamount_;
}
inline void queryStockResponse_result_stock::set_realsellamount(::google::protobuf::int64 value) {
  set_has_realsellamount();
  realsellamount_ = value;
}

// required sint64 realSellBalance = 24 [default = -1];
inline bool queryStockResponse_result_stock::has_realsellbalance() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void queryStockResponse_result_stock::set_has_realsellbalance() {
  _has_bits_[0] |= 0x00020000u;
}
inline void queryStockResponse_result_stock::clear_has_realsellbalance() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void queryStockResponse_result_stock::clear_realsellbalance() {
  realsellbalance_ = GOOGLE_LONGLONG(-1);
  clear_has_realsellbalance();
}
inline ::google::protobuf::int64 queryStockResponse_result_stock::realsellbalance() const {
  return realsellbalance_;
}
inline void queryStockResponse_result_stock::set_realsellbalance(::google::protobuf::int64 value) {
  set_has_realsellbalance();
  realsellbalance_ = value;
}

// required sint64 correctAmount = 25 [default = -1];
inline bool queryStockResponse_result_stock::has_correctamount() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void queryStockResponse_result_stock::set_has_correctamount() {
  _has_bits_[0] |= 0x00040000u;
}
inline void queryStockResponse_result_stock::clear_has_correctamount() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void queryStockResponse_result_stock::clear_correctamount() {
  correctamount_ = GOOGLE_LONGLONG(-1);
  clear_has_correctamount();
}
inline ::google::protobuf::int64 queryStockResponse_result_stock::correctamount() const {
  return correctamount_;
}
inline void queryStockResponse_result_stock::set_correctamount(::google::protobuf::int64 value) {
  set_has_correctamount();
  correctamount_ = value;
}

// required sint64 incomeBalanceNofare = 26 [default = -1];
inline bool queryStockResponse_result_stock::has_incomebalancenofare() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void queryStockResponse_result_stock::set_has_incomebalancenofare() {
  _has_bits_[0] |= 0x00080000u;
}
inline void queryStockResponse_result_stock::clear_has_incomebalancenofare() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void queryStockResponse_result_stock::clear_incomebalancenofare() {
  incomebalancenofare_ = GOOGLE_LONGLONG(-1);
  clear_has_incomebalancenofare();
}
inline ::google::protobuf::int64 queryStockResponse_result_stock::incomebalancenofare() const {
  return incomebalancenofare_;
}
inline void queryStockResponse_result_stock::set_incomebalancenofare(::google::protobuf::int64 value) {
  set_has_incomebalancenofare();
  incomebalancenofare_ = value;
}

// required sint64 uncomeBuyAmount = 27 [default = -1];
inline bool queryStockResponse_result_stock::has_uncomebuyamount() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void queryStockResponse_result_stock::set_has_uncomebuyamount() {
  _has_bits_[0] |= 0x00100000u;
}
inline void queryStockResponse_result_stock::clear_has_uncomebuyamount() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void queryStockResponse_result_stock::clear_uncomebuyamount() {
  uncomebuyamount_ = GOOGLE_LONGLONG(-1);
  clear_has_uncomebuyamount();
}
inline ::google::protobuf::int64 queryStockResponse_result_stock::uncomebuyamount() const {
  return uncomebuyamount_;
}
inline void queryStockResponse_result_stock::set_uncomebuyamount(::google::protobuf::int64 value) {
  set_has_uncomebuyamount();
  uncomebuyamount_ = value;
}

// required sint64 uncomeSellAmount = 28 [default = -1];
inline bool queryStockResponse_result_stock::has_uncomesellamount() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void queryStockResponse_result_stock::set_has_uncomesellamount() {
  _has_bits_[0] |= 0x00200000u;
}
inline void queryStockResponse_result_stock::clear_has_uncomesellamount() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void queryStockResponse_result_stock::clear_uncomesellamount() {
  uncomesellamount_ = GOOGLE_LONGLONG(-1);
  clear_has_uncomesellamount();
}
inline ::google::protobuf::int64 queryStockResponse_result_stock::uncomesellamount() const {
  return uncomesellamount_;
}
inline void queryStockResponse_result_stock::set_uncomesellamount(::google::protobuf::int64 value) {
  set_has_uncomesellamount();
  uncomesellamount_ = value;
}

// -------------------------------------------------------------------

// queryStockResponse_result

// repeated .HSCommPB.queryStockResponse.result.stock stocks = 1;
inline int queryStockResponse_result::stocks_size() const {
  return stocks_.size();
}
inline void queryStockResponse_result::clear_stocks() {
  stocks_.Clear();
}
inline const ::HSCommPB::queryStockResponse_result_stock& queryStockResponse_result::stocks(int index) const {
  return stocks_.Get(index);
}
inline ::HSCommPB::queryStockResponse_result_stock* queryStockResponse_result::mutable_stocks(int index) {
  return stocks_.Mutable(index);
}
inline ::HSCommPB::queryStockResponse_result_stock* queryStockResponse_result::add_stocks() {
  return stocks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryStockResponse_result_stock >&
queryStockResponse_result::stocks() const {
  return stocks_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryStockResponse_result_stock >*
queryStockResponse_result::mutable_stocks() {
  return &stocks_;
}

// required string lastPositionString = 2;
inline bool queryStockResponse_result::has_lastpositionstring() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void queryStockResponse_result::set_has_lastpositionstring() {
  _has_bits_[0] |= 0x00000002u;
}
inline void queryStockResponse_result::clear_has_lastpositionstring() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void queryStockResponse_result::clear_lastpositionstring() {
  if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_->clear();
  }
  clear_has_lastpositionstring();
}
inline const ::std::string& queryStockResponse_result::lastpositionstring() const {
  return *lastpositionstring_;
}
inline void queryStockResponse_result::set_lastpositionstring(const ::std::string& value) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(value);
}
inline void queryStockResponse_result::set_lastpositionstring(const char* value) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(value);
}
inline void queryStockResponse_result::set_lastpositionstring(const char* value, size_t size) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryStockResponse_result::mutable_lastpositionstring() {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  return lastpositionstring_;
}
inline ::std::string* queryStockResponse_result::release_lastpositionstring() {
  clear_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lastpositionstring_;
    lastpositionstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 errorNo = 14 [default = 0];
inline bool queryStockResponse_result::has_errorno() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void queryStockResponse_result::set_has_errorno() {
  _has_bits_[0] |= 0x00000004u;
}
inline void queryStockResponse_result::clear_has_errorno() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void queryStockResponse_result::clear_errorno() {
  errorno_ = 0;
  clear_has_errorno();
}
inline ::google::protobuf::int32 queryStockResponse_result::errorno() const {
  return errorno_;
}
inline void queryStockResponse_result::set_errorno(::google::protobuf::int32 value) {
  set_has_errorno();
  errorno_ = value;
}

// optional string errorMsg = 15 [default = ""];
inline bool queryStockResponse_result::has_errormsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void queryStockResponse_result::set_has_errormsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void queryStockResponse_result::clear_has_errormsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void queryStockResponse_result::clear_errormsg() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    errormsg_->clear();
  }
  clear_has_errormsg();
}
inline const ::std::string& queryStockResponse_result::errormsg() const {
  return *errormsg_;
}
inline void queryStockResponse_result::set_errormsg(const ::std::string& value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void queryStockResponse_result::set_errormsg(const char* value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void queryStockResponse_result::set_errormsg(const char* value, size_t size) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryStockResponse_result::mutable_errormsg() {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  return errormsg_;
}
inline ::std::string* queryStockResponse_result::release_errormsg() {
  clear_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errormsg_;
    errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// queryStockResponse

// repeated .HSCommPB.queryStockResponse.result responses = 1;
inline int queryStockResponse::responses_size() const {
  return responses_.size();
}
inline void queryStockResponse::clear_responses() {
  responses_.Clear();
}
inline const ::HSCommPB::queryStockResponse_result& queryStockResponse::responses(int index) const {
  return responses_.Get(index);
}
inline ::HSCommPB::queryStockResponse_result* queryStockResponse::mutable_responses(int index) {
  return responses_.Mutable(index);
}
inline ::HSCommPB::queryStockResponse_result* queryStockResponse::add_responses() {
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryStockResponse_result >&
queryStockResponse::responses() const {
  return responses_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryStockResponse_result >*
queryStockResponse::mutable_responses() {
  return &responses_;
}

// -------------------------------------------------------------------

// queryFundRequest_call

// required string branchNo = 1;
inline bool queryFundRequest_call::has_branchno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void queryFundRequest_call::set_has_branchno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void queryFundRequest_call::clear_has_branchno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void queryFundRequest_call::clear_branchno() {
  if (branchno_ != &::google::protobuf::internal::kEmptyString) {
    branchno_->clear();
  }
  clear_has_branchno();
}
inline const ::std::string& queryFundRequest_call::branchno() const {
  return *branchno_;
}
inline void queryFundRequest_call::set_branchno(const ::std::string& value) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(value);
}
inline void queryFundRequest_call::set_branchno(const char* value) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(value);
}
inline void queryFundRequest_call::set_branchno(const char* value, size_t size) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryFundRequest_call::mutable_branchno() {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  return branchno_;
}
inline ::std::string* queryFundRequest_call::release_branchno() {
  clear_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = branchno_;
    branchno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string fundAccount = 2;
inline bool queryFundRequest_call::has_fundaccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void queryFundRequest_call::set_has_fundaccount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void queryFundRequest_call::clear_has_fundaccount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void queryFundRequest_call::clear_fundaccount() {
  if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
    fundaccount_->clear();
  }
  clear_has_fundaccount();
}
inline const ::std::string& queryFundRequest_call::fundaccount() const {
  return *fundaccount_;
}
inline void queryFundRequest_call::set_fundaccount(const ::std::string& value) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(value);
}
inline void queryFundRequest_call::set_fundaccount(const char* value) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(value);
}
inline void queryFundRequest_call::set_fundaccount(const char* value, size_t size) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryFundRequest_call::mutable_fundaccount() {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  return fundaccount_;
}
inline ::std::string* queryFundRequest_call::release_fundaccount() {
  clear_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fundaccount_;
    fundaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string password = 3;
inline bool queryFundRequest_call::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void queryFundRequest_call::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void queryFundRequest_call::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void queryFundRequest_call::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& queryFundRequest_call::password() const {
  return *password_;
}
inline void queryFundRequest_call::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void queryFundRequest_call::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void queryFundRequest_call::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryFundRequest_call::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* queryFundRequest_call::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .HSCommPB.enums.moneyType moneyType = 4 [default = noneMoneyType];
inline bool queryFundRequest_call::has_moneytype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void queryFundRequest_call::set_has_moneytype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void queryFundRequest_call::clear_has_moneytype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void queryFundRequest_call::clear_moneytype() {
  moneytype_ = 0;
  clear_has_moneytype();
}
inline ::HSCommPB::enums_moneyType queryFundRequest_call::moneytype() const {
  return static_cast< ::HSCommPB::enums_moneyType >(moneytype_);
}
inline void queryFundRequest_call::set_moneytype(::HSCommPB::enums_moneyType value) {
  GOOGLE_DCHECK(::HSCommPB::enums_moneyType_IsValid(value));
  set_has_moneytype();
  moneytype_ = value;
}

// -------------------------------------------------------------------

// queryFundRequest

// repeated .HSCommPB.queryFundRequest.call requests = 1;
inline int queryFundRequest::requests_size() const {
  return requests_.size();
}
inline void queryFundRequest::clear_requests() {
  requests_.Clear();
}
inline const ::HSCommPB::queryFundRequest_call& queryFundRequest::requests(int index) const {
  return requests_.Get(index);
}
inline ::HSCommPB::queryFundRequest_call* queryFundRequest::mutable_requests(int index) {
  return requests_.Mutable(index);
}
inline ::HSCommPB::queryFundRequest_call* queryFundRequest::add_requests() {
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryFundRequest_call >&
queryFundRequest::requests() const {
  return requests_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryFundRequest_call >*
queryFundRequest::mutable_requests() {
  return &requests_;
}

// -------------------------------------------------------------------

// queryFundResponse_result_currency

// required .HSCommPB.enums.moneyType moneyType = 1 [default = noneMoneyType];
inline bool queryFundResponse_result_currency::has_moneytype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void queryFundResponse_result_currency::set_has_moneytype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void queryFundResponse_result_currency::clear_has_moneytype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void queryFundResponse_result_currency::clear_moneytype() {
  moneytype_ = 0;
  clear_has_moneytype();
}
inline ::HSCommPB::enums_moneyType queryFundResponse_result_currency::moneytype() const {
  return static_cast< ::HSCommPB::enums_moneyType >(moneytype_);
}
inline void queryFundResponse_result_currency::set_moneytype(::HSCommPB::enums_moneyType value) {
  GOOGLE_DCHECK(::HSCommPB::enums_moneyType_IsValid(value));
  set_has_moneytype();
  moneytype_ = value;
}

// required int64 currentBalance = 2;
inline bool queryFundResponse_result_currency::has_currentbalance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void queryFundResponse_result_currency::set_has_currentbalance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void queryFundResponse_result_currency::clear_has_currentbalance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void queryFundResponse_result_currency::clear_currentbalance() {
  currentbalance_ = GOOGLE_LONGLONG(0);
  clear_has_currentbalance();
}
inline ::google::protobuf::int64 queryFundResponse_result_currency::currentbalance() const {
  return currentbalance_;
}
inline void queryFundResponse_result_currency::set_currentbalance(::google::protobuf::int64 value) {
  set_has_currentbalance();
  currentbalance_ = value;
}

// required int64 enableBalance = 3;
inline bool queryFundResponse_result_currency::has_enablebalance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void queryFundResponse_result_currency::set_has_enablebalance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void queryFundResponse_result_currency::clear_has_enablebalance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void queryFundResponse_result_currency::clear_enablebalance() {
  enablebalance_ = GOOGLE_LONGLONG(0);
  clear_has_enablebalance();
}
inline ::google::protobuf::int64 queryFundResponse_result_currency::enablebalance() const {
  return enablebalance_;
}
inline void queryFundResponse_result_currency::set_enablebalance(::google::protobuf::int64 value) {
  set_has_enablebalance();
  enablebalance_ = value;
}

// required int64 fetchBalance = 4;
inline bool queryFundResponse_result_currency::has_fetchbalance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void queryFundResponse_result_currency::set_has_fetchbalance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void queryFundResponse_result_currency::clear_has_fetchbalance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void queryFundResponse_result_currency::clear_fetchbalance() {
  fetchbalance_ = GOOGLE_LONGLONG(0);
  clear_has_fetchbalance();
}
inline ::google::protobuf::int64 queryFundResponse_result_currency::fetchbalance() const {
  return fetchbalance_;
}
inline void queryFundResponse_result_currency::set_fetchbalance(::google::protobuf::int64 value) {
  set_has_fetchbalance();
  fetchbalance_ = value;
}

// required int64 interest = 5;
inline bool queryFundResponse_result_currency::has_interest() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void queryFundResponse_result_currency::set_has_interest() {
  _has_bits_[0] |= 0x00000010u;
}
inline void queryFundResponse_result_currency::clear_has_interest() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void queryFundResponse_result_currency::clear_interest() {
  interest_ = GOOGLE_LONGLONG(0);
  clear_has_interest();
}
inline ::google::protobuf::int64 queryFundResponse_result_currency::interest() const {
  return interest_;
}
inline void queryFundResponse_result_currency::set_interest(::google::protobuf::int64 value) {
  set_has_interest();
  interest_ = value;
}

// required int64 assetBalance = 6;
inline bool queryFundResponse_result_currency::has_assetbalance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void queryFundResponse_result_currency::set_has_assetbalance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void queryFundResponse_result_currency::clear_has_assetbalance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void queryFundResponse_result_currency::clear_assetbalance() {
  assetbalance_ = GOOGLE_LONGLONG(0);
  clear_has_assetbalance();
}
inline ::google::protobuf::int64 queryFundResponse_result_currency::assetbalance() const {
  return assetbalance_;
}
inline void queryFundResponse_result_currency::set_assetbalance(::google::protobuf::int64 value) {
  set_has_assetbalance();
  assetbalance_ = value;
}

// required int64 fetchCash = 7;
inline bool queryFundResponse_result_currency::has_fetchcash() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void queryFundResponse_result_currency::set_has_fetchcash() {
  _has_bits_[0] |= 0x00000040u;
}
inline void queryFundResponse_result_currency::clear_has_fetchcash() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void queryFundResponse_result_currency::clear_fetchcash() {
  fetchcash_ = GOOGLE_LONGLONG(0);
  clear_has_fetchcash();
}
inline ::google::protobuf::int64 queryFundResponse_result_currency::fetchcash() const {
  return fetchcash_;
}
inline void queryFundResponse_result_currency::set_fetchcash(::google::protobuf::int64 value) {
  set_has_fetchcash();
  fetchcash_ = value;
}

// required int64 fundBalance = 8;
inline bool queryFundResponse_result_currency::has_fundbalance() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void queryFundResponse_result_currency::set_has_fundbalance() {
  _has_bits_[0] |= 0x00000080u;
}
inline void queryFundResponse_result_currency::clear_has_fundbalance() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void queryFundResponse_result_currency::clear_fundbalance() {
  fundbalance_ = GOOGLE_LONGLONG(0);
  clear_has_fundbalance();
}
inline ::google::protobuf::int64 queryFundResponse_result_currency::fundbalance() const {
  return fundbalance_;
}
inline void queryFundResponse_result_currency::set_fundbalance(::google::protobuf::int64 value) {
  set_has_fundbalance();
  fundbalance_ = value;
}

// required int64 marketValue = 9;
inline bool queryFundResponse_result_currency::has_marketvalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void queryFundResponse_result_currency::set_has_marketvalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void queryFundResponse_result_currency::clear_has_marketvalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void queryFundResponse_result_currency::clear_marketvalue() {
  marketvalue_ = GOOGLE_LONGLONG(0);
  clear_has_marketvalue();
}
inline ::google::protobuf::int64 queryFundResponse_result_currency::marketvalue() const {
  return marketvalue_;
}
inline void queryFundResponse_result_currency::set_marketvalue(::google::protobuf::int64 value) {
  set_has_marketvalue();
  marketvalue_ = value;
}

// required int64 opfundMarketValue = 10;
inline bool queryFundResponse_result_currency::has_opfundmarketvalue() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void queryFundResponse_result_currency::set_has_opfundmarketvalue() {
  _has_bits_[0] |= 0x00000200u;
}
inline void queryFundResponse_result_currency::clear_has_opfundmarketvalue() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void queryFundResponse_result_currency::clear_opfundmarketvalue() {
  opfundmarketvalue_ = GOOGLE_LONGLONG(0);
  clear_has_opfundmarketvalue();
}
inline ::google::protobuf::int64 queryFundResponse_result_currency::opfundmarketvalue() const {
  return opfundmarketvalue_;
}
inline void queryFundResponse_result_currency::set_opfundmarketvalue(::google::protobuf::int64 value) {
  set_has_opfundmarketvalue();
  opfundmarketvalue_ = value;
}

// required int64 preInterest = 11;
inline bool queryFundResponse_result_currency::has_preinterest() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void queryFundResponse_result_currency::set_has_preinterest() {
  _has_bits_[0] |= 0x00000400u;
}
inline void queryFundResponse_result_currency::clear_has_preinterest() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void queryFundResponse_result_currency::clear_preinterest() {
  preinterest_ = GOOGLE_LONGLONG(0);
  clear_has_preinterest();
}
inline ::google::protobuf::int64 queryFundResponse_result_currency::preinterest() const {
  return preinterest_;
}
inline void queryFundResponse_result_currency::set_preinterest(::google::protobuf::int64 value) {
  set_has_preinterest();
  preinterest_ = value;
}

// -------------------------------------------------------------------

// queryFundResponse_result

// repeated .HSCommPB.queryFundResponse.result.currency money = 1;
inline int queryFundResponse_result::money_size() const {
  return money_.size();
}
inline void queryFundResponse_result::clear_money() {
  money_.Clear();
}
inline const ::HSCommPB::queryFundResponse_result_currency& queryFundResponse_result::money(int index) const {
  return money_.Get(index);
}
inline ::HSCommPB::queryFundResponse_result_currency* queryFundResponse_result::mutable_money(int index) {
  return money_.Mutable(index);
}
inline ::HSCommPB::queryFundResponse_result_currency* queryFundResponse_result::add_money() {
  return money_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryFundResponse_result_currency >&
queryFundResponse_result::money() const {
  return money_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryFundResponse_result_currency >*
queryFundResponse_result::mutable_money() {
  return &money_;
}

// optional int32 errorNo = 14 [default = 0];
inline bool queryFundResponse_result::has_errorno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void queryFundResponse_result::set_has_errorno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void queryFundResponse_result::clear_has_errorno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void queryFundResponse_result::clear_errorno() {
  errorno_ = 0;
  clear_has_errorno();
}
inline ::google::protobuf::int32 queryFundResponse_result::errorno() const {
  return errorno_;
}
inline void queryFundResponse_result::set_errorno(::google::protobuf::int32 value) {
  set_has_errorno();
  errorno_ = value;
}

// optional string errorMsg = 15 [default = ""];
inline bool queryFundResponse_result::has_errormsg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void queryFundResponse_result::set_has_errormsg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void queryFundResponse_result::clear_has_errormsg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void queryFundResponse_result::clear_errormsg() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    errormsg_->clear();
  }
  clear_has_errormsg();
}
inline const ::std::string& queryFundResponse_result::errormsg() const {
  return *errormsg_;
}
inline void queryFundResponse_result::set_errormsg(const ::std::string& value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void queryFundResponse_result::set_errormsg(const char* value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void queryFundResponse_result::set_errormsg(const char* value, size_t size) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryFundResponse_result::mutable_errormsg() {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  return errormsg_;
}
inline ::std::string* queryFundResponse_result::release_errormsg() {
  clear_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errormsg_;
    errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// queryFundResponse

// repeated .HSCommPB.queryFundResponse.result responses = 1;
inline int queryFundResponse::responses_size() const {
  return responses_.size();
}
inline void queryFundResponse::clear_responses() {
  responses_.Clear();
}
inline const ::HSCommPB::queryFundResponse_result& queryFundResponse::responses(int index) const {
  return responses_.Get(index);
}
inline ::HSCommPB::queryFundResponse_result* queryFundResponse::mutable_responses(int index) {
  return responses_.Mutable(index);
}
inline ::HSCommPB::queryFundResponse_result* queryFundResponse::add_responses() {
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryFundResponse_result >&
queryFundResponse::responses() const {
  return responses_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryFundResponse_result >*
queryFundResponse::mutable_responses() {
  return &responses_;
}

// -------------------------------------------------------------------

// queryShareholderRequest_call

// required string branchNo = 1;
inline bool queryShareholderRequest_call::has_branchno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void queryShareholderRequest_call::set_has_branchno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void queryShareholderRequest_call::clear_has_branchno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void queryShareholderRequest_call::clear_branchno() {
  if (branchno_ != &::google::protobuf::internal::kEmptyString) {
    branchno_->clear();
  }
  clear_has_branchno();
}
inline const ::std::string& queryShareholderRequest_call::branchno() const {
  return *branchno_;
}
inline void queryShareholderRequest_call::set_branchno(const ::std::string& value) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(value);
}
inline void queryShareholderRequest_call::set_branchno(const char* value) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(value);
}
inline void queryShareholderRequest_call::set_branchno(const char* value, size_t size) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryShareholderRequest_call::mutable_branchno() {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  return branchno_;
}
inline ::std::string* queryShareholderRequest_call::release_branchno() {
  clear_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = branchno_;
    branchno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string fundAccount = 2;
inline bool queryShareholderRequest_call::has_fundaccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void queryShareholderRequest_call::set_has_fundaccount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void queryShareholderRequest_call::clear_has_fundaccount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void queryShareholderRequest_call::clear_fundaccount() {
  if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
    fundaccount_->clear();
  }
  clear_has_fundaccount();
}
inline const ::std::string& queryShareholderRequest_call::fundaccount() const {
  return *fundaccount_;
}
inline void queryShareholderRequest_call::set_fundaccount(const ::std::string& value) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(value);
}
inline void queryShareholderRequest_call::set_fundaccount(const char* value) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(value);
}
inline void queryShareholderRequest_call::set_fundaccount(const char* value, size_t size) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryShareholderRequest_call::mutable_fundaccount() {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  return fundaccount_;
}
inline ::std::string* queryShareholderRequest_call::release_fundaccount() {
  clear_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fundaccount_;
    fundaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string password = 3;
inline bool queryShareholderRequest_call::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void queryShareholderRequest_call::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void queryShareholderRequest_call::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void queryShareholderRequest_call::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& queryShareholderRequest_call::password() const {
  return *password_;
}
inline void queryShareholderRequest_call::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void queryShareholderRequest_call::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void queryShareholderRequest_call::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryShareholderRequest_call::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* queryShareholderRequest_call::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .HSCommPB.enums.exchangeType exchangeType = 4 [default = noneExchangeType];
inline bool queryShareholderRequest_call::has_exchangetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void queryShareholderRequest_call::set_has_exchangetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void queryShareholderRequest_call::clear_has_exchangetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void queryShareholderRequest_call::clear_exchangetype() {
  exchangetype_ = 0;
  clear_has_exchangetype();
}
inline ::HSCommPB::enums_exchangeType queryShareholderRequest_call::exchangetype() const {
  return static_cast< ::HSCommPB::enums_exchangeType >(exchangetype_);
}
inline void queryShareholderRequest_call::set_exchangetype(::HSCommPB::enums_exchangeType value) {
  GOOGLE_DCHECK(::HSCommPB::enums_exchangeType_IsValid(value));
  set_has_exchangetype();
  exchangetype_ = value;
}

// optional string stockCode = 5 [default = ""];
inline bool queryShareholderRequest_call::has_stockcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void queryShareholderRequest_call::set_has_stockcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void queryShareholderRequest_call::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void queryShareholderRequest_call::clear_stockcode() {
  if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
    stockcode_->clear();
  }
  clear_has_stockcode();
}
inline const ::std::string& queryShareholderRequest_call::stockcode() const {
  return *stockcode_;
}
inline void queryShareholderRequest_call::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(value);
}
inline void queryShareholderRequest_call::set_stockcode(const char* value) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(value);
}
inline void queryShareholderRequest_call::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryShareholderRequest_call::mutable_stockcode() {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  return stockcode_;
}
inline ::std::string* queryShareholderRequest_call::release_stockcode() {
  clear_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stockcode_;
    stockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 requestNumber = 6 [default = 1000];
inline bool queryShareholderRequest_call::has_requestnumber() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void queryShareholderRequest_call::set_has_requestnumber() {
  _has_bits_[0] |= 0x00000020u;
}
inline void queryShareholderRequest_call::clear_has_requestnumber() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void queryShareholderRequest_call::clear_requestnumber() {
  requestnumber_ = 1000;
  clear_has_requestnumber();
}
inline ::google::protobuf::int32 queryShareholderRequest_call::requestnumber() const {
  return requestnumber_;
}
inline void queryShareholderRequest_call::set_requestnumber(::google::protobuf::int32 value) {
  set_has_requestnumber();
  requestnumber_ = value;
}

// optional string lastPositionString = 7 [default = ""];
inline bool queryShareholderRequest_call::has_lastpositionstring() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void queryShareholderRequest_call::set_has_lastpositionstring() {
  _has_bits_[0] |= 0x00000040u;
}
inline void queryShareholderRequest_call::clear_has_lastpositionstring() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void queryShareholderRequest_call::clear_lastpositionstring() {
  if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_->clear();
  }
  clear_has_lastpositionstring();
}
inline const ::std::string& queryShareholderRequest_call::lastpositionstring() const {
  return *lastpositionstring_;
}
inline void queryShareholderRequest_call::set_lastpositionstring(const ::std::string& value) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(value);
}
inline void queryShareholderRequest_call::set_lastpositionstring(const char* value) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(value);
}
inline void queryShareholderRequest_call::set_lastpositionstring(const char* value, size_t size) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryShareholderRequest_call::mutable_lastpositionstring() {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  return lastpositionstring_;
}
inline ::std::string* queryShareholderRequest_call::release_lastpositionstring() {
  clear_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lastpositionstring_;
    lastpositionstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// queryShareholderRequest

// repeated .HSCommPB.queryShareholderRequest.call requests = 1;
inline int queryShareholderRequest::requests_size() const {
  return requests_.size();
}
inline void queryShareholderRequest::clear_requests() {
  requests_.Clear();
}
inline const ::HSCommPB::queryShareholderRequest_call& queryShareholderRequest::requests(int index) const {
  return requests_.Get(index);
}
inline ::HSCommPB::queryShareholderRequest_call* queryShareholderRequest::mutable_requests(int index) {
  return requests_.Mutable(index);
}
inline ::HSCommPB::queryShareholderRequest_call* queryShareholderRequest::add_requests() {
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryShareholderRequest_call >&
queryShareholderRequest::requests() const {
  return requests_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryShareholderRequest_call >*
queryShareholderRequest::mutable_requests() {
  return &requests_;
}

// -------------------------------------------------------------------

// queryShareholderResponse_result_shareholder

// required .HSCommPB.enums.exchangeType exchangeType = 1;
inline bool queryShareholderResponse_result_shareholder::has_exchangetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void queryShareholderResponse_result_shareholder::set_has_exchangetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void queryShareholderResponse_result_shareholder::clear_has_exchangetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void queryShareholderResponse_result_shareholder::clear_exchangetype() {
  exchangetype_ = 0;
  clear_has_exchangetype();
}
inline ::HSCommPB::enums_exchangeType queryShareholderResponse_result_shareholder::exchangetype() const {
  return static_cast< ::HSCommPB::enums_exchangeType >(exchangetype_);
}
inline void queryShareholderResponse_result_shareholder::set_exchangetype(::HSCommPB::enums_exchangeType value) {
  GOOGLE_DCHECK(::HSCommPB::enums_exchangeType_IsValid(value));
  set_has_exchangetype();
  exchangetype_ = value;
}

// required string exchangeName = 2;
inline bool queryShareholderResponse_result_shareholder::has_exchangename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void queryShareholderResponse_result_shareholder::set_has_exchangename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void queryShareholderResponse_result_shareholder::clear_has_exchangename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void queryShareholderResponse_result_shareholder::clear_exchangename() {
  if (exchangename_ != &::google::protobuf::internal::kEmptyString) {
    exchangename_->clear();
  }
  clear_has_exchangename();
}
inline const ::std::string& queryShareholderResponse_result_shareholder::exchangename() const {
  return *exchangename_;
}
inline void queryShareholderResponse_result_shareholder::set_exchangename(const ::std::string& value) {
  set_has_exchangename();
  if (exchangename_ == &::google::protobuf::internal::kEmptyString) {
    exchangename_ = new ::std::string;
  }
  exchangename_->assign(value);
}
inline void queryShareholderResponse_result_shareholder::set_exchangename(const char* value) {
  set_has_exchangename();
  if (exchangename_ == &::google::protobuf::internal::kEmptyString) {
    exchangename_ = new ::std::string;
  }
  exchangename_->assign(value);
}
inline void queryShareholderResponse_result_shareholder::set_exchangename(const char* value, size_t size) {
  set_has_exchangename();
  if (exchangename_ == &::google::protobuf::internal::kEmptyString) {
    exchangename_ = new ::std::string;
  }
  exchangename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryShareholderResponse_result_shareholder::mutable_exchangename() {
  set_has_exchangename();
  if (exchangename_ == &::google::protobuf::internal::kEmptyString) {
    exchangename_ = new ::std::string;
  }
  return exchangename_;
}
inline ::std::string* queryShareholderResponse_result_shareholder::release_exchangename() {
  clear_has_exchangename();
  if (exchangename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exchangename_;
    exchangename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string stockAccount = 3;
inline bool queryShareholderResponse_result_shareholder::has_stockaccount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void queryShareholderResponse_result_shareholder::set_has_stockaccount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void queryShareholderResponse_result_shareholder::clear_has_stockaccount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void queryShareholderResponse_result_shareholder::clear_stockaccount() {
  if (stockaccount_ != &::google::protobuf::internal::kEmptyString) {
    stockaccount_->clear();
  }
  clear_has_stockaccount();
}
inline const ::std::string& queryShareholderResponse_result_shareholder::stockaccount() const {
  return *stockaccount_;
}
inline void queryShareholderResponse_result_shareholder::set_stockaccount(const ::std::string& value) {
  set_has_stockaccount();
  if (stockaccount_ == &::google::protobuf::internal::kEmptyString) {
    stockaccount_ = new ::std::string;
  }
  stockaccount_->assign(value);
}
inline void queryShareholderResponse_result_shareholder::set_stockaccount(const char* value) {
  set_has_stockaccount();
  if (stockaccount_ == &::google::protobuf::internal::kEmptyString) {
    stockaccount_ = new ::std::string;
  }
  stockaccount_->assign(value);
}
inline void queryShareholderResponse_result_shareholder::set_stockaccount(const char* value, size_t size) {
  set_has_stockaccount();
  if (stockaccount_ == &::google::protobuf::internal::kEmptyString) {
    stockaccount_ = new ::std::string;
  }
  stockaccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryShareholderResponse_result_shareholder::mutable_stockaccount() {
  set_has_stockaccount();
  if (stockaccount_ == &::google::protobuf::internal::kEmptyString) {
    stockaccount_ = new ::std::string;
  }
  return stockaccount_;
}
inline ::std::string* queryShareholderResponse_result_shareholder::release_stockaccount() {
  clear_has_stockaccount();
  if (stockaccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stockaccount_;
    stockaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .HSCommPB.enums.holderStatus holderStatus = 4;
inline bool queryShareholderResponse_result_shareholder::has_holderstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void queryShareholderResponse_result_shareholder::set_has_holderstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void queryShareholderResponse_result_shareholder::clear_has_holderstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void queryShareholderResponse_result_shareholder::clear_holderstatus() {
  holderstatus_ = 0;
  clear_has_holderstatus();
}
inline ::HSCommPB::enums_holderStatus queryShareholderResponse_result_shareholder::holderstatus() const {
  return static_cast< ::HSCommPB::enums_holderStatus >(holderstatus_);
}
inline void queryShareholderResponse_result_shareholder::set_holderstatus(::HSCommPB::enums_holderStatus value) {
  GOOGLE_DCHECK(::HSCommPB::enums_holderStatus_IsValid(value));
  set_has_holderstatus();
  holderstatus_ = value;
}

// required bool mainShareHolder = 5;
inline bool queryShareholderResponse_result_shareholder::has_mainshareholder() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void queryShareholderResponse_result_shareholder::set_has_mainshareholder() {
  _has_bits_[0] |= 0x00000010u;
}
inline void queryShareholderResponse_result_shareholder::clear_has_mainshareholder() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void queryShareholderResponse_result_shareholder::clear_mainshareholder() {
  mainshareholder_ = false;
  clear_has_mainshareholder();
}
inline bool queryShareholderResponse_result_shareholder::mainshareholder() const {
  return mainshareholder_;
}
inline void queryShareholderResponse_result_shareholder::set_mainshareholder(bool value) {
  set_has_mainshareholder();
  mainshareholder_ = value;
}

// optional string seatNo = 6 [default = ""];
inline bool queryShareholderResponse_result_shareholder::has_seatno() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void queryShareholderResponse_result_shareholder::set_has_seatno() {
  _has_bits_[0] |= 0x00000020u;
}
inline void queryShareholderResponse_result_shareholder::clear_has_seatno() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void queryShareholderResponse_result_shareholder::clear_seatno() {
  if (seatno_ != &::google::protobuf::internal::kEmptyString) {
    seatno_->clear();
  }
  clear_has_seatno();
}
inline const ::std::string& queryShareholderResponse_result_shareholder::seatno() const {
  return *seatno_;
}
inline void queryShareholderResponse_result_shareholder::set_seatno(const ::std::string& value) {
  set_has_seatno();
  if (seatno_ == &::google::protobuf::internal::kEmptyString) {
    seatno_ = new ::std::string;
  }
  seatno_->assign(value);
}
inline void queryShareholderResponse_result_shareholder::set_seatno(const char* value) {
  set_has_seatno();
  if (seatno_ == &::google::protobuf::internal::kEmptyString) {
    seatno_ = new ::std::string;
  }
  seatno_->assign(value);
}
inline void queryShareholderResponse_result_shareholder::set_seatno(const char* value, size_t size) {
  set_has_seatno();
  if (seatno_ == &::google::protobuf::internal::kEmptyString) {
    seatno_ = new ::std::string;
  }
  seatno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryShareholderResponse_result_shareholder::mutable_seatno() {
  set_has_seatno();
  if (seatno_ == &::google::protobuf::internal::kEmptyString) {
    seatno_ = new ::std::string;
  }
  return seatno_;
}
inline ::std::string* queryShareholderResponse_result_shareholder::release_seatno() {
  clear_has_seatno();
  if (seatno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seatno_;
    seatno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional sint64 enableAmount = 7 [default = -1];
inline bool queryShareholderResponse_result_shareholder::has_enableamount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void queryShareholderResponse_result_shareholder::set_has_enableamount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void queryShareholderResponse_result_shareholder::clear_has_enableamount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void queryShareholderResponse_result_shareholder::clear_enableamount() {
  enableamount_ = GOOGLE_LONGLONG(-1);
  clear_has_enableamount();
}
inline ::google::protobuf::int64 queryShareholderResponse_result_shareholder::enableamount() const {
  return enableamount_;
}
inline void queryShareholderResponse_result_shareholder::set_enableamount(::google::protobuf::int64 value) {
  set_has_enableamount();
  enableamount_ = value;
}

// -------------------------------------------------------------------

// queryShareholderResponse_result

// repeated .HSCommPB.queryShareholderResponse.result.shareholder shareholders = 1;
inline int queryShareholderResponse_result::shareholders_size() const {
  return shareholders_.size();
}
inline void queryShareholderResponse_result::clear_shareholders() {
  shareholders_.Clear();
}
inline const ::HSCommPB::queryShareholderResponse_result_shareholder& queryShareholderResponse_result::shareholders(int index) const {
  return shareholders_.Get(index);
}
inline ::HSCommPB::queryShareholderResponse_result_shareholder* queryShareholderResponse_result::mutable_shareholders(int index) {
  return shareholders_.Mutable(index);
}
inline ::HSCommPB::queryShareholderResponse_result_shareholder* queryShareholderResponse_result::add_shareholders() {
  return shareholders_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryShareholderResponse_result_shareholder >&
queryShareholderResponse_result::shareholders() const {
  return shareholders_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryShareholderResponse_result_shareholder >*
queryShareholderResponse_result::mutable_shareholders() {
  return &shareholders_;
}

// required string lastPositionString = 2;
inline bool queryShareholderResponse_result::has_lastpositionstring() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void queryShareholderResponse_result::set_has_lastpositionstring() {
  _has_bits_[0] |= 0x00000002u;
}
inline void queryShareholderResponse_result::clear_has_lastpositionstring() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void queryShareholderResponse_result::clear_lastpositionstring() {
  if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_->clear();
  }
  clear_has_lastpositionstring();
}
inline const ::std::string& queryShareholderResponse_result::lastpositionstring() const {
  return *lastpositionstring_;
}
inline void queryShareholderResponse_result::set_lastpositionstring(const ::std::string& value) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(value);
}
inline void queryShareholderResponse_result::set_lastpositionstring(const char* value) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(value);
}
inline void queryShareholderResponse_result::set_lastpositionstring(const char* value, size_t size) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryShareholderResponse_result::mutable_lastpositionstring() {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  return lastpositionstring_;
}
inline ::std::string* queryShareholderResponse_result::release_lastpositionstring() {
  clear_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lastpositionstring_;
    lastpositionstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 errorNo = 14 [default = 0];
inline bool queryShareholderResponse_result::has_errorno() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void queryShareholderResponse_result::set_has_errorno() {
  _has_bits_[0] |= 0x00000004u;
}
inline void queryShareholderResponse_result::clear_has_errorno() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void queryShareholderResponse_result::clear_errorno() {
  errorno_ = 0;
  clear_has_errorno();
}
inline ::google::protobuf::int32 queryShareholderResponse_result::errorno() const {
  return errorno_;
}
inline void queryShareholderResponse_result::set_errorno(::google::protobuf::int32 value) {
  set_has_errorno();
  errorno_ = value;
}

// optional string errorMsg = 15 [default = ""];
inline bool queryShareholderResponse_result::has_errormsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void queryShareholderResponse_result::set_has_errormsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void queryShareholderResponse_result::clear_has_errormsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void queryShareholderResponse_result::clear_errormsg() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    errormsg_->clear();
  }
  clear_has_errormsg();
}
inline const ::std::string& queryShareholderResponse_result::errormsg() const {
  return *errormsg_;
}
inline void queryShareholderResponse_result::set_errormsg(const ::std::string& value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void queryShareholderResponse_result::set_errormsg(const char* value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void queryShareholderResponse_result::set_errormsg(const char* value, size_t size) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryShareholderResponse_result::mutable_errormsg() {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  return errormsg_;
}
inline ::std::string* queryShareholderResponse_result::release_errormsg() {
  clear_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errormsg_;
    errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// queryShareholderResponse

// repeated .HSCommPB.queryShareholderResponse.result responses = 1;
inline int queryShareholderResponse::responses_size() const {
  return responses_.size();
}
inline void queryShareholderResponse::clear_responses() {
  responses_.Clear();
}
inline const ::HSCommPB::queryShareholderResponse_result& queryShareholderResponse::responses(int index) const {
  return responses_.Get(index);
}
inline ::HSCommPB::queryShareholderResponse_result* queryShareholderResponse::mutable_responses(int index) {
  return responses_.Mutable(index);
}
inline ::HSCommPB::queryShareholderResponse_result* queryShareholderResponse::add_responses() {
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryShareholderResponse_result >&
queryShareholderResponse::responses() const {
  return responses_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryShareholderResponse_result >*
queryShareholderResponse::mutable_responses() {
  return &responses_;
}

// -------------------------------------------------------------------

// queryBusinessRequest_call

// required string branchNo = 1;
inline bool queryBusinessRequest_call::has_branchno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void queryBusinessRequest_call::set_has_branchno() {
  _has_bits_[0] |= 0x00000001u;
}
inline void queryBusinessRequest_call::clear_has_branchno() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void queryBusinessRequest_call::clear_branchno() {
  if (branchno_ != &::google::protobuf::internal::kEmptyString) {
    branchno_->clear();
  }
  clear_has_branchno();
}
inline const ::std::string& queryBusinessRequest_call::branchno() const {
  return *branchno_;
}
inline void queryBusinessRequest_call::set_branchno(const ::std::string& value) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(value);
}
inline void queryBusinessRequest_call::set_branchno(const char* value) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(value);
}
inline void queryBusinessRequest_call::set_branchno(const char* value, size_t size) {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  branchno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryBusinessRequest_call::mutable_branchno() {
  set_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    branchno_ = new ::std::string;
  }
  return branchno_;
}
inline ::std::string* queryBusinessRequest_call::release_branchno() {
  clear_has_branchno();
  if (branchno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = branchno_;
    branchno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string fundAccount = 2;
inline bool queryBusinessRequest_call::has_fundaccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void queryBusinessRequest_call::set_has_fundaccount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void queryBusinessRequest_call::clear_has_fundaccount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void queryBusinessRequest_call::clear_fundaccount() {
  if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
    fundaccount_->clear();
  }
  clear_has_fundaccount();
}
inline const ::std::string& queryBusinessRequest_call::fundaccount() const {
  return *fundaccount_;
}
inline void queryBusinessRequest_call::set_fundaccount(const ::std::string& value) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(value);
}
inline void queryBusinessRequest_call::set_fundaccount(const char* value) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(value);
}
inline void queryBusinessRequest_call::set_fundaccount(const char* value, size_t size) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryBusinessRequest_call::mutable_fundaccount() {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  return fundaccount_;
}
inline ::std::string* queryBusinessRequest_call::release_fundaccount() {
  clear_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fundaccount_;
    fundaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string password = 3;
inline bool queryBusinessRequest_call::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void queryBusinessRequest_call::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void queryBusinessRequest_call::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void queryBusinessRequest_call::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& queryBusinessRequest_call::password() const {
  return *password_;
}
inline void queryBusinessRequest_call::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void queryBusinessRequest_call::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void queryBusinessRequest_call::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryBusinessRequest_call::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* queryBusinessRequest_call::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 startDate = 4 [default = 0];
inline bool queryBusinessRequest_call::has_startdate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void queryBusinessRequest_call::set_has_startdate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void queryBusinessRequest_call::clear_has_startdate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void queryBusinessRequest_call::clear_startdate() {
  startdate_ = 0;
  clear_has_startdate();
}
inline ::google::protobuf::int32 queryBusinessRequest_call::startdate() const {
  return startdate_;
}
inline void queryBusinessRequest_call::set_startdate(::google::protobuf::int32 value) {
  set_has_startdate();
  startdate_ = value;
}

// optional int32 endDate = 5 [default = 0];
inline bool queryBusinessRequest_call::has_enddate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void queryBusinessRequest_call::set_has_enddate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void queryBusinessRequest_call::clear_has_enddate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void queryBusinessRequest_call::clear_enddate() {
  enddate_ = 0;
  clear_has_enddate();
}
inline ::google::protobuf::int32 queryBusinessRequest_call::enddate() const {
  return enddate_;
}
inline void queryBusinessRequest_call::set_enddate(::google::protobuf::int32 value) {
  set_has_enddate();
  enddate_ = value;
}

// optional .HSCommPB.enums.exchangeType exchangeType = 6 [default = noneExchangeType];
inline bool queryBusinessRequest_call::has_exchangetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void queryBusinessRequest_call::set_has_exchangetype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void queryBusinessRequest_call::clear_has_exchangetype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void queryBusinessRequest_call::clear_exchangetype() {
  exchangetype_ = 0;
  clear_has_exchangetype();
}
inline ::HSCommPB::enums_exchangeType queryBusinessRequest_call::exchangetype() const {
  return static_cast< ::HSCommPB::enums_exchangeType >(exchangetype_);
}
inline void queryBusinessRequest_call::set_exchangetype(::HSCommPB::enums_exchangeType value) {
  GOOGLE_DCHECK(::HSCommPB::enums_exchangeType_IsValid(value));
  set_has_exchangetype();
  exchangetype_ = value;
}

// optional string stockCode = 7 [default = ""];
inline bool queryBusinessRequest_call::has_stockcode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void queryBusinessRequest_call::set_has_stockcode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void queryBusinessRequest_call::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void queryBusinessRequest_call::clear_stockcode() {
  if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
    stockcode_->clear();
  }
  clear_has_stockcode();
}
inline const ::std::string& queryBusinessRequest_call::stockcode() const {
  return *stockcode_;
}
inline void queryBusinessRequest_call::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(value);
}
inline void queryBusinessRequest_call::set_stockcode(const char* value) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(value);
}
inline void queryBusinessRequest_call::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryBusinessRequest_call::mutable_stockcode() {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  return stockcode_;
}
inline ::std::string* queryBusinessRequest_call::release_stockcode() {
  clear_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stockcode_;
    stockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 requestNumber = 8 [default = 1000];
inline bool queryBusinessRequest_call::has_requestnumber() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void queryBusinessRequest_call::set_has_requestnumber() {
  _has_bits_[0] |= 0x00000080u;
}
inline void queryBusinessRequest_call::clear_has_requestnumber() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void queryBusinessRequest_call::clear_requestnumber() {
  requestnumber_ = 1000;
  clear_has_requestnumber();
}
inline ::google::protobuf::int32 queryBusinessRequest_call::requestnumber() const {
  return requestnumber_;
}
inline void queryBusinessRequest_call::set_requestnumber(::google::protobuf::int32 value) {
  set_has_requestnumber();
  requestnumber_ = value;
}

// optional string lastPositionString = 9 [default = ""];
inline bool queryBusinessRequest_call::has_lastpositionstring() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void queryBusinessRequest_call::set_has_lastpositionstring() {
  _has_bits_[0] |= 0x00000100u;
}
inline void queryBusinessRequest_call::clear_has_lastpositionstring() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void queryBusinessRequest_call::clear_lastpositionstring() {
  if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_->clear();
  }
  clear_has_lastpositionstring();
}
inline const ::std::string& queryBusinessRequest_call::lastpositionstring() const {
  return *lastpositionstring_;
}
inline void queryBusinessRequest_call::set_lastpositionstring(const ::std::string& value) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(value);
}
inline void queryBusinessRequest_call::set_lastpositionstring(const char* value) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(value);
}
inline void queryBusinessRequest_call::set_lastpositionstring(const char* value, size_t size) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryBusinessRequest_call::mutable_lastpositionstring() {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  return lastpositionstring_;
}
inline ::std::string* queryBusinessRequest_call::release_lastpositionstring() {
  clear_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lastpositionstring_;
    lastpositionstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// queryBusinessRequest

// repeated .HSCommPB.queryBusinessRequest.call requests = 1;
inline int queryBusinessRequest::requests_size() const {
  return requests_.size();
}
inline void queryBusinessRequest::clear_requests() {
  requests_.Clear();
}
inline const ::HSCommPB::queryBusinessRequest_call& queryBusinessRequest::requests(int index) const {
  return requests_.Get(index);
}
inline ::HSCommPB::queryBusinessRequest_call* queryBusinessRequest::mutable_requests(int index) {
  return requests_.Mutable(index);
}
inline ::HSCommPB::queryBusinessRequest_call* queryBusinessRequest::add_requests() {
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryBusinessRequest_call >&
queryBusinessRequest::requests() const {
  return requests_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryBusinessRequest_call >*
queryBusinessRequest::mutable_requests() {
  return &requests_;
}

// -------------------------------------------------------------------

// queryBusinessResponse_result_business

// required int32 date = 1;
inline bool queryBusinessResponse_result_business::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void queryBusinessResponse_result_business::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void queryBusinessResponse_result_business::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void queryBusinessResponse_result_business::clear_date() {
  date_ = 0;
  clear_has_date();
}
inline ::google::protobuf::int32 queryBusinessResponse_result_business::date() const {
  return date_;
}
inline void queryBusinessResponse_result_business::set_date(::google::protobuf::int32 value) {
  set_has_date();
  date_ = value;
}

// required int32 time = 2;
inline bool queryBusinessResponse_result_business::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void queryBusinessResponse_result_business::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void queryBusinessResponse_result_business::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void queryBusinessResponse_result_business::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 queryBusinessResponse_result_business::time() const {
  return time_;
}
inline void queryBusinessResponse_result_business::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// required .HSCommPB.enums.exchangeType exchangeType = 3;
inline bool queryBusinessResponse_result_business::has_exchangetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void queryBusinessResponse_result_business::set_has_exchangetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void queryBusinessResponse_result_business::clear_has_exchangetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void queryBusinessResponse_result_business::clear_exchangetype() {
  exchangetype_ = 0;
  clear_has_exchangetype();
}
inline ::HSCommPB::enums_exchangeType queryBusinessResponse_result_business::exchangetype() const {
  return static_cast< ::HSCommPB::enums_exchangeType >(exchangetype_);
}
inline void queryBusinessResponse_result_business::set_exchangetype(::HSCommPB::enums_exchangeType value) {
  GOOGLE_DCHECK(::HSCommPB::enums_exchangeType_IsValid(value));
  set_has_exchangetype();
  exchangetype_ = value;
}

// required string stockAccount = 4;
inline bool queryBusinessResponse_result_business::has_stockaccount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void queryBusinessResponse_result_business::set_has_stockaccount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void queryBusinessResponse_result_business::clear_has_stockaccount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void queryBusinessResponse_result_business::clear_stockaccount() {
  if (stockaccount_ != &::google::protobuf::internal::kEmptyString) {
    stockaccount_->clear();
  }
  clear_has_stockaccount();
}
inline const ::std::string& queryBusinessResponse_result_business::stockaccount() const {
  return *stockaccount_;
}
inline void queryBusinessResponse_result_business::set_stockaccount(const ::std::string& value) {
  set_has_stockaccount();
  if (stockaccount_ == &::google::protobuf::internal::kEmptyString) {
    stockaccount_ = new ::std::string;
  }
  stockaccount_->assign(value);
}
inline void queryBusinessResponse_result_business::set_stockaccount(const char* value) {
  set_has_stockaccount();
  if (stockaccount_ == &::google::protobuf::internal::kEmptyString) {
    stockaccount_ = new ::std::string;
  }
  stockaccount_->assign(value);
}
inline void queryBusinessResponse_result_business::set_stockaccount(const char* value, size_t size) {
  set_has_stockaccount();
  if (stockaccount_ == &::google::protobuf::internal::kEmptyString) {
    stockaccount_ = new ::std::string;
  }
  stockaccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryBusinessResponse_result_business::mutable_stockaccount() {
  set_has_stockaccount();
  if (stockaccount_ == &::google::protobuf::internal::kEmptyString) {
    stockaccount_ = new ::std::string;
  }
  return stockaccount_;
}
inline ::std::string* queryBusinessResponse_result_business::release_stockaccount() {
  clear_has_stockaccount();
  if (stockaccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stockaccount_;
    stockaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string stockCode = 5;
inline bool queryBusinessResponse_result_business::has_stockcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void queryBusinessResponse_result_business::set_has_stockcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void queryBusinessResponse_result_business::clear_has_stockcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void queryBusinessResponse_result_business::clear_stockcode() {
  if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
    stockcode_->clear();
  }
  clear_has_stockcode();
}
inline const ::std::string& queryBusinessResponse_result_business::stockcode() const {
  return *stockcode_;
}
inline void queryBusinessResponse_result_business::set_stockcode(const ::std::string& value) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(value);
}
inline void queryBusinessResponse_result_business::set_stockcode(const char* value) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(value);
}
inline void queryBusinessResponse_result_business::set_stockcode(const char* value, size_t size) {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  stockcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryBusinessResponse_result_business::mutable_stockcode() {
  set_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    stockcode_ = new ::std::string;
  }
  return stockcode_;
}
inline ::std::string* queryBusinessResponse_result_business::release_stockcode() {
  clear_has_stockcode();
  if (stockcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stockcode_;
    stockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string stockName = 6;
inline bool queryBusinessResponse_result_business::has_stockname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void queryBusinessResponse_result_business::set_has_stockname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void queryBusinessResponse_result_business::clear_has_stockname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void queryBusinessResponse_result_business::clear_stockname() {
  if (stockname_ != &::google::protobuf::internal::kEmptyString) {
    stockname_->clear();
  }
  clear_has_stockname();
}
inline const ::std::string& queryBusinessResponse_result_business::stockname() const {
  return *stockname_;
}
inline void queryBusinessResponse_result_business::set_stockname(const ::std::string& value) {
  set_has_stockname();
  if (stockname_ == &::google::protobuf::internal::kEmptyString) {
    stockname_ = new ::std::string;
  }
  stockname_->assign(value);
}
inline void queryBusinessResponse_result_business::set_stockname(const char* value) {
  set_has_stockname();
  if (stockname_ == &::google::protobuf::internal::kEmptyString) {
    stockname_ = new ::std::string;
  }
  stockname_->assign(value);
}
inline void queryBusinessResponse_result_business::set_stockname(const char* value, size_t size) {
  set_has_stockname();
  if (stockname_ == &::google::protobuf::internal::kEmptyString) {
    stockname_ = new ::std::string;
  }
  stockname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryBusinessResponse_result_business::mutable_stockname() {
  set_has_stockname();
  if (stockname_ == &::google::protobuf::internal::kEmptyString) {
    stockname_ = new ::std::string;
  }
  return stockname_;
}
inline ::std::string* queryBusinessResponse_result_business::release_stockname() {
  clear_has_stockname();
  if (stockname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stockname_;
    stockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .HSCommPB.enums.entrustBS entrustBS = 7;
inline bool queryBusinessResponse_result_business::has_entrustbs() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void queryBusinessResponse_result_business::set_has_entrustbs() {
  _has_bits_[0] |= 0x00000040u;
}
inline void queryBusinessResponse_result_business::clear_has_entrustbs() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void queryBusinessResponse_result_business::clear_entrustbs() {
  entrustbs_ = 0;
  clear_has_entrustbs();
}
inline ::HSCommPB::enums_entrustBS queryBusinessResponse_result_business::entrustbs() const {
  return static_cast< ::HSCommPB::enums_entrustBS >(entrustbs_);
}
inline void queryBusinessResponse_result_business::set_entrustbs(::HSCommPB::enums_entrustBS value) {
  GOOGLE_DCHECK(::HSCommPB::enums_entrustBS_IsValid(value));
  set_has_entrustbs();
  entrustbs_ = value;
}

// required int64 businessAmount = 8;
inline bool queryBusinessResponse_result_business::has_businessamount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void queryBusinessResponse_result_business::set_has_businessamount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void queryBusinessResponse_result_business::clear_has_businessamount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void queryBusinessResponse_result_business::clear_businessamount() {
  businessamount_ = GOOGLE_LONGLONG(0);
  clear_has_businessamount();
}
inline ::google::protobuf::int64 queryBusinessResponse_result_business::businessamount() const {
  return businessamount_;
}
inline void queryBusinessResponse_result_business::set_businessamount(::google::protobuf::int64 value) {
  set_has_businessamount();
  businessamount_ = value;
}

// required int64 businessPrice = 9;
inline bool queryBusinessResponse_result_business::has_businessprice() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void queryBusinessResponse_result_business::set_has_businessprice() {
  _has_bits_[0] |= 0x00000100u;
}
inline void queryBusinessResponse_result_business::clear_has_businessprice() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void queryBusinessResponse_result_business::clear_businessprice() {
  businessprice_ = GOOGLE_LONGLONG(0);
  clear_has_businessprice();
}
inline ::google::protobuf::int64 queryBusinessResponse_result_business::businessprice() const {
  return businessprice_;
}
inline void queryBusinessResponse_result_business::set_businessprice(::google::protobuf::int64 value) {
  set_has_businessprice();
  businessprice_ = value;
}

// required int64 businessBalance = 10;
inline bool queryBusinessResponse_result_business::has_businessbalance() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void queryBusinessResponse_result_business::set_has_businessbalance() {
  _has_bits_[0] |= 0x00000200u;
}
inline void queryBusinessResponse_result_business::clear_has_businessbalance() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void queryBusinessResponse_result_business::clear_businessbalance() {
  businessbalance_ = GOOGLE_LONGLONG(0);
  clear_has_businessbalance();
}
inline ::google::protobuf::int64 queryBusinessResponse_result_business::businessbalance() const {
  return businessbalance_;
}
inline void queryBusinessResponse_result_business::set_businessbalance(::google::protobuf::int64 value) {
  set_has_businessbalance();
  businessbalance_ = value;
}

// required int32 businessTimes = 11;
inline bool queryBusinessResponse_result_business::has_businesstimes() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void queryBusinessResponse_result_business::set_has_businesstimes() {
  _has_bits_[0] |= 0x00000400u;
}
inline void queryBusinessResponse_result_business::clear_has_businesstimes() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void queryBusinessResponse_result_business::clear_businesstimes() {
  businesstimes_ = 0;
  clear_has_businesstimes();
}
inline ::google::protobuf::int32 queryBusinessResponse_result_business::businesstimes() const {
  return businesstimes_;
}
inline void queryBusinessResponse_result_business::set_businesstimes(::google::protobuf::int32 value) {
  set_has_businesstimes();
  businesstimes_ = value;
}

// required .HSCommPB.enums.businessStatus businessStatus = 12;
inline bool queryBusinessResponse_result_business::has_businessstatus() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void queryBusinessResponse_result_business::set_has_businessstatus() {
  _has_bits_[0] |= 0x00000800u;
}
inline void queryBusinessResponse_result_business::clear_has_businessstatus() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void queryBusinessResponse_result_business::clear_businessstatus() {
  businessstatus_ = 0;
  clear_has_businessstatus();
}
inline ::HSCommPB::enums_businessStatus queryBusinessResponse_result_business::businessstatus() const {
  return static_cast< ::HSCommPB::enums_businessStatus >(businessstatus_);
}
inline void queryBusinessResponse_result_business::set_businessstatus(::HSCommPB::enums_businessStatus value) {
  GOOGLE_DCHECK(::HSCommPB::enums_businessStatus_IsValid(value));
  set_has_businessstatus();
  businessstatus_ = value;
}

// required .HSCommPB.enums.businessType businessType = 13;
inline bool queryBusinessResponse_result_business::has_businesstype() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void queryBusinessResponse_result_business::set_has_businesstype() {
  _has_bits_[0] |= 0x00001000u;
}
inline void queryBusinessResponse_result_business::clear_has_businesstype() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void queryBusinessResponse_result_business::clear_businesstype() {
  businesstype_ = 0;
  clear_has_businesstype();
}
inline ::HSCommPB::enums_businessType queryBusinessResponse_result_business::businesstype() const {
  return static_cast< ::HSCommPB::enums_businessType >(businesstype_);
}
inline void queryBusinessResponse_result_business::set_businesstype(::HSCommPB::enums_businessType value) {
  GOOGLE_DCHECK(::HSCommPB::enums_businessType_IsValid(value));
  set_has_businesstype();
  businesstype_ = value;
}

// required string entrustNo = 14;
inline bool queryBusinessResponse_result_business::has_entrustno() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void queryBusinessResponse_result_business::set_has_entrustno() {
  _has_bits_[0] |= 0x00002000u;
}
inline void queryBusinessResponse_result_business::clear_has_entrustno() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void queryBusinessResponse_result_business::clear_entrustno() {
  if (entrustno_ != &::google::protobuf::internal::kEmptyString) {
    entrustno_->clear();
  }
  clear_has_entrustno();
}
inline const ::std::string& queryBusinessResponse_result_business::entrustno() const {
  return *entrustno_;
}
inline void queryBusinessResponse_result_business::set_entrustno(const ::std::string& value) {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  entrustno_->assign(value);
}
inline void queryBusinessResponse_result_business::set_entrustno(const char* value) {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  entrustno_->assign(value);
}
inline void queryBusinessResponse_result_business::set_entrustno(const char* value, size_t size) {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  entrustno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryBusinessResponse_result_business::mutable_entrustno() {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  return entrustno_;
}
inline ::std::string* queryBusinessResponse_result_business::release_entrustno() {
  clear_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = entrustno_;
    entrustno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string reportNo = 15;
inline bool queryBusinessResponse_result_business::has_reportno() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void queryBusinessResponse_result_business::set_has_reportno() {
  _has_bits_[0] |= 0x00004000u;
}
inline void queryBusinessResponse_result_business::clear_has_reportno() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void queryBusinessResponse_result_business::clear_reportno() {
  if (reportno_ != &::google::protobuf::internal::kEmptyString) {
    reportno_->clear();
  }
  clear_has_reportno();
}
inline const ::std::string& queryBusinessResponse_result_business::reportno() const {
  return *reportno_;
}
inline void queryBusinessResponse_result_business::set_reportno(const ::std::string& value) {
  set_has_reportno();
  if (reportno_ == &::google::protobuf::internal::kEmptyString) {
    reportno_ = new ::std::string;
  }
  reportno_->assign(value);
}
inline void queryBusinessResponse_result_business::set_reportno(const char* value) {
  set_has_reportno();
  if (reportno_ == &::google::protobuf::internal::kEmptyString) {
    reportno_ = new ::std::string;
  }
  reportno_->assign(value);
}
inline void queryBusinessResponse_result_business::set_reportno(const char* value, size_t size) {
  set_has_reportno();
  if (reportno_ == &::google::protobuf::internal::kEmptyString) {
    reportno_ = new ::std::string;
  }
  reportno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryBusinessResponse_result_business::mutable_reportno() {
  set_has_reportno();
  if (reportno_ == &::google::protobuf::internal::kEmptyString) {
    reportno_ = new ::std::string;
  }
  return reportno_;
}
inline ::std::string* queryBusinessResponse_result_business::release_reportno() {
  clear_has_reportno();
  if (reportno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reportno_;
    reportno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string remark = 16 [default = ""];
inline bool queryBusinessResponse_result_business::has_remark() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void queryBusinessResponse_result_business::set_has_remark() {
  _has_bits_[0] |= 0x00008000u;
}
inline void queryBusinessResponse_result_business::clear_has_remark() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void queryBusinessResponse_result_business::clear_remark() {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    remark_->clear();
  }
  clear_has_remark();
}
inline const ::std::string& queryBusinessResponse_result_business::remark() const {
  return *remark_;
}
inline void queryBusinessResponse_result_business::set_remark(const ::std::string& value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void queryBusinessResponse_result_business::set_remark(const char* value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void queryBusinessResponse_result_business::set_remark(const char* value, size_t size) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryBusinessResponse_result_business::mutable_remark() {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  return remark_;
}
inline ::std::string* queryBusinessResponse_result_business::release_remark() {
  clear_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remark_;
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// queryBusinessResponse_result

// repeated .HSCommPB.queryBusinessResponse.result.business businesses = 1;
inline int queryBusinessResponse_result::businesses_size() const {
  return businesses_.size();
}
inline void queryBusinessResponse_result::clear_businesses() {
  businesses_.Clear();
}
inline const ::HSCommPB::queryBusinessResponse_result_business& queryBusinessResponse_result::businesses(int index) const {
  return businesses_.Get(index);
}
inline ::HSCommPB::queryBusinessResponse_result_business* queryBusinessResponse_result::mutable_businesses(int index) {
  return businesses_.Mutable(index);
}
inline ::HSCommPB::queryBusinessResponse_result_business* queryBusinessResponse_result::add_businesses() {
  return businesses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryBusinessResponse_result_business >&
queryBusinessResponse_result::businesses() const {
  return businesses_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryBusinessResponse_result_business >*
queryBusinessResponse_result::mutable_businesses() {
  return &businesses_;
}

// required string lastPositionString = 2;
inline bool queryBusinessResponse_result::has_lastpositionstring() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void queryBusinessResponse_result::set_has_lastpositionstring() {
  _has_bits_[0] |= 0x00000002u;
}
inline void queryBusinessResponse_result::clear_has_lastpositionstring() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void queryBusinessResponse_result::clear_lastpositionstring() {
  if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_->clear();
  }
  clear_has_lastpositionstring();
}
inline const ::std::string& queryBusinessResponse_result::lastpositionstring() const {
  return *lastpositionstring_;
}
inline void queryBusinessResponse_result::set_lastpositionstring(const ::std::string& value) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(value);
}
inline void queryBusinessResponse_result::set_lastpositionstring(const char* value) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(value);
}
inline void queryBusinessResponse_result::set_lastpositionstring(const char* value, size_t size) {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  lastpositionstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryBusinessResponse_result::mutable_lastpositionstring() {
  set_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    lastpositionstring_ = new ::std::string;
  }
  return lastpositionstring_;
}
inline ::std::string* queryBusinessResponse_result::release_lastpositionstring() {
  clear_has_lastpositionstring();
  if (lastpositionstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lastpositionstring_;
    lastpositionstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 errorNo = 14 [default = 0];
inline bool queryBusinessResponse_result::has_errorno() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void queryBusinessResponse_result::set_has_errorno() {
  _has_bits_[0] |= 0x00000004u;
}
inline void queryBusinessResponse_result::clear_has_errorno() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void queryBusinessResponse_result::clear_errorno() {
  errorno_ = 0;
  clear_has_errorno();
}
inline ::google::protobuf::int32 queryBusinessResponse_result::errorno() const {
  return errorno_;
}
inline void queryBusinessResponse_result::set_errorno(::google::protobuf::int32 value) {
  set_has_errorno();
  errorno_ = value;
}

// optional string errorMsg = 15 [default = ""];
inline bool queryBusinessResponse_result::has_errormsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void queryBusinessResponse_result::set_has_errormsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void queryBusinessResponse_result::clear_has_errormsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void queryBusinessResponse_result::clear_errormsg() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    errormsg_->clear();
  }
  clear_has_errormsg();
}
inline const ::std::string& queryBusinessResponse_result::errormsg() const {
  return *errormsg_;
}
inline void queryBusinessResponse_result::set_errormsg(const ::std::string& value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void queryBusinessResponse_result::set_errormsg(const char* value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void queryBusinessResponse_result::set_errormsg(const char* value, size_t size) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryBusinessResponse_result::mutable_errormsg() {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  return errormsg_;
}
inline ::std::string* queryBusinessResponse_result::release_errormsg() {
  clear_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errormsg_;
    errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// queryBusinessResponse

// repeated .HSCommPB.queryBusinessResponse.result responses = 1;
inline int queryBusinessResponse::responses_size() const {
  return responses_.size();
}
inline void queryBusinessResponse::clear_responses() {
  responses_.Clear();
}
inline const ::HSCommPB::queryBusinessResponse_result& queryBusinessResponse::responses(int index) const {
  return responses_.Get(index);
}
inline ::HSCommPB::queryBusinessResponse_result* queryBusinessResponse::mutable_responses(int index) {
  return responses_.Mutable(index);
}
inline ::HSCommPB::queryBusinessResponse_result* queryBusinessResponse::add_responses() {
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryBusinessResponse_result >&
queryBusinessResponse::responses() const {
  return responses_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryBusinessResponse_result >*
queryBusinessResponse::mutable_responses() {
  return &responses_;
}

// -------------------------------------------------------------------

// getEntrustByLocalIDRequest_call

// required int64 localID = 1;
inline bool getEntrustByLocalIDRequest_call::has_localid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void getEntrustByLocalIDRequest_call::set_has_localid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void getEntrustByLocalIDRequest_call::clear_has_localid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void getEntrustByLocalIDRequest_call::clear_localid() {
  localid_ = GOOGLE_LONGLONG(0);
  clear_has_localid();
}
inline ::google::protobuf::int64 getEntrustByLocalIDRequest_call::localid() const {
  return localid_;
}
inline void getEntrustByLocalIDRequest_call::set_localid(::google::protobuf::int64 value) {
  set_has_localid();
  localid_ = value;
}

// required string fundAccount = 2;
inline bool getEntrustByLocalIDRequest_call::has_fundaccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void getEntrustByLocalIDRequest_call::set_has_fundaccount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void getEntrustByLocalIDRequest_call::clear_has_fundaccount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void getEntrustByLocalIDRequest_call::clear_fundaccount() {
  if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
    fundaccount_->clear();
  }
  clear_has_fundaccount();
}
inline const ::std::string& getEntrustByLocalIDRequest_call::fundaccount() const {
  return *fundaccount_;
}
inline void getEntrustByLocalIDRequest_call::set_fundaccount(const ::std::string& value) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(value);
}
inline void getEntrustByLocalIDRequest_call::set_fundaccount(const char* value) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(value);
}
inline void getEntrustByLocalIDRequest_call::set_fundaccount(const char* value, size_t size) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* getEntrustByLocalIDRequest_call::mutable_fundaccount() {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  return fundaccount_;
}
inline ::std::string* getEntrustByLocalIDRequest_call::release_fundaccount() {
  clear_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fundaccount_;
    fundaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// getEntrustByLocalIDRequest

// repeated .HSCommPB.getEntrustByLocalIDRequest.call requests = 1;
inline int getEntrustByLocalIDRequest::requests_size() const {
  return requests_.size();
}
inline void getEntrustByLocalIDRequest::clear_requests() {
  requests_.Clear();
}
inline const ::HSCommPB::getEntrustByLocalIDRequest_call& getEntrustByLocalIDRequest::requests(int index) const {
  return requests_.Get(index);
}
inline ::HSCommPB::getEntrustByLocalIDRequest_call* getEntrustByLocalIDRequest::mutable_requests(int index) {
  return requests_.Mutable(index);
}
inline ::HSCommPB::getEntrustByLocalIDRequest_call* getEntrustByLocalIDRequest::add_requests() {
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::getEntrustByLocalIDRequest_call >&
getEntrustByLocalIDRequest::requests() const {
  return requests_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::getEntrustByLocalIDRequest_call >*
getEntrustByLocalIDRequest::mutable_requests() {
  return &requests_;
}

// -------------------------------------------------------------------

// getEntrustByLocalIDResponse_result

// required int64 localID = 1;
inline bool getEntrustByLocalIDResponse_result::has_localid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void getEntrustByLocalIDResponse_result::set_has_localid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void getEntrustByLocalIDResponse_result::clear_has_localid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void getEntrustByLocalIDResponse_result::clear_localid() {
  localid_ = GOOGLE_LONGLONG(0);
  clear_has_localid();
}
inline ::google::protobuf::int64 getEntrustByLocalIDResponse_result::localid() const {
  return localid_;
}
inline void getEntrustByLocalIDResponse_result::set_localid(::google::protobuf::int64 value) {
  set_has_localid();
  localid_ = value;
}

// required string fundAccount = 2;
inline bool getEntrustByLocalIDResponse_result::has_fundaccount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void getEntrustByLocalIDResponse_result::set_has_fundaccount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void getEntrustByLocalIDResponse_result::clear_has_fundaccount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void getEntrustByLocalIDResponse_result::clear_fundaccount() {
  if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
    fundaccount_->clear();
  }
  clear_has_fundaccount();
}
inline const ::std::string& getEntrustByLocalIDResponse_result::fundaccount() const {
  return *fundaccount_;
}
inline void getEntrustByLocalIDResponse_result::set_fundaccount(const ::std::string& value) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(value);
}
inline void getEntrustByLocalIDResponse_result::set_fundaccount(const char* value) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(value);
}
inline void getEntrustByLocalIDResponse_result::set_fundaccount(const char* value, size_t size) {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  fundaccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* getEntrustByLocalIDResponse_result::mutable_fundaccount() {
  set_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    fundaccount_ = new ::std::string;
  }
  return fundaccount_;
}
inline ::std::string* getEntrustByLocalIDResponse_result::release_fundaccount() {
  clear_has_fundaccount();
  if (fundaccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fundaccount_;
    fundaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string entrustNo = 3;
inline bool getEntrustByLocalIDResponse_result::has_entrustno() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void getEntrustByLocalIDResponse_result::set_has_entrustno() {
  _has_bits_[0] |= 0x00000004u;
}
inline void getEntrustByLocalIDResponse_result::clear_has_entrustno() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void getEntrustByLocalIDResponse_result::clear_entrustno() {
  if (entrustno_ != &::google::protobuf::internal::kEmptyString) {
    entrustno_->clear();
  }
  clear_has_entrustno();
}
inline const ::std::string& getEntrustByLocalIDResponse_result::entrustno() const {
  return *entrustno_;
}
inline void getEntrustByLocalIDResponse_result::set_entrustno(const ::std::string& value) {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  entrustno_->assign(value);
}
inline void getEntrustByLocalIDResponse_result::set_entrustno(const char* value) {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  entrustno_->assign(value);
}
inline void getEntrustByLocalIDResponse_result::set_entrustno(const char* value, size_t size) {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  entrustno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* getEntrustByLocalIDResponse_result::mutable_entrustno() {
  set_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    entrustno_ = new ::std::string;
  }
  return entrustno_;
}
inline ::std::string* getEntrustByLocalIDResponse_result::release_entrustno() {
  clear_has_entrustno();
  if (entrustno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = entrustno_;
    entrustno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// getEntrustByLocalIDResponse

// repeated .HSCommPB.getEntrustByLocalIDResponse.result responses = 1;
inline int getEntrustByLocalIDResponse::responses_size() const {
  return responses_.size();
}
inline void getEntrustByLocalIDResponse::clear_responses() {
  responses_.Clear();
}
inline const ::HSCommPB::getEntrustByLocalIDResponse_result& getEntrustByLocalIDResponse::responses(int index) const {
  return responses_.Get(index);
}
inline ::HSCommPB::getEntrustByLocalIDResponse_result* getEntrustByLocalIDResponse::mutable_responses(int index) {
  return responses_.Mutable(index);
}
inline ::HSCommPB::getEntrustByLocalIDResponse_result* getEntrustByLocalIDResponse::add_responses() {
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::getEntrustByLocalIDResponse_result >&
getEntrustByLocalIDResponse::responses() const {
  return responses_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::getEntrustByLocalIDResponse_result >*
getEntrustByLocalIDResponse::mutable_responses() {
  return &responses_;
}

// -------------------------------------------------------------------

// queryOrdersRequest_call

// required string username = 1;
inline bool queryOrdersRequest_call::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void queryOrdersRequest_call::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void queryOrdersRequest_call::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void queryOrdersRequest_call::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& queryOrdersRequest_call::username() const {
  return *username_;
}
inline void queryOrdersRequest_call::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void queryOrdersRequest_call::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void queryOrdersRequest_call::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryOrdersRequest_call::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* queryOrdersRequest_call::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string password = 2;
inline bool queryOrdersRequest_call::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void queryOrdersRequest_call::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void queryOrdersRequest_call::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void queryOrdersRequest_call::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& queryOrdersRequest_call::password() const {
  return *password_;
}
inline void queryOrdersRequest_call::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void queryOrdersRequest_call::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void queryOrdersRequest_call::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryOrdersRequest_call::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* queryOrdersRequest_call::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 date = 3;
inline bool queryOrdersRequest_call::has_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void queryOrdersRequest_call::set_has_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void queryOrdersRequest_call::clear_has_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void queryOrdersRequest_call::clear_date() {
  date_ = GOOGLE_LONGLONG(0);
  clear_has_date();
}
inline ::google::protobuf::int64 queryOrdersRequest_call::date() const {
  return date_;
}
inline void queryOrdersRequest_call::set_date(::google::protobuf::int64 value) {
  set_has_date();
  date_ = value;
}

// -------------------------------------------------------------------

// queryOrdersRequest

// repeated .HSCommPB.queryOrdersRequest.call requests = 1;
inline int queryOrdersRequest::requests_size() const {
  return requests_.size();
}
inline void queryOrdersRequest::clear_requests() {
  requests_.Clear();
}
inline const ::HSCommPB::queryOrdersRequest_call& queryOrdersRequest::requests(int index) const {
  return requests_.Get(index);
}
inline ::HSCommPB::queryOrdersRequest_call* queryOrdersRequest::mutable_requests(int index) {
  return requests_.Mutable(index);
}
inline ::HSCommPB::queryOrdersRequest_call* queryOrdersRequest::add_requests() {
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryOrdersRequest_call >&
queryOrdersRequest::requests() const {
  return requests_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryOrdersRequest_call >*
queryOrdersRequest::mutable_requests() {
  return &requests_;
}

// -------------------------------------------------------------------

// queryOrdersResponse_result_query

// required int64 returndate = 1;
inline bool queryOrdersResponse_result_query::has_returndate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void queryOrdersResponse_result_query::set_has_returndate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void queryOrdersResponse_result_query::clear_has_returndate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void queryOrdersResponse_result_query::clear_returndate() {
  returndate_ = GOOGLE_LONGLONG(0);
  clear_has_returndate();
}
inline ::google::protobuf::int64 queryOrdersResponse_result_query::returndate() const {
  return returndate_;
}
inline void queryOrdersResponse_result_query::set_returndate(::google::protobuf::int64 value) {
  set_has_returndate();
  returndate_ = value;
}

// required string secuname = 2;
inline bool queryOrdersResponse_result_query::has_secuname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void queryOrdersResponse_result_query::set_has_secuname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void queryOrdersResponse_result_query::clear_has_secuname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void queryOrdersResponse_result_query::clear_secuname() {
  if (secuname_ != &::google::protobuf::internal::kEmptyString) {
    secuname_->clear();
  }
  clear_has_secuname();
}
inline const ::std::string& queryOrdersResponse_result_query::secuname() const {
  return *secuname_;
}
inline void queryOrdersResponse_result_query::set_secuname(const ::std::string& value) {
  set_has_secuname();
  if (secuname_ == &::google::protobuf::internal::kEmptyString) {
    secuname_ = new ::std::string;
  }
  secuname_->assign(value);
}
inline void queryOrdersResponse_result_query::set_secuname(const char* value) {
  set_has_secuname();
  if (secuname_ == &::google::protobuf::internal::kEmptyString) {
    secuname_ = new ::std::string;
  }
  secuname_->assign(value);
}
inline void queryOrdersResponse_result_query::set_secuname(const char* value, size_t size) {
  set_has_secuname();
  if (secuname_ == &::google::protobuf::internal::kEmptyString) {
    secuname_ = new ::std::string;
  }
  secuname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryOrdersResponse_result_query::mutable_secuname() {
  set_has_secuname();
  if (secuname_ == &::google::protobuf::internal::kEmptyString) {
    secuname_ = new ::std::string;
  }
  return secuname_;
}
inline ::std::string* queryOrdersResponse_result_query::release_secuname() {
  clear_has_secuname();
  if (secuname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secuname_;
    secuname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string code = 3;
inline bool queryOrdersResponse_result_query::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void queryOrdersResponse_result_query::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void queryOrdersResponse_result_query::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void queryOrdersResponse_result_query::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& queryOrdersResponse_result_query::code() const {
  return *code_;
}
inline void queryOrdersResponse_result_query::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void queryOrdersResponse_result_query::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void queryOrdersResponse_result_query::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryOrdersResponse_result_query::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* queryOrdersResponse_result_query::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string direction = 4;
inline bool queryOrdersResponse_result_query::has_direction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void queryOrdersResponse_result_query::set_has_direction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void queryOrdersResponse_result_query::clear_has_direction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void queryOrdersResponse_result_query::clear_direction() {
  if (direction_ != &::google::protobuf::internal::kEmptyString) {
    direction_->clear();
  }
  clear_has_direction();
}
inline const ::std::string& queryOrdersResponse_result_query::direction() const {
  return *direction_;
}
inline void queryOrdersResponse_result_query::set_direction(const ::std::string& value) {
  set_has_direction();
  if (direction_ == &::google::protobuf::internal::kEmptyString) {
    direction_ = new ::std::string;
  }
  direction_->assign(value);
}
inline void queryOrdersResponse_result_query::set_direction(const char* value) {
  set_has_direction();
  if (direction_ == &::google::protobuf::internal::kEmptyString) {
    direction_ = new ::std::string;
  }
  direction_->assign(value);
}
inline void queryOrdersResponse_result_query::set_direction(const char* value, size_t size) {
  set_has_direction();
  if (direction_ == &::google::protobuf::internal::kEmptyString) {
    direction_ = new ::std::string;
  }
  direction_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryOrdersResponse_result_query::mutable_direction() {
  set_has_direction();
  if (direction_ == &::google::protobuf::internal::kEmptyString) {
    direction_ = new ::std::string;
  }
  return direction_;
}
inline ::std::string* queryOrdersResponse_result_query::release_direction() {
  clear_has_direction();
  if (direction_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = direction_;
    direction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 ordervol = 5;
inline bool queryOrdersResponse_result_query::has_ordervol() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void queryOrdersResponse_result_query::set_has_ordervol() {
  _has_bits_[0] |= 0x00000010u;
}
inline void queryOrdersResponse_result_query::clear_has_ordervol() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void queryOrdersResponse_result_query::clear_ordervol() {
  ordervol_ = GOOGLE_LONGLONG(0);
  clear_has_ordervol();
}
inline ::google::protobuf::int64 queryOrdersResponse_result_query::ordervol() const {
  return ordervol_;
}
inline void queryOrdersResponse_result_query::set_ordervol(::google::protobuf::int64 value) {
  set_has_ordervol();
  ordervol_ = value;
}

// required int64 orderprice = 6;
inline bool queryOrdersResponse_result_query::has_orderprice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void queryOrdersResponse_result_query::set_has_orderprice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void queryOrdersResponse_result_query::clear_has_orderprice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void queryOrdersResponse_result_query::clear_orderprice() {
  orderprice_ = GOOGLE_LONGLONG(0);
  clear_has_orderprice();
}
inline ::google::protobuf::int64 queryOrdersResponse_result_query::orderprice() const {
  return orderprice_;
}
inline void queryOrdersResponse_result_query::set_orderprice(::google::protobuf::int64 value) {
  set_has_orderprice();
  orderprice_ = value;
}

// required int64 averageprice = 7;
inline bool queryOrdersResponse_result_query::has_averageprice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void queryOrdersResponse_result_query::set_has_averageprice() {
  _has_bits_[0] |= 0x00000040u;
}
inline void queryOrdersResponse_result_query::clear_has_averageprice() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void queryOrdersResponse_result_query::clear_averageprice() {
  averageprice_ = GOOGLE_LONGLONG(0);
  clear_has_averageprice();
}
inline ::google::protobuf::int64 queryOrdersResponse_result_query::averageprice() const {
  return averageprice_;
}
inline void queryOrdersResponse_result_query::set_averageprice(::google::protobuf::int64 value) {
  set_has_averageprice();
  averageprice_ = value;
}

// required int64 tradevol = 8;
inline bool queryOrdersResponse_result_query::has_tradevol() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void queryOrdersResponse_result_query::set_has_tradevol() {
  _has_bits_[0] |= 0x00000080u;
}
inline void queryOrdersResponse_result_query::clear_has_tradevol() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void queryOrdersResponse_result_query::clear_tradevol() {
  tradevol_ = GOOGLE_LONGLONG(0);
  clear_has_tradevol();
}
inline ::google::protobuf::int64 queryOrdersResponse_result_query::tradevol() const {
  return tradevol_;
}
inline void queryOrdersResponse_result_query::set_tradevol(::google::protobuf::int64 value) {
  set_has_tradevol();
  tradevol_ = value;
}

// required int64 cancelvol = 9;
inline bool queryOrdersResponse_result_query::has_cancelvol() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void queryOrdersResponse_result_query::set_has_cancelvol() {
  _has_bits_[0] |= 0x00000100u;
}
inline void queryOrdersResponse_result_query::clear_has_cancelvol() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void queryOrdersResponse_result_query::clear_cancelvol() {
  cancelvol_ = GOOGLE_LONGLONG(0);
  clear_has_cancelvol();
}
inline ::google::protobuf::int64 queryOrdersResponse_result_query::cancelvol() const {
  return cancelvol_;
}
inline void queryOrdersResponse_result_query::set_cancelvol(::google::protobuf::int64 value) {
  set_has_cancelvol();
  cancelvol_ = value;
}

// required string flag = 10;
inline bool queryOrdersResponse_result_query::has_flag() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void queryOrdersResponse_result_query::set_has_flag() {
  _has_bits_[0] |= 0x00000200u;
}
inline void queryOrdersResponse_result_query::clear_has_flag() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void queryOrdersResponse_result_query::clear_flag() {
  if (flag_ != &::google::protobuf::internal::kEmptyString) {
    flag_->clear();
  }
  clear_has_flag();
}
inline const ::std::string& queryOrdersResponse_result_query::flag() const {
  return *flag_;
}
inline void queryOrdersResponse_result_query::set_flag(const ::std::string& value) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  flag_->assign(value);
}
inline void queryOrdersResponse_result_query::set_flag(const char* value) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  flag_->assign(value);
}
inline void queryOrdersResponse_result_query::set_flag(const char* value, size_t size) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  flag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryOrdersResponse_result_query::mutable_flag() {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  return flag_;
}
inline ::std::string* queryOrdersResponse_result_query::release_flag() {
  clear_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = flag_;
    flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string adddatetime = 11;
inline bool queryOrdersResponse_result_query::has_adddatetime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void queryOrdersResponse_result_query::set_has_adddatetime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void queryOrdersResponse_result_query::clear_has_adddatetime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void queryOrdersResponse_result_query::clear_adddatetime() {
  if (adddatetime_ != &::google::protobuf::internal::kEmptyString) {
    adddatetime_->clear();
  }
  clear_has_adddatetime();
}
inline const ::std::string& queryOrdersResponse_result_query::adddatetime() const {
  return *adddatetime_;
}
inline void queryOrdersResponse_result_query::set_adddatetime(const ::std::string& value) {
  set_has_adddatetime();
  if (adddatetime_ == &::google::protobuf::internal::kEmptyString) {
    adddatetime_ = new ::std::string;
  }
  adddatetime_->assign(value);
}
inline void queryOrdersResponse_result_query::set_adddatetime(const char* value) {
  set_has_adddatetime();
  if (adddatetime_ == &::google::protobuf::internal::kEmptyString) {
    adddatetime_ = new ::std::string;
  }
  adddatetime_->assign(value);
}
inline void queryOrdersResponse_result_query::set_adddatetime(const char* value, size_t size) {
  set_has_adddatetime();
  if (adddatetime_ == &::google::protobuf::internal::kEmptyString) {
    adddatetime_ = new ::std::string;
  }
  adddatetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryOrdersResponse_result_query::mutable_adddatetime() {
  set_has_adddatetime();
  if (adddatetime_ == &::google::protobuf::internal::kEmptyString) {
    adddatetime_ = new ::std::string;
  }
  return adddatetime_;
}
inline ::std::string* queryOrdersResponse_result_query::release_adddatetime() {
  clear_has_adddatetime();
  if (adddatetime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adddatetime_;
    adddatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 acid = 12;
inline bool queryOrdersResponse_result_query::has_acid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void queryOrdersResponse_result_query::set_has_acid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void queryOrdersResponse_result_query::clear_has_acid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void queryOrdersResponse_result_query::clear_acid() {
  acid_ = GOOGLE_LONGLONG(0);
  clear_has_acid();
}
inline ::google::protobuf::int64 queryOrdersResponse_result_query::acid() const {
  return acid_;
}
inline void queryOrdersResponse_result_query::set_acid(::google::protobuf::int64 value) {
  set_has_acid();
  acid_ = value;
}

// required int64 oid = 13;
inline bool queryOrdersResponse_result_query::has_oid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void queryOrdersResponse_result_query::set_has_oid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void queryOrdersResponse_result_query::clear_has_oid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void queryOrdersResponse_result_query::clear_oid() {
  oid_ = GOOGLE_LONGLONG(0);
  clear_has_oid();
}
inline ::google::protobuf::int64 queryOrdersResponse_result_query::oid() const {
  return oid_;
}
inline void queryOrdersResponse_result_query::set_oid(::google::protobuf::int64 value) {
  set_has_oid();
  oid_ = value;
}

// -------------------------------------------------------------------

// queryOrdersResponse_result

// repeated .HSCommPB.queryOrdersResponse.result.query queries = 1;
inline int queryOrdersResponse_result::queries_size() const {
  return queries_.size();
}
inline void queryOrdersResponse_result::clear_queries() {
  queries_.Clear();
}
inline const ::HSCommPB::queryOrdersResponse_result_query& queryOrdersResponse_result::queries(int index) const {
  return queries_.Get(index);
}
inline ::HSCommPB::queryOrdersResponse_result_query* queryOrdersResponse_result::mutable_queries(int index) {
  return queries_.Mutable(index);
}
inline ::HSCommPB::queryOrdersResponse_result_query* queryOrdersResponse_result::add_queries() {
  return queries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryOrdersResponse_result_query >&
queryOrdersResponse_result::queries() const {
  return queries_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryOrdersResponse_result_query >*
queryOrdersResponse_result::mutable_queries() {
  return &queries_;
}

// optional int32 errorNo = 2 [default = 0];
inline bool queryOrdersResponse_result::has_errorno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void queryOrdersResponse_result::set_has_errorno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void queryOrdersResponse_result::clear_has_errorno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void queryOrdersResponse_result::clear_errorno() {
  errorno_ = 0;
  clear_has_errorno();
}
inline ::google::protobuf::int32 queryOrdersResponse_result::errorno() const {
  return errorno_;
}
inline void queryOrdersResponse_result::set_errorno(::google::protobuf::int32 value) {
  set_has_errorno();
  errorno_ = value;
}

// optional string errorMsg = 3 [default = ""];
inline bool queryOrdersResponse_result::has_errormsg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void queryOrdersResponse_result::set_has_errormsg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void queryOrdersResponse_result::clear_has_errormsg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void queryOrdersResponse_result::clear_errormsg() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    errormsg_->clear();
  }
  clear_has_errormsg();
}
inline const ::std::string& queryOrdersResponse_result::errormsg() const {
  return *errormsg_;
}
inline void queryOrdersResponse_result::set_errormsg(const ::std::string& value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void queryOrdersResponse_result::set_errormsg(const char* value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void queryOrdersResponse_result::set_errormsg(const char* value, size_t size) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryOrdersResponse_result::mutable_errormsg() {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  return errormsg_;
}
inline ::std::string* queryOrdersResponse_result::release_errormsg() {
  clear_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errormsg_;
    errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// queryOrdersResponse

// repeated .HSCommPB.queryOrdersResponse.result responses = 1;
inline int queryOrdersResponse::responses_size() const {
  return responses_.size();
}
inline void queryOrdersResponse::clear_responses() {
  responses_.Clear();
}
inline const ::HSCommPB::queryOrdersResponse_result& queryOrdersResponse::responses(int index) const {
  return responses_.Get(index);
}
inline ::HSCommPB::queryOrdersResponse_result* queryOrdersResponse::mutable_responses(int index) {
  return responses_.Mutable(index);
}
inline ::HSCommPB::queryOrdersResponse_result* queryOrdersResponse::add_responses() {
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryOrdersResponse_result >&
queryOrdersResponse::responses() const {
  return responses_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryOrdersResponse_result >*
queryOrdersResponse::mutable_responses() {
  return &responses_;
}

// -------------------------------------------------------------------

// queryCapitalRequest_call

// required int64 accountid = 1;
inline bool queryCapitalRequest_call::has_accountid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void queryCapitalRequest_call::set_has_accountid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void queryCapitalRequest_call::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void queryCapitalRequest_call::clear_accountid() {
  accountid_ = GOOGLE_LONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::int64 queryCapitalRequest_call::accountid() const {
  return accountid_;
}
inline void queryCapitalRequest_call::set_accountid(::google::protobuf::int64 value) {
  set_has_accountid();
  accountid_ = value;
}

// -------------------------------------------------------------------

// queryCapitalRequest

// repeated .HSCommPB.queryCapitalRequest.call requests = 1;
inline int queryCapitalRequest::requests_size() const {
  return requests_.size();
}
inline void queryCapitalRequest::clear_requests() {
  requests_.Clear();
}
inline const ::HSCommPB::queryCapitalRequest_call& queryCapitalRequest::requests(int index) const {
  return requests_.Get(index);
}
inline ::HSCommPB::queryCapitalRequest_call* queryCapitalRequest::mutable_requests(int index) {
  return requests_.Mutable(index);
}
inline ::HSCommPB::queryCapitalRequest_call* queryCapitalRequest::add_requests() {
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryCapitalRequest_call >&
queryCapitalRequest::requests() const {
  return requests_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryCapitalRequest_call >*
queryCapitalRequest::mutable_requests() {
  return &requests_;
}

// -------------------------------------------------------------------

// queryCapitalResponse_result_capital

// required int64 id = 1;
inline bool queryCapitalResponse_result_capital::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void queryCapitalResponse_result_capital::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void queryCapitalResponse_result_capital::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void queryCapitalResponse_result_capital::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 queryCapitalResponse_result_capital::id() const {
  return id_;
}
inline void queryCapitalResponse_result_capital::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// required int64 exchangeid = 2;
inline bool queryCapitalResponse_result_capital::has_exchangeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void queryCapitalResponse_result_capital::set_has_exchangeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void queryCapitalResponse_result_capital::clear_has_exchangeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void queryCapitalResponse_result_capital::clear_exchangeid() {
  exchangeid_ = GOOGLE_LONGLONG(0);
  clear_has_exchangeid();
}
inline ::google::protobuf::int64 queryCapitalResponse_result_capital::exchangeid() const {
  return exchangeid_;
}
inline void queryCapitalResponse_result_capital::set_exchangeid(::google::protobuf::int64 value) {
  set_has_exchangeid();
  exchangeid_ = value;
}

// required int64 currencytype = 3;
inline bool queryCapitalResponse_result_capital::has_currencytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void queryCapitalResponse_result_capital::set_has_currencytype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void queryCapitalResponse_result_capital::clear_has_currencytype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void queryCapitalResponse_result_capital::clear_currencytype() {
  currencytype_ = GOOGLE_LONGLONG(0);
  clear_has_currencytype();
}
inline ::google::protobuf::int64 queryCapitalResponse_result_capital::currencytype() const {
  return currencytype_;
}
inline void queryCapitalResponse_result_capital::set_currencytype(::google::protobuf::int64 value) {
  set_has_currencytype();
  currencytype_ = value;
}

// required int64 amounts = 4;
inline bool queryCapitalResponse_result_capital::has_amounts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void queryCapitalResponse_result_capital::set_has_amounts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void queryCapitalResponse_result_capital::clear_has_amounts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void queryCapitalResponse_result_capital::clear_amounts() {
  amounts_ = GOOGLE_LONGLONG(0);
  clear_has_amounts();
}
inline ::google::protobuf::int64 queryCapitalResponse_result_capital::amounts() const {
  return amounts_;
}
inline void queryCapitalResponse_result_capital::set_amounts(::google::protobuf::int64 value) {
  set_has_amounts();
  amounts_ = value;
}

// required int64 freeamounts = 5;
inline bool queryCapitalResponse_result_capital::has_freeamounts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void queryCapitalResponse_result_capital::set_has_freeamounts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void queryCapitalResponse_result_capital::clear_has_freeamounts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void queryCapitalResponse_result_capital::clear_freeamounts() {
  freeamounts_ = GOOGLE_LONGLONG(0);
  clear_has_freeamounts();
}
inline ::google::protobuf::int64 queryCapitalResponse_result_capital::freeamounts() const {
  return freeamounts_;
}
inline void queryCapitalResponse_result_capital::set_freeamounts(::google::protobuf::int64 value) {
  set_has_freeamounts();
  freeamounts_ = value;
}

// required int64 frozenamount = 6;
inline bool queryCapitalResponse_result_capital::has_frozenamount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void queryCapitalResponse_result_capital::set_has_frozenamount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void queryCapitalResponse_result_capital::clear_has_frozenamount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void queryCapitalResponse_result_capital::clear_frozenamount() {
  frozenamount_ = GOOGLE_LONGLONG(0);
  clear_has_frozenamount();
}
inline ::google::protobuf::int64 queryCapitalResponse_result_capital::frozenamount() const {
  return frozenamount_;
}
inline void queryCapitalResponse_result_capital::set_frozenamount(::google::protobuf::int64 value) {
  set_has_frozenamount();
  frozenamount_ = value;
}

// required int64 margin = 7;
inline bool queryCapitalResponse_result_capital::has_margin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void queryCapitalResponse_result_capital::set_has_margin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void queryCapitalResponse_result_capital::clear_has_margin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void queryCapitalResponse_result_capital::clear_margin() {
  margin_ = GOOGLE_LONGLONG(0);
  clear_has_margin();
}
inline ::google::protobuf::int64 queryCapitalResponse_result_capital::margin() const {
  return margin_;
}
inline void queryCapitalResponse_result_capital::set_margin(::google::protobuf::int64 value) {
  set_has_margin();
  margin_ = value;
}

// required int64 floatingPL = 8;
inline bool queryCapitalResponse_result_capital::has_floatingpl() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void queryCapitalResponse_result_capital::set_has_floatingpl() {
  _has_bits_[0] |= 0x00000080u;
}
inline void queryCapitalResponse_result_capital::clear_has_floatingpl() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void queryCapitalResponse_result_capital::clear_floatingpl() {
  floatingpl_ = GOOGLE_LONGLONG(0);
  clear_has_floatingpl();
}
inline ::google::protobuf::int64 queryCapitalResponse_result_capital::floatingpl() const {
  return floatingpl_;
}
inline void queryCapitalResponse_result_capital::set_floatingpl(::google::protobuf::int64 value) {
  set_has_floatingpl();
  floatingpl_ = value;
}

// required int64 equity = 9;
inline bool queryCapitalResponse_result_capital::has_equity() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void queryCapitalResponse_result_capital::set_has_equity() {
  _has_bits_[0] |= 0x00000100u;
}
inline void queryCapitalResponse_result_capital::clear_has_equity() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void queryCapitalResponse_result_capital::clear_equity() {
  equity_ = GOOGLE_LONGLONG(0);
  clear_has_equity();
}
inline ::google::protobuf::int64 queryCapitalResponse_result_capital::equity() const {
  return equity_;
}
inline void queryCapitalResponse_result_capital::set_equity(::google::protobuf::int64 value) {
  set_has_equity();
  equity_ = value;
}

// required int64 accountid = 10;
inline bool queryCapitalResponse_result_capital::has_accountid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void queryCapitalResponse_result_capital::set_has_accountid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void queryCapitalResponse_result_capital::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void queryCapitalResponse_result_capital::clear_accountid() {
  accountid_ = GOOGLE_LONGLONG(0);
  clear_has_accountid();
}
inline ::google::protobuf::int64 queryCapitalResponse_result_capital::accountid() const {
  return accountid_;
}
inline void queryCapitalResponse_result_capital::set_accountid(::google::protobuf::int64 value) {
  set_has_accountid();
  accountid_ = value;
}

// -------------------------------------------------------------------

// queryCapitalResponse_result

// repeated .HSCommPB.queryCapitalResponse.result.capital capitals = 1;
inline int queryCapitalResponse_result::capitals_size() const {
  return capitals_.size();
}
inline void queryCapitalResponse_result::clear_capitals() {
  capitals_.Clear();
}
inline const ::HSCommPB::queryCapitalResponse_result_capital& queryCapitalResponse_result::capitals(int index) const {
  return capitals_.Get(index);
}
inline ::HSCommPB::queryCapitalResponse_result_capital* queryCapitalResponse_result::mutable_capitals(int index) {
  return capitals_.Mutable(index);
}
inline ::HSCommPB::queryCapitalResponse_result_capital* queryCapitalResponse_result::add_capitals() {
  return capitals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryCapitalResponse_result_capital >&
queryCapitalResponse_result::capitals() const {
  return capitals_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryCapitalResponse_result_capital >*
queryCapitalResponse_result::mutable_capitals() {
  return &capitals_;
}

// optional int32 errorNo = 2 [default = 0];
inline bool queryCapitalResponse_result::has_errorno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void queryCapitalResponse_result::set_has_errorno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void queryCapitalResponse_result::clear_has_errorno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void queryCapitalResponse_result::clear_errorno() {
  errorno_ = 0;
  clear_has_errorno();
}
inline ::google::protobuf::int32 queryCapitalResponse_result::errorno() const {
  return errorno_;
}
inline void queryCapitalResponse_result::set_errorno(::google::protobuf::int32 value) {
  set_has_errorno();
  errorno_ = value;
}

// optional string errorMsg = 3 [default = ""];
inline bool queryCapitalResponse_result::has_errormsg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void queryCapitalResponse_result::set_has_errormsg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void queryCapitalResponse_result::clear_has_errormsg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void queryCapitalResponse_result::clear_errormsg() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    errormsg_->clear();
  }
  clear_has_errormsg();
}
inline const ::std::string& queryCapitalResponse_result::errormsg() const {
  return *errormsg_;
}
inline void queryCapitalResponse_result::set_errormsg(const ::std::string& value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void queryCapitalResponse_result::set_errormsg(const char* value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void queryCapitalResponse_result::set_errormsg(const char* value, size_t size) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryCapitalResponse_result::mutable_errormsg() {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  return errormsg_;
}
inline ::std::string* queryCapitalResponse_result::release_errormsg() {
  clear_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errormsg_;
    errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// queryCapitalResponse

// repeated .HSCommPB.queryCapitalResponse.result responses = 1;
inline int queryCapitalResponse::responses_size() const {
  return responses_.size();
}
inline void queryCapitalResponse::clear_responses() {
  responses_.Clear();
}
inline const ::HSCommPB::queryCapitalResponse_result& queryCapitalResponse::responses(int index) const {
  return responses_.Get(index);
}
inline ::HSCommPB::queryCapitalResponse_result* queryCapitalResponse::mutable_responses(int index) {
  return responses_.Mutable(index);
}
inline ::HSCommPB::queryCapitalResponse_result* queryCapitalResponse::add_responses() {
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryCapitalResponse_result >&
queryCapitalResponse::responses() const {
  return responses_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::queryCapitalResponse_result >*
queryCapitalResponse::mutable_responses() {
  return &responses_;
}

// -------------------------------------------------------------------

// entrustCancelRequest_call

// required string username = 1;
inline bool entrustCancelRequest_call::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void entrustCancelRequest_call::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void entrustCancelRequest_call::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void entrustCancelRequest_call::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& entrustCancelRequest_call::username() const {
  return *username_;
}
inline void entrustCancelRequest_call::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void entrustCancelRequest_call::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void entrustCancelRequest_call::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* entrustCancelRequest_call::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* entrustCancelRequest_call::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string password = 2;
inline bool entrustCancelRequest_call::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void entrustCancelRequest_call::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void entrustCancelRequest_call::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void entrustCancelRequest_call::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& entrustCancelRequest_call::password() const {
  return *password_;
}
inline void entrustCancelRequest_call::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void entrustCancelRequest_call::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void entrustCancelRequest_call::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* entrustCancelRequest_call::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* entrustCancelRequest_call::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int64 OMID = 3;
inline bool entrustCancelRequest_call::has_omid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void entrustCancelRequest_call::set_has_omid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void entrustCancelRequest_call::clear_has_omid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void entrustCancelRequest_call::clear_omid() {
  omid_ = GOOGLE_LONGLONG(0);
  clear_has_omid();
}
inline ::google::protobuf::int64 entrustCancelRequest_call::omid() const {
  return omid_;
}
inline void entrustCancelRequest_call::set_omid(::google::protobuf::int64 value) {
  set_has_omid();
  omid_ = value;
}

// -------------------------------------------------------------------

// entrustCancelRequest

// repeated .HSCommPB.entrustCancelRequest.call requests = 1;
inline int entrustCancelRequest::requests_size() const {
  return requests_.size();
}
inline void entrustCancelRequest::clear_requests() {
  requests_.Clear();
}
inline const ::HSCommPB::entrustCancelRequest_call& entrustCancelRequest::requests(int index) const {
  return requests_.Get(index);
}
inline ::HSCommPB::entrustCancelRequest_call* entrustCancelRequest::mutable_requests(int index) {
  return requests_.Mutable(index);
}
inline ::HSCommPB::entrustCancelRequest_call* entrustCancelRequest::add_requests() {
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::entrustCancelRequest_call >&
entrustCancelRequest::requests() const {
  return requests_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::entrustCancelRequest_call >*
entrustCancelRequest::mutable_requests() {
  return &requests_;
}

// -------------------------------------------------------------------

// entrustCancleResponse_result

// required int64 success = 1;
inline bool entrustCancleResponse_result::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void entrustCancleResponse_result::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void entrustCancleResponse_result::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void entrustCancleResponse_result::clear_success() {
  success_ = GOOGLE_LONGLONG(0);
  clear_has_success();
}
inline ::google::protobuf::int64 entrustCancleResponse_result::success() const {
  return success_;
}
inline void entrustCancleResponse_result::set_success(::google::protobuf::int64 value) {
  set_has_success();
  success_ = value;
}

// required string errormsg = 2;
inline bool entrustCancleResponse_result::has_errormsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void entrustCancleResponse_result::set_has_errormsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void entrustCancleResponse_result::clear_has_errormsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void entrustCancleResponse_result::clear_errormsg() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    errormsg_->clear();
  }
  clear_has_errormsg();
}
inline const ::std::string& entrustCancleResponse_result::errormsg() const {
  return *errormsg_;
}
inline void entrustCancleResponse_result::set_errormsg(const ::std::string& value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void entrustCancleResponse_result::set_errormsg(const char* value) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(value);
}
inline void entrustCancleResponse_result::set_errormsg(const char* value, size_t size) {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  errormsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* entrustCancleResponse_result::mutable_errormsg() {
  set_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    errormsg_ = new ::std::string;
  }
  return errormsg_;
}
inline ::std::string* entrustCancleResponse_result::release_errormsg() {
  clear_has_errormsg();
  if (errormsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errormsg_;
    errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// entrustCancleResponse

// repeated .HSCommPB.entrustCancleResponse.result responses = 1;
inline int entrustCancleResponse::responses_size() const {
  return responses_.size();
}
inline void entrustCancleResponse::clear_responses() {
  responses_.Clear();
}
inline const ::HSCommPB::entrustCancleResponse_result& entrustCancleResponse::responses(int index) const {
  return responses_.Get(index);
}
inline ::HSCommPB::entrustCancleResponse_result* entrustCancleResponse::mutable_responses(int index) {
  return responses_.Mutable(index);
}
inline ::HSCommPB::entrustCancleResponse_result* entrustCancleResponse::add_responses() {
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::HSCommPB::entrustCancleResponse_result >&
entrustCancleResponse::responses() const {
  return responses_;
}
inline ::google::protobuf::RepeatedPtrField< ::HSCommPB::entrustCancleResponse_result >*
entrustCancleResponse::mutable_responses() {
  return &responses_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HSCommPB

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HSCommPB::enums_accountType>() {
  return ::HSCommPB::enums_accountType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HSCommPB::enums_exchangeType>() {
  return ::HSCommPB::enums_exchangeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HSCommPB::enums_moneyType>() {
  return ::HSCommPB::enums_moneyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HSCommPB::enums_squareFlag>() {
  return ::HSCommPB::enums_squareFlag_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HSCommPB::enums_entrustWay>() {
  return ::HSCommPB::enums_entrustWay_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HSCommPB::enums_sysStatus>() {
  return ::HSCommPB::enums_sysStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HSCommPB::enums_entrustBS>() {
  return ::HSCommPB::enums_entrustBS_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HSCommPB::enums_holderStatus>() {
  return ::HSCommPB::enums_holderStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HSCommPB::enums_businessStatus>() {
  return ::HSCommPB::enums_businessStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HSCommPB::enums_businessType>() {
  return ::HSCommPB::enums_businessType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HSComm_2eproto__INCLUDED
