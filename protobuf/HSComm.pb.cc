// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stdafx.h"
#include "HSComm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HSCommPB {

namespace {

const ::google::protobuf::Descriptor* enums_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enums_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* enums_accountType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enums_exchangeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enums_moneyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enums_squareFlag_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enums_entrustWay_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enums_sysStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enums_entrustBS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enums_holderStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enums_businessStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enums_businessType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* clientCheckRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  clientCheckRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* clientCheckRequest_call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  clientCheckRequest_call_reflection_ = NULL;
const ::google::protobuf::Descriptor* clientCheckResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  clientCheckResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* clientCheckResponse_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  clientCheckResponse_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* entrustStockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  entrustStockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* entrustStockRequest_call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  entrustStockRequest_call_reflection_ = NULL;
const ::google::protobuf::Descriptor* entrustStockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  entrustStockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* entrustStockResponse_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  entrustStockResponse_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* cancelEntrustRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cancelEntrustRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* cancelEntrustRequest_call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cancelEntrustRequest_call_reflection_ = NULL;
const ::google::protobuf::Descriptor* cancelEntrustResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cancelEntrustResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* cancelEntrustResponse_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  cancelEntrustResponse_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryEntrustRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryEntrustRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryEntrustRequest_call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryEntrustRequest_call_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryEntrustResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryEntrustResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryEntrustResponse_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryEntrustResponse_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryEntrustResponse_result_entrust_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryEntrustResponse_result_entrust_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryStockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryStockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryStockRequest_call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryStockRequest_call_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryStockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryStockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryStockResponse_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryStockResponse_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryStockResponse_result_stock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryStockResponse_result_stock_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryFundRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryFundRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryFundRequest_call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryFundRequest_call_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryFundResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryFundResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryFundResponse_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryFundResponse_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryFundResponse_result_currency_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryFundResponse_result_currency_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryShareholderRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryShareholderRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryShareholderRequest_call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryShareholderRequest_call_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryShareholderResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryShareholderResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryShareholderResponse_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryShareholderResponse_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryShareholderResponse_result_shareholder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryShareholderResponse_result_shareholder_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryBusinessRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryBusinessRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryBusinessRequest_call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryBusinessRequest_call_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryBusinessResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryBusinessResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryBusinessResponse_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryBusinessResponse_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryBusinessResponse_result_business_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryBusinessResponse_result_business_reflection_ = NULL;
const ::google::protobuf::Descriptor* getEntrustByLocalIDRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getEntrustByLocalIDRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* getEntrustByLocalIDRequest_call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getEntrustByLocalIDRequest_call_reflection_ = NULL;
const ::google::protobuf::Descriptor* getEntrustByLocalIDResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getEntrustByLocalIDResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* getEntrustByLocalIDResponse_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  getEntrustByLocalIDResponse_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryOrdersRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryOrdersRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryOrdersRequest_call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryOrdersRequest_call_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryOrdersResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryOrdersResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryOrdersResponse_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryOrdersResponse_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryOrdersResponse_result_query_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryOrdersResponse_result_query_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryCapitalRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryCapitalRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryCapitalRequest_call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryCapitalRequest_call_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryCapitalResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryCapitalResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryCapitalResponse_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryCapitalResponse_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* queryCapitalResponse_result_capital_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  queryCapitalResponse_result_capital_reflection_ = NULL;
const ::google::protobuf::Descriptor* entrustCancelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  entrustCancelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* entrustCancelRequest_call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  entrustCancelRequest_call_reflection_ = NULL;
const ::google::protobuf::Descriptor* entrustCancleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  entrustCancleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* entrustCancleResponse_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  entrustCancleResponse_result_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_HSComm_2eproto() {
  protobuf_AddDesc_HSComm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "HSComm.proto");
  GOOGLE_CHECK(file != NULL);
  enums_descriptor_ = file->message_type(0);
  static const int enums_offsets_[1] = {
  };
  enums_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enums_descriptor_,
      enums::default_instance_,
      enums_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enums, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enums, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enums));
  enums_accountType_descriptor_ = enums_descriptor_->enum_type(0);
  enums_exchangeType_descriptor_ = enums_descriptor_->enum_type(1);
  enums_moneyType_descriptor_ = enums_descriptor_->enum_type(2);
  enums_squareFlag_descriptor_ = enums_descriptor_->enum_type(3);
  enums_entrustWay_descriptor_ = enums_descriptor_->enum_type(4);
  enums_sysStatus_descriptor_ = enums_descriptor_->enum_type(5);
  enums_entrustBS_descriptor_ = enums_descriptor_->enum_type(6);
  enums_holderStatus_descriptor_ = enums_descriptor_->enum_type(7);
  enums_businessStatus_descriptor_ = enums_descriptor_->enum_type(8);
  enums_businessType_descriptor_ = enums_descriptor_->enum_type(9);
  clientCheckRequest_descriptor_ = file->message_type(1);
  static const int clientCheckRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckRequest, requests_),
  };
  clientCheckRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      clientCheckRequest_descriptor_,
      clientCheckRequest::default_instance_,
      clientCheckRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(clientCheckRequest));
  clientCheckRequest_call_descriptor_ = clientCheckRequest_descriptor_->nested_type(0);
  static const int clientCheckRequest_call_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckRequest_call, accounttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckRequest_call, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckRequest_call, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckRequest_call, exchangetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckRequest_call, bankno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckRequest_call, entrustway_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckRequest_call, branchno_),
  };
  clientCheckRequest_call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      clientCheckRequest_call_descriptor_,
      clientCheckRequest_call::default_instance_,
      clientCheckRequest_call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckRequest_call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckRequest_call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(clientCheckRequest_call));
  clientCheckResponse_descriptor_ = file->message_type(2);
  static const int clientCheckResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse, responses_),
  };
  clientCheckResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      clientCheckResponse_descriptor_,
      clientCheckResponse::default_instance_,
      clientCheckResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(clientCheckResponse));
  clientCheckResponse_result_descriptor_ = clientCheckResponse_descriptor_->nested_type(0);
  static const int clientCheckResponse_result_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse_result, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse_result, clientname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse_result, branchno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse_result, enablebalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse_result, currentbalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse_result, fundaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse_result, fundaccountcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse_result, sysstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse_result, sysstatusname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse_result, moneycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse_result, squareflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse_result, clientrights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse_result, companyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse_result, errorno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse_result, errormsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse_result, currentdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse_result, lastip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse_result, lastlogintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse_result, bankno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse_result, remark_),
  };
  clientCheckResponse_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      clientCheckResponse_result_descriptor_,
      clientCheckResponse_result::default_instance_,
      clientCheckResponse_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(clientCheckResponse_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(clientCheckResponse_result));
  entrustStockRequest_descriptor_ = file->message_type(3);
  static const int entrustStockRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockRequest, requests_),
  };
  entrustStockRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      entrustStockRequest_descriptor_,
      entrustStockRequest::default_instance_,
      entrustStockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(entrustStockRequest));
  entrustStockRequest_call_descriptor_ = entrustStockRequest_descriptor_->nested_type(0);
  static const int entrustStockRequest_call_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockRequest_call, localid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockRequest_call, branchno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockRequest_call, fundaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockRequest_call, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockRequest_call, exchangetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockRequest_call, stockaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockRequest_call, stockcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockRequest_call, entrustamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockRequest_call, entrustprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockRequest_call, entrustbs_),
  };
  entrustStockRequest_call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      entrustStockRequest_call_descriptor_,
      entrustStockRequest_call::default_instance_,
      entrustStockRequest_call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockRequest_call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockRequest_call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(entrustStockRequest_call));
  entrustStockResponse_descriptor_ = file->message_type(4);
  static const int entrustStockResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockResponse, responses_),
  };
  entrustStockResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      entrustStockResponse_descriptor_,
      entrustStockResponse::default_instance_,
      entrustStockResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(entrustStockResponse));
  entrustStockResponse_result_descriptor_ = entrustStockResponse_descriptor_->nested_type(0);
  static const int entrustStockResponse_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockResponse_result, localid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockResponse_result, entrustno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockResponse_result, errorno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockResponse_result, errormsg_),
  };
  entrustStockResponse_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      entrustStockResponse_result_descriptor_,
      entrustStockResponse_result::default_instance_,
      entrustStockResponse_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockResponse_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustStockResponse_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(entrustStockResponse_result));
  cancelEntrustRequest_descriptor_ = file->message_type(5);
  static const int cancelEntrustRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancelEntrustRequest, requests_),
  };
  cancelEntrustRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cancelEntrustRequest_descriptor_,
      cancelEntrustRequest::default_instance_,
      cancelEntrustRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancelEntrustRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancelEntrustRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cancelEntrustRequest));
  cancelEntrustRequest_call_descriptor_ = cancelEntrustRequest_descriptor_->nested_type(0);
  static const int cancelEntrustRequest_call_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancelEntrustRequest_call, branchno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancelEntrustRequest_call, fundaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancelEntrustRequest_call, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancelEntrustRequest_call, entrustno_),
  };
  cancelEntrustRequest_call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cancelEntrustRequest_call_descriptor_,
      cancelEntrustRequest_call::default_instance_,
      cancelEntrustRequest_call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancelEntrustRequest_call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancelEntrustRequest_call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cancelEntrustRequest_call));
  cancelEntrustResponse_descriptor_ = file->message_type(6);
  static const int cancelEntrustResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancelEntrustResponse, responses_),
  };
  cancelEntrustResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cancelEntrustResponse_descriptor_,
      cancelEntrustResponse::default_instance_,
      cancelEntrustResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancelEntrustResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancelEntrustResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cancelEntrustResponse));
  cancelEntrustResponse_result_descriptor_ = cancelEntrustResponse_descriptor_->nested_type(0);
  static const int cancelEntrustResponse_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancelEntrustResponse_result, entrustno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancelEntrustResponse_result, errorno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancelEntrustResponse_result, errormsg_),
  };
  cancelEntrustResponse_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      cancelEntrustResponse_result_descriptor_,
      cancelEntrustResponse_result::default_instance_,
      cancelEntrustResponse_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancelEntrustResponse_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(cancelEntrustResponse_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(cancelEntrustResponse_result));
  queryEntrustRequest_descriptor_ = file->message_type(7);
  static const int queryEntrustRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustRequest, requests_),
  };
  queryEntrustRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryEntrustRequest_descriptor_,
      queryEntrustRequest::default_instance_,
      queryEntrustRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryEntrustRequest));
  queryEntrustRequest_call_descriptor_ = queryEntrustRequest_descriptor_->nested_type(0);
  static const int queryEntrustRequest_call_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustRequest_call, branchno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustRequest_call, fundaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustRequest_call, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustRequest_call, entrustno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustRequest_call, queryonlycancelable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustRequest_call, requestnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustRequest_call, lastpositionstring_),
  };
  queryEntrustRequest_call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryEntrustRequest_call_descriptor_,
      queryEntrustRequest_call::default_instance_,
      queryEntrustRequest_call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustRequest_call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustRequest_call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryEntrustRequest_call));
  queryEntrustResponse_descriptor_ = file->message_type(8);
  static const int queryEntrustResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse, responses_),
  };
  queryEntrustResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryEntrustResponse_descriptor_,
      queryEntrustResponse::default_instance_,
      queryEntrustResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryEntrustResponse));
  queryEntrustResponse_result_descriptor_ = queryEntrustResponse_descriptor_->nested_type(0);
  static const int queryEntrustResponse_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse_result, entrusts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse_result, lastpositionstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse_result, errorno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse_result, errormsg_),
  };
  queryEntrustResponse_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryEntrustResponse_result_descriptor_,
      queryEntrustResponse_result::default_instance_,
      queryEntrustResponse_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryEntrustResponse_result));
  queryEntrustResponse_result_entrust_descriptor_ = queryEntrustResponse_result_descriptor_->nested_type(0);
  static const int queryEntrustResponse_result_entrust_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse_result_entrust, entrustno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse_result_entrust, stockcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse_result_entrust, stockname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse_result_entrust, entrustbs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse_result_entrust, entrustamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse_result_entrust, entrustprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse_result_entrust, businessamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse_result_entrust, businessprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse_result_entrust, cancelvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse_result_entrust, internalsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse_result_entrust, feeandtax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse_result_entrust, tradedone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse_result_entrust, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse_result_entrust, invalidinfo_),
  };
  queryEntrustResponse_result_entrust_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryEntrustResponse_result_entrust_descriptor_,
      queryEntrustResponse_result_entrust::default_instance_,
      queryEntrustResponse_result_entrust_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse_result_entrust, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryEntrustResponse_result_entrust, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryEntrustResponse_result_entrust));
  queryStockRequest_descriptor_ = file->message_type(9);
  static const int queryStockRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockRequest, requests_),
  };
  queryStockRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryStockRequest_descriptor_,
      queryStockRequest::default_instance_,
      queryStockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryStockRequest));
  queryStockRequest_call_descriptor_ = queryStockRequest_descriptor_->nested_type(0);
  static const int queryStockRequest_call_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockRequest_call, branchno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockRequest_call, fundaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockRequest_call, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockRequest_call, exchangetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockRequest_call, stockcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockRequest_call, requestnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockRequest_call, lastpositionstring_),
  };
  queryStockRequest_call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryStockRequest_call_descriptor_,
      queryStockRequest_call::default_instance_,
      queryStockRequest_call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockRequest_call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockRequest_call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryStockRequest_call));
  queryStockResponse_descriptor_ = file->message_type(10);
  static const int queryStockResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse, responses_),
  };
  queryStockResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryStockResponse_descriptor_,
      queryStockResponse::default_instance_,
      queryStockResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryStockResponse));
  queryStockResponse_result_descriptor_ = queryStockResponse_descriptor_->nested_type(0);
  static const int queryStockResponse_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result, stocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result, lastpositionstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result, errorno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result, errormsg_),
  };
  queryStockResponse_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryStockResponse_result_descriptor_,
      queryStockResponse_result::default_instance_,
      queryStockResponse_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryStockResponse_result));
  queryStockResponse_result_stock_descriptor_ = queryStockResponse_result_descriptor_->nested_type(0);
  static const int queryStockResponse_result_stock_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, exchangetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, stockaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, stockcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, stockname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, currentamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, enableamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, lastprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, costprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, incomebalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, marketvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, sumbuyamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, sumbuybalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, realbuyamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, realbuybalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, sumsellamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, sumsellbalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, realsellamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, realsellbalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, correctamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, incomebalancenofare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, uncomebuyamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, uncomesellamount_),
  };
  queryStockResponse_result_stock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryStockResponse_result_stock_descriptor_,
      queryStockResponse_result_stock::default_instance_,
      queryStockResponse_result_stock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryStockResponse_result_stock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryStockResponse_result_stock));
  queryFundRequest_descriptor_ = file->message_type(11);
  static const int queryFundRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundRequest, requests_),
  };
  queryFundRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryFundRequest_descriptor_,
      queryFundRequest::default_instance_,
      queryFundRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryFundRequest));
  queryFundRequest_call_descriptor_ = queryFundRequest_descriptor_->nested_type(0);
  static const int queryFundRequest_call_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundRequest_call, branchno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundRequest_call, fundaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundRequest_call, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundRequest_call, moneytype_),
  };
  queryFundRequest_call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryFundRequest_call_descriptor_,
      queryFundRequest_call::default_instance_,
      queryFundRequest_call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundRequest_call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundRequest_call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryFundRequest_call));
  queryFundResponse_descriptor_ = file->message_type(12);
  static const int queryFundResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundResponse, responses_),
  };
  queryFundResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryFundResponse_descriptor_,
      queryFundResponse::default_instance_,
      queryFundResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryFundResponse));
  queryFundResponse_result_descriptor_ = queryFundResponse_descriptor_->nested_type(0);
  static const int queryFundResponse_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundResponse_result, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundResponse_result, errorno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundResponse_result, errormsg_),
  };
  queryFundResponse_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryFundResponse_result_descriptor_,
      queryFundResponse_result::default_instance_,
      queryFundResponse_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundResponse_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundResponse_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryFundResponse_result));
  queryFundResponse_result_currency_descriptor_ = queryFundResponse_result_descriptor_->nested_type(0);
  static const int queryFundResponse_result_currency_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundResponse_result_currency, moneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundResponse_result_currency, currentbalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundResponse_result_currency, enablebalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundResponse_result_currency, fetchbalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundResponse_result_currency, interest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundResponse_result_currency, assetbalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundResponse_result_currency, fetchcash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundResponse_result_currency, fundbalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundResponse_result_currency, marketvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundResponse_result_currency, opfundmarketvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundResponse_result_currency, preinterest_),
  };
  queryFundResponse_result_currency_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryFundResponse_result_currency_descriptor_,
      queryFundResponse_result_currency::default_instance_,
      queryFundResponse_result_currency_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundResponse_result_currency, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryFundResponse_result_currency, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryFundResponse_result_currency));
  queryShareholderRequest_descriptor_ = file->message_type(13);
  static const int queryShareholderRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderRequest, requests_),
  };
  queryShareholderRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryShareholderRequest_descriptor_,
      queryShareholderRequest::default_instance_,
      queryShareholderRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryShareholderRequest));
  queryShareholderRequest_call_descriptor_ = queryShareholderRequest_descriptor_->nested_type(0);
  static const int queryShareholderRequest_call_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderRequest_call, branchno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderRequest_call, fundaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderRequest_call, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderRequest_call, exchangetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderRequest_call, stockcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderRequest_call, requestnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderRequest_call, lastpositionstring_),
  };
  queryShareholderRequest_call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryShareholderRequest_call_descriptor_,
      queryShareholderRequest_call::default_instance_,
      queryShareholderRequest_call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderRequest_call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderRequest_call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryShareholderRequest_call));
  queryShareholderResponse_descriptor_ = file->message_type(14);
  static const int queryShareholderResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderResponse, responses_),
  };
  queryShareholderResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryShareholderResponse_descriptor_,
      queryShareholderResponse::default_instance_,
      queryShareholderResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryShareholderResponse));
  queryShareholderResponse_result_descriptor_ = queryShareholderResponse_descriptor_->nested_type(0);
  static const int queryShareholderResponse_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderResponse_result, shareholders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderResponse_result, lastpositionstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderResponse_result, errorno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderResponse_result, errormsg_),
  };
  queryShareholderResponse_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryShareholderResponse_result_descriptor_,
      queryShareholderResponse_result::default_instance_,
      queryShareholderResponse_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderResponse_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderResponse_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryShareholderResponse_result));
  queryShareholderResponse_result_shareholder_descriptor_ = queryShareholderResponse_result_descriptor_->nested_type(0);
  static const int queryShareholderResponse_result_shareholder_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderResponse_result_shareholder, exchangetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderResponse_result_shareholder, exchangename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderResponse_result_shareholder, stockaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderResponse_result_shareholder, holderstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderResponse_result_shareholder, mainshareholder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderResponse_result_shareholder, seatno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderResponse_result_shareholder, enableamount_),
  };
  queryShareholderResponse_result_shareholder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryShareholderResponse_result_shareholder_descriptor_,
      queryShareholderResponse_result_shareholder::default_instance_,
      queryShareholderResponse_result_shareholder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderResponse_result_shareholder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryShareholderResponse_result_shareholder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryShareholderResponse_result_shareholder));
  queryBusinessRequest_descriptor_ = file->message_type(15);
  static const int queryBusinessRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessRequest, requests_),
  };
  queryBusinessRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryBusinessRequest_descriptor_,
      queryBusinessRequest::default_instance_,
      queryBusinessRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryBusinessRequest));
  queryBusinessRequest_call_descriptor_ = queryBusinessRequest_descriptor_->nested_type(0);
  static const int queryBusinessRequest_call_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessRequest_call, branchno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessRequest_call, fundaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessRequest_call, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessRequest_call, startdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessRequest_call, enddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessRequest_call, exchangetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessRequest_call, stockcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessRequest_call, requestnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessRequest_call, lastpositionstring_),
  };
  queryBusinessRequest_call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryBusinessRequest_call_descriptor_,
      queryBusinessRequest_call::default_instance_,
      queryBusinessRequest_call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessRequest_call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessRequest_call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryBusinessRequest_call));
  queryBusinessResponse_descriptor_ = file->message_type(16);
  static const int queryBusinessResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse, responses_),
  };
  queryBusinessResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryBusinessResponse_descriptor_,
      queryBusinessResponse::default_instance_,
      queryBusinessResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryBusinessResponse));
  queryBusinessResponse_result_descriptor_ = queryBusinessResponse_descriptor_->nested_type(0);
  static const int queryBusinessResponse_result_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result, businesses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result, lastpositionstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result, errorno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result, errormsg_),
  };
  queryBusinessResponse_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryBusinessResponse_result_descriptor_,
      queryBusinessResponse_result::default_instance_,
      queryBusinessResponse_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryBusinessResponse_result));
  queryBusinessResponse_result_business_descriptor_ = queryBusinessResponse_result_descriptor_->nested_type(0);
  static const int queryBusinessResponse_result_business_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result_business, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result_business, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result_business, exchangetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result_business, stockaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result_business, stockcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result_business, stockname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result_business, entrustbs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result_business, businessamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result_business, businessprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result_business, businessbalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result_business, businesstimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result_business, businessstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result_business, businesstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result_business, entrustno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result_business, reportno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result_business, remark_),
  };
  queryBusinessResponse_result_business_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryBusinessResponse_result_business_descriptor_,
      queryBusinessResponse_result_business::default_instance_,
      queryBusinessResponse_result_business_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result_business, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryBusinessResponse_result_business, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryBusinessResponse_result_business));
  getEntrustByLocalIDRequest_descriptor_ = file->message_type(17);
  static const int getEntrustByLocalIDRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getEntrustByLocalIDRequest, requests_),
  };
  getEntrustByLocalIDRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      getEntrustByLocalIDRequest_descriptor_,
      getEntrustByLocalIDRequest::default_instance_,
      getEntrustByLocalIDRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getEntrustByLocalIDRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getEntrustByLocalIDRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(getEntrustByLocalIDRequest));
  getEntrustByLocalIDRequest_call_descriptor_ = getEntrustByLocalIDRequest_descriptor_->nested_type(0);
  static const int getEntrustByLocalIDRequest_call_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getEntrustByLocalIDRequest_call, localid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getEntrustByLocalIDRequest_call, fundaccount_),
  };
  getEntrustByLocalIDRequest_call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      getEntrustByLocalIDRequest_call_descriptor_,
      getEntrustByLocalIDRequest_call::default_instance_,
      getEntrustByLocalIDRequest_call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getEntrustByLocalIDRequest_call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getEntrustByLocalIDRequest_call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(getEntrustByLocalIDRequest_call));
  getEntrustByLocalIDResponse_descriptor_ = file->message_type(18);
  static const int getEntrustByLocalIDResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getEntrustByLocalIDResponse, responses_),
  };
  getEntrustByLocalIDResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      getEntrustByLocalIDResponse_descriptor_,
      getEntrustByLocalIDResponse::default_instance_,
      getEntrustByLocalIDResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getEntrustByLocalIDResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getEntrustByLocalIDResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(getEntrustByLocalIDResponse));
  getEntrustByLocalIDResponse_result_descriptor_ = getEntrustByLocalIDResponse_descriptor_->nested_type(0);
  static const int getEntrustByLocalIDResponse_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getEntrustByLocalIDResponse_result, localid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getEntrustByLocalIDResponse_result, fundaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getEntrustByLocalIDResponse_result, entrustno_),
  };
  getEntrustByLocalIDResponse_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      getEntrustByLocalIDResponse_result_descriptor_,
      getEntrustByLocalIDResponse_result::default_instance_,
      getEntrustByLocalIDResponse_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getEntrustByLocalIDResponse_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(getEntrustByLocalIDResponse_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(getEntrustByLocalIDResponse_result));
  queryOrdersRequest_descriptor_ = file->message_type(19);
  static const int queryOrdersRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersRequest, requests_),
  };
  queryOrdersRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryOrdersRequest_descriptor_,
      queryOrdersRequest::default_instance_,
      queryOrdersRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryOrdersRequest));
  queryOrdersRequest_call_descriptor_ = queryOrdersRequest_descriptor_->nested_type(0);
  static const int queryOrdersRequest_call_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersRequest_call, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersRequest_call, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersRequest_call, date_),
  };
  queryOrdersRequest_call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryOrdersRequest_call_descriptor_,
      queryOrdersRequest_call::default_instance_,
      queryOrdersRequest_call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersRequest_call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersRequest_call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryOrdersRequest_call));
  queryOrdersResponse_descriptor_ = file->message_type(20);
  static const int queryOrdersResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersResponse, responses_),
  };
  queryOrdersResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryOrdersResponse_descriptor_,
      queryOrdersResponse::default_instance_,
      queryOrdersResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryOrdersResponse));
  queryOrdersResponse_result_descriptor_ = queryOrdersResponse_descriptor_->nested_type(0);
  static const int queryOrdersResponse_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersResponse_result, queries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersResponse_result, errorno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersResponse_result, errormsg_),
  };
  queryOrdersResponse_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryOrdersResponse_result_descriptor_,
      queryOrdersResponse_result::default_instance_,
      queryOrdersResponse_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersResponse_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersResponse_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryOrdersResponse_result));
  queryOrdersResponse_result_query_descriptor_ = queryOrdersResponse_result_descriptor_->nested_type(0);
  static const int queryOrdersResponse_result_query_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersResponse_result_query, returndate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersResponse_result_query, secuname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersResponse_result_query, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersResponse_result_query, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersResponse_result_query, ordervol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersResponse_result_query, orderprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersResponse_result_query, averageprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersResponse_result_query, tradevol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersResponse_result_query, cancelvol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersResponse_result_query, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersResponse_result_query, adddatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersResponse_result_query, acid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersResponse_result_query, oid_),
  };
  queryOrdersResponse_result_query_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryOrdersResponse_result_query_descriptor_,
      queryOrdersResponse_result_query::default_instance_,
      queryOrdersResponse_result_query_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersResponse_result_query, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryOrdersResponse_result_query, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryOrdersResponse_result_query));
  queryCapitalRequest_descriptor_ = file->message_type(21);
  static const int queryCapitalRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalRequest, requests_),
  };
  queryCapitalRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryCapitalRequest_descriptor_,
      queryCapitalRequest::default_instance_,
      queryCapitalRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryCapitalRequest));
  queryCapitalRequest_call_descriptor_ = queryCapitalRequest_descriptor_->nested_type(0);
  static const int queryCapitalRequest_call_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalRequest_call, accountid_),
  };
  queryCapitalRequest_call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryCapitalRequest_call_descriptor_,
      queryCapitalRequest_call::default_instance_,
      queryCapitalRequest_call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalRequest_call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalRequest_call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryCapitalRequest_call));
  queryCapitalResponse_descriptor_ = file->message_type(22);
  static const int queryCapitalResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalResponse, responses_),
  };
  queryCapitalResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryCapitalResponse_descriptor_,
      queryCapitalResponse::default_instance_,
      queryCapitalResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryCapitalResponse));
  queryCapitalResponse_result_descriptor_ = queryCapitalResponse_descriptor_->nested_type(0);
  static const int queryCapitalResponse_result_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalResponse_result, capitals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalResponse_result, errorno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalResponse_result, errormsg_),
  };
  queryCapitalResponse_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryCapitalResponse_result_descriptor_,
      queryCapitalResponse_result::default_instance_,
      queryCapitalResponse_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalResponse_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalResponse_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryCapitalResponse_result));
  queryCapitalResponse_result_capital_descriptor_ = queryCapitalResponse_result_descriptor_->nested_type(0);
  static const int queryCapitalResponse_result_capital_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalResponse_result_capital, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalResponse_result_capital, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalResponse_result_capital, currencytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalResponse_result_capital, amounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalResponse_result_capital, freeamounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalResponse_result_capital, frozenamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalResponse_result_capital, margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalResponse_result_capital, floatingpl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalResponse_result_capital, equity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalResponse_result_capital, accountid_),
  };
  queryCapitalResponse_result_capital_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      queryCapitalResponse_result_capital_descriptor_,
      queryCapitalResponse_result_capital::default_instance_,
      queryCapitalResponse_result_capital_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalResponse_result_capital, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(queryCapitalResponse_result_capital, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(queryCapitalResponse_result_capital));
  entrustCancelRequest_descriptor_ = file->message_type(23);
  static const int entrustCancelRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustCancelRequest, requests_),
  };
  entrustCancelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      entrustCancelRequest_descriptor_,
      entrustCancelRequest::default_instance_,
      entrustCancelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustCancelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustCancelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(entrustCancelRequest));
  entrustCancelRequest_call_descriptor_ = entrustCancelRequest_descriptor_->nested_type(0);
  static const int entrustCancelRequest_call_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustCancelRequest_call, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustCancelRequest_call, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustCancelRequest_call, omid_),
  };
  entrustCancelRequest_call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      entrustCancelRequest_call_descriptor_,
      entrustCancelRequest_call::default_instance_,
      entrustCancelRequest_call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustCancelRequest_call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustCancelRequest_call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(entrustCancelRequest_call));
  entrustCancleResponse_descriptor_ = file->message_type(24);
  static const int entrustCancleResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustCancleResponse, responses_),
  };
  entrustCancleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      entrustCancleResponse_descriptor_,
      entrustCancleResponse::default_instance_,
      entrustCancleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustCancleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustCancleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(entrustCancleResponse));
  entrustCancleResponse_result_descriptor_ = entrustCancleResponse_descriptor_->nested_type(0);
  static const int entrustCancleResponse_result_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustCancleResponse_result, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustCancleResponse_result, errormsg_),
  };
  entrustCancleResponse_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      entrustCancleResponse_result_descriptor_,
      entrustCancleResponse_result::default_instance_,
      entrustCancleResponse_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustCancleResponse_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(entrustCancleResponse_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(entrustCancleResponse_result));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_HSComm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enums_descriptor_, &enums::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    clientCheckRequest_descriptor_, &clientCheckRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    clientCheckRequest_call_descriptor_, &clientCheckRequest_call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    clientCheckResponse_descriptor_, &clientCheckResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    clientCheckResponse_result_descriptor_, &clientCheckResponse_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    entrustStockRequest_descriptor_, &entrustStockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    entrustStockRequest_call_descriptor_, &entrustStockRequest_call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    entrustStockResponse_descriptor_, &entrustStockResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    entrustStockResponse_result_descriptor_, &entrustStockResponse_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cancelEntrustRequest_descriptor_, &cancelEntrustRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cancelEntrustRequest_call_descriptor_, &cancelEntrustRequest_call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cancelEntrustResponse_descriptor_, &cancelEntrustResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    cancelEntrustResponse_result_descriptor_, &cancelEntrustResponse_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryEntrustRequest_descriptor_, &queryEntrustRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryEntrustRequest_call_descriptor_, &queryEntrustRequest_call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryEntrustResponse_descriptor_, &queryEntrustResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryEntrustResponse_result_descriptor_, &queryEntrustResponse_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryEntrustResponse_result_entrust_descriptor_, &queryEntrustResponse_result_entrust::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryStockRequest_descriptor_, &queryStockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryStockRequest_call_descriptor_, &queryStockRequest_call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryStockResponse_descriptor_, &queryStockResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryStockResponse_result_descriptor_, &queryStockResponse_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryStockResponse_result_stock_descriptor_, &queryStockResponse_result_stock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryFundRequest_descriptor_, &queryFundRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryFundRequest_call_descriptor_, &queryFundRequest_call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryFundResponse_descriptor_, &queryFundResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryFundResponse_result_descriptor_, &queryFundResponse_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryFundResponse_result_currency_descriptor_, &queryFundResponse_result_currency::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryShareholderRequest_descriptor_, &queryShareholderRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryShareholderRequest_call_descriptor_, &queryShareholderRequest_call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryShareholderResponse_descriptor_, &queryShareholderResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryShareholderResponse_result_descriptor_, &queryShareholderResponse_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryShareholderResponse_result_shareholder_descriptor_, &queryShareholderResponse_result_shareholder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryBusinessRequest_descriptor_, &queryBusinessRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryBusinessRequest_call_descriptor_, &queryBusinessRequest_call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryBusinessResponse_descriptor_, &queryBusinessResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryBusinessResponse_result_descriptor_, &queryBusinessResponse_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryBusinessResponse_result_business_descriptor_, &queryBusinessResponse_result_business::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    getEntrustByLocalIDRequest_descriptor_, &getEntrustByLocalIDRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    getEntrustByLocalIDRequest_call_descriptor_, &getEntrustByLocalIDRequest_call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    getEntrustByLocalIDResponse_descriptor_, &getEntrustByLocalIDResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    getEntrustByLocalIDResponse_result_descriptor_, &getEntrustByLocalIDResponse_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryOrdersRequest_descriptor_, &queryOrdersRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryOrdersRequest_call_descriptor_, &queryOrdersRequest_call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryOrdersResponse_descriptor_, &queryOrdersResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryOrdersResponse_result_descriptor_, &queryOrdersResponse_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryOrdersResponse_result_query_descriptor_, &queryOrdersResponse_result_query::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryCapitalRequest_descriptor_, &queryCapitalRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryCapitalRequest_call_descriptor_, &queryCapitalRequest_call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryCapitalResponse_descriptor_, &queryCapitalResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryCapitalResponse_result_descriptor_, &queryCapitalResponse_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    queryCapitalResponse_result_capital_descriptor_, &queryCapitalResponse_result_capital::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    entrustCancelRequest_descriptor_, &entrustCancelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    entrustCancelRequest_call_descriptor_, &entrustCancelRequest_call::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    entrustCancleResponse_descriptor_, &entrustCancleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    entrustCancleResponse_result_descriptor_, &entrustCancleResponse_result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_HSComm_2eproto() {
  delete enums::default_instance_;
  delete enums_reflection_;
  delete clientCheckRequest::default_instance_;
  delete clientCheckRequest_reflection_;
  delete clientCheckRequest_call::default_instance_;
  delete clientCheckRequest_call_reflection_;
  delete clientCheckResponse::default_instance_;
  delete clientCheckResponse_reflection_;
  delete clientCheckResponse_result::default_instance_;
  delete clientCheckResponse_result_reflection_;
  delete entrustStockRequest::default_instance_;
  delete entrustStockRequest_reflection_;
  delete entrustStockRequest_call::default_instance_;
  delete entrustStockRequest_call_reflection_;
  delete entrustStockResponse::default_instance_;
  delete entrustStockResponse_reflection_;
  delete entrustStockResponse_result::default_instance_;
  delete entrustStockResponse_result_reflection_;
  delete cancelEntrustRequest::default_instance_;
  delete cancelEntrustRequest_reflection_;
  delete cancelEntrustRequest_call::default_instance_;
  delete cancelEntrustRequest_call_reflection_;
  delete cancelEntrustResponse::default_instance_;
  delete cancelEntrustResponse_reflection_;
  delete cancelEntrustResponse_result::default_instance_;
  delete cancelEntrustResponse_result_reflection_;
  delete queryEntrustRequest::default_instance_;
  delete queryEntrustRequest_reflection_;
  delete queryEntrustRequest_call::default_instance_;
  delete queryEntrustRequest_call_reflection_;
  delete queryEntrustResponse::default_instance_;
  delete queryEntrustResponse_reflection_;
  delete queryEntrustResponse_result::default_instance_;
  delete queryEntrustResponse_result_reflection_;
  delete queryEntrustResponse_result_entrust::default_instance_;
  delete queryEntrustResponse_result_entrust_reflection_;
  delete queryStockRequest::default_instance_;
  delete queryStockRequest_reflection_;
  delete queryStockRequest_call::default_instance_;
  delete queryStockRequest_call_reflection_;
  delete queryStockResponse::default_instance_;
  delete queryStockResponse_reflection_;
  delete queryStockResponse_result::default_instance_;
  delete queryStockResponse_result_reflection_;
  delete queryStockResponse_result_stock::default_instance_;
  delete queryStockResponse_result_stock_reflection_;
  delete queryFundRequest::default_instance_;
  delete queryFundRequest_reflection_;
  delete queryFundRequest_call::default_instance_;
  delete queryFundRequest_call_reflection_;
  delete queryFundResponse::default_instance_;
  delete queryFundResponse_reflection_;
  delete queryFundResponse_result::default_instance_;
  delete queryFundResponse_result_reflection_;
  delete queryFundResponse_result_currency::default_instance_;
  delete queryFundResponse_result_currency_reflection_;
  delete queryShareholderRequest::default_instance_;
  delete queryShareholderRequest_reflection_;
  delete queryShareholderRequest_call::default_instance_;
  delete queryShareholderRequest_call_reflection_;
  delete queryShareholderResponse::default_instance_;
  delete queryShareholderResponse_reflection_;
  delete queryShareholderResponse_result::default_instance_;
  delete queryShareholderResponse_result_reflection_;
  delete queryShareholderResponse_result_shareholder::default_instance_;
  delete queryShareholderResponse_result_shareholder_reflection_;
  delete queryBusinessRequest::default_instance_;
  delete queryBusinessRequest_reflection_;
  delete queryBusinessRequest_call::default_instance_;
  delete queryBusinessRequest_call_reflection_;
  delete queryBusinessResponse::default_instance_;
  delete queryBusinessResponse_reflection_;
  delete queryBusinessResponse_result::default_instance_;
  delete queryBusinessResponse_result_reflection_;
  delete queryBusinessResponse_result_business::default_instance_;
  delete queryBusinessResponse_result_business_reflection_;
  delete getEntrustByLocalIDRequest::default_instance_;
  delete getEntrustByLocalIDRequest_reflection_;
  delete getEntrustByLocalIDRequest_call::default_instance_;
  delete getEntrustByLocalIDRequest_call_reflection_;
  delete getEntrustByLocalIDResponse::default_instance_;
  delete getEntrustByLocalIDResponse_reflection_;
  delete getEntrustByLocalIDResponse_result::default_instance_;
  delete getEntrustByLocalIDResponse_result_reflection_;
  delete queryOrdersRequest::default_instance_;
  delete queryOrdersRequest_reflection_;
  delete queryOrdersRequest_call::default_instance_;
  delete queryOrdersRequest_call_reflection_;
  delete queryOrdersResponse::default_instance_;
  delete queryOrdersResponse_reflection_;
  delete queryOrdersResponse_result::default_instance_;
  delete queryOrdersResponse_result_reflection_;
  delete queryOrdersResponse_result_query::default_instance_;
  delete queryOrdersResponse_result_query_reflection_;
  delete queryCapitalRequest::default_instance_;
  delete queryCapitalRequest_reflection_;
  delete queryCapitalRequest_call::default_instance_;
  delete queryCapitalRequest_call_reflection_;
  delete queryCapitalResponse::default_instance_;
  delete queryCapitalResponse_reflection_;
  delete queryCapitalResponse_result::default_instance_;
  delete queryCapitalResponse_result_reflection_;
  delete queryCapitalResponse_result_capital::default_instance_;
  delete queryCapitalResponse_result_capital_reflection_;
  delete entrustCancelRequest::default_instance_;
  delete entrustCancelRequest_reflection_;
  delete entrustCancelRequest_call::default_instance_;
  delete entrustCancelRequest_call_reflection_;
  delete entrustCancleResponse::default_instance_;
  delete entrustCancleResponse_reflection_;
  delete entrustCancleResponse_result::default_instance_;
  delete entrustCancleResponse_result_reflection_;
}

void protobuf_AddDesc_HSComm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014HSComm.proto\022\010HSCommPB\"\317\010\n\005enums\"y\n\013ac"
    "countType\022\023\n\017noneAccountType\020\000\022\010\n\004fund\020\001"
    "\022\017\n\013shareholder\020\002\022\014\n\010fundcard\020\003\022\010\n\004bank\020"
    "\004\022\t\n\005stock\020\005\022\n\n\006client\020\006\022\013\n\007futures\020\007\"\353\001"
    "\n\014exchangeType\022\024\n\020noneExchangeType\020\000\022\013\n\007"
    "unknown\020\001\022\014\n\010shanghai\020\002\022\014\n\010shenzhen\020\003\022\024\n"
    "\020specialTransferA\020\004\022\024\n\020specialTransferB\020"
    "\005\022\r\n\tshanghaiB\020\006\022\r\n\tshenzhenB\020\007\022\024\n\020zheng"
    "zhouFutures\020\010\022\021\n\rdalianFutures\020\t\022\023\n\017shan"
    "ghaiFutures\020\n\022\024\n\020financialFutures\020\013\"A\n\tm"
    "oneyType\022\021\n\rnoneMoneyType\020\000\022\007\n\003rmb\020\001\022\n\n\006"
    "dollar\020\002\022\014\n\010hkdollar\020\003\"A\n\nsquareFlag\022\022\n\016"
    "noneSquareFlag\020\000\022\t\n\005local\020\001\022\013\n\007secbank\020\002"
    "\022\007\n\003cts\020\003\"\220\001\n\nentrustWay\022\022\n\016noneEntrustW"
    "ay\020\000\022\010\n\004self\020\001\022\t\n\005phone\020\002\022\t\n\005proxy\020\003\022\n\n\006"
    "remote\020\004\022\013\n\007counter\020\005\022\013\n\007roaming\020\006\022\n\n\006br"
    "anch\020\007\022\007\n\003web\020\010\022\n\n\006mobile\020\t\022\007\n\003vip\020\n\"]\n\t"
    "sysStatus\022\021\n\rnoneSysStatus\020\000\022\013\n\007stopped\020"
    "\001\022\006\n\002on\020\002\022\013\n\007testing\020\003\022\017\n\013maintenance\020\004\022"
    "\n\n\006closed\020\005\"1\n\tentrustBS\022\021\n\rnoneEntrustB"
    "S\020\000\022\007\n\003buy\020\001\022\010\n\004sell\020\002\"\225\001\n\014holderStatus\022"
    "\024\n\020noneHolderStatus\020\000\022\n\n\006normal\020\001\022\013\n\007fre"
    "ezed\020\002\022\010\n\004lost\020\003\022\014\n\010canceled\020\004\022\016\n\nhibern"
    "ated\020\005\022\021\n\rriskTreatment\020\006\022\017\n\013unqualified"
    "\020\007\022\n\n\006locked\020\010\"N\n\016businessStatus\022\026\n\022none"
    "BusinessStatus\020\000\022\010\n\004done\020\001\022\013\n\007invalid\020\002\022"
    "\r\n\tconfirmed\020\003\"J\n\014businessType\022\024\n\020noneBu"
    "sinessType\020\000\022\013\n\007buysell\020\001\022\t\n\005query\020\002\022\014\n\010"
    "withdraw\020\003\"\311\002\n\022clientCheckRequest\0223\n\010req"
    "uests\030\001 \003(\0132!.HSCommPB.clientCheckReques"
    "t.call\032\375\001\n\004call\0220\n\013accountType\030\001 \002(\0162\033.H"
    "SCommPB.enums.accountType\022\017\n\007account\030\002 \002"
    "(\t\022\020\n\010password\030\003 \002(\t\022D\n\014exchangeType\030\004 \001"
    "(\0162\034.HSCommPB.enums.exchangeType:\020noneEx"
    "changeType\022\020\n\006bankNo\030\005 \001(\t:\000\0224\n\nentrustW"
    "ay\030\006 \001(\0162\032.HSCommPB.enums.entrustWay:\004se"
    "lf\022\022\n\010branchNo\030\007 \001(\t:\000\"\264\004\n\023clientCheckRe"
    "sponse\0227\n\tresponses\030\001 \003(\0132$.HSCommPB.cli"
    "entCheckResponse.result\032\343\003\n\006result\022\020\n\010cl"
    "ientID\030\001 \002(\t\022\022\n\nclientName\030\002 \002(\t\022\020\n\010bran"
    "chNo\030\003 \002(\t\022\025\n\renableBalance\030\004 \002(\t\022\026\n\016cur"
    "rentBalance\030\005 \002(\t\022\023\n\013fundAccount\030\006 \002(\t\022\030"
    "\n\020fundAccountCount\030\007 \002(\005\022,\n\tsysStatus\030\010 "
    "\002(\0162\031.HSCommPB.enums.sysStatus\022\025\n\rsysSta"
    "tusName\030\t \002(\t\022\022\n\nmoneyCount\030\n \002(\005\022.\n\nsqu"
    "areFlag\030\013 \002(\0162\032.HSCommPB.enums.squareFla"
    "g\022\024\n\014clientRights\030\014 \002(\t\022\023\n\013companyName\030\r"
    " \002(\t\022\022\n\007errorNo\030\016 \001(\005:\0010\022\022\n\010errorMsg\030\017 \001"
    "(\t:\000\022\026\n\013currentDate\030\020 \001(\005:\0010\022\021\n\006lastIP\030\021"
    " \001(\005:\0010\022\030\n\rlastLoginTime\030\022 \001(\003:\0010\022\020\n\006ban"
    "kNo\030\023 \001(\t:\000\022\020\n\006remark\030\024 \001(\t:\000\"\326\002\n\023entrus"
    "tStockRequest\0224\n\010requests\030\001 \003(\0132\".HSComm"
    "PB.entrustStockRequest.call\032\210\002\n\004call\022\017\n\007"
    "localID\030\001 \002(\003\022\020\n\010branchNo\030\002 \002(\t\022\023\n\013fundA"
    "ccount\030\003 \002(\t\022\020\n\010password\030\004 \002(\t\0222\n\014exchan"
    "geType\030\005 \002(\0162\034.HSCommPB.enums.exchangeTy"
    "pe\022\024\n\014stockAccount\030\006 \002(\t\022\021\n\tstockCode\030\007 "
    "\002(\t\022\025\n\rentrustAmount\030\010 \002(\003\022\024\n\014entrustPri"
    "ce\030\t \002(\003\022,\n\tentrustBS\030\n \002(\0162\031.HSCommPB.e"
    "nums.entrustBS\"\246\001\n\024entrustStockResponse\022"
    "8\n\tresponses\030\001 \003(\0132%.HSCommPB.entrustSto"
    "ckResponse.result\032T\n\006result\022\017\n\007localID\030\001"
    " \002(\003\022\021\n\tentrustNo\030\002 \002(\t\022\022\n\007errorNo\030\016 \001(\005"
    ":\0010\022\022\n\010errorMsg\030\017 \001(\t:\000\"\241\001\n\024cancelEntrus"
    "tRequest\0225\n\010requests\030\001 \003(\0132#.HSCommPB.ca"
    "ncelEntrustRequest.call\032R\n\004call\022\020\n\010branc"
    "hNo\030\001 \002(\t\022\023\n\013fundAccount\030\002 \002(\t\022\020\n\010passwo"
    "rd\030\003 \002(\t\022\021\n\tentrustNo\030\004 \002(\t\"\227\001\n\025cancelEn"
    "trustResponse\0229\n\tresponses\030\001 \003(\0132&.HSCom"
    "mPB.cancelEntrustResponse.result\032C\n\006resu"
    "lt\022\021\n\tentrustNo\030\001 \002(\t\022\022\n\007errorNo\030\016 \001(\005:\001"
    "0\022\022\n\010errorMsg\030\017 \001(\t:\000\"\201\002\n\023queryEntrustRe"
    "quest\0224\n\010requests\030\001 \003(\0132\".HSCommPB.query"
    "EntrustRequest.call\032\263\001\n\004call\022\020\n\010branchNo"
    "\030\001 \002(\t\022\023\n\013fundAccount\030\002 \002(\t\022\020\n\010password\030"
    "\003 \002(\t\022\023\n\tentrustNo\030\004 \001(\t:\000\022\"\n\023queryOnlyC"
    "ancelable\030\005 \001(\010:\005false\022\033\n\rrequestNumber\030"
    "\006 \001(\005:\0041000\022\034\n\022lastPositionString\030\007 \001(\t:"
    "\000\"\243\004\n\024queryEntrustResponse\0228\n\tresponses\030"
    "\001 \003(\0132%.HSCommPB.queryEntrustResponse.re"
    "sult\032\320\003\n\006result\022\?\n\010entrusts\030\001 \003(\0132-.HSCo"
    "mmPB.queryEntrustResponse.result.entrust"
    "\022\032\n\022lastPositionString\030\002 \002(\t\022\022\n\007errorNo\030"
    "\016 \001(\005:\0010\022\022\n\010errorMsg\030\017 \001(\t:\000\032\300\002\n\007entrust"
    "\022\021\n\tentrustNo\030\001 \002(\t\022\021\n\tstockCode\030\002 \002(\t\022\021"
    "\n\tstockName\030\003 \002(\t\022,\n\tentrustBS\030\004 \002(\0162\031.H"
    "SCommPB.enums.entrustBS\022\025\n\rentrustAmount"
    "\030\005 \002(\003\022\024\n\014entrustPrice\030\006 \002(\003\022\026\n\016business"
    "Amount\030\007 \002(\003\022\025\n\rbusinessPrice\030\010 \002(\003\022\021\n\tc"
    "ancelvol\030\t \002(\003\022\023\n\013internalsid\030\n \002(\003\022\021\n\tF"
    "EEandTAX\030\013 \002(\003\022\021\n\ttradedone\030\014 \002(\003\022\017\n\007suc"
    "cess\030\r \002(\003\022\023\n\013invalidInfo\030\016 \001(\t\"\237\002\n\021quer"
    "yStockRequest\0222\n\010requests\030\001 \003(\0132 .HSComm"
    "PB.queryStockRequest.call\032\325\001\n\004call\022\020\n\010br"
    "anchNo\030\001 \002(\t\022\023\n\013fundAccount\030\002 \002(\t\022\020\n\010pas"
    "sword\030\003 \002(\t\022D\n\014exchangeType\030\004 \001(\0162\034.HSCo"
    "mmPB.enums.exchangeType:\020noneExchangeTyp"
    "e\022\023\n\tstockCode\030\005 \001(\t:\000\022\033\n\rrequestNumber\030"
    "\006 \001(\005:\0041000\022\034\n\022lastPositionString\030\007 \001(\t:"
    "\000\"\242\006\n\022queryStockResponse\0226\n\tresponses\030\001 "
    "\003(\0132#.HSCommPB.queryStockResponse.result"
    "\032\323\005\n\006result\0229\n\006stocks\030\001 \003(\0132).HSCommPB.q"
    "ueryStockResponse.result.stock\022\032\n\022lastPo"
    "sitionString\030\002 \002(\t\022\022\n\007errorNo\030\016 \001(\005:\0010\022\022"
    "\n\010errorMsg\030\017 \001(\t:\000\032\311\004\n\005stock\0222\n\014exchange"
    "Type\030\001 \002(\0162\034.HSCommPB.enums.exchangeType"
    "\022\024\n\014stockAccount\030\002 \002(\t\022\021\n\tstockCode\030\003 \002("
    "\t\022\021\n\tstockName\030\004 \002(\t\022\025\n\rcurrentAmount\030\005 "
    "\002(\003\022\024\n\014enableAmount\030\006 \002(\003\022\021\n\tlastPrice\030\007"
    " \002(\003\022\021\n\tcostPrice\030\010 \002(\003\022\025\n\rincomeBalance"
    "\030\t \002(\003\022\023\n\013marketValue\030\n \002(\003\022\030\n\014sumBuyAmo"
    "unt\030\021 \002(\022:\002-1\022\031\n\rsumBuyBalance\030\022 \002(\022:\002-1"
    "\022\031\n\rrealBuyAmount\030\023 \002(\022:\002-1\022\032\n\016realBuyBa"
    "lance\030\024 \002(\022:\002-1\022\031\n\rsumSellAmount\030\025 \002(\022:\002"
    "-1\022\032\n\016sumSellBalance\030\026 \002(\022:\002-1\022\032\n\016realSe"
    "llAmount\030\027 \002(\022:\002-1\022\033\n\017realSellBalance\030\030 "
    "\002(\022:\002-1\022\031\n\rcorrectAmount\030\031 \002(\022:\002-1\022\037\n\023in"
    "comeBalanceNofare\030\032 \002(\022:\002-1\022\033\n\017uncomeBuy"
    "Amount\030\033 \002(\022:\002-1\022\034\n\020uncomeSellAmount\030\034 \002"
    "(\022:\002-1\"\303\001\n\020queryFundRequest\0221\n\010requests\030"
    "\001 \003(\0132\037.HSCommPB.queryFundRequest.call\032|"
    "\n\004call\022\020\n\010branchNo\030\001 \002(\t\022\023\n\013fundAccount\030"
    "\002 \002(\t\022\020\n\010password\030\003 \002(\t\022;\n\tmoneyType\030\004 \001"
    "(\0162\031.HSCommPB.enums.moneyType:\rnoneMoney"
    "Type\"\335\003\n\021queryFundResponse\0225\n\tresponses\030"
    "\001 \003(\0132\".HSCommPB.queryFundResponse.resul"
    "t\032\220\003\n\006result\022:\n\005money\030\001 \003(\0132+.HSCommPB.q"
    "ueryFundResponse.result.currency\022\022\n\007erro"
    "rNo\030\016 \001(\005:\0010\022\022\n\010errorMsg\030\017 \001(\t:\000\032\241\002\n\010cur"
    "rency\022;\n\tmoneyType\030\001 \002(\0162\031.HSCommPB.enum"
    "s.moneyType:\rnoneMoneyType\022\026\n\016currentBal"
    "ance\030\002 \002(\003\022\025\n\renableBalance\030\003 \002(\003\022\024\n\014fet"
    "chBalance\030\004 \002(\003\022\020\n\010interest\030\005 \002(\003\022\024\n\014ass"
    "etBalance\030\006 \002(\003\022\021\n\tfetchCash\030\007 \002(\003\022\023\n\013fu"
    "ndBalance\030\010 \002(\003\022\023\n\013marketValue\030\t \002(\003\022\031\n\021"
    "opfundMarketValue\030\n \002(\003\022\023\n\013preInterest\030\013"
    " \002(\003\"\253\002\n\027queryShareholderRequest\0228\n\010requ"
    "ests\030\001 \003(\0132&.HSCommPB.queryShareholderRe"
    "quest.call\032\325\001\n\004call\022\020\n\010branchNo\030\001 \002(\t\022\023\n"
    "\013fundAccount\030\002 \002(\t\022\020\n\010password\030\003 \002(\t\022D\n\014"
    "exchangeType\030\004 \001(\0162\034.HSCommPB.enums.exch"
    "angeType:\020noneExchangeType\022\023\n\tstockCode\030"
    "\005 \001(\t:\000\022\033\n\rrequestNumber\030\006 \001(\005:\0041000\022\034\n\022"
    "lastPositionString\030\007 \001(\t:\000\"\335\003\n\030queryShar"
    "eholderResponse\022<\n\tresponses\030\001 \003(\0132).HSC"
    "ommPB.queryShareholderResponse.result\032\202\003"
    "\n\006result\022K\n\014shareholders\030\001 \003(\01325.HSCommP"
    "B.queryShareholderResponse.result.shareh"
    "older\022\032\n\022lastPositionString\030\002 \002(\t\022\022\n\007err"
    "orNo\030\016 \001(\005:\0010\022\022\n\010errorMsg\030\017 \001(\t:\000\032\346\001\n\013sh"
    "areholder\0222\n\014exchangeType\030\001 \002(\0162\034.HSComm"
    "PB.enums.exchangeType\022\024\n\014exchangeName\030\002 "
    "\002(\t\022\024\n\014stockAccount\030\003 \002(\t\0222\n\014holderStatu"
    "s\030\004 \002(\0162\034.HSCommPB.enums.holderStatus\022\027\n"
    "\017mainShareHolder\030\005 \002(\010\022\020\n\006seatNo\030\006 \001(\t:\000"
    "\022\030\n\014enableAmount\030\007 \001(\022:\002-1\"\317\002\n\024queryBusi"
    "nessRequest\0225\n\010requests\030\001 \003(\0132#.HSCommPB"
    ".queryBusinessRequest.call\032\377\001\n\004call\022\020\n\010b"
    "ranchNo\030\001 \002(\t\022\023\n\013fundAccount\030\002 \002(\t\022\020\n\010pa"
    "ssword\030\003 \002(\t\022\024\n\tstartDate\030\004 \001(\005:\0010\022\022\n\007en"
    "dDate\030\005 \001(\005:\0010\022D\n\014exchangeType\030\006 \001(\0162\034.H"
    "SCommPB.enums.exchangeType:\020noneExchange"
    "Type\022\023\n\tstockCode\030\007 \001(\t:\000\022\033\n\rrequestNumb"
    "er\030\010 \001(\005:\0041000\022\034\n\022lastPositionString\030\t \001"
    "(\t:\000\"\257\005\n\025queryBusinessResponse\0229\n\trespon"
    "ses\030\001 \003(\0132&.HSCommPB.queryBusinessRespon"
    "se.result\032\332\004\n\006result\022C\n\nbusinesses\030\001 \003(\013"
    "2/.HSCommPB.queryBusinessResponse.result"
    ".business\022\032\n\022lastPositionString\030\002 \002(\t\022\022\n"
    "\007errorNo\030\016 \001(\005:\0010\022\022\n\010errorMsg\030\017 \001(\t:\000\032\306\003"
    "\n\010business\022\014\n\004date\030\001 \002(\005\022\014\n\004time\030\002 \002(\005\0222"
    "\n\014exchangeType\030\003 \002(\0162\034.HSCommPB.enums.ex"
    "changeType\022\024\n\014stockAccount\030\004 \002(\t\022\021\n\tstoc"
    "kCode\030\005 \002(\t\022\021\n\tstockName\030\006 \002(\t\022,\n\tentrus"
    "tBS\030\007 \002(\0162\031.HSCommPB.enums.entrustBS\022\026\n\016"
    "businessAmount\030\010 \002(\003\022\025\n\rbusinessPrice\030\t "
    "\002(\003\022\027\n\017businessBalance\030\n \002(\003\022\025\n\rbusiness"
    "Times\030\013 \002(\005\0226\n\016businessStatus\030\014 \002(\0162\036.HS"
    "CommPB.enums.businessStatus\0222\n\014businessT"
    "ype\030\r \002(\0162\034.HSCommPB.enums.businessType\022"
    "\021\n\tentrustNo\030\016 \002(\t\022\020\n\010reportNo\030\017 \002(\t\022\020\n\006"
    "remark\030\020 \001(\t:\000\"\207\001\n\032getEntrustByLocalIDRe"
    "quest\022;\n\010requests\030\001 \003(\0132).HSCommPB.getEn"
    "trustByLocalIDRequest.call\032,\n\004call\022\017\n\007lo"
    "calID\030\001 \002(\003\022\023\n\013fundAccount\030\002 \002(\t\"\241\001\n\033get"
    "EntrustByLocalIDResponse\022\?\n\tresponses\030\001 "
    "\003(\0132,.HSCommPB.getEntrustByLocalIDRespon"
    "se.result\032A\n\006result\022\017\n\007localID\030\001 \002(\003\022\023\n\013"
    "fundAccount\030\002 \002(\t\022\021\n\tentrustNo\030\003 \002(\t\"\203\001\n"
    "\022queryOrdersRequest\0223\n\010requests\030\001 \003(\0132!."
    "HSCommPB.queryOrdersRequest.call\0328\n\004call"
    "\022\020\n\010username\030\001 \002(\t\022\020\n\010password\030\002 \002(\t\022\014\n\004"
    "date\030\003 \002(\003\"\256\003\n\023queryOrdersResponse\0227\n\tre"
    "sponses\030\001 \003(\0132$.HSCommPB.queryOrdersResp"
    "onse.result\032\335\002\n\006result\022;\n\007queries\030\001 \003(\0132"
    "*.HSCommPB.queryOrdersResponse.result.qu"
    "ery\022\022\n\007errorNo\030\002 \001(\005:\0010\022\022\n\010errorMsg\030\003 \001("
    "\t:\000\032\355\001\n\005query\022\022\n\nreturndate\030\001 \002(\003\022\020\n\010sec"
    "uname\030\002 \002(\t\022\014\n\004code\030\003 \002(\t\022\021\n\tdirection\030\004"
    " \002(\t\022\020\n\010ordervol\030\005 \002(\003\022\022\n\norderprice\030\006 \002"
    "(\003\022\024\n\014averageprice\030\007 \002(\003\022\020\n\010tradevol\030\010 \002"
    "(\003\022\021\n\tcancelvol\030\t \002(\003\022\014\n\004flag\030\n \002(\t\022\023\n\013a"
    "dddatetime\030\013 \002(\t\022\014\n\004acid\030\014 \002(\003\022\013\n\003oid\030\r "
    "\002(\003\"f\n\023queryCapitalRequest\0224\n\010requests\030\001"
    " \003(\0132\".HSCommPB.queryCapitalRequest.call"
    "\032\031\n\004call\022\021\n\taccountid\030\001 \002(\003\"\211\003\n\024queryCap"
    "italResponse\0228\n\tresponses\030\001 \003(\0132%.HSComm"
    "PB.queryCapitalResponse.result\032\266\002\n\006resul"
    "t\022\?\n\010capitals\030\001 \003(\0132-.HSCommPB.queryCapi"
    "talResponse.result.capital\022\022\n\007errorNo\030\002 "
    "\001(\005:\0010\022\022\n\010errorMsg\030\003 \001(\t:\000\032\302\001\n\007capital\022\n"
    "\n\002id\030\001 \002(\003\022\022\n\nexchangeid\030\002 \002(\003\022\024\n\014curren"
    "cytype\030\003 \002(\003\022\017\n\007amounts\030\004 \002(\003\022\023\n\013freeamo"
    "unts\030\005 \002(\003\022\024\n\014frozenamount\030\006 \002(\003\022\016\n\006marg"
    "in\030\007 \002(\003\022\022\n\nfloatingPL\030\010 \002(\003\022\016\n\006equity\030\t"
    " \002(\003\022\021\n\taccountid\030\n \002(\003\"\207\001\n\024entrustCance"
    "lRequest\0225\n\010requests\030\001 \003(\0132#.HSCommPB.en"
    "trustCancelRequest.call\0328\n\004call\022\020\n\010usern"
    "ame\030\001 \002(\t\022\020\n\010password\030\002 \002(\t\022\014\n\004OMID\030\003 \002("
    "\003\"\177\n\025entrustCancleResponse\0229\n\tresponses\030"
    "\001 \003(\0132&.HSCommPB.entrustCancleResponse.r"
    "esult\032+\n\006result\022\017\n\007success\030\001 \002(\003\022\020\n\010erro"
    "rmsg\030\002 \002(\t2\353\005\n\rHSCommService\022J\n\013clientCh"
    "eck\022\034.HSCommPB.clientCheckRequest\032\035.HSCo"
    "mmPB.clientCheckResponse\022M\n\014entrustStock"
    "\022\035.HSCommPB.entrustStockRequest\032\036.HSComm"
    "PB.entrustStockResponse\022P\n\rcancelEntrust"
    "\022\036.HSCommPB.cancelEntrustRequest\032\037.HSCom"
    "mPB.cancelEntrustResponse\022M\n\014queryEntrus"
    "t\022\035.HSCommPB.queryEntrustRequest\032\036.HSCom"
    "mPB.queryEntrustResponse\022G\n\nqueryStock\022\033"
    ".HSCommPB.queryStockRequest\032\034.HSCommPB.q"
    "ueryStockResponse\022D\n\tqueryFund\022\032.HSCommP"
    "B.queryFundRequest\032\033.HSCommPB.queryFundR"
    "esponse\022Y\n\020queryShareholder\022!.HSCommPB.q"
    "ueryShareholderRequest\032\".HSCommPB.queryS"
    "hareholderResponse\022P\n\rqueryBusiness\022\036.HS"
    "CommPB.queryBusinessRequest\032\037.HSCommPB.q"
    "ueryBusinessResponse\022b\n\023getEntrustByLoca"
    "lID\022$.HSCommPB.getEntrustByLocalIDReques"
    "t\032%.HSCommPB.getEntrustByLocalIDResponse", 9640);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "HSComm.proto", &protobuf_RegisterTypes);
  enums::default_instance_ = new enums();
  clientCheckRequest::default_instance_ = new clientCheckRequest();
  clientCheckRequest_call::default_instance_ = new clientCheckRequest_call();
  clientCheckResponse::default_instance_ = new clientCheckResponse();
  clientCheckResponse_result::default_instance_ = new clientCheckResponse_result();
  entrustStockRequest::default_instance_ = new entrustStockRequest();
  entrustStockRequest_call::default_instance_ = new entrustStockRequest_call();
  entrustStockResponse::default_instance_ = new entrustStockResponse();
  entrustStockResponse_result::default_instance_ = new entrustStockResponse_result();
  cancelEntrustRequest::default_instance_ = new cancelEntrustRequest();
  cancelEntrustRequest_call::default_instance_ = new cancelEntrustRequest_call();
  cancelEntrustResponse::default_instance_ = new cancelEntrustResponse();
  cancelEntrustResponse_result::default_instance_ = new cancelEntrustResponse_result();
  queryEntrustRequest::default_instance_ = new queryEntrustRequest();
  queryEntrustRequest_call::default_instance_ = new queryEntrustRequest_call();
  queryEntrustResponse::default_instance_ = new queryEntrustResponse();
  queryEntrustResponse_result::default_instance_ = new queryEntrustResponse_result();
  queryEntrustResponse_result_entrust::default_instance_ = new queryEntrustResponse_result_entrust();
  queryStockRequest::default_instance_ = new queryStockRequest();
  queryStockRequest_call::default_instance_ = new queryStockRequest_call();
  queryStockResponse::default_instance_ = new queryStockResponse();
  queryStockResponse_result::default_instance_ = new queryStockResponse_result();
  queryStockResponse_result_stock::default_instance_ = new queryStockResponse_result_stock();
  queryFundRequest::default_instance_ = new queryFundRequest();
  queryFundRequest_call::default_instance_ = new queryFundRequest_call();
  queryFundResponse::default_instance_ = new queryFundResponse();
  queryFundResponse_result::default_instance_ = new queryFundResponse_result();
  queryFundResponse_result_currency::default_instance_ = new queryFundResponse_result_currency();
  queryShareholderRequest::default_instance_ = new queryShareholderRequest();
  queryShareholderRequest_call::default_instance_ = new queryShareholderRequest_call();
  queryShareholderResponse::default_instance_ = new queryShareholderResponse();
  queryShareholderResponse_result::default_instance_ = new queryShareholderResponse_result();
  queryShareholderResponse_result_shareholder::default_instance_ = new queryShareholderResponse_result_shareholder();
  queryBusinessRequest::default_instance_ = new queryBusinessRequest();
  queryBusinessRequest_call::default_instance_ = new queryBusinessRequest_call();
  queryBusinessResponse::default_instance_ = new queryBusinessResponse();
  queryBusinessResponse_result::default_instance_ = new queryBusinessResponse_result();
  queryBusinessResponse_result_business::default_instance_ = new queryBusinessResponse_result_business();
  getEntrustByLocalIDRequest::default_instance_ = new getEntrustByLocalIDRequest();
  getEntrustByLocalIDRequest_call::default_instance_ = new getEntrustByLocalIDRequest_call();
  getEntrustByLocalIDResponse::default_instance_ = new getEntrustByLocalIDResponse();
  getEntrustByLocalIDResponse_result::default_instance_ = new getEntrustByLocalIDResponse_result();
  queryOrdersRequest::default_instance_ = new queryOrdersRequest();
  queryOrdersRequest_call::default_instance_ = new queryOrdersRequest_call();
  queryOrdersResponse::default_instance_ = new queryOrdersResponse();
  queryOrdersResponse_result::default_instance_ = new queryOrdersResponse_result();
  queryOrdersResponse_result_query::default_instance_ = new queryOrdersResponse_result_query();
  queryCapitalRequest::default_instance_ = new queryCapitalRequest();
  queryCapitalRequest_call::default_instance_ = new queryCapitalRequest_call();
  queryCapitalResponse::default_instance_ = new queryCapitalResponse();
  queryCapitalResponse_result::default_instance_ = new queryCapitalResponse_result();
  queryCapitalResponse_result_capital::default_instance_ = new queryCapitalResponse_result_capital();
  entrustCancelRequest::default_instance_ = new entrustCancelRequest();
  entrustCancelRequest_call::default_instance_ = new entrustCancelRequest_call();
  entrustCancleResponse::default_instance_ = new entrustCancleResponse();
  entrustCancleResponse_result::default_instance_ = new entrustCancleResponse_result();
  enums::default_instance_->InitAsDefaultInstance();
  clientCheckRequest::default_instance_->InitAsDefaultInstance();
  clientCheckRequest_call::default_instance_->InitAsDefaultInstance();
  clientCheckResponse::default_instance_->InitAsDefaultInstance();
  clientCheckResponse_result::default_instance_->InitAsDefaultInstance();
  entrustStockRequest::default_instance_->InitAsDefaultInstance();
  entrustStockRequest_call::default_instance_->InitAsDefaultInstance();
  entrustStockResponse::default_instance_->InitAsDefaultInstance();
  entrustStockResponse_result::default_instance_->InitAsDefaultInstance();
  cancelEntrustRequest::default_instance_->InitAsDefaultInstance();
  cancelEntrustRequest_call::default_instance_->InitAsDefaultInstance();
  cancelEntrustResponse::default_instance_->InitAsDefaultInstance();
  cancelEntrustResponse_result::default_instance_->InitAsDefaultInstance();
  queryEntrustRequest::default_instance_->InitAsDefaultInstance();
  queryEntrustRequest_call::default_instance_->InitAsDefaultInstance();
  queryEntrustResponse::default_instance_->InitAsDefaultInstance();
  queryEntrustResponse_result::default_instance_->InitAsDefaultInstance();
  queryEntrustResponse_result_entrust::default_instance_->InitAsDefaultInstance();
  queryStockRequest::default_instance_->InitAsDefaultInstance();
  queryStockRequest_call::default_instance_->InitAsDefaultInstance();
  queryStockResponse::default_instance_->InitAsDefaultInstance();
  queryStockResponse_result::default_instance_->InitAsDefaultInstance();
  queryStockResponse_result_stock::default_instance_->InitAsDefaultInstance();
  queryFundRequest::default_instance_->InitAsDefaultInstance();
  queryFundRequest_call::default_instance_->InitAsDefaultInstance();
  queryFundResponse::default_instance_->InitAsDefaultInstance();
  queryFundResponse_result::default_instance_->InitAsDefaultInstance();
  queryFundResponse_result_currency::default_instance_->InitAsDefaultInstance();
  queryShareholderRequest::default_instance_->InitAsDefaultInstance();
  queryShareholderRequest_call::default_instance_->InitAsDefaultInstance();
  queryShareholderResponse::default_instance_->InitAsDefaultInstance();
  queryShareholderResponse_result::default_instance_->InitAsDefaultInstance();
  queryShareholderResponse_result_shareholder::default_instance_->InitAsDefaultInstance();
  queryBusinessRequest::default_instance_->InitAsDefaultInstance();
  queryBusinessRequest_call::default_instance_->InitAsDefaultInstance();
  queryBusinessResponse::default_instance_->InitAsDefaultInstance();
  queryBusinessResponse_result::default_instance_->InitAsDefaultInstance();
  queryBusinessResponse_result_business::default_instance_->InitAsDefaultInstance();
  getEntrustByLocalIDRequest::default_instance_->InitAsDefaultInstance();
  getEntrustByLocalIDRequest_call::default_instance_->InitAsDefaultInstance();
  getEntrustByLocalIDResponse::default_instance_->InitAsDefaultInstance();
  getEntrustByLocalIDResponse_result::default_instance_->InitAsDefaultInstance();
  queryOrdersRequest::default_instance_->InitAsDefaultInstance();
  queryOrdersRequest_call::default_instance_->InitAsDefaultInstance();
  queryOrdersResponse::default_instance_->InitAsDefaultInstance();
  queryOrdersResponse_result::default_instance_->InitAsDefaultInstance();
  queryOrdersResponse_result_query::default_instance_->InitAsDefaultInstance();
  queryCapitalRequest::default_instance_->InitAsDefaultInstance();
  queryCapitalRequest_call::default_instance_->InitAsDefaultInstance();
  queryCapitalResponse::default_instance_->InitAsDefaultInstance();
  queryCapitalResponse_result::default_instance_->InitAsDefaultInstance();
  queryCapitalResponse_result_capital::default_instance_->InitAsDefaultInstance();
  entrustCancelRequest::default_instance_->InitAsDefaultInstance();
  entrustCancelRequest_call::default_instance_->InitAsDefaultInstance();
  entrustCancleResponse::default_instance_->InitAsDefaultInstance();
  entrustCancleResponse_result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_HSComm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_HSComm_2eproto {
  StaticDescriptorInitializer_HSComm_2eproto() {
    protobuf_AddDesc_HSComm_2eproto();
  }
} static_descriptor_initializer_HSComm_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* enums_accountType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enums_accountType_descriptor_;
}
bool enums_accountType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const enums_accountType enums::noneAccountType;
const enums_accountType enums::fund;
const enums_accountType enums::shareholder;
const enums_accountType enums::fundcard;
const enums_accountType enums::bank;
const enums_accountType enums::stock;
const enums_accountType enums::client;
const enums_accountType enums::futures;
const enums_accountType enums::accountType_MIN;
const enums_accountType enums::accountType_MAX;
const int enums::accountType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* enums_exchangeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enums_exchangeType_descriptor_;
}
bool enums_exchangeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const enums_exchangeType enums::noneExchangeType;
const enums_exchangeType enums::unknown;
const enums_exchangeType enums::shanghai;
const enums_exchangeType enums::shenzhen;
const enums_exchangeType enums::specialTransferA;
const enums_exchangeType enums::specialTransferB;
const enums_exchangeType enums::shanghaiB;
const enums_exchangeType enums::shenzhenB;
const enums_exchangeType enums::zhengzhouFutures;
const enums_exchangeType enums::dalianFutures;
const enums_exchangeType enums::shanghaiFutures;
const enums_exchangeType enums::financialFutures;
const enums_exchangeType enums::exchangeType_MIN;
const enums_exchangeType enums::exchangeType_MAX;
const int enums::exchangeType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* enums_moneyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enums_moneyType_descriptor_;
}
bool enums_moneyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const enums_moneyType enums::noneMoneyType;
const enums_moneyType enums::rmb;
const enums_moneyType enums::dollar;
const enums_moneyType enums::hkdollar;
const enums_moneyType enums::moneyType_MIN;
const enums_moneyType enums::moneyType_MAX;
const int enums::moneyType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* enums_squareFlag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enums_squareFlag_descriptor_;
}
bool enums_squareFlag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const enums_squareFlag enums::noneSquareFlag;
const enums_squareFlag enums::local;
const enums_squareFlag enums::secbank;
const enums_squareFlag enums::cts;
const enums_squareFlag enums::squareFlag_MIN;
const enums_squareFlag enums::squareFlag_MAX;
const int enums::squareFlag_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* enums_entrustWay_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enums_entrustWay_descriptor_;
}
bool enums_entrustWay_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const enums_entrustWay enums::noneEntrustWay;
const enums_entrustWay enums::self;
const enums_entrustWay enums::phone;
const enums_entrustWay enums::proxy;
const enums_entrustWay enums::remote;
const enums_entrustWay enums::counter;
const enums_entrustWay enums::roaming;
const enums_entrustWay enums::branch;
const enums_entrustWay enums::web;
const enums_entrustWay enums::mobile;
const enums_entrustWay enums::vip;
const enums_entrustWay enums::entrustWay_MIN;
const enums_entrustWay enums::entrustWay_MAX;
const int enums::entrustWay_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* enums_sysStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enums_sysStatus_descriptor_;
}
bool enums_sysStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const enums_sysStatus enums::noneSysStatus;
const enums_sysStatus enums::stopped;
const enums_sysStatus enums::on;
const enums_sysStatus enums::testing;
const enums_sysStatus enums::maintenance;
const enums_sysStatus enums::closed;
const enums_sysStatus enums::sysStatus_MIN;
const enums_sysStatus enums::sysStatus_MAX;
const int enums::sysStatus_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* enums_entrustBS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enums_entrustBS_descriptor_;
}
bool enums_entrustBS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const enums_entrustBS enums::noneEntrustBS;
const enums_entrustBS enums::buy;
const enums_entrustBS enums::sell;
const enums_entrustBS enums::entrustBS_MIN;
const enums_entrustBS enums::entrustBS_MAX;
const int enums::entrustBS_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* enums_holderStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enums_holderStatus_descriptor_;
}
bool enums_holderStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const enums_holderStatus enums::noneHolderStatus;
const enums_holderStatus enums::normal;
const enums_holderStatus enums::freezed;
const enums_holderStatus enums::lost;
const enums_holderStatus enums::canceled;
const enums_holderStatus enums::hibernated;
const enums_holderStatus enums::riskTreatment;
const enums_holderStatus enums::unqualified;
const enums_holderStatus enums::locked;
const enums_holderStatus enums::holderStatus_MIN;
const enums_holderStatus enums::holderStatus_MAX;
const int enums::holderStatus_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* enums_businessStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enums_businessStatus_descriptor_;
}
bool enums_businessStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const enums_businessStatus enums::noneBusinessStatus;
const enums_businessStatus enums::done;
const enums_businessStatus enums::invalid;
const enums_businessStatus enums::confirmed;
const enums_businessStatus enums::businessStatus_MIN;
const enums_businessStatus enums::businessStatus_MAX;
const int enums::businessStatus_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* enums_businessType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enums_businessType_descriptor_;
}
bool enums_businessType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const enums_businessType enums::noneBusinessType;
const enums_businessType enums::buysell;
const enums_businessType enums::query;
const enums_businessType enums::withdraw;
const enums_businessType enums::businessType_MIN;
const enums_businessType enums::businessType_MAX;
const int enums::businessType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

enums::enums()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enums::InitAsDefaultInstance() {
}

enums::enums(const enums& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enums::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enums::~enums() {
  SharedDtor();
}

void enums::SharedDtor() {
  if (this != default_instance_) {
  }
}

void enums::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enums::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enums_descriptor_;
}

const enums& enums::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

enums* enums::default_instance_ = NULL;

enums* enums::New() const {
  return new enums;
}

void enums::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void enums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enums::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enums::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enums::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enums* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enums*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enums::MergeFrom(const enums& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enums::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enums::CopyFrom(const enums& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enums::IsInitialized() const {
  
  return true;
}

void enums::Swap(enums* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enums::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enums_descriptor_;
  metadata.reflection = enums_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int clientCheckRequest_call::kAccountTypeFieldNumber;
const int clientCheckRequest_call::kAccountFieldNumber;
const int clientCheckRequest_call::kPasswordFieldNumber;
const int clientCheckRequest_call::kExchangeTypeFieldNumber;
const int clientCheckRequest_call::kBankNoFieldNumber;
const int clientCheckRequest_call::kEntrustWayFieldNumber;
const int clientCheckRequest_call::kBranchNoFieldNumber;
#endif  // !_MSC_VER

clientCheckRequest_call::clientCheckRequest_call()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void clientCheckRequest_call::InitAsDefaultInstance() {
}

clientCheckRequest_call::clientCheckRequest_call(const clientCheckRequest_call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void clientCheckRequest_call::SharedCtor() {
  _cached_size_ = 0;
  accounttype_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangetype_ = 0;
  bankno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entrustway_ = 1;
  branchno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

clientCheckRequest_call::~clientCheckRequest_call() {
  SharedDtor();
}

void clientCheckRequest_call::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (bankno_ != &::google::protobuf::internal::kEmptyString) {
    delete bankno_;
  }
  if (branchno_ != &::google::protobuf::internal::kEmptyString) {
    delete branchno_;
  }
  if (this != default_instance_) {
  }
}

void clientCheckRequest_call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* clientCheckRequest_call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return clientCheckRequest_call_descriptor_;
}

const clientCheckRequest_call& clientCheckRequest_call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

clientCheckRequest_call* clientCheckRequest_call::default_instance_ = NULL;

clientCheckRequest_call* clientCheckRequest_call::New() const {
  return new clientCheckRequest_call;
}

void clientCheckRequest_call::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accounttype_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    exchangetype_ = 0;
    if (has_bankno()) {
      if (bankno_ != &::google::protobuf::internal::kEmptyString) {
        bankno_->clear();
      }
    }
    entrustway_ = 1;
    if (has_branchno()) {
      if (branchno_ != &::google::protobuf::internal::kEmptyString) {
        branchno_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool clientCheckRequest_call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HSCommPB.enums.accountType accountType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HSCommPB::enums_accountType_IsValid(value)) {
            set_accounttype(static_cast< ::HSCommPB::enums_accountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }
      
      // required string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }
      
      // required string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exchangeType;
        break;
      }
      
      // optional .HSCommPB.enums.exchangeType exchangeType = 4 [default = noneExchangeType];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchangeType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HSCommPB::enums_exchangeType_IsValid(value)) {
            set_exchangetype(static_cast< ::HSCommPB::enums_exchangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bankNo;
        break;
      }
      
      // optional string bankNo = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankno().data(), this->bankno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_entrustWay;
        break;
      }
      
      // optional .HSCommPB.enums.entrustWay entrustWay = 6 [default = self];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entrustWay:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HSCommPB::enums_entrustWay_IsValid(value)) {
            set_entrustway(static_cast< ::HSCommPB::enums_entrustWay >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_branchNo;
        break;
      }
      
      // optional string branchNo = 7 [default = ""];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_branchNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branchno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->branchno().data(), this->branchno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void clientCheckRequest_call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HSCommPB.enums.accountType accountType = 1;
  if (has_accounttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->accounttype(), output);
  }
  
  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }
  
  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }
  
  // optional .HSCommPB.enums.exchangeType exchangeType = 4 [default = noneExchangeType];
  if (has_exchangetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->exchangetype(), output);
  }
  
  // optional string bankNo = 5 [default = ""];
  if (has_bankno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankno().data(), this->bankno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->bankno(), output);
  }
  
  // optional .HSCommPB.enums.entrustWay entrustWay = 6 [default = self];
  if (has_entrustway()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->entrustway(), output);
  }
  
  // optional string branchNo = 7 [default = ""];
  if (has_branchno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->branchno().data(), this->branchno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->branchno(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* clientCheckRequest_call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HSCommPB.enums.accountType accountType = 1;
  if (has_accounttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->accounttype(), target);
  }
  
  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }
  
  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }
  
  // optional .HSCommPB.enums.exchangeType exchangeType = 4 [default = noneExchangeType];
  if (has_exchangetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->exchangetype(), target);
  }
  
  // optional string bankNo = 5 [default = ""];
  if (has_bankno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankno().data(), this->bankno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bankno(), target);
  }
  
  // optional .HSCommPB.enums.entrustWay entrustWay = 6 [default = self];
  if (has_entrustway()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->entrustway(), target);
  }
  
  // optional string branchNo = 7 [default = ""];
  if (has_branchno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->branchno().data(), this->branchno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->branchno(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int clientCheckRequest_call::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HSCommPB.enums.accountType accountType = 1;
    if (has_accounttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->accounttype());
    }
    
    // required string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional .HSCommPB.enums.exchangeType exchangeType = 4 [default = noneExchangeType];
    if (has_exchangetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchangetype());
    }
    
    // optional string bankNo = 5 [default = ""];
    if (has_bankno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankno());
    }
    
    // optional .HSCommPB.enums.entrustWay entrustWay = 6 [default = self];
    if (has_entrustway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->entrustway());
    }
    
    // optional string branchNo = 7 [default = ""];
    if (has_branchno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->branchno());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void clientCheckRequest_call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const clientCheckRequest_call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const clientCheckRequest_call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void clientCheckRequest_call::MergeFrom(const clientCheckRequest_call& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accounttype()) {
      set_accounttype(from.accounttype());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_exchangetype()) {
      set_exchangetype(from.exchangetype());
    }
    if (from.has_bankno()) {
      set_bankno(from.bankno());
    }
    if (from.has_entrustway()) {
      set_entrustway(from.entrustway());
    }
    if (from.has_branchno()) {
      set_branchno(from.branchno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void clientCheckRequest_call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void clientCheckRequest_call::CopyFrom(const clientCheckRequest_call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool clientCheckRequest_call::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void clientCheckRequest_call::Swap(clientCheckRequest_call* other) {
  if (other != this) {
    std::swap(accounttype_, other->accounttype_);
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(exchangetype_, other->exchangetype_);
    std::swap(bankno_, other->bankno_);
    std::swap(entrustway_, other->entrustway_);
    std::swap(branchno_, other->branchno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata clientCheckRequest_call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = clientCheckRequest_call_descriptor_;
  metadata.reflection = clientCheckRequest_call_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int clientCheckRequest::kRequestsFieldNumber;
#endif  // !_MSC_VER

clientCheckRequest::clientCheckRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void clientCheckRequest::InitAsDefaultInstance() {
}

clientCheckRequest::clientCheckRequest(const clientCheckRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void clientCheckRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

clientCheckRequest::~clientCheckRequest() {
  SharedDtor();
}

void clientCheckRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void clientCheckRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* clientCheckRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return clientCheckRequest_descriptor_;
}

const clientCheckRequest& clientCheckRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

clientCheckRequest* clientCheckRequest::default_instance_ = NULL;

clientCheckRequest* clientCheckRequest::New() const {
  return new clientCheckRequest;
}

void clientCheckRequest::Clear() {
  requests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool clientCheckRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.clientCheckRequest.call requests = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_requests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_requests;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void clientCheckRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.clientCheckRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requests(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* clientCheckRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.clientCheckRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->requests(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int clientCheckRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.clientCheckRequest.call requests = 1;
  total_size += 1 * this->requests_size();
  for (int i = 0; i < this->requests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requests(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void clientCheckRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const clientCheckRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const clientCheckRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void clientCheckRequest::MergeFrom(const clientCheckRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  requests_.MergeFrom(from.requests_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void clientCheckRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void clientCheckRequest::CopyFrom(const clientCheckRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool clientCheckRequest::IsInitialized() const {
  
  for (int i = 0; i < requests_size(); i++) {
    if (!this->requests(i).IsInitialized()) return false;
  }
  return true;
}

void clientCheckRequest::Swap(clientCheckRequest* other) {
  if (other != this) {
    requests_.Swap(&other->requests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata clientCheckRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = clientCheckRequest_descriptor_;
  metadata.reflection = clientCheckRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int clientCheckResponse_result::kClientIDFieldNumber;
const int clientCheckResponse_result::kClientNameFieldNumber;
const int clientCheckResponse_result::kBranchNoFieldNumber;
const int clientCheckResponse_result::kEnableBalanceFieldNumber;
const int clientCheckResponse_result::kCurrentBalanceFieldNumber;
const int clientCheckResponse_result::kFundAccountFieldNumber;
const int clientCheckResponse_result::kFundAccountCountFieldNumber;
const int clientCheckResponse_result::kSysStatusFieldNumber;
const int clientCheckResponse_result::kSysStatusNameFieldNumber;
const int clientCheckResponse_result::kMoneyCountFieldNumber;
const int clientCheckResponse_result::kSquareFlagFieldNumber;
const int clientCheckResponse_result::kClientRightsFieldNumber;
const int clientCheckResponse_result::kCompanyNameFieldNumber;
const int clientCheckResponse_result::kErrorNoFieldNumber;
const int clientCheckResponse_result::kErrorMsgFieldNumber;
const int clientCheckResponse_result::kCurrentDateFieldNumber;
const int clientCheckResponse_result::kLastIPFieldNumber;
const int clientCheckResponse_result::kLastLoginTimeFieldNumber;
const int clientCheckResponse_result::kBankNoFieldNumber;
const int clientCheckResponse_result::kRemarkFieldNumber;
#endif  // !_MSC_VER

clientCheckResponse_result::clientCheckResponse_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void clientCheckResponse_result::InitAsDefaultInstance() {
}

clientCheckResponse_result::clientCheckResponse_result(const clientCheckResponse_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void clientCheckResponse_result::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  branchno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enablebalance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currentbalance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fundaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fundaccountcount_ = 0;
  sysstatus_ = 0;
  sysstatusname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  moneycount_ = 0;
  squareflag_ = 0;
  clientrights_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  companyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  errorno_ = 0;
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currentdate_ = 0;
  lastip_ = 0;
  lastlogintime_ = GOOGLE_LONGLONG(0);
  bankno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

clientCheckResponse_result::~clientCheckResponse_result() {
  SharedDtor();
}

void clientCheckResponse_result::SharedDtor() {
  if (clientid_ != &::google::protobuf::internal::kEmptyString) {
    delete clientid_;
  }
  if (clientname_ != &::google::protobuf::internal::kEmptyString) {
    delete clientname_;
  }
  if (branchno_ != &::google::protobuf::internal::kEmptyString) {
    delete branchno_;
  }
  if (enablebalance_ != &::google::protobuf::internal::kEmptyString) {
    delete enablebalance_;
  }
  if (currentbalance_ != &::google::protobuf::internal::kEmptyString) {
    delete currentbalance_;
  }
  if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete fundaccount_;
  }
  if (sysstatusname_ != &::google::protobuf::internal::kEmptyString) {
    delete sysstatusname_;
  }
  if (clientrights_ != &::google::protobuf::internal::kEmptyString) {
    delete clientrights_;
  }
  if (companyname_ != &::google::protobuf::internal::kEmptyString) {
    delete companyname_;
  }
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (bankno_ != &::google::protobuf::internal::kEmptyString) {
    delete bankno_;
  }
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (this != default_instance_) {
  }
}

void clientCheckResponse_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* clientCheckResponse_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return clientCheckResponse_result_descriptor_;
}

const clientCheckResponse_result& clientCheckResponse_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

clientCheckResponse_result* clientCheckResponse_result::default_instance_ = NULL;

clientCheckResponse_result* clientCheckResponse_result::New() const {
  return new clientCheckResponse_result;
}

void clientCheckResponse_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clientid()) {
      if (clientid_ != &::google::protobuf::internal::kEmptyString) {
        clientid_->clear();
      }
    }
    if (has_clientname()) {
      if (clientname_ != &::google::protobuf::internal::kEmptyString) {
        clientname_->clear();
      }
    }
    if (has_branchno()) {
      if (branchno_ != &::google::protobuf::internal::kEmptyString) {
        branchno_->clear();
      }
    }
    if (has_enablebalance()) {
      if (enablebalance_ != &::google::protobuf::internal::kEmptyString) {
        enablebalance_->clear();
      }
    }
    if (has_currentbalance()) {
      if (currentbalance_ != &::google::protobuf::internal::kEmptyString) {
        currentbalance_->clear();
      }
    }
    if (has_fundaccount()) {
      if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
        fundaccount_->clear();
      }
    }
    fundaccountcount_ = 0;
    sysstatus_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_sysstatusname()) {
      if (sysstatusname_ != &::google::protobuf::internal::kEmptyString) {
        sysstatusname_->clear();
      }
    }
    moneycount_ = 0;
    squareflag_ = 0;
    if (has_clientrights()) {
      if (clientrights_ != &::google::protobuf::internal::kEmptyString) {
        clientrights_->clear();
      }
    }
    if (has_companyname()) {
      if (companyname_ != &::google::protobuf::internal::kEmptyString) {
        companyname_->clear();
      }
    }
    errorno_ = 0;
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
    currentdate_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    lastip_ = 0;
    lastlogintime_ = GOOGLE_LONGLONG(0);
    if (has_bankno()) {
      if (bankno_ != &::google::protobuf::internal::kEmptyString) {
        bankno_->clear();
      }
    }
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::kEmptyString) {
        remark_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool clientCheckResponse_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string clientID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clientName;
        break;
      }
      
      // required string clientName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientname().data(), this->clientname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_branchNo;
        break;
      }
      
      // required string branchNo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_branchNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branchno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->branchno().data(), this->branchno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_enableBalance;
        break;
      }
      
      // required string enableBalance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enableBalance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enablebalance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->enablebalance().data(), this->enablebalance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_currentBalance;
        break;
      }
      
      // required string currentBalance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currentBalance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currentbalance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currentbalance().data(), this->currentbalance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fundAccount;
        break;
      }
      
      // required string fundAccount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fundAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fundaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fundaccount().data(), this->fundaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fundAccountCount;
        break;
      }
      
      // required int32 fundAccountCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fundAccountCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fundaccountcount_)));
          set_has_fundaccountcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sysStatus;
        break;
      }
      
      // required .HSCommPB.enums.sysStatus sysStatus = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sysStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HSCommPB::enums_sysStatus_IsValid(value)) {
            set_sysstatus(static_cast< ::HSCommPB::enums_sysStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_sysStatusName;
        break;
      }
      
      // required string sysStatusName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sysStatusName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sysstatusname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sysstatusname().data(), this->sysstatusname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_moneyCount;
        break;
      }
      
      // required int32 moneyCount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moneycount_)));
          set_has_moneycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_squareFlag;
        break;
      }
      
      // required .HSCommPB.enums.squareFlag squareFlag = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_squareFlag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HSCommPB::enums_squareFlag_IsValid(value)) {
            set_squareflag(static_cast< ::HSCommPB::enums_squareFlag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_clientRights;
        break;
      }
      
      // required string clientRights = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientRights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientrights()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientrights().data(), this->clientrights().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_companyName;
        break;
      }
      
      // required string companyName = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_companyName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_companyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->companyname().data(), this->companyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_errorNo;
        break;
      }
      
      // optional int32 errorNo = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorno_)));
          set_has_errorno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_errorMsg;
        break;
      }
      
      // optional string errorMsg = 15 [default = ""];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_currentDate;
        break;
      }
      
      // optional int32 currentDate = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentdate_)));
          set_has_currentdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_lastIP;
        break;
      }
      
      // optional int32 lastIP = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastIP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastip_)));
          set_has_lastip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_lastLoginTime;
        break;
      }
      
      // optional int64 lastLoginTime = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastLoginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastlogintime_)));
          set_has_lastlogintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_bankNo;
        break;
      }
      
      // optional string bankNo = 19 [default = ""];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bankNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bankno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bankno().data(), this->bankno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_remark;
        break;
      }
      
      // optional string remark = 20 [default = ""];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void clientCheckResponse_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string clientID = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->clientid(), output);
  }
  
  // required string clientName = 2;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->clientname(), output);
  }
  
  // required string branchNo = 3;
  if (has_branchno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->branchno().data(), this->branchno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->branchno(), output);
  }
  
  // required string enableBalance = 4;
  if (has_enablebalance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enablebalance().data(), this->enablebalance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->enablebalance(), output);
  }
  
  // required string currentBalance = 5;
  if (has_currentbalance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentbalance().data(), this->currentbalance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->currentbalance(), output);
  }
  
  // required string fundAccount = 6;
  if (has_fundaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fundaccount().data(), this->fundaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->fundaccount(), output);
  }
  
  // required int32 fundAccountCount = 7;
  if (has_fundaccountcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fundaccountcount(), output);
  }
  
  // required .HSCommPB.enums.sysStatus sysStatus = 8;
  if (has_sysstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->sysstatus(), output);
  }
  
  // required string sysStatusName = 9;
  if (has_sysstatusname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sysstatusname().data(), this->sysstatusname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->sysstatusname(), output);
  }
  
  // required int32 moneyCount = 10;
  if (has_moneycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->moneycount(), output);
  }
  
  // required .HSCommPB.enums.squareFlag squareFlag = 11;
  if (has_squareflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->squareflag(), output);
  }
  
  // required string clientRights = 12;
  if (has_clientrights()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientrights().data(), this->clientrights().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->clientrights(), output);
  }
  
  // required string companyName = 13;
  if (has_companyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->companyname().data(), this->companyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->companyname(), output);
  }
  
  // optional int32 errorNo = 14 [default = 0];
  if (has_errorno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->errorno(), output);
  }
  
  // optional string errorMsg = 15 [default = ""];
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->errormsg(), output);
  }
  
  // optional int32 currentDate = 16 [default = 0];
  if (has_currentdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->currentdate(), output);
  }
  
  // optional int32 lastIP = 17 [default = 0];
  if (has_lastip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->lastip(), output);
  }
  
  // optional int64 lastLoginTime = 18 [default = 0];
  if (has_lastlogintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->lastlogintime(), output);
  }
  
  // optional string bankNo = 19 [default = ""];
  if (has_bankno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankno().data(), this->bankno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->bankno(), output);
  }
  
  // optional string remark = 20 [default = ""];
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->remark(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* clientCheckResponse_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string clientID = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientid(), target);
  }
  
  // required string clientName = 2;
  if (has_clientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientname().data(), this->clientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clientname(), target);
  }
  
  // required string branchNo = 3;
  if (has_branchno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->branchno().data(), this->branchno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->branchno(), target);
  }
  
  // required string enableBalance = 4;
  if (has_enablebalance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enablebalance().data(), this->enablebalance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->enablebalance(), target);
  }
  
  // required string currentBalance = 5;
  if (has_currentbalance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currentbalance().data(), this->currentbalance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->currentbalance(), target);
  }
  
  // required string fundAccount = 6;
  if (has_fundaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fundaccount().data(), this->fundaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fundaccount(), target);
  }
  
  // required int32 fundAccountCount = 7;
  if (has_fundaccountcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fundaccountcount(), target);
  }
  
  // required .HSCommPB.enums.sysStatus sysStatus = 8;
  if (has_sysstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->sysstatus(), target);
  }
  
  // required string sysStatusName = 9;
  if (has_sysstatusname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sysstatusname().data(), this->sysstatusname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sysstatusname(), target);
  }
  
  // required int32 moneyCount = 10;
  if (has_moneycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->moneycount(), target);
  }
  
  // required .HSCommPB.enums.squareFlag squareFlag = 11;
  if (has_squareflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->squareflag(), target);
  }
  
  // required string clientRights = 12;
  if (has_clientrights()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientrights().data(), this->clientrights().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->clientrights(), target);
  }
  
  // required string companyName = 13;
  if (has_companyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->companyname().data(), this->companyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->companyname(), target);
  }
  
  // optional int32 errorNo = 14 [default = 0];
  if (has_errorno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->errorno(), target);
  }
  
  // optional string errorMsg = 15 [default = ""];
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->errormsg(), target);
  }
  
  // optional int32 currentDate = 16 [default = 0];
  if (has_currentdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->currentdate(), target);
  }
  
  // optional int32 lastIP = 17 [default = 0];
  if (has_lastip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->lastip(), target);
  }
  
  // optional int64 lastLoginTime = 18 [default = 0];
  if (has_lastlogintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->lastlogintime(), target);
  }
  
  // optional string bankNo = 19 [default = ""];
  if (has_bankno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bankno().data(), this->bankno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->bankno(), target);
  }
  
  // optional string remark = 20 [default = ""];
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->remark(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int clientCheckResponse_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string clientID = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientid());
    }
    
    // required string clientName = 2;
    if (has_clientname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientname());
    }
    
    // required string branchNo = 3;
    if (has_branchno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->branchno());
    }
    
    // required string enableBalance = 4;
    if (has_enablebalance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enablebalance());
    }
    
    // required string currentBalance = 5;
    if (has_currentbalance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currentbalance());
    }
    
    // required string fundAccount = 6;
    if (has_fundaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fundaccount());
    }
    
    // required int32 fundAccountCount = 7;
    if (has_fundaccountcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fundaccountcount());
    }
    
    // required .HSCommPB.enums.sysStatus sysStatus = 8;
    if (has_sysstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sysstatus());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string sysStatusName = 9;
    if (has_sysstatusname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sysstatusname());
    }
    
    // required int32 moneyCount = 10;
    if (has_moneycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moneycount());
    }
    
    // required .HSCommPB.enums.squareFlag squareFlag = 11;
    if (has_squareflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->squareflag());
    }
    
    // required string clientRights = 12;
    if (has_clientrights()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientrights());
    }
    
    // required string companyName = 13;
    if (has_companyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->companyname());
    }
    
    // optional int32 errorNo = 14 [default = 0];
    if (has_errorno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorno());
    }
    
    // optional string errorMsg = 15 [default = ""];
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }
    
    // optional int32 currentDate = 16 [default = 0];
    if (has_currentdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentdate());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 lastIP = 17 [default = 0];
    if (has_lastip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastip());
    }
    
    // optional int64 lastLoginTime = 18 [default = 0];
    if (has_lastlogintime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastlogintime());
    }
    
    // optional string bankNo = 19 [default = ""];
    if (has_bankno()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bankno());
    }
    
    // optional string remark = 20 [default = ""];
    if (has_remark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void clientCheckResponse_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const clientCheckResponse_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const clientCheckResponse_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void clientCheckResponse_result::MergeFrom(const clientCheckResponse_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_clientname()) {
      set_clientname(from.clientname());
    }
    if (from.has_branchno()) {
      set_branchno(from.branchno());
    }
    if (from.has_enablebalance()) {
      set_enablebalance(from.enablebalance());
    }
    if (from.has_currentbalance()) {
      set_currentbalance(from.currentbalance());
    }
    if (from.has_fundaccount()) {
      set_fundaccount(from.fundaccount());
    }
    if (from.has_fundaccountcount()) {
      set_fundaccountcount(from.fundaccountcount());
    }
    if (from.has_sysstatus()) {
      set_sysstatus(from.sysstatus());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sysstatusname()) {
      set_sysstatusname(from.sysstatusname());
    }
    if (from.has_moneycount()) {
      set_moneycount(from.moneycount());
    }
    if (from.has_squareflag()) {
      set_squareflag(from.squareflag());
    }
    if (from.has_clientrights()) {
      set_clientrights(from.clientrights());
    }
    if (from.has_companyname()) {
      set_companyname(from.companyname());
    }
    if (from.has_errorno()) {
      set_errorno(from.errorno());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
    if (from.has_currentdate()) {
      set_currentdate(from.currentdate());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lastip()) {
      set_lastip(from.lastip());
    }
    if (from.has_lastlogintime()) {
      set_lastlogintime(from.lastlogintime());
    }
    if (from.has_bankno()) {
      set_bankno(from.bankno());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void clientCheckResponse_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void clientCheckResponse_result::CopyFrom(const clientCheckResponse_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool clientCheckResponse_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;
  
  return true;
}

void clientCheckResponse_result::Swap(clientCheckResponse_result* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(clientname_, other->clientname_);
    std::swap(branchno_, other->branchno_);
    std::swap(enablebalance_, other->enablebalance_);
    std::swap(currentbalance_, other->currentbalance_);
    std::swap(fundaccount_, other->fundaccount_);
    std::swap(fundaccountcount_, other->fundaccountcount_);
    std::swap(sysstatus_, other->sysstatus_);
    std::swap(sysstatusname_, other->sysstatusname_);
    std::swap(moneycount_, other->moneycount_);
    std::swap(squareflag_, other->squareflag_);
    std::swap(clientrights_, other->clientrights_);
    std::swap(companyname_, other->companyname_);
    std::swap(errorno_, other->errorno_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(currentdate_, other->currentdate_);
    std::swap(lastip_, other->lastip_);
    std::swap(lastlogintime_, other->lastlogintime_);
    std::swap(bankno_, other->bankno_);
    std::swap(remark_, other->remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata clientCheckResponse_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = clientCheckResponse_result_descriptor_;
  metadata.reflection = clientCheckResponse_result_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int clientCheckResponse::kResponsesFieldNumber;
#endif  // !_MSC_VER

clientCheckResponse::clientCheckResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void clientCheckResponse::InitAsDefaultInstance() {
}

clientCheckResponse::clientCheckResponse(const clientCheckResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void clientCheckResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

clientCheckResponse::~clientCheckResponse() {
  SharedDtor();
}

void clientCheckResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void clientCheckResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* clientCheckResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return clientCheckResponse_descriptor_;
}

const clientCheckResponse& clientCheckResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

clientCheckResponse* clientCheckResponse::default_instance_ = NULL;

clientCheckResponse* clientCheckResponse::New() const {
  return new clientCheckResponse;
}

void clientCheckResponse::Clear() {
  responses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool clientCheckResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.clientCheckResponse.result responses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_responses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_responses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_responses;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void clientCheckResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.clientCheckResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->responses(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* clientCheckResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.clientCheckResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->responses(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int clientCheckResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.clientCheckResponse.result responses = 1;
  total_size += 1 * this->responses_size();
  for (int i = 0; i < this->responses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->responses(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void clientCheckResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const clientCheckResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const clientCheckResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void clientCheckResponse::MergeFrom(const clientCheckResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  responses_.MergeFrom(from.responses_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void clientCheckResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void clientCheckResponse::CopyFrom(const clientCheckResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool clientCheckResponse::IsInitialized() const {
  
  for (int i = 0; i < responses_size(); i++) {
    if (!this->responses(i).IsInitialized()) return false;
  }
  return true;
}

void clientCheckResponse::Swap(clientCheckResponse* other) {
  if (other != this) {
    responses_.Swap(&other->responses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata clientCheckResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = clientCheckResponse_descriptor_;
  metadata.reflection = clientCheckResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int entrustStockRequest_call::kLocalIDFieldNumber;
const int entrustStockRequest_call::kBranchNoFieldNumber;
const int entrustStockRequest_call::kFundAccountFieldNumber;
const int entrustStockRequest_call::kPasswordFieldNumber;
const int entrustStockRequest_call::kExchangeTypeFieldNumber;
const int entrustStockRequest_call::kStockAccountFieldNumber;
const int entrustStockRequest_call::kStockCodeFieldNumber;
const int entrustStockRequest_call::kEntrustAmountFieldNumber;
const int entrustStockRequest_call::kEntrustPriceFieldNumber;
const int entrustStockRequest_call::kEntrustBSFieldNumber;
#endif  // !_MSC_VER

entrustStockRequest_call::entrustStockRequest_call()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void entrustStockRequest_call::InitAsDefaultInstance() {
}

entrustStockRequest_call::entrustStockRequest_call(const entrustStockRequest_call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void entrustStockRequest_call::SharedCtor() {
  _cached_size_ = 0;
  localid_ = GOOGLE_LONGLONG(0);
  branchno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fundaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangetype_ = 0;
  stockaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entrustamount_ = GOOGLE_LONGLONG(0);
  entrustprice_ = GOOGLE_LONGLONG(0);
  entrustbs_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

entrustStockRequest_call::~entrustStockRequest_call() {
  SharedDtor();
}

void entrustStockRequest_call::SharedDtor() {
  if (branchno_ != &::google::protobuf::internal::kEmptyString) {
    delete branchno_;
  }
  if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete fundaccount_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (stockaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete stockaccount_;
  }
  if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
    delete stockcode_;
  }
  if (this != default_instance_) {
  }
}

void entrustStockRequest_call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* entrustStockRequest_call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return entrustStockRequest_call_descriptor_;
}

const entrustStockRequest_call& entrustStockRequest_call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

entrustStockRequest_call* entrustStockRequest_call::default_instance_ = NULL;

entrustStockRequest_call* entrustStockRequest_call::New() const {
  return new entrustStockRequest_call;
}

void entrustStockRequest_call::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    localid_ = GOOGLE_LONGLONG(0);
    if (has_branchno()) {
      if (branchno_ != &::google::protobuf::internal::kEmptyString) {
        branchno_->clear();
      }
    }
    if (has_fundaccount()) {
      if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
        fundaccount_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    exchangetype_ = 0;
    if (has_stockaccount()) {
      if (stockaccount_ != &::google::protobuf::internal::kEmptyString) {
        stockaccount_->clear();
      }
    }
    if (has_stockcode()) {
      if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
        stockcode_->clear();
      }
    }
    entrustamount_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    entrustprice_ = GOOGLE_LONGLONG(0);
    entrustbs_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool entrustStockRequest_call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 localID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &localid_)));
          set_has_localid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_branchNo;
        break;
      }
      
      // required string branchNo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_branchNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branchno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->branchno().data(), this->branchno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fundAccount;
        break;
      }
      
      // required string fundAccount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fundAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fundaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fundaccount().data(), this->fundaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }
      
      // required string password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exchangeType;
        break;
      }
      
      // required .HSCommPB.enums.exchangeType exchangeType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchangeType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HSCommPB::enums_exchangeType_IsValid(value)) {
            set_exchangetype(static_cast< ::HSCommPB::enums_exchangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stockAccount;
        break;
      }
      
      // required string stockAccount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stockAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stockaccount().data(), this->stockaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_stockCode;
        break;
      }
      
      // required string stockCode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stockCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stockcode().data(), this->stockcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_entrustAmount;
        break;
      }
      
      // required int64 entrustAmount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entrustAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &entrustamount_)));
          set_has_entrustamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_entrustPrice;
        break;
      }
      
      // required int64 entrustPrice = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entrustPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &entrustprice_)));
          set_has_entrustprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_entrustBS;
        break;
      }
      
      // required .HSCommPB.enums.entrustBS entrustBS = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entrustBS:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HSCommPB::enums_entrustBS_IsValid(value)) {
            set_entrustbs(static_cast< ::HSCommPB::enums_entrustBS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void entrustStockRequest_call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 localID = 1;
  if (has_localid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->localid(), output);
  }
  
  // required string branchNo = 2;
  if (has_branchno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->branchno().data(), this->branchno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->branchno(), output);
  }
  
  // required string fundAccount = 3;
  if (has_fundaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fundaccount().data(), this->fundaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fundaccount(), output);
  }
  
  // required string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password(), output);
  }
  
  // required .HSCommPB.enums.exchangeType exchangeType = 5;
  if (has_exchangetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->exchangetype(), output);
  }
  
  // required string stockAccount = 6;
  if (has_stockaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockaccount().data(), this->stockaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->stockaccount(), output);
  }
  
  // required string stockCode = 7;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->stockcode(), output);
  }
  
  // required int64 entrustAmount = 8;
  if (has_entrustamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->entrustamount(), output);
  }
  
  // required int64 entrustPrice = 9;
  if (has_entrustprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->entrustprice(), output);
  }
  
  // required .HSCommPB.enums.entrustBS entrustBS = 10;
  if (has_entrustbs()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->entrustbs(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* entrustStockRequest_call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 localID = 1;
  if (has_localid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->localid(), target);
  }
  
  // required string branchNo = 2;
  if (has_branchno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->branchno().data(), this->branchno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->branchno(), target);
  }
  
  // required string fundAccount = 3;
  if (has_fundaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fundaccount().data(), this->fundaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fundaccount(), target);
  }
  
  // required string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }
  
  // required .HSCommPB.enums.exchangeType exchangeType = 5;
  if (has_exchangetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->exchangetype(), target);
  }
  
  // required string stockAccount = 6;
  if (has_stockaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockaccount().data(), this->stockaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->stockaccount(), target);
  }
  
  // required string stockCode = 7;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->stockcode(), target);
  }
  
  // required int64 entrustAmount = 8;
  if (has_entrustamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->entrustamount(), target);
  }
  
  // required int64 entrustPrice = 9;
  if (has_entrustprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->entrustprice(), target);
  }
  
  // required .HSCommPB.enums.entrustBS entrustBS = 10;
  if (has_entrustbs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->entrustbs(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int entrustStockRequest_call::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 localID = 1;
    if (has_localid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->localid());
    }
    
    // required string branchNo = 2;
    if (has_branchno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->branchno());
    }
    
    // required string fundAccount = 3;
    if (has_fundaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fundaccount());
    }
    
    // required string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // required .HSCommPB.enums.exchangeType exchangeType = 5;
    if (has_exchangetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchangetype());
    }
    
    // required string stockAccount = 6;
    if (has_stockaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockaccount());
    }
    
    // required string stockCode = 7;
    if (has_stockcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockcode());
    }
    
    // required int64 entrustAmount = 8;
    if (has_entrustamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->entrustamount());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 entrustPrice = 9;
    if (has_entrustprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->entrustprice());
    }
    
    // required .HSCommPB.enums.entrustBS entrustBS = 10;
    if (has_entrustbs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->entrustbs());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void entrustStockRequest_call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const entrustStockRequest_call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const entrustStockRequest_call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void entrustStockRequest_call::MergeFrom(const entrustStockRequest_call& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_localid()) {
      set_localid(from.localid());
    }
    if (from.has_branchno()) {
      set_branchno(from.branchno());
    }
    if (from.has_fundaccount()) {
      set_fundaccount(from.fundaccount());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_exchangetype()) {
      set_exchangetype(from.exchangetype());
    }
    if (from.has_stockaccount()) {
      set_stockaccount(from.stockaccount());
    }
    if (from.has_stockcode()) {
      set_stockcode(from.stockcode());
    }
    if (from.has_entrustamount()) {
      set_entrustamount(from.entrustamount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_entrustprice()) {
      set_entrustprice(from.entrustprice());
    }
    if (from.has_entrustbs()) {
      set_entrustbs(from.entrustbs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void entrustStockRequest_call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void entrustStockRequest_call::CopyFrom(const entrustStockRequest_call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool entrustStockRequest_call::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  
  return true;
}

void entrustStockRequest_call::Swap(entrustStockRequest_call* other) {
  if (other != this) {
    std::swap(localid_, other->localid_);
    std::swap(branchno_, other->branchno_);
    std::swap(fundaccount_, other->fundaccount_);
    std::swap(password_, other->password_);
    std::swap(exchangetype_, other->exchangetype_);
    std::swap(stockaccount_, other->stockaccount_);
    std::swap(stockcode_, other->stockcode_);
    std::swap(entrustamount_, other->entrustamount_);
    std::swap(entrustprice_, other->entrustprice_);
    std::swap(entrustbs_, other->entrustbs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata entrustStockRequest_call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = entrustStockRequest_call_descriptor_;
  metadata.reflection = entrustStockRequest_call_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int entrustStockRequest::kRequestsFieldNumber;
#endif  // !_MSC_VER

entrustStockRequest::entrustStockRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void entrustStockRequest::InitAsDefaultInstance() {
}

entrustStockRequest::entrustStockRequest(const entrustStockRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void entrustStockRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

entrustStockRequest::~entrustStockRequest() {
  SharedDtor();
}

void entrustStockRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void entrustStockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* entrustStockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return entrustStockRequest_descriptor_;
}

const entrustStockRequest& entrustStockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

entrustStockRequest* entrustStockRequest::default_instance_ = NULL;

entrustStockRequest* entrustStockRequest::New() const {
  return new entrustStockRequest;
}

void entrustStockRequest::Clear() {
  requests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool entrustStockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.entrustStockRequest.call requests = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_requests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_requests;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void entrustStockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.entrustStockRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requests(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* entrustStockRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.entrustStockRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->requests(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int entrustStockRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.entrustStockRequest.call requests = 1;
  total_size += 1 * this->requests_size();
  for (int i = 0; i < this->requests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requests(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void entrustStockRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const entrustStockRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const entrustStockRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void entrustStockRequest::MergeFrom(const entrustStockRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  requests_.MergeFrom(from.requests_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void entrustStockRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void entrustStockRequest::CopyFrom(const entrustStockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool entrustStockRequest::IsInitialized() const {
  
  for (int i = 0; i < requests_size(); i++) {
    if (!this->requests(i).IsInitialized()) return false;
  }
  return true;
}

void entrustStockRequest::Swap(entrustStockRequest* other) {
  if (other != this) {
    requests_.Swap(&other->requests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata entrustStockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = entrustStockRequest_descriptor_;
  metadata.reflection = entrustStockRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int entrustStockResponse_result::kLocalIDFieldNumber;
const int entrustStockResponse_result::kEntrustNoFieldNumber;
const int entrustStockResponse_result::kErrorNoFieldNumber;
const int entrustStockResponse_result::kErrorMsgFieldNumber;
#endif  // !_MSC_VER

entrustStockResponse_result::entrustStockResponse_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void entrustStockResponse_result::InitAsDefaultInstance() {
}

entrustStockResponse_result::entrustStockResponse_result(const entrustStockResponse_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void entrustStockResponse_result::SharedCtor() {
  _cached_size_ = 0;
  localid_ = GOOGLE_LONGLONG(0);
  entrustno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  errorno_ = 0;
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

entrustStockResponse_result::~entrustStockResponse_result() {
  SharedDtor();
}

void entrustStockResponse_result::SharedDtor() {
  if (entrustno_ != &::google::protobuf::internal::kEmptyString) {
    delete entrustno_;
  }
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (this != default_instance_) {
  }
}

void entrustStockResponse_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* entrustStockResponse_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return entrustStockResponse_result_descriptor_;
}

const entrustStockResponse_result& entrustStockResponse_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

entrustStockResponse_result* entrustStockResponse_result::default_instance_ = NULL;

entrustStockResponse_result* entrustStockResponse_result::New() const {
  return new entrustStockResponse_result;
}

void entrustStockResponse_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    localid_ = GOOGLE_LONGLONG(0);
    if (has_entrustno()) {
      if (entrustno_ != &::google::protobuf::internal::kEmptyString) {
        entrustno_->clear();
      }
    }
    errorno_ = 0;
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool entrustStockResponse_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 localID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &localid_)));
          set_has_localid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrustNo;
        break;
      }
      
      // required string entrustNo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrustNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entrustno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entrustno().data(), this->entrustno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_errorNo;
        break;
      }
      
      // optional int32 errorNo = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorno_)));
          set_has_errorno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_errorMsg;
        break;
      }
      
      // optional string errorMsg = 15 [default = ""];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void entrustStockResponse_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 localID = 1;
  if (has_localid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->localid(), output);
  }
  
  // required string entrustNo = 2;
  if (has_entrustno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entrustno().data(), this->entrustno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->entrustno(), output);
  }
  
  // optional int32 errorNo = 14 [default = 0];
  if (has_errorno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->errorno(), output);
  }
  
  // optional string errorMsg = 15 [default = ""];
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->errormsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* entrustStockResponse_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 localID = 1;
  if (has_localid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->localid(), target);
  }
  
  // required string entrustNo = 2;
  if (has_entrustno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entrustno().data(), this->entrustno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->entrustno(), target);
  }
  
  // optional int32 errorNo = 14 [default = 0];
  if (has_errorno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->errorno(), target);
  }
  
  // optional string errorMsg = 15 [default = ""];
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->errormsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int entrustStockResponse_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 localID = 1;
    if (has_localid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->localid());
    }
    
    // required string entrustNo = 2;
    if (has_entrustno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entrustno());
    }
    
    // optional int32 errorNo = 14 [default = 0];
    if (has_errorno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorno());
    }
    
    // optional string errorMsg = 15 [default = ""];
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void entrustStockResponse_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const entrustStockResponse_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const entrustStockResponse_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void entrustStockResponse_result::MergeFrom(const entrustStockResponse_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_localid()) {
      set_localid(from.localid());
    }
    if (from.has_entrustno()) {
      set_entrustno(from.entrustno());
    }
    if (from.has_errorno()) {
      set_errorno(from.errorno());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void entrustStockResponse_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void entrustStockResponse_result::CopyFrom(const entrustStockResponse_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool entrustStockResponse_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void entrustStockResponse_result::Swap(entrustStockResponse_result* other) {
  if (other != this) {
    std::swap(localid_, other->localid_);
    std::swap(entrustno_, other->entrustno_);
    std::swap(errorno_, other->errorno_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata entrustStockResponse_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = entrustStockResponse_result_descriptor_;
  metadata.reflection = entrustStockResponse_result_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int entrustStockResponse::kResponsesFieldNumber;
#endif  // !_MSC_VER

entrustStockResponse::entrustStockResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void entrustStockResponse::InitAsDefaultInstance() {
}

entrustStockResponse::entrustStockResponse(const entrustStockResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void entrustStockResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

entrustStockResponse::~entrustStockResponse() {
  SharedDtor();
}

void entrustStockResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void entrustStockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* entrustStockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return entrustStockResponse_descriptor_;
}

const entrustStockResponse& entrustStockResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

entrustStockResponse* entrustStockResponse::default_instance_ = NULL;

entrustStockResponse* entrustStockResponse::New() const {
  return new entrustStockResponse;
}

void entrustStockResponse::Clear() {
  responses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool entrustStockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.entrustStockResponse.result responses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_responses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_responses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_responses;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void entrustStockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.entrustStockResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->responses(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* entrustStockResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.entrustStockResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->responses(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int entrustStockResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.entrustStockResponse.result responses = 1;
  total_size += 1 * this->responses_size();
  for (int i = 0; i < this->responses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->responses(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void entrustStockResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const entrustStockResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const entrustStockResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void entrustStockResponse::MergeFrom(const entrustStockResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  responses_.MergeFrom(from.responses_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void entrustStockResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void entrustStockResponse::CopyFrom(const entrustStockResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool entrustStockResponse::IsInitialized() const {
  
  for (int i = 0; i < responses_size(); i++) {
    if (!this->responses(i).IsInitialized()) return false;
  }
  return true;
}

void entrustStockResponse::Swap(entrustStockResponse* other) {
  if (other != this) {
    responses_.Swap(&other->responses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata entrustStockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = entrustStockResponse_descriptor_;
  metadata.reflection = entrustStockResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cancelEntrustRequest_call::kBranchNoFieldNumber;
const int cancelEntrustRequest_call::kFundAccountFieldNumber;
const int cancelEntrustRequest_call::kPasswordFieldNumber;
const int cancelEntrustRequest_call::kEntrustNoFieldNumber;
#endif  // !_MSC_VER

cancelEntrustRequest_call::cancelEntrustRequest_call()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cancelEntrustRequest_call::InitAsDefaultInstance() {
}

cancelEntrustRequest_call::cancelEntrustRequest_call(const cancelEntrustRequest_call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cancelEntrustRequest_call::SharedCtor() {
  _cached_size_ = 0;
  branchno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fundaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entrustno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cancelEntrustRequest_call::~cancelEntrustRequest_call() {
  SharedDtor();
}

void cancelEntrustRequest_call::SharedDtor() {
  if (branchno_ != &::google::protobuf::internal::kEmptyString) {
    delete branchno_;
  }
  if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete fundaccount_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (entrustno_ != &::google::protobuf::internal::kEmptyString) {
    delete entrustno_;
  }
  if (this != default_instance_) {
  }
}

void cancelEntrustRequest_call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cancelEntrustRequest_call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cancelEntrustRequest_call_descriptor_;
}

const cancelEntrustRequest_call& cancelEntrustRequest_call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

cancelEntrustRequest_call* cancelEntrustRequest_call::default_instance_ = NULL;

cancelEntrustRequest_call* cancelEntrustRequest_call::New() const {
  return new cancelEntrustRequest_call;
}

void cancelEntrustRequest_call::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_branchno()) {
      if (branchno_ != &::google::protobuf::internal::kEmptyString) {
        branchno_->clear();
      }
    }
    if (has_fundaccount()) {
      if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
        fundaccount_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_entrustno()) {
      if (entrustno_ != &::google::protobuf::internal::kEmptyString) {
        entrustno_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cancelEntrustRequest_call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string branchNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branchno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->branchno().data(), this->branchno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fundAccount;
        break;
      }
      
      // required string fundAccount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fundAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fundaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fundaccount().data(), this->fundaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }
      
      // required string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_entrustNo;
        break;
      }
      
      // required string entrustNo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrustNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entrustno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entrustno().data(), this->entrustno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cancelEntrustRequest_call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string branchNo = 1;
  if (has_branchno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->branchno().data(), this->branchno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->branchno(), output);
  }
  
  // required string fundAccount = 2;
  if (has_fundaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fundaccount().data(), this->fundaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fundaccount(), output);
  }
  
  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }
  
  // required string entrustNo = 4;
  if (has_entrustno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entrustno().data(), this->entrustno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->entrustno(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cancelEntrustRequest_call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string branchNo = 1;
  if (has_branchno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->branchno().data(), this->branchno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->branchno(), target);
  }
  
  // required string fundAccount = 2;
  if (has_fundaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fundaccount().data(), this->fundaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fundaccount(), target);
  }
  
  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }
  
  // required string entrustNo = 4;
  if (has_entrustno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entrustno().data(), this->entrustno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->entrustno(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cancelEntrustRequest_call::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string branchNo = 1;
    if (has_branchno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->branchno());
    }
    
    // required string fundAccount = 2;
    if (has_fundaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fundaccount());
    }
    
    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // required string entrustNo = 4;
    if (has_entrustno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entrustno());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cancelEntrustRequest_call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cancelEntrustRequest_call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cancelEntrustRequest_call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cancelEntrustRequest_call::MergeFrom(const cancelEntrustRequest_call& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_branchno()) {
      set_branchno(from.branchno());
    }
    if (from.has_fundaccount()) {
      set_fundaccount(from.fundaccount());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_entrustno()) {
      set_entrustno(from.entrustno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cancelEntrustRequest_call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cancelEntrustRequest_call::CopyFrom(const cancelEntrustRequest_call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cancelEntrustRequest_call::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void cancelEntrustRequest_call::Swap(cancelEntrustRequest_call* other) {
  if (other != this) {
    std::swap(branchno_, other->branchno_);
    std::swap(fundaccount_, other->fundaccount_);
    std::swap(password_, other->password_);
    std::swap(entrustno_, other->entrustno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cancelEntrustRequest_call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cancelEntrustRequest_call_descriptor_;
  metadata.reflection = cancelEntrustRequest_call_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int cancelEntrustRequest::kRequestsFieldNumber;
#endif  // !_MSC_VER

cancelEntrustRequest::cancelEntrustRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cancelEntrustRequest::InitAsDefaultInstance() {
}

cancelEntrustRequest::cancelEntrustRequest(const cancelEntrustRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cancelEntrustRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cancelEntrustRequest::~cancelEntrustRequest() {
  SharedDtor();
}

void cancelEntrustRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cancelEntrustRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cancelEntrustRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cancelEntrustRequest_descriptor_;
}

const cancelEntrustRequest& cancelEntrustRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

cancelEntrustRequest* cancelEntrustRequest::default_instance_ = NULL;

cancelEntrustRequest* cancelEntrustRequest::New() const {
  return new cancelEntrustRequest;
}

void cancelEntrustRequest::Clear() {
  requests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cancelEntrustRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.cancelEntrustRequest.call requests = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_requests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_requests;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cancelEntrustRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.cancelEntrustRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requests(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cancelEntrustRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.cancelEntrustRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->requests(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cancelEntrustRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.cancelEntrustRequest.call requests = 1;
  total_size += 1 * this->requests_size();
  for (int i = 0; i < this->requests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requests(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cancelEntrustRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cancelEntrustRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cancelEntrustRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cancelEntrustRequest::MergeFrom(const cancelEntrustRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  requests_.MergeFrom(from.requests_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cancelEntrustRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cancelEntrustRequest::CopyFrom(const cancelEntrustRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cancelEntrustRequest::IsInitialized() const {
  
  for (int i = 0; i < requests_size(); i++) {
    if (!this->requests(i).IsInitialized()) return false;
  }
  return true;
}

void cancelEntrustRequest::Swap(cancelEntrustRequest* other) {
  if (other != this) {
    requests_.Swap(&other->requests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cancelEntrustRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cancelEntrustRequest_descriptor_;
  metadata.reflection = cancelEntrustRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int cancelEntrustResponse_result::kEntrustNoFieldNumber;
const int cancelEntrustResponse_result::kErrorNoFieldNumber;
const int cancelEntrustResponse_result::kErrorMsgFieldNumber;
#endif  // !_MSC_VER

cancelEntrustResponse_result::cancelEntrustResponse_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cancelEntrustResponse_result::InitAsDefaultInstance() {
}

cancelEntrustResponse_result::cancelEntrustResponse_result(const cancelEntrustResponse_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cancelEntrustResponse_result::SharedCtor() {
  _cached_size_ = 0;
  entrustno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  errorno_ = 0;
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cancelEntrustResponse_result::~cancelEntrustResponse_result() {
  SharedDtor();
}

void cancelEntrustResponse_result::SharedDtor() {
  if (entrustno_ != &::google::protobuf::internal::kEmptyString) {
    delete entrustno_;
  }
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (this != default_instance_) {
  }
}

void cancelEntrustResponse_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cancelEntrustResponse_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cancelEntrustResponse_result_descriptor_;
}

const cancelEntrustResponse_result& cancelEntrustResponse_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

cancelEntrustResponse_result* cancelEntrustResponse_result::default_instance_ = NULL;

cancelEntrustResponse_result* cancelEntrustResponse_result::New() const {
  return new cancelEntrustResponse_result;
}

void cancelEntrustResponse_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_entrustno()) {
      if (entrustno_ != &::google::protobuf::internal::kEmptyString) {
        entrustno_->clear();
      }
    }
    errorno_ = 0;
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cancelEntrustResponse_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string entrustNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entrustno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entrustno().data(), this->entrustno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_errorNo;
        break;
      }
      
      // optional int32 errorNo = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorno_)));
          set_has_errorno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_errorMsg;
        break;
      }
      
      // optional string errorMsg = 15 [default = ""];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cancelEntrustResponse_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string entrustNo = 1;
  if (has_entrustno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entrustno().data(), this->entrustno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->entrustno(), output);
  }
  
  // optional int32 errorNo = 14 [default = 0];
  if (has_errorno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->errorno(), output);
  }
  
  // optional string errorMsg = 15 [default = ""];
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->errormsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cancelEntrustResponse_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string entrustNo = 1;
  if (has_entrustno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entrustno().data(), this->entrustno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->entrustno(), target);
  }
  
  // optional int32 errorNo = 14 [default = 0];
  if (has_errorno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->errorno(), target);
  }
  
  // optional string errorMsg = 15 [default = ""];
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->errormsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cancelEntrustResponse_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string entrustNo = 1;
    if (has_entrustno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entrustno());
    }
    
    // optional int32 errorNo = 14 [default = 0];
    if (has_errorno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorno());
    }
    
    // optional string errorMsg = 15 [default = ""];
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cancelEntrustResponse_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cancelEntrustResponse_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cancelEntrustResponse_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cancelEntrustResponse_result::MergeFrom(const cancelEntrustResponse_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entrustno()) {
      set_entrustno(from.entrustno());
    }
    if (from.has_errorno()) {
      set_errorno(from.errorno());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cancelEntrustResponse_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cancelEntrustResponse_result::CopyFrom(const cancelEntrustResponse_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cancelEntrustResponse_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void cancelEntrustResponse_result::Swap(cancelEntrustResponse_result* other) {
  if (other != this) {
    std::swap(entrustno_, other->entrustno_);
    std::swap(errorno_, other->errorno_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cancelEntrustResponse_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cancelEntrustResponse_result_descriptor_;
  metadata.reflection = cancelEntrustResponse_result_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int cancelEntrustResponse::kResponsesFieldNumber;
#endif  // !_MSC_VER

cancelEntrustResponse::cancelEntrustResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void cancelEntrustResponse::InitAsDefaultInstance() {
}

cancelEntrustResponse::cancelEntrustResponse(const cancelEntrustResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void cancelEntrustResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

cancelEntrustResponse::~cancelEntrustResponse() {
  SharedDtor();
}

void cancelEntrustResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void cancelEntrustResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cancelEntrustResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cancelEntrustResponse_descriptor_;
}

const cancelEntrustResponse& cancelEntrustResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

cancelEntrustResponse* cancelEntrustResponse::default_instance_ = NULL;

cancelEntrustResponse* cancelEntrustResponse::New() const {
  return new cancelEntrustResponse;
}

void cancelEntrustResponse::Clear() {
  responses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool cancelEntrustResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.cancelEntrustResponse.result responses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_responses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_responses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_responses;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void cancelEntrustResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.cancelEntrustResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->responses(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* cancelEntrustResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.cancelEntrustResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->responses(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int cancelEntrustResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.cancelEntrustResponse.result responses = 1;
  total_size += 1 * this->responses_size();
  for (int i = 0; i < this->responses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->responses(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cancelEntrustResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const cancelEntrustResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const cancelEntrustResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void cancelEntrustResponse::MergeFrom(const cancelEntrustResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  responses_.MergeFrom(from.responses_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void cancelEntrustResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cancelEntrustResponse::CopyFrom(const cancelEntrustResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cancelEntrustResponse::IsInitialized() const {
  
  for (int i = 0; i < responses_size(); i++) {
    if (!this->responses(i).IsInitialized()) return false;
  }
  return true;
}

void cancelEntrustResponse::Swap(cancelEntrustResponse* other) {
  if (other != this) {
    responses_.Swap(&other->responses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata cancelEntrustResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = cancelEntrustResponse_descriptor_;
  metadata.reflection = cancelEntrustResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int queryEntrustRequest_call::kBranchNoFieldNumber;
const int queryEntrustRequest_call::kFundAccountFieldNumber;
const int queryEntrustRequest_call::kPasswordFieldNumber;
const int queryEntrustRequest_call::kEntrustNoFieldNumber;
const int queryEntrustRequest_call::kQueryOnlyCancelableFieldNumber;
const int queryEntrustRequest_call::kRequestNumberFieldNumber;
const int queryEntrustRequest_call::kLastPositionStringFieldNumber;
#endif  // !_MSC_VER

queryEntrustRequest_call::queryEntrustRequest_call()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryEntrustRequest_call::InitAsDefaultInstance() {
}

queryEntrustRequest_call::queryEntrustRequest_call(const queryEntrustRequest_call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryEntrustRequest_call::SharedCtor() {
  _cached_size_ = 0;
  branchno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fundaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entrustno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  queryonlycancelable_ = false;
  requestnumber_ = 1000;
  lastpositionstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryEntrustRequest_call::~queryEntrustRequest_call() {
  SharedDtor();
}

void queryEntrustRequest_call::SharedDtor() {
  if (branchno_ != &::google::protobuf::internal::kEmptyString) {
    delete branchno_;
  }
  if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete fundaccount_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (entrustno_ != &::google::protobuf::internal::kEmptyString) {
    delete entrustno_;
  }
  if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
    delete lastpositionstring_;
  }
  if (this != default_instance_) {
  }
}

void queryEntrustRequest_call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryEntrustRequest_call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryEntrustRequest_call_descriptor_;
}

const queryEntrustRequest_call& queryEntrustRequest_call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryEntrustRequest_call* queryEntrustRequest_call::default_instance_ = NULL;

queryEntrustRequest_call* queryEntrustRequest_call::New() const {
  return new queryEntrustRequest_call;
}

void queryEntrustRequest_call::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_branchno()) {
      if (branchno_ != &::google::protobuf::internal::kEmptyString) {
        branchno_->clear();
      }
    }
    if (has_fundaccount()) {
      if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
        fundaccount_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_entrustno()) {
      if (entrustno_ != &::google::protobuf::internal::kEmptyString) {
        entrustno_->clear();
      }
    }
    queryonlycancelable_ = false;
    requestnumber_ = 1000;
    if (has_lastpositionstring()) {
      if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
        lastpositionstring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryEntrustRequest_call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string branchNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branchno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->branchno().data(), this->branchno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fundAccount;
        break;
      }
      
      // required string fundAccount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fundAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fundaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fundaccount().data(), this->fundaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }
      
      // required string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_entrustNo;
        break;
      }
      
      // optional string entrustNo = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrustNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entrustno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entrustno().data(), this->entrustno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_queryOnlyCancelable;
        break;
      }
      
      // optional bool queryOnlyCancelable = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queryOnlyCancelable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &queryonlycancelable_)));
          set_has_queryonlycancelable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_requestNumber;
        break;
      }
      
      // optional int32 requestNumber = 6 [default = 1000];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestnumber_)));
          set_has_requestnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_lastPositionString;
        break;
      }
      
      // optional string lastPositionString = 7 [default = ""];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastPositionString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastpositionstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastpositionstring().data(), this->lastpositionstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryEntrustRequest_call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string branchNo = 1;
  if (has_branchno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->branchno().data(), this->branchno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->branchno(), output);
  }
  
  // required string fundAccount = 2;
  if (has_fundaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fundaccount().data(), this->fundaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fundaccount(), output);
  }
  
  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }
  
  // optional string entrustNo = 4 [default = ""];
  if (has_entrustno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entrustno().data(), this->entrustno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->entrustno(), output);
  }
  
  // optional bool queryOnlyCancelable = 5 [default = false];
  if (has_queryonlycancelable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->queryonlycancelable(), output);
  }
  
  // optional int32 requestNumber = 6 [default = 1000];
  if (has_requestnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->requestnumber(), output);
  }
  
  // optional string lastPositionString = 7 [default = ""];
  if (has_lastpositionstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastpositionstring().data(), this->lastpositionstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->lastpositionstring(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryEntrustRequest_call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string branchNo = 1;
  if (has_branchno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->branchno().data(), this->branchno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->branchno(), target);
  }
  
  // required string fundAccount = 2;
  if (has_fundaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fundaccount().data(), this->fundaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fundaccount(), target);
  }
  
  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }
  
  // optional string entrustNo = 4 [default = ""];
  if (has_entrustno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entrustno().data(), this->entrustno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->entrustno(), target);
  }
  
  // optional bool queryOnlyCancelable = 5 [default = false];
  if (has_queryonlycancelable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->queryonlycancelable(), target);
  }
  
  // optional int32 requestNumber = 6 [default = 1000];
  if (has_requestnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->requestnumber(), target);
  }
  
  // optional string lastPositionString = 7 [default = ""];
  if (has_lastpositionstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastpositionstring().data(), this->lastpositionstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->lastpositionstring(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryEntrustRequest_call::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string branchNo = 1;
    if (has_branchno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->branchno());
    }
    
    // required string fundAccount = 2;
    if (has_fundaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fundaccount());
    }
    
    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional string entrustNo = 4 [default = ""];
    if (has_entrustno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entrustno());
    }
    
    // optional bool queryOnlyCancelable = 5 [default = false];
    if (has_queryonlycancelable()) {
      total_size += 1 + 1;
    }
    
    // optional int32 requestNumber = 6 [default = 1000];
    if (has_requestnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestnumber());
    }
    
    // optional string lastPositionString = 7 [default = ""];
    if (has_lastpositionstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastpositionstring());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryEntrustRequest_call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryEntrustRequest_call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryEntrustRequest_call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryEntrustRequest_call::MergeFrom(const queryEntrustRequest_call& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_branchno()) {
      set_branchno(from.branchno());
    }
    if (from.has_fundaccount()) {
      set_fundaccount(from.fundaccount());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_entrustno()) {
      set_entrustno(from.entrustno());
    }
    if (from.has_queryonlycancelable()) {
      set_queryonlycancelable(from.queryonlycancelable());
    }
    if (from.has_requestnumber()) {
      set_requestnumber(from.requestnumber());
    }
    if (from.has_lastpositionstring()) {
      set_lastpositionstring(from.lastpositionstring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryEntrustRequest_call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryEntrustRequest_call::CopyFrom(const queryEntrustRequest_call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryEntrustRequest_call::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void queryEntrustRequest_call::Swap(queryEntrustRequest_call* other) {
  if (other != this) {
    std::swap(branchno_, other->branchno_);
    std::swap(fundaccount_, other->fundaccount_);
    std::swap(password_, other->password_);
    std::swap(entrustno_, other->entrustno_);
    std::swap(queryonlycancelable_, other->queryonlycancelable_);
    std::swap(requestnumber_, other->requestnumber_);
    std::swap(lastpositionstring_, other->lastpositionstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryEntrustRequest_call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryEntrustRequest_call_descriptor_;
  metadata.reflection = queryEntrustRequest_call_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int queryEntrustRequest::kRequestsFieldNumber;
#endif  // !_MSC_VER

queryEntrustRequest::queryEntrustRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryEntrustRequest::InitAsDefaultInstance() {
}

queryEntrustRequest::queryEntrustRequest(const queryEntrustRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryEntrustRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryEntrustRequest::~queryEntrustRequest() {
  SharedDtor();
}

void queryEntrustRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void queryEntrustRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryEntrustRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryEntrustRequest_descriptor_;
}

const queryEntrustRequest& queryEntrustRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryEntrustRequest* queryEntrustRequest::default_instance_ = NULL;

queryEntrustRequest* queryEntrustRequest::New() const {
  return new queryEntrustRequest;
}

void queryEntrustRequest::Clear() {
  requests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryEntrustRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.queryEntrustRequest.call requests = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_requests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_requests;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryEntrustRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.queryEntrustRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requests(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryEntrustRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.queryEntrustRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->requests(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryEntrustRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.queryEntrustRequest.call requests = 1;
  total_size += 1 * this->requests_size();
  for (int i = 0; i < this->requests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requests(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryEntrustRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryEntrustRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryEntrustRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryEntrustRequest::MergeFrom(const queryEntrustRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  requests_.MergeFrom(from.requests_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryEntrustRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryEntrustRequest::CopyFrom(const queryEntrustRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryEntrustRequest::IsInitialized() const {
  
  for (int i = 0; i < requests_size(); i++) {
    if (!this->requests(i).IsInitialized()) return false;
  }
  return true;
}

void queryEntrustRequest::Swap(queryEntrustRequest* other) {
  if (other != this) {
    requests_.Swap(&other->requests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryEntrustRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryEntrustRequest_descriptor_;
  metadata.reflection = queryEntrustRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int queryEntrustResponse_result_entrust::kEntrustNoFieldNumber;
const int queryEntrustResponse_result_entrust::kStockCodeFieldNumber;
const int queryEntrustResponse_result_entrust::kStockNameFieldNumber;
const int queryEntrustResponse_result_entrust::kEntrustBSFieldNumber;
const int queryEntrustResponse_result_entrust::kEntrustAmountFieldNumber;
const int queryEntrustResponse_result_entrust::kEntrustPriceFieldNumber;
const int queryEntrustResponse_result_entrust::kBusinessAmountFieldNumber;
const int queryEntrustResponse_result_entrust::kBusinessPriceFieldNumber;
const int queryEntrustResponse_result_entrust::kCancelvolFieldNumber;
const int queryEntrustResponse_result_entrust::kInternalsidFieldNumber;
const int queryEntrustResponse_result_entrust::kFEEandTAXFieldNumber;
const int queryEntrustResponse_result_entrust::kTradedoneFieldNumber;
const int queryEntrustResponse_result_entrust::kSuccessFieldNumber;
const int queryEntrustResponse_result_entrust::kInvalidInfoFieldNumber;
#endif  // !_MSC_VER

queryEntrustResponse_result_entrust::queryEntrustResponse_result_entrust()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryEntrustResponse_result_entrust::InitAsDefaultInstance() {
}

queryEntrustResponse_result_entrust::queryEntrustResponse_result_entrust(const queryEntrustResponse_result_entrust& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryEntrustResponse_result_entrust::SharedCtor() {
  _cached_size_ = 0;
  entrustno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entrustbs_ = 0;
  entrustamount_ = GOOGLE_LONGLONG(0);
  entrustprice_ = GOOGLE_LONGLONG(0);
  businessamount_ = GOOGLE_LONGLONG(0);
  businessprice_ = GOOGLE_LONGLONG(0);
  cancelvol_ = GOOGLE_LONGLONG(0);
  internalsid_ = GOOGLE_LONGLONG(0);
  feeandtax_ = GOOGLE_LONGLONG(0);
  tradedone_ = GOOGLE_LONGLONG(0);
  success_ = GOOGLE_LONGLONG(0);
  invalidinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryEntrustResponse_result_entrust::~queryEntrustResponse_result_entrust() {
  SharedDtor();
}

void queryEntrustResponse_result_entrust::SharedDtor() {
  if (entrustno_ != &::google::protobuf::internal::kEmptyString) {
    delete entrustno_;
  }
  if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
    delete stockcode_;
  }
  if (stockname_ != &::google::protobuf::internal::kEmptyString) {
    delete stockname_;
  }
  if (invalidinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete invalidinfo_;
  }
  if (this != default_instance_) {
  }
}

void queryEntrustResponse_result_entrust::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryEntrustResponse_result_entrust::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryEntrustResponse_result_entrust_descriptor_;
}

const queryEntrustResponse_result_entrust& queryEntrustResponse_result_entrust::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryEntrustResponse_result_entrust* queryEntrustResponse_result_entrust::default_instance_ = NULL;

queryEntrustResponse_result_entrust* queryEntrustResponse_result_entrust::New() const {
  return new queryEntrustResponse_result_entrust;
}

void queryEntrustResponse_result_entrust::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_entrustno()) {
      if (entrustno_ != &::google::protobuf::internal::kEmptyString) {
        entrustno_->clear();
      }
    }
    if (has_stockcode()) {
      if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
        stockcode_->clear();
      }
    }
    if (has_stockname()) {
      if (stockname_ != &::google::protobuf::internal::kEmptyString) {
        stockname_->clear();
      }
    }
    entrustbs_ = 0;
    entrustamount_ = GOOGLE_LONGLONG(0);
    entrustprice_ = GOOGLE_LONGLONG(0);
    businessamount_ = GOOGLE_LONGLONG(0);
    businessprice_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cancelvol_ = GOOGLE_LONGLONG(0);
    internalsid_ = GOOGLE_LONGLONG(0);
    feeandtax_ = GOOGLE_LONGLONG(0);
    tradedone_ = GOOGLE_LONGLONG(0);
    success_ = GOOGLE_LONGLONG(0);
    if (has_invalidinfo()) {
      if (invalidinfo_ != &::google::protobuf::internal::kEmptyString) {
        invalidinfo_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryEntrustResponse_result_entrust::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string entrustNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entrustno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entrustno().data(), this->entrustno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stockCode;
        break;
      }
      
      // required string stockCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stockCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stockcode().data(), this->stockcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stockName;
        break;
      }
      
      // required string stockName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stockName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stockname().data(), this->stockname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_entrustBS;
        break;
      }
      
      // required .HSCommPB.enums.entrustBS entrustBS = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entrustBS:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HSCommPB::enums_entrustBS_IsValid(value)) {
            set_entrustbs(static_cast< ::HSCommPB::enums_entrustBS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_entrustAmount;
        break;
      }
      
      // required int64 entrustAmount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entrustAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &entrustamount_)));
          set_has_entrustamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_entrustPrice;
        break;
      }
      
      // required int64 entrustPrice = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entrustPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &entrustprice_)));
          set_has_entrustprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_businessAmount;
        break;
      }
      
      // required int64 businessAmount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_businessAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &businessamount_)));
          set_has_businessamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_businessPrice;
        break;
      }
      
      // required int64 businessPrice = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_businessPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &businessprice_)));
          set_has_businessprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cancelvol;
        break;
      }
      
      // required int64 cancelvol = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cancelvol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cancelvol_)));
          set_has_cancelvol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_internalsid;
        break;
      }
      
      // required int64 internalsid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_internalsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &internalsid_)));
          set_has_internalsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_FEEandTAX;
        break;
      }
      
      // required int64 FEEandTAX = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FEEandTAX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feeandtax_)));
          set_has_feeandtax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_tradedone;
        break;
      }
      
      // required int64 tradedone = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tradedone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradedone_)));
          set_has_tradedone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_success;
        break;
      }
      
      // required int64 success = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_invalidInfo;
        break;
      }
      
      // optional string invalidInfo = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invalidInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invalidinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->invalidinfo().data(), this->invalidinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryEntrustResponse_result_entrust::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string entrustNo = 1;
  if (has_entrustno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entrustno().data(), this->entrustno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->entrustno(), output);
  }
  
  // required string stockCode = 2;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stockcode(), output);
  }
  
  // required string stockName = 3;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stockname(), output);
  }
  
  // required .HSCommPB.enums.entrustBS entrustBS = 4;
  if (has_entrustbs()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->entrustbs(), output);
  }
  
  // required int64 entrustAmount = 5;
  if (has_entrustamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->entrustamount(), output);
  }
  
  // required int64 entrustPrice = 6;
  if (has_entrustprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->entrustprice(), output);
  }
  
  // required int64 businessAmount = 7;
  if (has_businessamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->businessamount(), output);
  }
  
  // required int64 businessPrice = 8;
  if (has_businessprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->businessprice(), output);
  }
  
  // required int64 cancelvol = 9;
  if (has_cancelvol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->cancelvol(), output);
  }
  
  // required int64 internalsid = 10;
  if (has_internalsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->internalsid(), output);
  }
  
  // required int64 FEEandTAX = 11;
  if (has_feeandtax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->feeandtax(), output);
  }
  
  // required int64 tradedone = 12;
  if (has_tradedone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->tradedone(), output);
  }
  
  // required int64 success = 13;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->success(), output);
  }
  
  // optional string invalidInfo = 14;
  if (has_invalidinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invalidinfo().data(), this->invalidinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->invalidinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryEntrustResponse_result_entrust::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string entrustNo = 1;
  if (has_entrustno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entrustno().data(), this->entrustno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->entrustno(), target);
  }
  
  // required string stockCode = 2;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stockcode(), target);
  }
  
  // required string stockName = 3;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stockname(), target);
  }
  
  // required .HSCommPB.enums.entrustBS entrustBS = 4;
  if (has_entrustbs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->entrustbs(), target);
  }
  
  // required int64 entrustAmount = 5;
  if (has_entrustamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->entrustamount(), target);
  }
  
  // required int64 entrustPrice = 6;
  if (has_entrustprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->entrustprice(), target);
  }
  
  // required int64 businessAmount = 7;
  if (has_businessamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->businessamount(), target);
  }
  
  // required int64 businessPrice = 8;
  if (has_businessprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->businessprice(), target);
  }
  
  // required int64 cancelvol = 9;
  if (has_cancelvol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->cancelvol(), target);
  }
  
  // required int64 internalsid = 10;
  if (has_internalsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->internalsid(), target);
  }
  
  // required int64 FEEandTAX = 11;
  if (has_feeandtax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->feeandtax(), target);
  }
  
  // required int64 tradedone = 12;
  if (has_tradedone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->tradedone(), target);
  }
  
  // required int64 success = 13;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->success(), target);
  }
  
  // optional string invalidInfo = 14;
  if (has_invalidinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invalidinfo().data(), this->invalidinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->invalidinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryEntrustResponse_result_entrust::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string entrustNo = 1;
    if (has_entrustno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entrustno());
    }
    
    // required string stockCode = 2;
    if (has_stockcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockcode());
    }
    
    // required string stockName = 3;
    if (has_stockname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockname());
    }
    
    // required .HSCommPB.enums.entrustBS entrustBS = 4;
    if (has_entrustbs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->entrustbs());
    }
    
    // required int64 entrustAmount = 5;
    if (has_entrustamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->entrustamount());
    }
    
    // required int64 entrustPrice = 6;
    if (has_entrustprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->entrustprice());
    }
    
    // required int64 businessAmount = 7;
    if (has_businessamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->businessamount());
    }
    
    // required int64 businessPrice = 8;
    if (has_businessprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->businessprice());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 cancelvol = 9;
    if (has_cancelvol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cancelvol());
    }
    
    // required int64 internalsid = 10;
    if (has_internalsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->internalsid());
    }
    
    // required int64 FEEandTAX = 11;
    if (has_feeandtax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->feeandtax());
    }
    
    // required int64 tradedone = 12;
    if (has_tradedone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tradedone());
    }
    
    // required int64 success = 13;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->success());
    }
    
    // optional string invalidInfo = 14;
    if (has_invalidinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invalidinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryEntrustResponse_result_entrust::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryEntrustResponse_result_entrust* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryEntrustResponse_result_entrust*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryEntrustResponse_result_entrust::MergeFrom(const queryEntrustResponse_result_entrust& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entrustno()) {
      set_entrustno(from.entrustno());
    }
    if (from.has_stockcode()) {
      set_stockcode(from.stockcode());
    }
    if (from.has_stockname()) {
      set_stockname(from.stockname());
    }
    if (from.has_entrustbs()) {
      set_entrustbs(from.entrustbs());
    }
    if (from.has_entrustamount()) {
      set_entrustamount(from.entrustamount());
    }
    if (from.has_entrustprice()) {
      set_entrustprice(from.entrustprice());
    }
    if (from.has_businessamount()) {
      set_businessamount(from.businessamount());
    }
    if (from.has_businessprice()) {
      set_businessprice(from.businessprice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cancelvol()) {
      set_cancelvol(from.cancelvol());
    }
    if (from.has_internalsid()) {
      set_internalsid(from.internalsid());
    }
    if (from.has_feeandtax()) {
      set_feeandtax(from.feeandtax());
    }
    if (from.has_tradedone()) {
      set_tradedone(from.tradedone());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_invalidinfo()) {
      set_invalidinfo(from.invalidinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryEntrustResponse_result_entrust::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryEntrustResponse_result_entrust::CopyFrom(const queryEntrustResponse_result_entrust& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryEntrustResponse_result_entrust::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;
  
  return true;
}

void queryEntrustResponse_result_entrust::Swap(queryEntrustResponse_result_entrust* other) {
  if (other != this) {
    std::swap(entrustno_, other->entrustno_);
    std::swap(stockcode_, other->stockcode_);
    std::swap(stockname_, other->stockname_);
    std::swap(entrustbs_, other->entrustbs_);
    std::swap(entrustamount_, other->entrustamount_);
    std::swap(entrustprice_, other->entrustprice_);
    std::swap(businessamount_, other->businessamount_);
    std::swap(businessprice_, other->businessprice_);
    std::swap(cancelvol_, other->cancelvol_);
    std::swap(internalsid_, other->internalsid_);
    std::swap(feeandtax_, other->feeandtax_);
    std::swap(tradedone_, other->tradedone_);
    std::swap(success_, other->success_);
    std::swap(invalidinfo_, other->invalidinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryEntrustResponse_result_entrust::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryEntrustResponse_result_entrust_descriptor_;
  metadata.reflection = queryEntrustResponse_result_entrust_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int queryEntrustResponse_result::kEntrustsFieldNumber;
const int queryEntrustResponse_result::kLastPositionStringFieldNumber;
const int queryEntrustResponse_result::kErrorNoFieldNumber;
const int queryEntrustResponse_result::kErrorMsgFieldNumber;
#endif  // !_MSC_VER

queryEntrustResponse_result::queryEntrustResponse_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryEntrustResponse_result::InitAsDefaultInstance() {
}

queryEntrustResponse_result::queryEntrustResponse_result(const queryEntrustResponse_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryEntrustResponse_result::SharedCtor() {
  _cached_size_ = 0;
  lastpositionstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  errorno_ = 0;
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryEntrustResponse_result::~queryEntrustResponse_result() {
  SharedDtor();
}

void queryEntrustResponse_result::SharedDtor() {
  if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
    delete lastpositionstring_;
  }
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (this != default_instance_) {
  }
}

void queryEntrustResponse_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryEntrustResponse_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryEntrustResponse_result_descriptor_;
}

const queryEntrustResponse_result& queryEntrustResponse_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryEntrustResponse_result* queryEntrustResponse_result::default_instance_ = NULL;

queryEntrustResponse_result* queryEntrustResponse_result::New() const {
  return new queryEntrustResponse_result;
}

void queryEntrustResponse_result::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_lastpositionstring()) {
      if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
        lastpositionstring_->clear();
      }
    }
    errorno_ = 0;
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
  }
  entrusts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryEntrustResponse_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.queryEntrustResponse.result.entrust entrusts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrusts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrusts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entrusts;
        if (input->ExpectTag(18)) goto parse_lastPositionString;
        break;
      }
      
      // required string lastPositionString = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastPositionString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastpositionstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastpositionstring().data(), this->lastpositionstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_errorNo;
        break;
      }
      
      // optional int32 errorNo = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorno_)));
          set_has_errorno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_errorMsg;
        break;
      }
      
      // optional string errorMsg = 15 [default = ""];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryEntrustResponse_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.queryEntrustResponse.result.entrust entrusts = 1;
  for (int i = 0; i < this->entrusts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entrusts(i), output);
  }
  
  // required string lastPositionString = 2;
  if (has_lastpositionstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastpositionstring().data(), this->lastpositionstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lastpositionstring(), output);
  }
  
  // optional int32 errorNo = 14 [default = 0];
  if (has_errorno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->errorno(), output);
  }
  
  // optional string errorMsg = 15 [default = ""];
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->errormsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryEntrustResponse_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.queryEntrustResponse.result.entrust entrusts = 1;
  for (int i = 0; i < this->entrusts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entrusts(i), target);
  }
  
  // required string lastPositionString = 2;
  if (has_lastpositionstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastpositionstring().data(), this->lastpositionstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lastpositionstring(), target);
  }
  
  // optional int32 errorNo = 14 [default = 0];
  if (has_errorno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->errorno(), target);
  }
  
  // optional string errorMsg = 15 [default = ""];
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->errormsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryEntrustResponse_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required string lastPositionString = 2;
    if (has_lastpositionstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastpositionstring());
    }
    
    // optional int32 errorNo = 14 [default = 0];
    if (has_errorno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorno());
    }
    
    // optional string errorMsg = 15 [default = ""];
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }
    
  }
  // repeated .HSCommPB.queryEntrustResponse.result.entrust entrusts = 1;
  total_size += 1 * this->entrusts_size();
  for (int i = 0; i < this->entrusts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrusts(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryEntrustResponse_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryEntrustResponse_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryEntrustResponse_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryEntrustResponse_result::MergeFrom(const queryEntrustResponse_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrusts_.MergeFrom(from.entrusts_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_lastpositionstring()) {
      set_lastpositionstring(from.lastpositionstring());
    }
    if (from.has_errorno()) {
      set_errorno(from.errorno());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryEntrustResponse_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryEntrustResponse_result::CopyFrom(const queryEntrustResponse_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryEntrustResponse_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < entrusts_size(); i++) {
    if (!this->entrusts(i).IsInitialized()) return false;
  }
  return true;
}

void queryEntrustResponse_result::Swap(queryEntrustResponse_result* other) {
  if (other != this) {
    entrusts_.Swap(&other->entrusts_);
    std::swap(lastpositionstring_, other->lastpositionstring_);
    std::swap(errorno_, other->errorno_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryEntrustResponse_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryEntrustResponse_result_descriptor_;
  metadata.reflection = queryEntrustResponse_result_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int queryEntrustResponse::kResponsesFieldNumber;
#endif  // !_MSC_VER

queryEntrustResponse::queryEntrustResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryEntrustResponse::InitAsDefaultInstance() {
}

queryEntrustResponse::queryEntrustResponse(const queryEntrustResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryEntrustResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryEntrustResponse::~queryEntrustResponse() {
  SharedDtor();
}

void queryEntrustResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void queryEntrustResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryEntrustResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryEntrustResponse_descriptor_;
}

const queryEntrustResponse& queryEntrustResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryEntrustResponse* queryEntrustResponse::default_instance_ = NULL;

queryEntrustResponse* queryEntrustResponse::New() const {
  return new queryEntrustResponse;
}

void queryEntrustResponse::Clear() {
  responses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryEntrustResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.queryEntrustResponse.result responses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_responses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_responses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_responses;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryEntrustResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.queryEntrustResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->responses(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryEntrustResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.queryEntrustResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->responses(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryEntrustResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.queryEntrustResponse.result responses = 1;
  total_size += 1 * this->responses_size();
  for (int i = 0; i < this->responses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->responses(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryEntrustResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryEntrustResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryEntrustResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryEntrustResponse::MergeFrom(const queryEntrustResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  responses_.MergeFrom(from.responses_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryEntrustResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryEntrustResponse::CopyFrom(const queryEntrustResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryEntrustResponse::IsInitialized() const {
  
  for (int i = 0; i < responses_size(); i++) {
    if (!this->responses(i).IsInitialized()) return false;
  }
  return true;
}

void queryEntrustResponse::Swap(queryEntrustResponse* other) {
  if (other != this) {
    responses_.Swap(&other->responses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryEntrustResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryEntrustResponse_descriptor_;
  metadata.reflection = queryEntrustResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int queryStockRequest_call::kBranchNoFieldNumber;
const int queryStockRequest_call::kFundAccountFieldNumber;
const int queryStockRequest_call::kPasswordFieldNumber;
const int queryStockRequest_call::kExchangeTypeFieldNumber;
const int queryStockRequest_call::kStockCodeFieldNumber;
const int queryStockRequest_call::kRequestNumberFieldNumber;
const int queryStockRequest_call::kLastPositionStringFieldNumber;
#endif  // !_MSC_VER

queryStockRequest_call::queryStockRequest_call()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryStockRequest_call::InitAsDefaultInstance() {
}

queryStockRequest_call::queryStockRequest_call(const queryStockRequest_call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryStockRequest_call::SharedCtor() {
  _cached_size_ = 0;
  branchno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fundaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangetype_ = 0;
  stockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requestnumber_ = 1000;
  lastpositionstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryStockRequest_call::~queryStockRequest_call() {
  SharedDtor();
}

void queryStockRequest_call::SharedDtor() {
  if (branchno_ != &::google::protobuf::internal::kEmptyString) {
    delete branchno_;
  }
  if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete fundaccount_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
    delete stockcode_;
  }
  if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
    delete lastpositionstring_;
  }
  if (this != default_instance_) {
  }
}

void queryStockRequest_call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryStockRequest_call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryStockRequest_call_descriptor_;
}

const queryStockRequest_call& queryStockRequest_call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryStockRequest_call* queryStockRequest_call::default_instance_ = NULL;

queryStockRequest_call* queryStockRequest_call::New() const {
  return new queryStockRequest_call;
}

void queryStockRequest_call::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_branchno()) {
      if (branchno_ != &::google::protobuf::internal::kEmptyString) {
        branchno_->clear();
      }
    }
    if (has_fundaccount()) {
      if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
        fundaccount_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    exchangetype_ = 0;
    if (has_stockcode()) {
      if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
        stockcode_->clear();
      }
    }
    requestnumber_ = 1000;
    if (has_lastpositionstring()) {
      if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
        lastpositionstring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryStockRequest_call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string branchNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branchno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->branchno().data(), this->branchno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fundAccount;
        break;
      }
      
      // required string fundAccount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fundAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fundaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fundaccount().data(), this->fundaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }
      
      // required string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exchangeType;
        break;
      }
      
      // optional .HSCommPB.enums.exchangeType exchangeType = 4 [default = noneExchangeType];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchangeType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HSCommPB::enums_exchangeType_IsValid(value)) {
            set_exchangetype(static_cast< ::HSCommPB::enums_exchangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stockCode;
        break;
      }
      
      // optional string stockCode = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stockCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stockcode().data(), this->stockcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_requestNumber;
        break;
      }
      
      // optional int32 requestNumber = 6 [default = 1000];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestnumber_)));
          set_has_requestnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_lastPositionString;
        break;
      }
      
      // optional string lastPositionString = 7 [default = ""];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastPositionString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastpositionstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastpositionstring().data(), this->lastpositionstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryStockRequest_call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string branchNo = 1;
  if (has_branchno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->branchno().data(), this->branchno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->branchno(), output);
  }
  
  // required string fundAccount = 2;
  if (has_fundaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fundaccount().data(), this->fundaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fundaccount(), output);
  }
  
  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }
  
  // optional .HSCommPB.enums.exchangeType exchangeType = 4 [default = noneExchangeType];
  if (has_exchangetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->exchangetype(), output);
  }
  
  // optional string stockCode = 5 [default = ""];
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->stockcode(), output);
  }
  
  // optional int32 requestNumber = 6 [default = 1000];
  if (has_requestnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->requestnumber(), output);
  }
  
  // optional string lastPositionString = 7 [default = ""];
  if (has_lastpositionstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastpositionstring().data(), this->lastpositionstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->lastpositionstring(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryStockRequest_call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string branchNo = 1;
  if (has_branchno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->branchno().data(), this->branchno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->branchno(), target);
  }
  
  // required string fundAccount = 2;
  if (has_fundaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fundaccount().data(), this->fundaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fundaccount(), target);
  }
  
  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }
  
  // optional .HSCommPB.enums.exchangeType exchangeType = 4 [default = noneExchangeType];
  if (has_exchangetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->exchangetype(), target);
  }
  
  // optional string stockCode = 5 [default = ""];
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stockcode(), target);
  }
  
  // optional int32 requestNumber = 6 [default = 1000];
  if (has_requestnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->requestnumber(), target);
  }
  
  // optional string lastPositionString = 7 [default = ""];
  if (has_lastpositionstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastpositionstring().data(), this->lastpositionstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->lastpositionstring(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryStockRequest_call::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string branchNo = 1;
    if (has_branchno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->branchno());
    }
    
    // required string fundAccount = 2;
    if (has_fundaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fundaccount());
    }
    
    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional .HSCommPB.enums.exchangeType exchangeType = 4 [default = noneExchangeType];
    if (has_exchangetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchangetype());
    }
    
    // optional string stockCode = 5 [default = ""];
    if (has_stockcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockcode());
    }
    
    // optional int32 requestNumber = 6 [default = 1000];
    if (has_requestnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestnumber());
    }
    
    // optional string lastPositionString = 7 [default = ""];
    if (has_lastpositionstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastpositionstring());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryStockRequest_call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryStockRequest_call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryStockRequest_call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryStockRequest_call::MergeFrom(const queryStockRequest_call& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_branchno()) {
      set_branchno(from.branchno());
    }
    if (from.has_fundaccount()) {
      set_fundaccount(from.fundaccount());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_exchangetype()) {
      set_exchangetype(from.exchangetype());
    }
    if (from.has_stockcode()) {
      set_stockcode(from.stockcode());
    }
    if (from.has_requestnumber()) {
      set_requestnumber(from.requestnumber());
    }
    if (from.has_lastpositionstring()) {
      set_lastpositionstring(from.lastpositionstring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryStockRequest_call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryStockRequest_call::CopyFrom(const queryStockRequest_call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryStockRequest_call::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void queryStockRequest_call::Swap(queryStockRequest_call* other) {
  if (other != this) {
    std::swap(branchno_, other->branchno_);
    std::swap(fundaccount_, other->fundaccount_);
    std::swap(password_, other->password_);
    std::swap(exchangetype_, other->exchangetype_);
    std::swap(stockcode_, other->stockcode_);
    std::swap(requestnumber_, other->requestnumber_);
    std::swap(lastpositionstring_, other->lastpositionstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryStockRequest_call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryStockRequest_call_descriptor_;
  metadata.reflection = queryStockRequest_call_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int queryStockRequest::kRequestsFieldNumber;
#endif  // !_MSC_VER

queryStockRequest::queryStockRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryStockRequest::InitAsDefaultInstance() {
}

queryStockRequest::queryStockRequest(const queryStockRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryStockRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryStockRequest::~queryStockRequest() {
  SharedDtor();
}

void queryStockRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void queryStockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryStockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryStockRequest_descriptor_;
}

const queryStockRequest& queryStockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryStockRequest* queryStockRequest::default_instance_ = NULL;

queryStockRequest* queryStockRequest::New() const {
  return new queryStockRequest;
}

void queryStockRequest::Clear() {
  requests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryStockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.queryStockRequest.call requests = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_requests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_requests;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryStockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.queryStockRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requests(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryStockRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.queryStockRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->requests(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryStockRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.queryStockRequest.call requests = 1;
  total_size += 1 * this->requests_size();
  for (int i = 0; i < this->requests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requests(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryStockRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryStockRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryStockRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryStockRequest::MergeFrom(const queryStockRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  requests_.MergeFrom(from.requests_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryStockRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryStockRequest::CopyFrom(const queryStockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryStockRequest::IsInitialized() const {
  
  for (int i = 0; i < requests_size(); i++) {
    if (!this->requests(i).IsInitialized()) return false;
  }
  return true;
}

void queryStockRequest::Swap(queryStockRequest* other) {
  if (other != this) {
    requests_.Swap(&other->requests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryStockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryStockRequest_descriptor_;
  metadata.reflection = queryStockRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int queryStockResponse_result_stock::kExchangeTypeFieldNumber;
const int queryStockResponse_result_stock::kStockAccountFieldNumber;
const int queryStockResponse_result_stock::kStockCodeFieldNumber;
const int queryStockResponse_result_stock::kStockNameFieldNumber;
const int queryStockResponse_result_stock::kCurrentAmountFieldNumber;
const int queryStockResponse_result_stock::kEnableAmountFieldNumber;
const int queryStockResponse_result_stock::kLastPriceFieldNumber;
const int queryStockResponse_result_stock::kCostPriceFieldNumber;
const int queryStockResponse_result_stock::kIncomeBalanceFieldNumber;
const int queryStockResponse_result_stock::kMarketValueFieldNumber;
const int queryStockResponse_result_stock::kSumBuyAmountFieldNumber;
const int queryStockResponse_result_stock::kSumBuyBalanceFieldNumber;
const int queryStockResponse_result_stock::kRealBuyAmountFieldNumber;
const int queryStockResponse_result_stock::kRealBuyBalanceFieldNumber;
const int queryStockResponse_result_stock::kSumSellAmountFieldNumber;
const int queryStockResponse_result_stock::kSumSellBalanceFieldNumber;
const int queryStockResponse_result_stock::kRealSellAmountFieldNumber;
const int queryStockResponse_result_stock::kRealSellBalanceFieldNumber;
const int queryStockResponse_result_stock::kCorrectAmountFieldNumber;
const int queryStockResponse_result_stock::kIncomeBalanceNofareFieldNumber;
const int queryStockResponse_result_stock::kUncomeBuyAmountFieldNumber;
const int queryStockResponse_result_stock::kUncomeSellAmountFieldNumber;
#endif  // !_MSC_VER

queryStockResponse_result_stock::queryStockResponse_result_stock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryStockResponse_result_stock::InitAsDefaultInstance() {
}

queryStockResponse_result_stock::queryStockResponse_result_stock(const queryStockResponse_result_stock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryStockResponse_result_stock::SharedCtor() {
  _cached_size_ = 0;
  exchangetype_ = 0;
  stockaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currentamount_ = GOOGLE_LONGLONG(0);
  enableamount_ = GOOGLE_LONGLONG(0);
  lastprice_ = GOOGLE_LONGLONG(0);
  costprice_ = GOOGLE_LONGLONG(0);
  incomebalance_ = GOOGLE_LONGLONG(0);
  marketvalue_ = GOOGLE_LONGLONG(0);
  sumbuyamount_ = GOOGLE_LONGLONG(-1);
  sumbuybalance_ = GOOGLE_LONGLONG(-1);
  realbuyamount_ = GOOGLE_LONGLONG(-1);
  realbuybalance_ = GOOGLE_LONGLONG(-1);
  sumsellamount_ = GOOGLE_LONGLONG(-1);
  sumsellbalance_ = GOOGLE_LONGLONG(-1);
  realsellamount_ = GOOGLE_LONGLONG(-1);
  realsellbalance_ = GOOGLE_LONGLONG(-1);
  correctamount_ = GOOGLE_LONGLONG(-1);
  incomebalancenofare_ = GOOGLE_LONGLONG(-1);
  uncomebuyamount_ = GOOGLE_LONGLONG(-1);
  uncomesellamount_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryStockResponse_result_stock::~queryStockResponse_result_stock() {
  SharedDtor();
}

void queryStockResponse_result_stock::SharedDtor() {
  if (stockaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete stockaccount_;
  }
  if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
    delete stockcode_;
  }
  if (stockname_ != &::google::protobuf::internal::kEmptyString) {
    delete stockname_;
  }
  if (this != default_instance_) {
  }
}

void queryStockResponse_result_stock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryStockResponse_result_stock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryStockResponse_result_stock_descriptor_;
}

const queryStockResponse_result_stock& queryStockResponse_result_stock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryStockResponse_result_stock* queryStockResponse_result_stock::default_instance_ = NULL;

queryStockResponse_result_stock* queryStockResponse_result_stock::New() const {
  return new queryStockResponse_result_stock;
}

void queryStockResponse_result_stock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exchangetype_ = 0;
    if (has_stockaccount()) {
      if (stockaccount_ != &::google::protobuf::internal::kEmptyString) {
        stockaccount_->clear();
      }
    }
    if (has_stockcode()) {
      if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
        stockcode_->clear();
      }
    }
    if (has_stockname()) {
      if (stockname_ != &::google::protobuf::internal::kEmptyString) {
        stockname_->clear();
      }
    }
    currentamount_ = GOOGLE_LONGLONG(0);
    enableamount_ = GOOGLE_LONGLONG(0);
    lastprice_ = GOOGLE_LONGLONG(0);
    costprice_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    incomebalance_ = GOOGLE_LONGLONG(0);
    marketvalue_ = GOOGLE_LONGLONG(0);
    sumbuyamount_ = GOOGLE_LONGLONG(-1);
    sumbuybalance_ = GOOGLE_LONGLONG(-1);
    realbuyamount_ = GOOGLE_LONGLONG(-1);
    realbuybalance_ = GOOGLE_LONGLONG(-1);
    sumsellamount_ = GOOGLE_LONGLONG(-1);
    sumsellbalance_ = GOOGLE_LONGLONG(-1);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    realsellamount_ = GOOGLE_LONGLONG(-1);
    realsellbalance_ = GOOGLE_LONGLONG(-1);
    correctamount_ = GOOGLE_LONGLONG(-1);
    incomebalancenofare_ = GOOGLE_LONGLONG(-1);
    uncomebuyamount_ = GOOGLE_LONGLONG(-1);
    uncomesellamount_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryStockResponse_result_stock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HSCommPB.enums.exchangeType exchangeType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HSCommPB::enums_exchangeType_IsValid(value)) {
            set_exchangetype(static_cast< ::HSCommPB::enums_exchangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stockAccount;
        break;
      }
      
      // required string stockAccount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stockAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stockaccount().data(), this->stockaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stockCode;
        break;
      }
      
      // required string stockCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stockCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stockcode().data(), this->stockcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stockName;
        break;
      }
      
      // required string stockName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stockName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stockname().data(), this->stockname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_currentAmount;
        break;
      }
      
      // required int64 currentAmount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currentamount_)));
          set_has_currentamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_enableAmount;
        break;
      }
      
      // required int64 enableAmount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enableAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &enableamount_)));
          set_has_enableamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lastPrice;
        break;
      }
      
      // required int64 lastPrice = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastprice_)));
          set_has_lastprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_costPrice;
        break;
      }
      
      // required int64 costPrice = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &costprice_)));
          set_has_costprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_incomeBalance;
        break;
      }
      
      // required int64 incomeBalance = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_incomeBalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &incomebalance_)));
          set_has_incomebalance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_marketValue;
        break;
      }
      
      // required int64 marketValue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marketValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marketvalue_)));
          set_has_marketvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_sumBuyAmount;
        break;
      }
      
      // required sint64 sumBuyAmount = 17 [default = -1];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sumBuyAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sumbuyamount_)));
          set_has_sumbuyamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_sumBuyBalance;
        break;
      }
      
      // required sint64 sumBuyBalance = 18 [default = -1];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sumBuyBalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sumbuybalance_)));
          set_has_sumbuybalance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_realBuyAmount;
        break;
      }
      
      // required sint64 realBuyAmount = 19 [default = -1];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_realBuyAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &realbuyamount_)));
          set_has_realbuyamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_realBuyBalance;
        break;
      }
      
      // required sint64 realBuyBalance = 20 [default = -1];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_realBuyBalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &realbuybalance_)));
          set_has_realbuybalance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_sumSellAmount;
        break;
      }
      
      // required sint64 sumSellAmount = 21 [default = -1];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sumSellAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sumsellamount_)));
          set_has_sumsellamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_sumSellBalance;
        break;
      }
      
      // required sint64 sumSellBalance = 22 [default = -1];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sumSellBalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &sumsellbalance_)));
          set_has_sumsellbalance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_realSellAmount;
        break;
      }
      
      // required sint64 realSellAmount = 23 [default = -1];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_realSellAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &realsellamount_)));
          set_has_realsellamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_realSellBalance;
        break;
      }
      
      // required sint64 realSellBalance = 24 [default = -1];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_realSellBalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &realsellbalance_)));
          set_has_realsellbalance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_correctAmount;
        break;
      }
      
      // required sint64 correctAmount = 25 [default = -1];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_correctAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &correctamount_)));
          set_has_correctamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_incomeBalanceNofare;
        break;
      }
      
      // required sint64 incomeBalanceNofare = 26 [default = -1];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_incomeBalanceNofare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &incomebalancenofare_)));
          set_has_incomebalancenofare();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_uncomeBuyAmount;
        break;
      }
      
      // required sint64 uncomeBuyAmount = 27 [default = -1];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uncomeBuyAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uncomebuyamount_)));
          set_has_uncomebuyamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_uncomeSellAmount;
        break;
      }
      
      // required sint64 uncomeSellAmount = 28 [default = -1];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uncomeSellAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &uncomesellamount_)));
          set_has_uncomesellamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryStockResponse_result_stock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HSCommPB.enums.exchangeType exchangeType = 1;
  if (has_exchangetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->exchangetype(), output);
  }
  
  // required string stockAccount = 2;
  if (has_stockaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockaccount().data(), this->stockaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stockaccount(), output);
  }
  
  // required string stockCode = 3;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stockcode(), output);
  }
  
  // required string stockName = 4;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->stockname(), output);
  }
  
  // required int64 currentAmount = 5;
  if (has_currentamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->currentamount(), output);
  }
  
  // required int64 enableAmount = 6;
  if (has_enableamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->enableamount(), output);
  }
  
  // required int64 lastPrice = 7;
  if (has_lastprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->lastprice(), output);
  }
  
  // required int64 costPrice = 8;
  if (has_costprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->costprice(), output);
  }
  
  // required int64 incomeBalance = 9;
  if (has_incomebalance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->incomebalance(), output);
  }
  
  // required int64 marketValue = 10;
  if (has_marketvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->marketvalue(), output);
  }
  
  // required sint64 sumBuyAmount = 17 [default = -1];
  if (has_sumbuyamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(17, this->sumbuyamount(), output);
  }
  
  // required sint64 sumBuyBalance = 18 [default = -1];
  if (has_sumbuybalance()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(18, this->sumbuybalance(), output);
  }
  
  // required sint64 realBuyAmount = 19 [default = -1];
  if (has_realbuyamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(19, this->realbuyamount(), output);
  }
  
  // required sint64 realBuyBalance = 20 [default = -1];
  if (has_realbuybalance()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(20, this->realbuybalance(), output);
  }
  
  // required sint64 sumSellAmount = 21 [default = -1];
  if (has_sumsellamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(21, this->sumsellamount(), output);
  }
  
  // required sint64 sumSellBalance = 22 [default = -1];
  if (has_sumsellbalance()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(22, this->sumsellbalance(), output);
  }
  
  // required sint64 realSellAmount = 23 [default = -1];
  if (has_realsellamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(23, this->realsellamount(), output);
  }
  
  // required sint64 realSellBalance = 24 [default = -1];
  if (has_realsellbalance()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(24, this->realsellbalance(), output);
  }
  
  // required sint64 correctAmount = 25 [default = -1];
  if (has_correctamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(25, this->correctamount(), output);
  }
  
  // required sint64 incomeBalanceNofare = 26 [default = -1];
  if (has_incomebalancenofare()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(26, this->incomebalancenofare(), output);
  }
  
  // required sint64 uncomeBuyAmount = 27 [default = -1];
  if (has_uncomebuyamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(27, this->uncomebuyamount(), output);
  }
  
  // required sint64 uncomeSellAmount = 28 [default = -1];
  if (has_uncomesellamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(28, this->uncomesellamount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryStockResponse_result_stock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HSCommPB.enums.exchangeType exchangeType = 1;
  if (has_exchangetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->exchangetype(), target);
  }
  
  // required string stockAccount = 2;
  if (has_stockaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockaccount().data(), this->stockaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stockaccount(), target);
  }
  
  // required string stockCode = 3;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stockcode(), target);
  }
  
  // required string stockName = 4;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stockname(), target);
  }
  
  // required int64 currentAmount = 5;
  if (has_currentamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->currentamount(), target);
  }
  
  // required int64 enableAmount = 6;
  if (has_enableamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->enableamount(), target);
  }
  
  // required int64 lastPrice = 7;
  if (has_lastprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->lastprice(), target);
  }
  
  // required int64 costPrice = 8;
  if (has_costprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->costprice(), target);
  }
  
  // required int64 incomeBalance = 9;
  if (has_incomebalance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->incomebalance(), target);
  }
  
  // required int64 marketValue = 10;
  if (has_marketvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->marketvalue(), target);
  }
  
  // required sint64 sumBuyAmount = 17 [default = -1];
  if (has_sumbuyamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(17, this->sumbuyamount(), target);
  }
  
  // required sint64 sumBuyBalance = 18 [default = -1];
  if (has_sumbuybalance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(18, this->sumbuybalance(), target);
  }
  
  // required sint64 realBuyAmount = 19 [default = -1];
  if (has_realbuyamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(19, this->realbuyamount(), target);
  }
  
  // required sint64 realBuyBalance = 20 [default = -1];
  if (has_realbuybalance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(20, this->realbuybalance(), target);
  }
  
  // required sint64 sumSellAmount = 21 [default = -1];
  if (has_sumsellamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(21, this->sumsellamount(), target);
  }
  
  // required sint64 sumSellBalance = 22 [default = -1];
  if (has_sumsellbalance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(22, this->sumsellbalance(), target);
  }
  
  // required sint64 realSellAmount = 23 [default = -1];
  if (has_realsellamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(23, this->realsellamount(), target);
  }
  
  // required sint64 realSellBalance = 24 [default = -1];
  if (has_realsellbalance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(24, this->realsellbalance(), target);
  }
  
  // required sint64 correctAmount = 25 [default = -1];
  if (has_correctamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(25, this->correctamount(), target);
  }
  
  // required sint64 incomeBalanceNofare = 26 [default = -1];
  if (has_incomebalancenofare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(26, this->incomebalancenofare(), target);
  }
  
  // required sint64 uncomeBuyAmount = 27 [default = -1];
  if (has_uncomebuyamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(27, this->uncomebuyamount(), target);
  }
  
  // required sint64 uncomeSellAmount = 28 [default = -1];
  if (has_uncomesellamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(28, this->uncomesellamount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryStockResponse_result_stock::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HSCommPB.enums.exchangeType exchangeType = 1;
    if (has_exchangetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchangetype());
    }
    
    // required string stockAccount = 2;
    if (has_stockaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockaccount());
    }
    
    // required string stockCode = 3;
    if (has_stockcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockcode());
    }
    
    // required string stockName = 4;
    if (has_stockname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockname());
    }
    
    // required int64 currentAmount = 5;
    if (has_currentamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currentamount());
    }
    
    // required int64 enableAmount = 6;
    if (has_enableamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->enableamount());
    }
    
    // required int64 lastPrice = 7;
    if (has_lastprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastprice());
    }
    
    // required int64 costPrice = 8;
    if (has_costprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->costprice());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 incomeBalance = 9;
    if (has_incomebalance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->incomebalance());
    }
    
    // required int64 marketValue = 10;
    if (has_marketvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marketvalue());
    }
    
    // required sint64 sumBuyAmount = 17 [default = -1];
    if (has_sumbuyamount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sumbuyamount());
    }
    
    // required sint64 sumBuyBalance = 18 [default = -1];
    if (has_sumbuybalance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sumbuybalance());
    }
    
    // required sint64 realBuyAmount = 19 [default = -1];
    if (has_realbuyamount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->realbuyamount());
    }
    
    // required sint64 realBuyBalance = 20 [default = -1];
    if (has_realbuybalance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->realbuybalance());
    }
    
    // required sint64 sumSellAmount = 21 [default = -1];
    if (has_sumsellamount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sumsellamount());
    }
    
    // required sint64 sumSellBalance = 22 [default = -1];
    if (has_sumsellbalance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->sumsellbalance());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required sint64 realSellAmount = 23 [default = -1];
    if (has_realsellamount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->realsellamount());
    }
    
    // required sint64 realSellBalance = 24 [default = -1];
    if (has_realsellbalance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->realsellbalance());
    }
    
    // required sint64 correctAmount = 25 [default = -1];
    if (has_correctamount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->correctamount());
    }
    
    // required sint64 incomeBalanceNofare = 26 [default = -1];
    if (has_incomebalancenofare()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->incomebalancenofare());
    }
    
    // required sint64 uncomeBuyAmount = 27 [default = -1];
    if (has_uncomebuyamount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uncomebuyamount());
    }
    
    // required sint64 uncomeSellAmount = 28 [default = -1];
    if (has_uncomesellamount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->uncomesellamount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryStockResponse_result_stock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryStockResponse_result_stock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryStockResponse_result_stock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryStockResponse_result_stock::MergeFrom(const queryStockResponse_result_stock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchangetype()) {
      set_exchangetype(from.exchangetype());
    }
    if (from.has_stockaccount()) {
      set_stockaccount(from.stockaccount());
    }
    if (from.has_stockcode()) {
      set_stockcode(from.stockcode());
    }
    if (from.has_stockname()) {
      set_stockname(from.stockname());
    }
    if (from.has_currentamount()) {
      set_currentamount(from.currentamount());
    }
    if (from.has_enableamount()) {
      set_enableamount(from.enableamount());
    }
    if (from.has_lastprice()) {
      set_lastprice(from.lastprice());
    }
    if (from.has_costprice()) {
      set_costprice(from.costprice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_incomebalance()) {
      set_incomebalance(from.incomebalance());
    }
    if (from.has_marketvalue()) {
      set_marketvalue(from.marketvalue());
    }
    if (from.has_sumbuyamount()) {
      set_sumbuyamount(from.sumbuyamount());
    }
    if (from.has_sumbuybalance()) {
      set_sumbuybalance(from.sumbuybalance());
    }
    if (from.has_realbuyamount()) {
      set_realbuyamount(from.realbuyamount());
    }
    if (from.has_realbuybalance()) {
      set_realbuybalance(from.realbuybalance());
    }
    if (from.has_sumsellamount()) {
      set_sumsellamount(from.sumsellamount());
    }
    if (from.has_sumsellbalance()) {
      set_sumsellbalance(from.sumsellbalance());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_realsellamount()) {
      set_realsellamount(from.realsellamount());
    }
    if (from.has_realsellbalance()) {
      set_realsellbalance(from.realsellbalance());
    }
    if (from.has_correctamount()) {
      set_correctamount(from.correctamount());
    }
    if (from.has_incomebalancenofare()) {
      set_incomebalancenofare(from.incomebalancenofare());
    }
    if (from.has_uncomebuyamount()) {
      set_uncomebuyamount(from.uncomebuyamount());
    }
    if (from.has_uncomesellamount()) {
      set_uncomesellamount(from.uncomesellamount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryStockResponse_result_stock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryStockResponse_result_stock::CopyFrom(const queryStockResponse_result_stock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryStockResponse_result_stock::IsInitialized() const {
  if ((_has_bits_[0] & 0x003fffff) != 0x003fffff) return false;
  
  return true;
}

void queryStockResponse_result_stock::Swap(queryStockResponse_result_stock* other) {
  if (other != this) {
    std::swap(exchangetype_, other->exchangetype_);
    std::swap(stockaccount_, other->stockaccount_);
    std::swap(stockcode_, other->stockcode_);
    std::swap(stockname_, other->stockname_);
    std::swap(currentamount_, other->currentamount_);
    std::swap(enableamount_, other->enableamount_);
    std::swap(lastprice_, other->lastprice_);
    std::swap(costprice_, other->costprice_);
    std::swap(incomebalance_, other->incomebalance_);
    std::swap(marketvalue_, other->marketvalue_);
    std::swap(sumbuyamount_, other->sumbuyamount_);
    std::swap(sumbuybalance_, other->sumbuybalance_);
    std::swap(realbuyamount_, other->realbuyamount_);
    std::swap(realbuybalance_, other->realbuybalance_);
    std::swap(sumsellamount_, other->sumsellamount_);
    std::swap(sumsellbalance_, other->sumsellbalance_);
    std::swap(realsellamount_, other->realsellamount_);
    std::swap(realsellbalance_, other->realsellbalance_);
    std::swap(correctamount_, other->correctamount_);
    std::swap(incomebalancenofare_, other->incomebalancenofare_);
    std::swap(uncomebuyamount_, other->uncomebuyamount_);
    std::swap(uncomesellamount_, other->uncomesellamount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryStockResponse_result_stock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryStockResponse_result_stock_descriptor_;
  metadata.reflection = queryStockResponse_result_stock_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int queryStockResponse_result::kStocksFieldNumber;
const int queryStockResponse_result::kLastPositionStringFieldNumber;
const int queryStockResponse_result::kErrorNoFieldNumber;
const int queryStockResponse_result::kErrorMsgFieldNumber;
#endif  // !_MSC_VER

queryStockResponse_result::queryStockResponse_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryStockResponse_result::InitAsDefaultInstance() {
}

queryStockResponse_result::queryStockResponse_result(const queryStockResponse_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryStockResponse_result::SharedCtor() {
  _cached_size_ = 0;
  lastpositionstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  errorno_ = 0;
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryStockResponse_result::~queryStockResponse_result() {
  SharedDtor();
}

void queryStockResponse_result::SharedDtor() {
  if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
    delete lastpositionstring_;
  }
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (this != default_instance_) {
  }
}

void queryStockResponse_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryStockResponse_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryStockResponse_result_descriptor_;
}

const queryStockResponse_result& queryStockResponse_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryStockResponse_result* queryStockResponse_result::default_instance_ = NULL;

queryStockResponse_result* queryStockResponse_result::New() const {
  return new queryStockResponse_result;
}

void queryStockResponse_result::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_lastpositionstring()) {
      if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
        lastpositionstring_->clear();
      }
    }
    errorno_ = 0;
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
  }
  stocks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryStockResponse_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.queryStockResponse.result.stock stocks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stocks;
        if (input->ExpectTag(18)) goto parse_lastPositionString;
        break;
      }
      
      // required string lastPositionString = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastPositionString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastpositionstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastpositionstring().data(), this->lastpositionstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_errorNo;
        break;
      }
      
      // optional int32 errorNo = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorno_)));
          set_has_errorno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_errorMsg;
        break;
      }
      
      // optional string errorMsg = 15 [default = ""];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryStockResponse_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.queryStockResponse.result.stock stocks = 1;
  for (int i = 0; i < this->stocks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stocks(i), output);
  }
  
  // required string lastPositionString = 2;
  if (has_lastpositionstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastpositionstring().data(), this->lastpositionstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lastpositionstring(), output);
  }
  
  // optional int32 errorNo = 14 [default = 0];
  if (has_errorno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->errorno(), output);
  }
  
  // optional string errorMsg = 15 [default = ""];
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->errormsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryStockResponse_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.queryStockResponse.result.stock stocks = 1;
  for (int i = 0; i < this->stocks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stocks(i), target);
  }
  
  // required string lastPositionString = 2;
  if (has_lastpositionstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastpositionstring().data(), this->lastpositionstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lastpositionstring(), target);
  }
  
  // optional int32 errorNo = 14 [default = 0];
  if (has_errorno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->errorno(), target);
  }
  
  // optional string errorMsg = 15 [default = ""];
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->errormsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryStockResponse_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required string lastPositionString = 2;
    if (has_lastpositionstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastpositionstring());
    }
    
    // optional int32 errorNo = 14 [default = 0];
    if (has_errorno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorno());
    }
    
    // optional string errorMsg = 15 [default = ""];
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }
    
  }
  // repeated .HSCommPB.queryStockResponse.result.stock stocks = 1;
  total_size += 1 * this->stocks_size();
  for (int i = 0; i < this->stocks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stocks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryStockResponse_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryStockResponse_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryStockResponse_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryStockResponse_result::MergeFrom(const queryStockResponse_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  stocks_.MergeFrom(from.stocks_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_lastpositionstring()) {
      set_lastpositionstring(from.lastpositionstring());
    }
    if (from.has_errorno()) {
      set_errorno(from.errorno());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryStockResponse_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryStockResponse_result::CopyFrom(const queryStockResponse_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryStockResponse_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < stocks_size(); i++) {
    if (!this->stocks(i).IsInitialized()) return false;
  }
  return true;
}

void queryStockResponse_result::Swap(queryStockResponse_result* other) {
  if (other != this) {
    stocks_.Swap(&other->stocks_);
    std::swap(lastpositionstring_, other->lastpositionstring_);
    std::swap(errorno_, other->errorno_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryStockResponse_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryStockResponse_result_descriptor_;
  metadata.reflection = queryStockResponse_result_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int queryStockResponse::kResponsesFieldNumber;
#endif  // !_MSC_VER

queryStockResponse::queryStockResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryStockResponse::InitAsDefaultInstance() {
}

queryStockResponse::queryStockResponse(const queryStockResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryStockResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryStockResponse::~queryStockResponse() {
  SharedDtor();
}

void queryStockResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void queryStockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryStockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryStockResponse_descriptor_;
}

const queryStockResponse& queryStockResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryStockResponse* queryStockResponse::default_instance_ = NULL;

queryStockResponse* queryStockResponse::New() const {
  return new queryStockResponse;
}

void queryStockResponse::Clear() {
  responses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryStockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.queryStockResponse.result responses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_responses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_responses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_responses;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryStockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.queryStockResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->responses(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryStockResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.queryStockResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->responses(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryStockResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.queryStockResponse.result responses = 1;
  total_size += 1 * this->responses_size();
  for (int i = 0; i < this->responses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->responses(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryStockResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryStockResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryStockResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryStockResponse::MergeFrom(const queryStockResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  responses_.MergeFrom(from.responses_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryStockResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryStockResponse::CopyFrom(const queryStockResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryStockResponse::IsInitialized() const {
  
  for (int i = 0; i < responses_size(); i++) {
    if (!this->responses(i).IsInitialized()) return false;
  }
  return true;
}

void queryStockResponse::Swap(queryStockResponse* other) {
  if (other != this) {
    responses_.Swap(&other->responses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryStockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryStockResponse_descriptor_;
  metadata.reflection = queryStockResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int queryFundRequest_call::kBranchNoFieldNumber;
const int queryFundRequest_call::kFundAccountFieldNumber;
const int queryFundRequest_call::kPasswordFieldNumber;
const int queryFundRequest_call::kMoneyTypeFieldNumber;
#endif  // !_MSC_VER

queryFundRequest_call::queryFundRequest_call()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryFundRequest_call::InitAsDefaultInstance() {
}

queryFundRequest_call::queryFundRequest_call(const queryFundRequest_call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryFundRequest_call::SharedCtor() {
  _cached_size_ = 0;
  branchno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fundaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  moneytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryFundRequest_call::~queryFundRequest_call() {
  SharedDtor();
}

void queryFundRequest_call::SharedDtor() {
  if (branchno_ != &::google::protobuf::internal::kEmptyString) {
    delete branchno_;
  }
  if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete fundaccount_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void queryFundRequest_call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryFundRequest_call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryFundRequest_call_descriptor_;
}

const queryFundRequest_call& queryFundRequest_call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryFundRequest_call* queryFundRequest_call::default_instance_ = NULL;

queryFundRequest_call* queryFundRequest_call::New() const {
  return new queryFundRequest_call;
}

void queryFundRequest_call::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_branchno()) {
      if (branchno_ != &::google::protobuf::internal::kEmptyString) {
        branchno_->clear();
      }
    }
    if (has_fundaccount()) {
      if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
        fundaccount_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    moneytype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryFundRequest_call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string branchNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branchno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->branchno().data(), this->branchno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fundAccount;
        break;
      }
      
      // required string fundAccount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fundAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fundaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fundaccount().data(), this->fundaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }
      
      // required string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_moneyType;
        break;
      }
      
      // optional .HSCommPB.enums.moneyType moneyType = 4 [default = noneMoneyType];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HSCommPB::enums_moneyType_IsValid(value)) {
            set_moneytype(static_cast< ::HSCommPB::enums_moneyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryFundRequest_call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string branchNo = 1;
  if (has_branchno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->branchno().data(), this->branchno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->branchno(), output);
  }
  
  // required string fundAccount = 2;
  if (has_fundaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fundaccount().data(), this->fundaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fundaccount(), output);
  }
  
  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }
  
  // optional .HSCommPB.enums.moneyType moneyType = 4 [default = noneMoneyType];
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->moneytype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryFundRequest_call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string branchNo = 1;
  if (has_branchno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->branchno().data(), this->branchno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->branchno(), target);
  }
  
  // required string fundAccount = 2;
  if (has_fundaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fundaccount().data(), this->fundaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fundaccount(), target);
  }
  
  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }
  
  // optional .HSCommPB.enums.moneyType moneyType = 4 [default = noneMoneyType];
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->moneytype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryFundRequest_call::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string branchNo = 1;
    if (has_branchno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->branchno());
    }
    
    // required string fundAccount = 2;
    if (has_fundaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fundaccount());
    }
    
    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional .HSCommPB.enums.moneyType moneyType = 4 [default = noneMoneyType];
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->moneytype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryFundRequest_call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryFundRequest_call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryFundRequest_call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryFundRequest_call::MergeFrom(const queryFundRequest_call& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_branchno()) {
      set_branchno(from.branchno());
    }
    if (from.has_fundaccount()) {
      set_fundaccount(from.fundaccount());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryFundRequest_call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryFundRequest_call::CopyFrom(const queryFundRequest_call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryFundRequest_call::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void queryFundRequest_call::Swap(queryFundRequest_call* other) {
  if (other != this) {
    std::swap(branchno_, other->branchno_);
    std::swap(fundaccount_, other->fundaccount_);
    std::swap(password_, other->password_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryFundRequest_call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryFundRequest_call_descriptor_;
  metadata.reflection = queryFundRequest_call_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int queryFundRequest::kRequestsFieldNumber;
#endif  // !_MSC_VER

queryFundRequest::queryFundRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryFundRequest::InitAsDefaultInstance() {
}

queryFundRequest::queryFundRequest(const queryFundRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryFundRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryFundRequest::~queryFundRequest() {
  SharedDtor();
}

void queryFundRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void queryFundRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryFundRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryFundRequest_descriptor_;
}

const queryFundRequest& queryFundRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryFundRequest* queryFundRequest::default_instance_ = NULL;

queryFundRequest* queryFundRequest::New() const {
  return new queryFundRequest;
}

void queryFundRequest::Clear() {
  requests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryFundRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.queryFundRequest.call requests = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_requests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_requests;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryFundRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.queryFundRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requests(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryFundRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.queryFundRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->requests(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryFundRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.queryFundRequest.call requests = 1;
  total_size += 1 * this->requests_size();
  for (int i = 0; i < this->requests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requests(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryFundRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryFundRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryFundRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryFundRequest::MergeFrom(const queryFundRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  requests_.MergeFrom(from.requests_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryFundRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryFundRequest::CopyFrom(const queryFundRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryFundRequest::IsInitialized() const {
  
  for (int i = 0; i < requests_size(); i++) {
    if (!this->requests(i).IsInitialized()) return false;
  }
  return true;
}

void queryFundRequest::Swap(queryFundRequest* other) {
  if (other != this) {
    requests_.Swap(&other->requests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryFundRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryFundRequest_descriptor_;
  metadata.reflection = queryFundRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int queryFundResponse_result_currency::kMoneyTypeFieldNumber;
const int queryFundResponse_result_currency::kCurrentBalanceFieldNumber;
const int queryFundResponse_result_currency::kEnableBalanceFieldNumber;
const int queryFundResponse_result_currency::kFetchBalanceFieldNumber;
const int queryFundResponse_result_currency::kInterestFieldNumber;
const int queryFundResponse_result_currency::kAssetBalanceFieldNumber;
const int queryFundResponse_result_currency::kFetchCashFieldNumber;
const int queryFundResponse_result_currency::kFundBalanceFieldNumber;
const int queryFundResponse_result_currency::kMarketValueFieldNumber;
const int queryFundResponse_result_currency::kOpfundMarketValueFieldNumber;
const int queryFundResponse_result_currency::kPreInterestFieldNumber;
#endif  // !_MSC_VER

queryFundResponse_result_currency::queryFundResponse_result_currency()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryFundResponse_result_currency::InitAsDefaultInstance() {
}

queryFundResponse_result_currency::queryFundResponse_result_currency(const queryFundResponse_result_currency& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryFundResponse_result_currency::SharedCtor() {
  _cached_size_ = 0;
  moneytype_ = 0;
  currentbalance_ = GOOGLE_LONGLONG(0);
  enablebalance_ = GOOGLE_LONGLONG(0);
  fetchbalance_ = GOOGLE_LONGLONG(0);
  interest_ = GOOGLE_LONGLONG(0);
  assetbalance_ = GOOGLE_LONGLONG(0);
  fetchcash_ = GOOGLE_LONGLONG(0);
  fundbalance_ = GOOGLE_LONGLONG(0);
  marketvalue_ = GOOGLE_LONGLONG(0);
  opfundmarketvalue_ = GOOGLE_LONGLONG(0);
  preinterest_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryFundResponse_result_currency::~queryFundResponse_result_currency() {
  SharedDtor();
}

void queryFundResponse_result_currency::SharedDtor() {
  if (this != default_instance_) {
  }
}

void queryFundResponse_result_currency::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryFundResponse_result_currency::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryFundResponse_result_currency_descriptor_;
}

const queryFundResponse_result_currency& queryFundResponse_result_currency::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryFundResponse_result_currency* queryFundResponse_result_currency::default_instance_ = NULL;

queryFundResponse_result_currency* queryFundResponse_result_currency::New() const {
  return new queryFundResponse_result_currency;
}

void queryFundResponse_result_currency::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    moneytype_ = 0;
    currentbalance_ = GOOGLE_LONGLONG(0);
    enablebalance_ = GOOGLE_LONGLONG(0);
    fetchbalance_ = GOOGLE_LONGLONG(0);
    interest_ = GOOGLE_LONGLONG(0);
    assetbalance_ = GOOGLE_LONGLONG(0);
    fetchcash_ = GOOGLE_LONGLONG(0);
    fundbalance_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    marketvalue_ = GOOGLE_LONGLONG(0);
    opfundmarketvalue_ = GOOGLE_LONGLONG(0);
    preinterest_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryFundResponse_result_currency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HSCommPB.enums.moneyType moneyType = 1 [default = noneMoneyType];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HSCommPB::enums_moneyType_IsValid(value)) {
            set_moneytype(static_cast< ::HSCommPB::enums_moneyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_currentBalance;
        break;
      }
      
      // required int64 currentBalance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentBalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currentbalance_)));
          set_has_currentbalance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enableBalance;
        break;
      }
      
      // required int64 enableBalance = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enableBalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &enablebalance_)));
          set_has_enablebalance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fetchBalance;
        break;
      }
      
      // required int64 fetchBalance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetchBalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fetchbalance_)));
          set_has_fetchbalance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_interest;
        break;
      }
      
      // required int64 interest = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &interest_)));
          set_has_interest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_assetBalance;
        break;
      }
      
      // required int64 assetBalance = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assetBalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &assetbalance_)));
          set_has_assetbalance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fetchCash;
        break;
      }
      
      // required int64 fetchCash = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetchCash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fetchcash_)));
          set_has_fetchcash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fundBalance;
        break;
      }
      
      // required int64 fundBalance = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fundBalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fundbalance_)));
          set_has_fundbalance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_marketValue;
        break;
      }
      
      // required int64 marketValue = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marketValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marketvalue_)));
          set_has_marketvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_opfundMarketValue;
        break;
      }
      
      // required int64 opfundMarketValue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opfundMarketValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &opfundmarketvalue_)));
          set_has_opfundmarketvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_preInterest;
        break;
      }
      
      // required int64 preInterest = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &preinterest_)));
          set_has_preinterest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryFundResponse_result_currency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HSCommPB.enums.moneyType moneyType = 1 [default = noneMoneyType];
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->moneytype(), output);
  }
  
  // required int64 currentBalance = 2;
  if (has_currentbalance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->currentbalance(), output);
  }
  
  // required int64 enableBalance = 3;
  if (has_enablebalance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->enablebalance(), output);
  }
  
  // required int64 fetchBalance = 4;
  if (has_fetchbalance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->fetchbalance(), output);
  }
  
  // required int64 interest = 5;
  if (has_interest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->interest(), output);
  }
  
  // required int64 assetBalance = 6;
  if (has_assetbalance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->assetbalance(), output);
  }
  
  // required int64 fetchCash = 7;
  if (has_fetchcash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->fetchcash(), output);
  }
  
  // required int64 fundBalance = 8;
  if (has_fundbalance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->fundbalance(), output);
  }
  
  // required int64 marketValue = 9;
  if (has_marketvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->marketvalue(), output);
  }
  
  // required int64 opfundMarketValue = 10;
  if (has_opfundmarketvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->opfundmarketvalue(), output);
  }
  
  // required int64 preInterest = 11;
  if (has_preinterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->preinterest(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryFundResponse_result_currency::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HSCommPB.enums.moneyType moneyType = 1 [default = noneMoneyType];
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->moneytype(), target);
  }
  
  // required int64 currentBalance = 2;
  if (has_currentbalance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->currentbalance(), target);
  }
  
  // required int64 enableBalance = 3;
  if (has_enablebalance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->enablebalance(), target);
  }
  
  // required int64 fetchBalance = 4;
  if (has_fetchbalance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->fetchbalance(), target);
  }
  
  // required int64 interest = 5;
  if (has_interest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->interest(), target);
  }
  
  // required int64 assetBalance = 6;
  if (has_assetbalance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->assetbalance(), target);
  }
  
  // required int64 fetchCash = 7;
  if (has_fetchcash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->fetchcash(), target);
  }
  
  // required int64 fundBalance = 8;
  if (has_fundbalance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->fundbalance(), target);
  }
  
  // required int64 marketValue = 9;
  if (has_marketvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->marketvalue(), target);
  }
  
  // required int64 opfundMarketValue = 10;
  if (has_opfundmarketvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->opfundmarketvalue(), target);
  }
  
  // required int64 preInterest = 11;
  if (has_preinterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->preinterest(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryFundResponse_result_currency::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HSCommPB.enums.moneyType moneyType = 1 [default = noneMoneyType];
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->moneytype());
    }
    
    // required int64 currentBalance = 2;
    if (has_currentbalance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currentbalance());
    }
    
    // required int64 enableBalance = 3;
    if (has_enablebalance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->enablebalance());
    }
    
    // required int64 fetchBalance = 4;
    if (has_fetchbalance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fetchbalance());
    }
    
    // required int64 interest = 5;
    if (has_interest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->interest());
    }
    
    // required int64 assetBalance = 6;
    if (has_assetbalance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->assetbalance());
    }
    
    // required int64 fetchCash = 7;
    if (has_fetchcash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fetchcash());
    }
    
    // required int64 fundBalance = 8;
    if (has_fundbalance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fundbalance());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 marketValue = 9;
    if (has_marketvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marketvalue());
    }
    
    // required int64 opfundMarketValue = 10;
    if (has_opfundmarketvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->opfundmarketvalue());
    }
    
    // required int64 preInterest = 11;
    if (has_preinterest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->preinterest());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryFundResponse_result_currency::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryFundResponse_result_currency* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryFundResponse_result_currency*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryFundResponse_result_currency::MergeFrom(const queryFundResponse_result_currency& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
    if (from.has_currentbalance()) {
      set_currentbalance(from.currentbalance());
    }
    if (from.has_enablebalance()) {
      set_enablebalance(from.enablebalance());
    }
    if (from.has_fetchbalance()) {
      set_fetchbalance(from.fetchbalance());
    }
    if (from.has_interest()) {
      set_interest(from.interest());
    }
    if (from.has_assetbalance()) {
      set_assetbalance(from.assetbalance());
    }
    if (from.has_fetchcash()) {
      set_fetchcash(from.fetchcash());
    }
    if (from.has_fundbalance()) {
      set_fundbalance(from.fundbalance());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_marketvalue()) {
      set_marketvalue(from.marketvalue());
    }
    if (from.has_opfundmarketvalue()) {
      set_opfundmarketvalue(from.opfundmarketvalue());
    }
    if (from.has_preinterest()) {
      set_preinterest(from.preinterest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryFundResponse_result_currency::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryFundResponse_result_currency::CopyFrom(const queryFundResponse_result_currency& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryFundResponse_result_currency::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  
  return true;
}

void queryFundResponse_result_currency::Swap(queryFundResponse_result_currency* other) {
  if (other != this) {
    std::swap(moneytype_, other->moneytype_);
    std::swap(currentbalance_, other->currentbalance_);
    std::swap(enablebalance_, other->enablebalance_);
    std::swap(fetchbalance_, other->fetchbalance_);
    std::swap(interest_, other->interest_);
    std::swap(assetbalance_, other->assetbalance_);
    std::swap(fetchcash_, other->fetchcash_);
    std::swap(fundbalance_, other->fundbalance_);
    std::swap(marketvalue_, other->marketvalue_);
    std::swap(opfundmarketvalue_, other->opfundmarketvalue_);
    std::swap(preinterest_, other->preinterest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryFundResponse_result_currency::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryFundResponse_result_currency_descriptor_;
  metadata.reflection = queryFundResponse_result_currency_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int queryFundResponse_result::kMoneyFieldNumber;
const int queryFundResponse_result::kErrorNoFieldNumber;
const int queryFundResponse_result::kErrorMsgFieldNumber;
#endif  // !_MSC_VER

queryFundResponse_result::queryFundResponse_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryFundResponse_result::InitAsDefaultInstance() {
}

queryFundResponse_result::queryFundResponse_result(const queryFundResponse_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryFundResponse_result::SharedCtor() {
  _cached_size_ = 0;
  errorno_ = 0;
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryFundResponse_result::~queryFundResponse_result() {
  SharedDtor();
}

void queryFundResponse_result::SharedDtor() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (this != default_instance_) {
  }
}

void queryFundResponse_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryFundResponse_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryFundResponse_result_descriptor_;
}

const queryFundResponse_result& queryFundResponse_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryFundResponse_result* queryFundResponse_result::default_instance_ = NULL;

queryFundResponse_result* queryFundResponse_result::New() const {
  return new queryFundResponse_result;
}

void queryFundResponse_result::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    errorno_ = 0;
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
  }
  money_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryFundResponse_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.queryFundResponse.result.currency money = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_money;
        if (input->ExpectTag(112)) goto parse_errorNo;
        break;
      }
      
      // optional int32 errorNo = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorno_)));
          set_has_errorno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_errorMsg;
        break;
      }
      
      // optional string errorMsg = 15 [default = ""];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryFundResponse_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.queryFundResponse.result.currency money = 1;
  for (int i = 0; i < this->money_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->money(i), output);
  }
  
  // optional int32 errorNo = 14 [default = 0];
  if (has_errorno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->errorno(), output);
  }
  
  // optional string errorMsg = 15 [default = ""];
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->errormsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryFundResponse_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.queryFundResponse.result.currency money = 1;
  for (int i = 0; i < this->money_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->money(i), target);
  }
  
  // optional int32 errorNo = 14 [default = 0];
  if (has_errorno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->errorno(), target);
  }
  
  // optional string errorMsg = 15 [default = ""];
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->errormsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryFundResponse_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 errorNo = 14 [default = 0];
    if (has_errorno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorno());
    }
    
    // optional string errorMsg = 15 [default = ""];
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }
    
  }
  // repeated .HSCommPB.queryFundResponse.result.currency money = 1;
  total_size += 1 * this->money_size();
  for (int i = 0; i < this->money_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->money(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryFundResponse_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryFundResponse_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryFundResponse_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryFundResponse_result::MergeFrom(const queryFundResponse_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  money_.MergeFrom(from.money_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_errorno()) {
      set_errorno(from.errorno());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryFundResponse_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryFundResponse_result::CopyFrom(const queryFundResponse_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryFundResponse_result::IsInitialized() const {
  
  for (int i = 0; i < money_size(); i++) {
    if (!this->money(i).IsInitialized()) return false;
  }
  return true;
}

void queryFundResponse_result::Swap(queryFundResponse_result* other) {
  if (other != this) {
    money_.Swap(&other->money_);
    std::swap(errorno_, other->errorno_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryFundResponse_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryFundResponse_result_descriptor_;
  metadata.reflection = queryFundResponse_result_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int queryFundResponse::kResponsesFieldNumber;
#endif  // !_MSC_VER

queryFundResponse::queryFundResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryFundResponse::InitAsDefaultInstance() {
}

queryFundResponse::queryFundResponse(const queryFundResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryFundResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryFundResponse::~queryFundResponse() {
  SharedDtor();
}

void queryFundResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void queryFundResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryFundResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryFundResponse_descriptor_;
}

const queryFundResponse& queryFundResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryFundResponse* queryFundResponse::default_instance_ = NULL;

queryFundResponse* queryFundResponse::New() const {
  return new queryFundResponse;
}

void queryFundResponse::Clear() {
  responses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryFundResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.queryFundResponse.result responses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_responses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_responses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_responses;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryFundResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.queryFundResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->responses(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryFundResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.queryFundResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->responses(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryFundResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.queryFundResponse.result responses = 1;
  total_size += 1 * this->responses_size();
  for (int i = 0; i < this->responses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->responses(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryFundResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryFundResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryFundResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryFundResponse::MergeFrom(const queryFundResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  responses_.MergeFrom(from.responses_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryFundResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryFundResponse::CopyFrom(const queryFundResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryFundResponse::IsInitialized() const {
  
  for (int i = 0; i < responses_size(); i++) {
    if (!this->responses(i).IsInitialized()) return false;
  }
  return true;
}

void queryFundResponse::Swap(queryFundResponse* other) {
  if (other != this) {
    responses_.Swap(&other->responses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryFundResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryFundResponse_descriptor_;
  metadata.reflection = queryFundResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int queryShareholderRequest_call::kBranchNoFieldNumber;
const int queryShareholderRequest_call::kFundAccountFieldNumber;
const int queryShareholderRequest_call::kPasswordFieldNumber;
const int queryShareholderRequest_call::kExchangeTypeFieldNumber;
const int queryShareholderRequest_call::kStockCodeFieldNumber;
const int queryShareholderRequest_call::kRequestNumberFieldNumber;
const int queryShareholderRequest_call::kLastPositionStringFieldNumber;
#endif  // !_MSC_VER

queryShareholderRequest_call::queryShareholderRequest_call()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryShareholderRequest_call::InitAsDefaultInstance() {
}

queryShareholderRequest_call::queryShareholderRequest_call(const queryShareholderRequest_call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryShareholderRequest_call::SharedCtor() {
  _cached_size_ = 0;
  branchno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fundaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangetype_ = 0;
  stockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requestnumber_ = 1000;
  lastpositionstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryShareholderRequest_call::~queryShareholderRequest_call() {
  SharedDtor();
}

void queryShareholderRequest_call::SharedDtor() {
  if (branchno_ != &::google::protobuf::internal::kEmptyString) {
    delete branchno_;
  }
  if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete fundaccount_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
    delete stockcode_;
  }
  if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
    delete lastpositionstring_;
  }
  if (this != default_instance_) {
  }
}

void queryShareholderRequest_call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryShareholderRequest_call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryShareholderRequest_call_descriptor_;
}

const queryShareholderRequest_call& queryShareholderRequest_call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryShareholderRequest_call* queryShareholderRequest_call::default_instance_ = NULL;

queryShareholderRequest_call* queryShareholderRequest_call::New() const {
  return new queryShareholderRequest_call;
}

void queryShareholderRequest_call::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_branchno()) {
      if (branchno_ != &::google::protobuf::internal::kEmptyString) {
        branchno_->clear();
      }
    }
    if (has_fundaccount()) {
      if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
        fundaccount_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    exchangetype_ = 0;
    if (has_stockcode()) {
      if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
        stockcode_->clear();
      }
    }
    requestnumber_ = 1000;
    if (has_lastpositionstring()) {
      if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
        lastpositionstring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryShareholderRequest_call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string branchNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branchno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->branchno().data(), this->branchno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fundAccount;
        break;
      }
      
      // required string fundAccount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fundAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fundaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fundaccount().data(), this->fundaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }
      
      // required string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exchangeType;
        break;
      }
      
      // optional .HSCommPB.enums.exchangeType exchangeType = 4 [default = noneExchangeType];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchangeType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HSCommPB::enums_exchangeType_IsValid(value)) {
            set_exchangetype(static_cast< ::HSCommPB::enums_exchangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stockCode;
        break;
      }
      
      // optional string stockCode = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stockCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stockcode().data(), this->stockcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_requestNumber;
        break;
      }
      
      // optional int32 requestNumber = 6 [default = 1000];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestnumber_)));
          set_has_requestnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_lastPositionString;
        break;
      }
      
      // optional string lastPositionString = 7 [default = ""];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastPositionString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastpositionstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastpositionstring().data(), this->lastpositionstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryShareholderRequest_call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string branchNo = 1;
  if (has_branchno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->branchno().data(), this->branchno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->branchno(), output);
  }
  
  // required string fundAccount = 2;
  if (has_fundaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fundaccount().data(), this->fundaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fundaccount(), output);
  }
  
  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }
  
  // optional .HSCommPB.enums.exchangeType exchangeType = 4 [default = noneExchangeType];
  if (has_exchangetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->exchangetype(), output);
  }
  
  // optional string stockCode = 5 [default = ""];
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->stockcode(), output);
  }
  
  // optional int32 requestNumber = 6 [default = 1000];
  if (has_requestnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->requestnumber(), output);
  }
  
  // optional string lastPositionString = 7 [default = ""];
  if (has_lastpositionstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastpositionstring().data(), this->lastpositionstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->lastpositionstring(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryShareholderRequest_call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string branchNo = 1;
  if (has_branchno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->branchno().data(), this->branchno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->branchno(), target);
  }
  
  // required string fundAccount = 2;
  if (has_fundaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fundaccount().data(), this->fundaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fundaccount(), target);
  }
  
  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }
  
  // optional .HSCommPB.enums.exchangeType exchangeType = 4 [default = noneExchangeType];
  if (has_exchangetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->exchangetype(), target);
  }
  
  // optional string stockCode = 5 [default = ""];
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stockcode(), target);
  }
  
  // optional int32 requestNumber = 6 [default = 1000];
  if (has_requestnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->requestnumber(), target);
  }
  
  // optional string lastPositionString = 7 [default = ""];
  if (has_lastpositionstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastpositionstring().data(), this->lastpositionstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->lastpositionstring(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryShareholderRequest_call::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string branchNo = 1;
    if (has_branchno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->branchno());
    }
    
    // required string fundAccount = 2;
    if (has_fundaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fundaccount());
    }
    
    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional .HSCommPB.enums.exchangeType exchangeType = 4 [default = noneExchangeType];
    if (has_exchangetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchangetype());
    }
    
    // optional string stockCode = 5 [default = ""];
    if (has_stockcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockcode());
    }
    
    // optional int32 requestNumber = 6 [default = 1000];
    if (has_requestnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestnumber());
    }
    
    // optional string lastPositionString = 7 [default = ""];
    if (has_lastpositionstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastpositionstring());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryShareholderRequest_call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryShareholderRequest_call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryShareholderRequest_call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryShareholderRequest_call::MergeFrom(const queryShareholderRequest_call& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_branchno()) {
      set_branchno(from.branchno());
    }
    if (from.has_fundaccount()) {
      set_fundaccount(from.fundaccount());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_exchangetype()) {
      set_exchangetype(from.exchangetype());
    }
    if (from.has_stockcode()) {
      set_stockcode(from.stockcode());
    }
    if (from.has_requestnumber()) {
      set_requestnumber(from.requestnumber());
    }
    if (from.has_lastpositionstring()) {
      set_lastpositionstring(from.lastpositionstring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryShareholderRequest_call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryShareholderRequest_call::CopyFrom(const queryShareholderRequest_call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryShareholderRequest_call::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void queryShareholderRequest_call::Swap(queryShareholderRequest_call* other) {
  if (other != this) {
    std::swap(branchno_, other->branchno_);
    std::swap(fundaccount_, other->fundaccount_);
    std::swap(password_, other->password_);
    std::swap(exchangetype_, other->exchangetype_);
    std::swap(stockcode_, other->stockcode_);
    std::swap(requestnumber_, other->requestnumber_);
    std::swap(lastpositionstring_, other->lastpositionstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryShareholderRequest_call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryShareholderRequest_call_descriptor_;
  metadata.reflection = queryShareholderRequest_call_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int queryShareholderRequest::kRequestsFieldNumber;
#endif  // !_MSC_VER

queryShareholderRequest::queryShareholderRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryShareholderRequest::InitAsDefaultInstance() {
}

queryShareholderRequest::queryShareholderRequest(const queryShareholderRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryShareholderRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryShareholderRequest::~queryShareholderRequest() {
  SharedDtor();
}

void queryShareholderRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void queryShareholderRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryShareholderRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryShareholderRequest_descriptor_;
}

const queryShareholderRequest& queryShareholderRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryShareholderRequest* queryShareholderRequest::default_instance_ = NULL;

queryShareholderRequest* queryShareholderRequest::New() const {
  return new queryShareholderRequest;
}

void queryShareholderRequest::Clear() {
  requests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryShareholderRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.queryShareholderRequest.call requests = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_requests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_requests;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryShareholderRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.queryShareholderRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requests(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryShareholderRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.queryShareholderRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->requests(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryShareholderRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.queryShareholderRequest.call requests = 1;
  total_size += 1 * this->requests_size();
  for (int i = 0; i < this->requests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requests(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryShareholderRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryShareholderRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryShareholderRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryShareholderRequest::MergeFrom(const queryShareholderRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  requests_.MergeFrom(from.requests_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryShareholderRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryShareholderRequest::CopyFrom(const queryShareholderRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryShareholderRequest::IsInitialized() const {
  
  for (int i = 0; i < requests_size(); i++) {
    if (!this->requests(i).IsInitialized()) return false;
  }
  return true;
}

void queryShareholderRequest::Swap(queryShareholderRequest* other) {
  if (other != this) {
    requests_.Swap(&other->requests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryShareholderRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryShareholderRequest_descriptor_;
  metadata.reflection = queryShareholderRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int queryShareholderResponse_result_shareholder::kExchangeTypeFieldNumber;
const int queryShareholderResponse_result_shareholder::kExchangeNameFieldNumber;
const int queryShareholderResponse_result_shareholder::kStockAccountFieldNumber;
const int queryShareholderResponse_result_shareholder::kHolderStatusFieldNumber;
const int queryShareholderResponse_result_shareholder::kMainShareHolderFieldNumber;
const int queryShareholderResponse_result_shareholder::kSeatNoFieldNumber;
const int queryShareholderResponse_result_shareholder::kEnableAmountFieldNumber;
#endif  // !_MSC_VER

queryShareholderResponse_result_shareholder::queryShareholderResponse_result_shareholder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryShareholderResponse_result_shareholder::InitAsDefaultInstance() {
}

queryShareholderResponse_result_shareholder::queryShareholderResponse_result_shareholder(const queryShareholderResponse_result_shareholder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryShareholderResponse_result_shareholder::SharedCtor() {
  _cached_size_ = 0;
  exchangetype_ = 0;
  exchangename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stockaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  holderstatus_ = 0;
  mainshareholder_ = false;
  seatno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enableamount_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryShareholderResponse_result_shareholder::~queryShareholderResponse_result_shareholder() {
  SharedDtor();
}

void queryShareholderResponse_result_shareholder::SharedDtor() {
  if (exchangename_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangename_;
  }
  if (stockaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete stockaccount_;
  }
  if (seatno_ != &::google::protobuf::internal::kEmptyString) {
    delete seatno_;
  }
  if (this != default_instance_) {
  }
}

void queryShareholderResponse_result_shareholder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryShareholderResponse_result_shareholder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryShareholderResponse_result_shareholder_descriptor_;
}

const queryShareholderResponse_result_shareholder& queryShareholderResponse_result_shareholder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryShareholderResponse_result_shareholder* queryShareholderResponse_result_shareholder::default_instance_ = NULL;

queryShareholderResponse_result_shareholder* queryShareholderResponse_result_shareholder::New() const {
  return new queryShareholderResponse_result_shareholder;
}

void queryShareholderResponse_result_shareholder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exchangetype_ = 0;
    if (has_exchangename()) {
      if (exchangename_ != &::google::protobuf::internal::kEmptyString) {
        exchangename_->clear();
      }
    }
    if (has_stockaccount()) {
      if (stockaccount_ != &::google::protobuf::internal::kEmptyString) {
        stockaccount_->clear();
      }
    }
    holderstatus_ = 0;
    mainshareholder_ = false;
    if (has_seatno()) {
      if (seatno_ != &::google::protobuf::internal::kEmptyString) {
        seatno_->clear();
      }
    }
    enableamount_ = GOOGLE_LONGLONG(-1);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryShareholderResponse_result_shareholder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .HSCommPB.enums.exchangeType exchangeType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HSCommPB::enums_exchangeType_IsValid(value)) {
            set_exchangetype(static_cast< ::HSCommPB::enums_exchangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_exchangeName;
        break;
      }
      
      // required string exchangeName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exchangeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangename().data(), this->exchangename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stockAccount;
        break;
      }
      
      // required string stockAccount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stockAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stockaccount().data(), this->stockaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_holderStatus;
        break;
      }
      
      // required .HSCommPB.enums.holderStatus holderStatus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_holderStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HSCommPB::enums_holderStatus_IsValid(value)) {
            set_holderstatus(static_cast< ::HSCommPB::enums_holderStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mainShareHolder;
        break;
      }
      
      // required bool mainShareHolder = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mainShareHolder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mainshareholder_)));
          set_has_mainshareholder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_seatNo;
        break;
      }
      
      // optional string seatNo = 6 [default = ""];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seatNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seatno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seatno().data(), this->seatno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_enableAmount;
        break;
      }
      
      // optional sint64 enableAmount = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enableAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &enableamount_)));
          set_has_enableamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryShareholderResponse_result_shareholder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .HSCommPB.enums.exchangeType exchangeType = 1;
  if (has_exchangetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->exchangetype(), output);
  }
  
  // required string exchangeName = 2;
  if (has_exchangename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangename().data(), this->exchangename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->exchangename(), output);
  }
  
  // required string stockAccount = 3;
  if (has_stockaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockaccount().data(), this->stockaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stockaccount(), output);
  }
  
  // required .HSCommPB.enums.holderStatus holderStatus = 4;
  if (has_holderstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->holderstatus(), output);
  }
  
  // required bool mainShareHolder = 5;
  if (has_mainshareholder()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->mainshareholder(), output);
  }
  
  // optional string seatNo = 6 [default = ""];
  if (has_seatno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seatno().data(), this->seatno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->seatno(), output);
  }
  
  // optional sint64 enableAmount = 7 [default = -1];
  if (has_enableamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(7, this->enableamount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryShareholderResponse_result_shareholder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .HSCommPB.enums.exchangeType exchangeType = 1;
  if (has_exchangetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->exchangetype(), target);
  }
  
  // required string exchangeName = 2;
  if (has_exchangename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangename().data(), this->exchangename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchangename(), target);
  }
  
  // required string stockAccount = 3;
  if (has_stockaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockaccount().data(), this->stockaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stockaccount(), target);
  }
  
  // required .HSCommPB.enums.holderStatus holderStatus = 4;
  if (has_holderstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->holderstatus(), target);
  }
  
  // required bool mainShareHolder = 5;
  if (has_mainshareholder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->mainshareholder(), target);
  }
  
  // optional string seatNo = 6 [default = ""];
  if (has_seatno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seatno().data(), this->seatno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->seatno(), target);
  }
  
  // optional sint64 enableAmount = 7 [default = -1];
  if (has_enableamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(7, this->enableamount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryShareholderResponse_result_shareholder::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .HSCommPB.enums.exchangeType exchangeType = 1;
    if (has_exchangetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchangetype());
    }
    
    // required string exchangeName = 2;
    if (has_exchangename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangename());
    }
    
    // required string stockAccount = 3;
    if (has_stockaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockaccount());
    }
    
    // required .HSCommPB.enums.holderStatus holderStatus = 4;
    if (has_holderstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->holderstatus());
    }
    
    // required bool mainShareHolder = 5;
    if (has_mainshareholder()) {
      total_size += 1 + 1;
    }
    
    // optional string seatNo = 6 [default = ""];
    if (has_seatno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seatno());
    }
    
    // optional sint64 enableAmount = 7 [default = -1];
    if (has_enableamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->enableamount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryShareholderResponse_result_shareholder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryShareholderResponse_result_shareholder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryShareholderResponse_result_shareholder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryShareholderResponse_result_shareholder::MergeFrom(const queryShareholderResponse_result_shareholder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchangetype()) {
      set_exchangetype(from.exchangetype());
    }
    if (from.has_exchangename()) {
      set_exchangename(from.exchangename());
    }
    if (from.has_stockaccount()) {
      set_stockaccount(from.stockaccount());
    }
    if (from.has_holderstatus()) {
      set_holderstatus(from.holderstatus());
    }
    if (from.has_mainshareholder()) {
      set_mainshareholder(from.mainshareholder());
    }
    if (from.has_seatno()) {
      set_seatno(from.seatno());
    }
    if (from.has_enableamount()) {
      set_enableamount(from.enableamount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryShareholderResponse_result_shareholder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryShareholderResponse_result_shareholder::CopyFrom(const queryShareholderResponse_result_shareholder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryShareholderResponse_result_shareholder::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void queryShareholderResponse_result_shareholder::Swap(queryShareholderResponse_result_shareholder* other) {
  if (other != this) {
    std::swap(exchangetype_, other->exchangetype_);
    std::swap(exchangename_, other->exchangename_);
    std::swap(stockaccount_, other->stockaccount_);
    std::swap(holderstatus_, other->holderstatus_);
    std::swap(mainshareholder_, other->mainshareholder_);
    std::swap(seatno_, other->seatno_);
    std::swap(enableamount_, other->enableamount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryShareholderResponse_result_shareholder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryShareholderResponse_result_shareholder_descriptor_;
  metadata.reflection = queryShareholderResponse_result_shareholder_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int queryShareholderResponse_result::kShareholdersFieldNumber;
const int queryShareholderResponse_result::kLastPositionStringFieldNumber;
const int queryShareholderResponse_result::kErrorNoFieldNumber;
const int queryShareholderResponse_result::kErrorMsgFieldNumber;
#endif  // !_MSC_VER

queryShareholderResponse_result::queryShareholderResponse_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryShareholderResponse_result::InitAsDefaultInstance() {
}

queryShareholderResponse_result::queryShareholderResponse_result(const queryShareholderResponse_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryShareholderResponse_result::SharedCtor() {
  _cached_size_ = 0;
  lastpositionstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  errorno_ = 0;
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryShareholderResponse_result::~queryShareholderResponse_result() {
  SharedDtor();
}

void queryShareholderResponse_result::SharedDtor() {
  if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
    delete lastpositionstring_;
  }
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (this != default_instance_) {
  }
}

void queryShareholderResponse_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryShareholderResponse_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryShareholderResponse_result_descriptor_;
}

const queryShareholderResponse_result& queryShareholderResponse_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryShareholderResponse_result* queryShareholderResponse_result::default_instance_ = NULL;

queryShareholderResponse_result* queryShareholderResponse_result::New() const {
  return new queryShareholderResponse_result;
}

void queryShareholderResponse_result::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_lastpositionstring()) {
      if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
        lastpositionstring_->clear();
      }
    }
    errorno_ = 0;
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
  }
  shareholders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryShareholderResponse_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.queryShareholderResponse.result.shareholder shareholders = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shareholders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shareholders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_shareholders;
        if (input->ExpectTag(18)) goto parse_lastPositionString;
        break;
      }
      
      // required string lastPositionString = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastPositionString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastpositionstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastpositionstring().data(), this->lastpositionstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_errorNo;
        break;
      }
      
      // optional int32 errorNo = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorno_)));
          set_has_errorno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_errorMsg;
        break;
      }
      
      // optional string errorMsg = 15 [default = ""];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryShareholderResponse_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.queryShareholderResponse.result.shareholder shareholders = 1;
  for (int i = 0; i < this->shareholders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shareholders(i), output);
  }
  
  // required string lastPositionString = 2;
  if (has_lastpositionstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastpositionstring().data(), this->lastpositionstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lastpositionstring(), output);
  }
  
  // optional int32 errorNo = 14 [default = 0];
  if (has_errorno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->errorno(), output);
  }
  
  // optional string errorMsg = 15 [default = ""];
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->errormsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryShareholderResponse_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.queryShareholderResponse.result.shareholder shareholders = 1;
  for (int i = 0; i < this->shareholders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shareholders(i), target);
  }
  
  // required string lastPositionString = 2;
  if (has_lastpositionstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastpositionstring().data(), this->lastpositionstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lastpositionstring(), target);
  }
  
  // optional int32 errorNo = 14 [default = 0];
  if (has_errorno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->errorno(), target);
  }
  
  // optional string errorMsg = 15 [default = ""];
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->errormsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryShareholderResponse_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required string lastPositionString = 2;
    if (has_lastpositionstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastpositionstring());
    }
    
    // optional int32 errorNo = 14 [default = 0];
    if (has_errorno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorno());
    }
    
    // optional string errorMsg = 15 [default = ""];
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }
    
  }
  // repeated .HSCommPB.queryShareholderResponse.result.shareholder shareholders = 1;
  total_size += 1 * this->shareholders_size();
  for (int i = 0; i < this->shareholders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shareholders(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryShareholderResponse_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryShareholderResponse_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryShareholderResponse_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryShareholderResponse_result::MergeFrom(const queryShareholderResponse_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  shareholders_.MergeFrom(from.shareholders_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_lastpositionstring()) {
      set_lastpositionstring(from.lastpositionstring());
    }
    if (from.has_errorno()) {
      set_errorno(from.errorno());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryShareholderResponse_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryShareholderResponse_result::CopyFrom(const queryShareholderResponse_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryShareholderResponse_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < shareholders_size(); i++) {
    if (!this->shareholders(i).IsInitialized()) return false;
  }
  return true;
}

void queryShareholderResponse_result::Swap(queryShareholderResponse_result* other) {
  if (other != this) {
    shareholders_.Swap(&other->shareholders_);
    std::swap(lastpositionstring_, other->lastpositionstring_);
    std::swap(errorno_, other->errorno_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryShareholderResponse_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryShareholderResponse_result_descriptor_;
  metadata.reflection = queryShareholderResponse_result_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int queryShareholderResponse::kResponsesFieldNumber;
#endif  // !_MSC_VER

queryShareholderResponse::queryShareholderResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryShareholderResponse::InitAsDefaultInstance() {
}

queryShareholderResponse::queryShareholderResponse(const queryShareholderResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryShareholderResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryShareholderResponse::~queryShareholderResponse() {
  SharedDtor();
}

void queryShareholderResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void queryShareholderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryShareholderResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryShareholderResponse_descriptor_;
}

const queryShareholderResponse& queryShareholderResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryShareholderResponse* queryShareholderResponse::default_instance_ = NULL;

queryShareholderResponse* queryShareholderResponse::New() const {
  return new queryShareholderResponse;
}

void queryShareholderResponse::Clear() {
  responses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryShareholderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.queryShareholderResponse.result responses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_responses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_responses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_responses;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryShareholderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.queryShareholderResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->responses(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryShareholderResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.queryShareholderResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->responses(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryShareholderResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.queryShareholderResponse.result responses = 1;
  total_size += 1 * this->responses_size();
  for (int i = 0; i < this->responses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->responses(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryShareholderResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryShareholderResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryShareholderResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryShareholderResponse::MergeFrom(const queryShareholderResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  responses_.MergeFrom(from.responses_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryShareholderResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryShareholderResponse::CopyFrom(const queryShareholderResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryShareholderResponse::IsInitialized() const {
  
  for (int i = 0; i < responses_size(); i++) {
    if (!this->responses(i).IsInitialized()) return false;
  }
  return true;
}

void queryShareholderResponse::Swap(queryShareholderResponse* other) {
  if (other != this) {
    responses_.Swap(&other->responses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryShareholderResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryShareholderResponse_descriptor_;
  metadata.reflection = queryShareholderResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int queryBusinessRequest_call::kBranchNoFieldNumber;
const int queryBusinessRequest_call::kFundAccountFieldNumber;
const int queryBusinessRequest_call::kPasswordFieldNumber;
const int queryBusinessRequest_call::kStartDateFieldNumber;
const int queryBusinessRequest_call::kEndDateFieldNumber;
const int queryBusinessRequest_call::kExchangeTypeFieldNumber;
const int queryBusinessRequest_call::kStockCodeFieldNumber;
const int queryBusinessRequest_call::kRequestNumberFieldNumber;
const int queryBusinessRequest_call::kLastPositionStringFieldNumber;
#endif  // !_MSC_VER

queryBusinessRequest_call::queryBusinessRequest_call()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryBusinessRequest_call::InitAsDefaultInstance() {
}

queryBusinessRequest_call::queryBusinessRequest_call(const queryBusinessRequest_call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryBusinessRequest_call::SharedCtor() {
  _cached_size_ = 0;
  branchno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fundaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  startdate_ = 0;
  enddate_ = 0;
  exchangetype_ = 0;
  stockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requestnumber_ = 1000;
  lastpositionstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryBusinessRequest_call::~queryBusinessRequest_call() {
  SharedDtor();
}

void queryBusinessRequest_call::SharedDtor() {
  if (branchno_ != &::google::protobuf::internal::kEmptyString) {
    delete branchno_;
  }
  if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete fundaccount_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
    delete stockcode_;
  }
  if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
    delete lastpositionstring_;
  }
  if (this != default_instance_) {
  }
}

void queryBusinessRequest_call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryBusinessRequest_call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryBusinessRequest_call_descriptor_;
}

const queryBusinessRequest_call& queryBusinessRequest_call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryBusinessRequest_call* queryBusinessRequest_call::default_instance_ = NULL;

queryBusinessRequest_call* queryBusinessRequest_call::New() const {
  return new queryBusinessRequest_call;
}

void queryBusinessRequest_call::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_branchno()) {
      if (branchno_ != &::google::protobuf::internal::kEmptyString) {
        branchno_->clear();
      }
    }
    if (has_fundaccount()) {
      if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
        fundaccount_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    startdate_ = 0;
    enddate_ = 0;
    exchangetype_ = 0;
    if (has_stockcode()) {
      if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
        stockcode_->clear();
      }
    }
    requestnumber_ = 1000;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_lastpositionstring()) {
      if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
        lastpositionstring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryBusinessRequest_call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string branchNo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branchno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->branchno().data(), this->branchno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fundAccount;
        break;
      }
      
      // required string fundAccount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fundAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fundaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fundaccount().data(), this->fundaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }
      
      // required string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_startDate;
        break;
      }
      
      // optional int32 startDate = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startdate_)));
          set_has_startdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_endDate;
        break;
      }
      
      // optional int32 endDate = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enddate_)));
          set_has_enddate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exchangeType;
        break;
      }
      
      // optional .HSCommPB.enums.exchangeType exchangeType = 6 [default = noneExchangeType];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchangeType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HSCommPB::enums_exchangeType_IsValid(value)) {
            set_exchangetype(static_cast< ::HSCommPB::enums_exchangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_stockCode;
        break;
      }
      
      // optional string stockCode = 7 [default = ""];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stockCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stockcode().data(), this->stockcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_requestNumber;
        break;
      }
      
      // optional int32 requestNumber = 8 [default = 1000];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestnumber_)));
          set_has_requestnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_lastPositionString;
        break;
      }
      
      // optional string lastPositionString = 9 [default = ""];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastPositionString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastpositionstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastpositionstring().data(), this->lastpositionstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryBusinessRequest_call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string branchNo = 1;
  if (has_branchno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->branchno().data(), this->branchno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->branchno(), output);
  }
  
  // required string fundAccount = 2;
  if (has_fundaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fundaccount().data(), this->fundaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fundaccount(), output);
  }
  
  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }
  
  // optional int32 startDate = 4 [default = 0];
  if (has_startdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->startdate(), output);
  }
  
  // optional int32 endDate = 5 [default = 0];
  if (has_enddate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->enddate(), output);
  }
  
  // optional .HSCommPB.enums.exchangeType exchangeType = 6 [default = noneExchangeType];
  if (has_exchangetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->exchangetype(), output);
  }
  
  // optional string stockCode = 7 [default = ""];
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->stockcode(), output);
  }
  
  // optional int32 requestNumber = 8 [default = 1000];
  if (has_requestnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->requestnumber(), output);
  }
  
  // optional string lastPositionString = 9 [default = ""];
  if (has_lastpositionstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastpositionstring().data(), this->lastpositionstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->lastpositionstring(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryBusinessRequest_call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string branchNo = 1;
  if (has_branchno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->branchno().data(), this->branchno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->branchno(), target);
  }
  
  // required string fundAccount = 2;
  if (has_fundaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fundaccount().data(), this->fundaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fundaccount(), target);
  }
  
  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }
  
  // optional int32 startDate = 4 [default = 0];
  if (has_startdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->startdate(), target);
  }
  
  // optional int32 endDate = 5 [default = 0];
  if (has_enddate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->enddate(), target);
  }
  
  // optional .HSCommPB.enums.exchangeType exchangeType = 6 [default = noneExchangeType];
  if (has_exchangetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->exchangetype(), target);
  }
  
  // optional string stockCode = 7 [default = ""];
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->stockcode(), target);
  }
  
  // optional int32 requestNumber = 8 [default = 1000];
  if (has_requestnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->requestnumber(), target);
  }
  
  // optional string lastPositionString = 9 [default = ""];
  if (has_lastpositionstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastpositionstring().data(), this->lastpositionstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->lastpositionstring(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryBusinessRequest_call::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string branchNo = 1;
    if (has_branchno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->branchno());
    }
    
    // required string fundAccount = 2;
    if (has_fundaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fundaccount());
    }
    
    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional int32 startDate = 4 [default = 0];
    if (has_startdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startdate());
    }
    
    // optional int32 endDate = 5 [default = 0];
    if (has_enddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enddate());
    }
    
    // optional .HSCommPB.enums.exchangeType exchangeType = 6 [default = noneExchangeType];
    if (has_exchangetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchangetype());
    }
    
    // optional string stockCode = 7 [default = ""];
    if (has_stockcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockcode());
    }
    
    // optional int32 requestNumber = 8 [default = 1000];
    if (has_requestnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestnumber());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string lastPositionString = 9 [default = ""];
    if (has_lastpositionstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastpositionstring());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryBusinessRequest_call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryBusinessRequest_call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryBusinessRequest_call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryBusinessRequest_call::MergeFrom(const queryBusinessRequest_call& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_branchno()) {
      set_branchno(from.branchno());
    }
    if (from.has_fundaccount()) {
      set_fundaccount(from.fundaccount());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_startdate()) {
      set_startdate(from.startdate());
    }
    if (from.has_enddate()) {
      set_enddate(from.enddate());
    }
    if (from.has_exchangetype()) {
      set_exchangetype(from.exchangetype());
    }
    if (from.has_stockcode()) {
      set_stockcode(from.stockcode());
    }
    if (from.has_requestnumber()) {
      set_requestnumber(from.requestnumber());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lastpositionstring()) {
      set_lastpositionstring(from.lastpositionstring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryBusinessRequest_call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryBusinessRequest_call::CopyFrom(const queryBusinessRequest_call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryBusinessRequest_call::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void queryBusinessRequest_call::Swap(queryBusinessRequest_call* other) {
  if (other != this) {
    std::swap(branchno_, other->branchno_);
    std::swap(fundaccount_, other->fundaccount_);
    std::swap(password_, other->password_);
    std::swap(startdate_, other->startdate_);
    std::swap(enddate_, other->enddate_);
    std::swap(exchangetype_, other->exchangetype_);
    std::swap(stockcode_, other->stockcode_);
    std::swap(requestnumber_, other->requestnumber_);
    std::swap(lastpositionstring_, other->lastpositionstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryBusinessRequest_call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryBusinessRequest_call_descriptor_;
  metadata.reflection = queryBusinessRequest_call_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int queryBusinessRequest::kRequestsFieldNumber;
#endif  // !_MSC_VER

queryBusinessRequest::queryBusinessRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryBusinessRequest::InitAsDefaultInstance() {
}

queryBusinessRequest::queryBusinessRequest(const queryBusinessRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryBusinessRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryBusinessRequest::~queryBusinessRequest() {
  SharedDtor();
}

void queryBusinessRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void queryBusinessRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryBusinessRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryBusinessRequest_descriptor_;
}

const queryBusinessRequest& queryBusinessRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryBusinessRequest* queryBusinessRequest::default_instance_ = NULL;

queryBusinessRequest* queryBusinessRequest::New() const {
  return new queryBusinessRequest;
}

void queryBusinessRequest::Clear() {
  requests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryBusinessRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.queryBusinessRequest.call requests = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_requests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_requests;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryBusinessRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.queryBusinessRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requests(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryBusinessRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.queryBusinessRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->requests(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryBusinessRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.queryBusinessRequest.call requests = 1;
  total_size += 1 * this->requests_size();
  for (int i = 0; i < this->requests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requests(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryBusinessRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryBusinessRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryBusinessRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryBusinessRequest::MergeFrom(const queryBusinessRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  requests_.MergeFrom(from.requests_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryBusinessRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryBusinessRequest::CopyFrom(const queryBusinessRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryBusinessRequest::IsInitialized() const {
  
  for (int i = 0; i < requests_size(); i++) {
    if (!this->requests(i).IsInitialized()) return false;
  }
  return true;
}

void queryBusinessRequest::Swap(queryBusinessRequest* other) {
  if (other != this) {
    requests_.Swap(&other->requests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryBusinessRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryBusinessRequest_descriptor_;
  metadata.reflection = queryBusinessRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int queryBusinessResponse_result_business::kDateFieldNumber;
const int queryBusinessResponse_result_business::kTimeFieldNumber;
const int queryBusinessResponse_result_business::kExchangeTypeFieldNumber;
const int queryBusinessResponse_result_business::kStockAccountFieldNumber;
const int queryBusinessResponse_result_business::kStockCodeFieldNumber;
const int queryBusinessResponse_result_business::kStockNameFieldNumber;
const int queryBusinessResponse_result_business::kEntrustBSFieldNumber;
const int queryBusinessResponse_result_business::kBusinessAmountFieldNumber;
const int queryBusinessResponse_result_business::kBusinessPriceFieldNumber;
const int queryBusinessResponse_result_business::kBusinessBalanceFieldNumber;
const int queryBusinessResponse_result_business::kBusinessTimesFieldNumber;
const int queryBusinessResponse_result_business::kBusinessStatusFieldNumber;
const int queryBusinessResponse_result_business::kBusinessTypeFieldNumber;
const int queryBusinessResponse_result_business::kEntrustNoFieldNumber;
const int queryBusinessResponse_result_business::kReportNoFieldNumber;
const int queryBusinessResponse_result_business::kRemarkFieldNumber;
#endif  // !_MSC_VER

queryBusinessResponse_result_business::queryBusinessResponse_result_business()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryBusinessResponse_result_business::InitAsDefaultInstance() {
}

queryBusinessResponse_result_business::queryBusinessResponse_result_business(const queryBusinessResponse_result_business& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryBusinessResponse_result_business::SharedCtor() {
  _cached_size_ = 0;
  date_ = 0;
  time_ = 0;
  exchangetype_ = 0;
  stockaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stockname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entrustbs_ = 0;
  businessamount_ = GOOGLE_LONGLONG(0);
  businessprice_ = GOOGLE_LONGLONG(0);
  businessbalance_ = GOOGLE_LONGLONG(0);
  businesstimes_ = 0;
  businessstatus_ = 0;
  businesstype_ = 0;
  entrustno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reportno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryBusinessResponse_result_business::~queryBusinessResponse_result_business() {
  SharedDtor();
}

void queryBusinessResponse_result_business::SharedDtor() {
  if (stockaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete stockaccount_;
  }
  if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
    delete stockcode_;
  }
  if (stockname_ != &::google::protobuf::internal::kEmptyString) {
    delete stockname_;
  }
  if (entrustno_ != &::google::protobuf::internal::kEmptyString) {
    delete entrustno_;
  }
  if (reportno_ != &::google::protobuf::internal::kEmptyString) {
    delete reportno_;
  }
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (this != default_instance_) {
  }
}

void queryBusinessResponse_result_business::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryBusinessResponse_result_business::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryBusinessResponse_result_business_descriptor_;
}

const queryBusinessResponse_result_business& queryBusinessResponse_result_business::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryBusinessResponse_result_business* queryBusinessResponse_result_business::default_instance_ = NULL;

queryBusinessResponse_result_business* queryBusinessResponse_result_business::New() const {
  return new queryBusinessResponse_result_business;
}

void queryBusinessResponse_result_business::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    date_ = 0;
    time_ = 0;
    exchangetype_ = 0;
    if (has_stockaccount()) {
      if (stockaccount_ != &::google::protobuf::internal::kEmptyString) {
        stockaccount_->clear();
      }
    }
    if (has_stockcode()) {
      if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
        stockcode_->clear();
      }
    }
    if (has_stockname()) {
      if (stockname_ != &::google::protobuf::internal::kEmptyString) {
        stockname_->clear();
      }
    }
    entrustbs_ = 0;
    businessamount_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    businessprice_ = GOOGLE_LONGLONG(0);
    businessbalance_ = GOOGLE_LONGLONG(0);
    businesstimes_ = 0;
    businessstatus_ = 0;
    businesstype_ = 0;
    if (has_entrustno()) {
      if (entrustno_ != &::google::protobuf::internal::kEmptyString) {
        entrustno_->clear();
      }
    }
    if (has_reportno()) {
      if (reportno_ != &::google::protobuf::internal::kEmptyString) {
        reportno_->clear();
      }
    }
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::kEmptyString) {
        remark_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryBusinessResponse_result_business::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 date = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // required int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exchangeType;
        break;
      }
      
      // required .HSCommPB.enums.exchangeType exchangeType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchangeType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HSCommPB::enums_exchangeType_IsValid(value)) {
            set_exchangetype(static_cast< ::HSCommPB::enums_exchangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stockAccount;
        break;
      }
      
      // required string stockAccount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stockAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stockaccount().data(), this->stockaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stockCode;
        break;
      }
      
      // required string stockCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stockCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stockcode().data(), this->stockcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stockName;
        break;
      }
      
      // required string stockName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stockName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stockname().data(), this->stockname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_entrustBS;
        break;
      }
      
      // required .HSCommPB.enums.entrustBS entrustBS = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entrustBS:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HSCommPB::enums_entrustBS_IsValid(value)) {
            set_entrustbs(static_cast< ::HSCommPB::enums_entrustBS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_businessAmount;
        break;
      }
      
      // required int64 businessAmount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_businessAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &businessamount_)));
          set_has_businessamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_businessPrice;
        break;
      }
      
      // required int64 businessPrice = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_businessPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &businessprice_)));
          set_has_businessprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_businessBalance;
        break;
      }
      
      // required int64 businessBalance = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_businessBalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &businessbalance_)));
          set_has_businessbalance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_businessTimes;
        break;
      }
      
      // required int32 businessTimes = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_businessTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &businesstimes_)));
          set_has_businesstimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_businessStatus;
        break;
      }
      
      // required .HSCommPB.enums.businessStatus businessStatus = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_businessStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HSCommPB::enums_businessStatus_IsValid(value)) {
            set_businessstatus(static_cast< ::HSCommPB::enums_businessStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_businessType;
        break;
      }
      
      // required .HSCommPB.enums.businessType businessType = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_businessType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HSCommPB::enums_businessType_IsValid(value)) {
            set_businesstype(static_cast< ::HSCommPB::enums_businessType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_entrustNo;
        break;
      }
      
      // required string entrustNo = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrustNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entrustno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entrustno().data(), this->entrustno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_reportNo;
        break;
      }
      
      // required string reportNo = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reportNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reportno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reportno().data(), this->reportno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_remark;
        break;
      }
      
      // optional string remark = 16 [default = ""];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryBusinessResponse_result_business::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->date(), output);
  }
  
  // required int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }
  
  // required .HSCommPB.enums.exchangeType exchangeType = 3;
  if (has_exchangetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->exchangetype(), output);
  }
  
  // required string stockAccount = 4;
  if (has_stockaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockaccount().data(), this->stockaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->stockaccount(), output);
  }
  
  // required string stockCode = 5;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->stockcode(), output);
  }
  
  // required string stockName = 6;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->stockname(), output);
  }
  
  // required .HSCommPB.enums.entrustBS entrustBS = 7;
  if (has_entrustbs()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->entrustbs(), output);
  }
  
  // required int64 businessAmount = 8;
  if (has_businessamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->businessamount(), output);
  }
  
  // required int64 businessPrice = 9;
  if (has_businessprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->businessprice(), output);
  }
  
  // required int64 businessBalance = 10;
  if (has_businessbalance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->businessbalance(), output);
  }
  
  // required int32 businessTimes = 11;
  if (has_businesstimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->businesstimes(), output);
  }
  
  // required .HSCommPB.enums.businessStatus businessStatus = 12;
  if (has_businessstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->businessstatus(), output);
  }
  
  // required .HSCommPB.enums.businessType businessType = 13;
  if (has_businesstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->businesstype(), output);
  }
  
  // required string entrustNo = 14;
  if (has_entrustno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entrustno().data(), this->entrustno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->entrustno(), output);
  }
  
  // required string reportNo = 15;
  if (has_reportno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reportno().data(), this->reportno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->reportno(), output);
  }
  
  // optional string remark = 16 [default = ""];
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->remark(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryBusinessResponse_result_business::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 date = 1;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->date(), target);
  }
  
  // required int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }
  
  // required .HSCommPB.enums.exchangeType exchangeType = 3;
  if (has_exchangetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->exchangetype(), target);
  }
  
  // required string stockAccount = 4;
  if (has_stockaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockaccount().data(), this->stockaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stockaccount(), target);
  }
  
  // required string stockCode = 5;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stockcode(), target);
  }
  
  // required string stockName = 6;
  if (has_stockname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockname().data(), this->stockname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->stockname(), target);
  }
  
  // required .HSCommPB.enums.entrustBS entrustBS = 7;
  if (has_entrustbs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->entrustbs(), target);
  }
  
  // required int64 businessAmount = 8;
  if (has_businessamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->businessamount(), target);
  }
  
  // required int64 businessPrice = 9;
  if (has_businessprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->businessprice(), target);
  }
  
  // required int64 businessBalance = 10;
  if (has_businessbalance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->businessbalance(), target);
  }
  
  // required int32 businessTimes = 11;
  if (has_businesstimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->businesstimes(), target);
  }
  
  // required .HSCommPB.enums.businessStatus businessStatus = 12;
  if (has_businessstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->businessstatus(), target);
  }
  
  // required .HSCommPB.enums.businessType businessType = 13;
  if (has_businesstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->businesstype(), target);
  }
  
  // required string entrustNo = 14;
  if (has_entrustno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entrustno().data(), this->entrustno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->entrustno(), target);
  }
  
  // required string reportNo = 15;
  if (has_reportno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reportno().data(), this->reportno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->reportno(), target);
  }
  
  // optional string remark = 16 [default = ""];
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->remark(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryBusinessResponse_result_business::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 date = 1;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date());
    }
    
    // required int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // required .HSCommPB.enums.exchangeType exchangeType = 3;
    if (has_exchangetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->exchangetype());
    }
    
    // required string stockAccount = 4;
    if (has_stockaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockaccount());
    }
    
    // required string stockCode = 5;
    if (has_stockcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockcode());
    }
    
    // required string stockName = 6;
    if (has_stockname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockname());
    }
    
    // required .HSCommPB.enums.entrustBS entrustBS = 7;
    if (has_entrustbs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->entrustbs());
    }
    
    // required int64 businessAmount = 8;
    if (has_businessamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->businessamount());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 businessPrice = 9;
    if (has_businessprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->businessprice());
    }
    
    // required int64 businessBalance = 10;
    if (has_businessbalance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->businessbalance());
    }
    
    // required int32 businessTimes = 11;
    if (has_businesstimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->businesstimes());
    }
    
    // required .HSCommPB.enums.businessStatus businessStatus = 12;
    if (has_businessstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->businessstatus());
    }
    
    // required .HSCommPB.enums.businessType businessType = 13;
    if (has_businesstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->businesstype());
    }
    
    // required string entrustNo = 14;
    if (has_entrustno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entrustno());
    }
    
    // required string reportNo = 15;
    if (has_reportno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reportno());
    }
    
    // optional string remark = 16 [default = ""];
    if (has_remark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryBusinessResponse_result_business::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryBusinessResponse_result_business* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryBusinessResponse_result_business*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryBusinessResponse_result_business::MergeFrom(const queryBusinessResponse_result_business& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_exchangetype()) {
      set_exchangetype(from.exchangetype());
    }
    if (from.has_stockaccount()) {
      set_stockaccount(from.stockaccount());
    }
    if (from.has_stockcode()) {
      set_stockcode(from.stockcode());
    }
    if (from.has_stockname()) {
      set_stockname(from.stockname());
    }
    if (from.has_entrustbs()) {
      set_entrustbs(from.entrustbs());
    }
    if (from.has_businessamount()) {
      set_businessamount(from.businessamount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_businessprice()) {
      set_businessprice(from.businessprice());
    }
    if (from.has_businessbalance()) {
      set_businessbalance(from.businessbalance());
    }
    if (from.has_businesstimes()) {
      set_businesstimes(from.businesstimes());
    }
    if (from.has_businessstatus()) {
      set_businessstatus(from.businessstatus());
    }
    if (from.has_businesstype()) {
      set_businesstype(from.businesstype());
    }
    if (from.has_entrustno()) {
      set_entrustno(from.entrustno());
    }
    if (from.has_reportno()) {
      set_reportno(from.reportno());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryBusinessResponse_result_business::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryBusinessResponse_result_business::CopyFrom(const queryBusinessResponse_result_business& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryBusinessResponse_result_business::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;
  
  return true;
}

void queryBusinessResponse_result_business::Swap(queryBusinessResponse_result_business* other) {
  if (other != this) {
    std::swap(date_, other->date_);
    std::swap(time_, other->time_);
    std::swap(exchangetype_, other->exchangetype_);
    std::swap(stockaccount_, other->stockaccount_);
    std::swap(stockcode_, other->stockcode_);
    std::swap(stockname_, other->stockname_);
    std::swap(entrustbs_, other->entrustbs_);
    std::swap(businessamount_, other->businessamount_);
    std::swap(businessprice_, other->businessprice_);
    std::swap(businessbalance_, other->businessbalance_);
    std::swap(businesstimes_, other->businesstimes_);
    std::swap(businessstatus_, other->businessstatus_);
    std::swap(businesstype_, other->businesstype_);
    std::swap(entrustno_, other->entrustno_);
    std::swap(reportno_, other->reportno_);
    std::swap(remark_, other->remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryBusinessResponse_result_business::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryBusinessResponse_result_business_descriptor_;
  metadata.reflection = queryBusinessResponse_result_business_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int queryBusinessResponse_result::kBusinessesFieldNumber;
const int queryBusinessResponse_result::kLastPositionStringFieldNumber;
const int queryBusinessResponse_result::kErrorNoFieldNumber;
const int queryBusinessResponse_result::kErrorMsgFieldNumber;
#endif  // !_MSC_VER

queryBusinessResponse_result::queryBusinessResponse_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryBusinessResponse_result::InitAsDefaultInstance() {
}

queryBusinessResponse_result::queryBusinessResponse_result(const queryBusinessResponse_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryBusinessResponse_result::SharedCtor() {
  _cached_size_ = 0;
  lastpositionstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  errorno_ = 0;
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryBusinessResponse_result::~queryBusinessResponse_result() {
  SharedDtor();
}

void queryBusinessResponse_result::SharedDtor() {
  if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
    delete lastpositionstring_;
  }
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (this != default_instance_) {
  }
}

void queryBusinessResponse_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryBusinessResponse_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryBusinessResponse_result_descriptor_;
}

const queryBusinessResponse_result& queryBusinessResponse_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryBusinessResponse_result* queryBusinessResponse_result::default_instance_ = NULL;

queryBusinessResponse_result* queryBusinessResponse_result::New() const {
  return new queryBusinessResponse_result;
}

void queryBusinessResponse_result::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_lastpositionstring()) {
      if (lastpositionstring_ != &::google::protobuf::internal::kEmptyString) {
        lastpositionstring_->clear();
      }
    }
    errorno_ = 0;
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
  }
  businesses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryBusinessResponse_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.queryBusinessResponse.result.business businesses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_businesses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_businesses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_businesses;
        if (input->ExpectTag(18)) goto parse_lastPositionString;
        break;
      }
      
      // required string lastPositionString = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastPositionString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastpositionstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastpositionstring().data(), this->lastpositionstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_errorNo;
        break;
      }
      
      // optional int32 errorNo = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorno_)));
          set_has_errorno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_errorMsg;
        break;
      }
      
      // optional string errorMsg = 15 [default = ""];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryBusinessResponse_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.queryBusinessResponse.result.business businesses = 1;
  for (int i = 0; i < this->businesses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->businesses(i), output);
  }
  
  // required string lastPositionString = 2;
  if (has_lastpositionstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastpositionstring().data(), this->lastpositionstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lastpositionstring(), output);
  }
  
  // optional int32 errorNo = 14 [default = 0];
  if (has_errorno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->errorno(), output);
  }
  
  // optional string errorMsg = 15 [default = ""];
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->errormsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryBusinessResponse_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.queryBusinessResponse.result.business businesses = 1;
  for (int i = 0; i < this->businesses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->businesses(i), target);
  }
  
  // required string lastPositionString = 2;
  if (has_lastpositionstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastpositionstring().data(), this->lastpositionstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lastpositionstring(), target);
  }
  
  // optional int32 errorNo = 14 [default = 0];
  if (has_errorno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->errorno(), target);
  }
  
  // optional string errorMsg = 15 [default = ""];
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->errormsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryBusinessResponse_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required string lastPositionString = 2;
    if (has_lastpositionstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastpositionstring());
    }
    
    // optional int32 errorNo = 14 [default = 0];
    if (has_errorno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorno());
    }
    
    // optional string errorMsg = 15 [default = ""];
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }
    
  }
  // repeated .HSCommPB.queryBusinessResponse.result.business businesses = 1;
  total_size += 1 * this->businesses_size();
  for (int i = 0; i < this->businesses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->businesses(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryBusinessResponse_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryBusinessResponse_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryBusinessResponse_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryBusinessResponse_result::MergeFrom(const queryBusinessResponse_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  businesses_.MergeFrom(from.businesses_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_lastpositionstring()) {
      set_lastpositionstring(from.lastpositionstring());
    }
    if (from.has_errorno()) {
      set_errorno(from.errorno());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryBusinessResponse_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryBusinessResponse_result::CopyFrom(const queryBusinessResponse_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryBusinessResponse_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < businesses_size(); i++) {
    if (!this->businesses(i).IsInitialized()) return false;
  }
  return true;
}

void queryBusinessResponse_result::Swap(queryBusinessResponse_result* other) {
  if (other != this) {
    businesses_.Swap(&other->businesses_);
    std::swap(lastpositionstring_, other->lastpositionstring_);
    std::swap(errorno_, other->errorno_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryBusinessResponse_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryBusinessResponse_result_descriptor_;
  metadata.reflection = queryBusinessResponse_result_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int queryBusinessResponse::kResponsesFieldNumber;
#endif  // !_MSC_VER

queryBusinessResponse::queryBusinessResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryBusinessResponse::InitAsDefaultInstance() {
}

queryBusinessResponse::queryBusinessResponse(const queryBusinessResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryBusinessResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryBusinessResponse::~queryBusinessResponse() {
  SharedDtor();
}

void queryBusinessResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void queryBusinessResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryBusinessResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryBusinessResponse_descriptor_;
}

const queryBusinessResponse& queryBusinessResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryBusinessResponse* queryBusinessResponse::default_instance_ = NULL;

queryBusinessResponse* queryBusinessResponse::New() const {
  return new queryBusinessResponse;
}

void queryBusinessResponse::Clear() {
  responses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryBusinessResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.queryBusinessResponse.result responses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_responses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_responses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_responses;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryBusinessResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.queryBusinessResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->responses(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryBusinessResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.queryBusinessResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->responses(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryBusinessResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.queryBusinessResponse.result responses = 1;
  total_size += 1 * this->responses_size();
  for (int i = 0; i < this->responses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->responses(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryBusinessResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryBusinessResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryBusinessResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryBusinessResponse::MergeFrom(const queryBusinessResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  responses_.MergeFrom(from.responses_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryBusinessResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryBusinessResponse::CopyFrom(const queryBusinessResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryBusinessResponse::IsInitialized() const {
  
  for (int i = 0; i < responses_size(); i++) {
    if (!this->responses(i).IsInitialized()) return false;
  }
  return true;
}

void queryBusinessResponse::Swap(queryBusinessResponse* other) {
  if (other != this) {
    responses_.Swap(&other->responses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryBusinessResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryBusinessResponse_descriptor_;
  metadata.reflection = queryBusinessResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int getEntrustByLocalIDRequest_call::kLocalIDFieldNumber;
const int getEntrustByLocalIDRequest_call::kFundAccountFieldNumber;
#endif  // !_MSC_VER

getEntrustByLocalIDRequest_call::getEntrustByLocalIDRequest_call()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void getEntrustByLocalIDRequest_call::InitAsDefaultInstance() {
}

getEntrustByLocalIDRequest_call::getEntrustByLocalIDRequest_call(const getEntrustByLocalIDRequest_call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void getEntrustByLocalIDRequest_call::SharedCtor() {
  _cached_size_ = 0;
  localid_ = GOOGLE_LONGLONG(0);
  fundaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

getEntrustByLocalIDRequest_call::~getEntrustByLocalIDRequest_call() {
  SharedDtor();
}

void getEntrustByLocalIDRequest_call::SharedDtor() {
  if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete fundaccount_;
  }
  if (this != default_instance_) {
  }
}

void getEntrustByLocalIDRequest_call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getEntrustByLocalIDRequest_call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getEntrustByLocalIDRequest_call_descriptor_;
}

const getEntrustByLocalIDRequest_call& getEntrustByLocalIDRequest_call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

getEntrustByLocalIDRequest_call* getEntrustByLocalIDRequest_call::default_instance_ = NULL;

getEntrustByLocalIDRequest_call* getEntrustByLocalIDRequest_call::New() const {
  return new getEntrustByLocalIDRequest_call;
}

void getEntrustByLocalIDRequest_call::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    localid_ = GOOGLE_LONGLONG(0);
    if (has_fundaccount()) {
      if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
        fundaccount_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool getEntrustByLocalIDRequest_call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 localID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &localid_)));
          set_has_localid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fundAccount;
        break;
      }
      
      // required string fundAccount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fundAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fundaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fundaccount().data(), this->fundaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void getEntrustByLocalIDRequest_call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 localID = 1;
  if (has_localid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->localid(), output);
  }
  
  // required string fundAccount = 2;
  if (has_fundaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fundaccount().data(), this->fundaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fundaccount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* getEntrustByLocalIDRequest_call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 localID = 1;
  if (has_localid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->localid(), target);
  }
  
  // required string fundAccount = 2;
  if (has_fundaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fundaccount().data(), this->fundaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fundaccount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int getEntrustByLocalIDRequest_call::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 localID = 1;
    if (has_localid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->localid());
    }
    
    // required string fundAccount = 2;
    if (has_fundaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fundaccount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getEntrustByLocalIDRequest_call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const getEntrustByLocalIDRequest_call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const getEntrustByLocalIDRequest_call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void getEntrustByLocalIDRequest_call::MergeFrom(const getEntrustByLocalIDRequest_call& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_localid()) {
      set_localid(from.localid());
    }
    if (from.has_fundaccount()) {
      set_fundaccount(from.fundaccount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void getEntrustByLocalIDRequest_call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getEntrustByLocalIDRequest_call::CopyFrom(const getEntrustByLocalIDRequest_call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getEntrustByLocalIDRequest_call::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void getEntrustByLocalIDRequest_call::Swap(getEntrustByLocalIDRequest_call* other) {
  if (other != this) {
    std::swap(localid_, other->localid_);
    std::swap(fundaccount_, other->fundaccount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata getEntrustByLocalIDRequest_call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getEntrustByLocalIDRequest_call_descriptor_;
  metadata.reflection = getEntrustByLocalIDRequest_call_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int getEntrustByLocalIDRequest::kRequestsFieldNumber;
#endif  // !_MSC_VER

getEntrustByLocalIDRequest::getEntrustByLocalIDRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void getEntrustByLocalIDRequest::InitAsDefaultInstance() {
}

getEntrustByLocalIDRequest::getEntrustByLocalIDRequest(const getEntrustByLocalIDRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void getEntrustByLocalIDRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

getEntrustByLocalIDRequest::~getEntrustByLocalIDRequest() {
  SharedDtor();
}

void getEntrustByLocalIDRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void getEntrustByLocalIDRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getEntrustByLocalIDRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getEntrustByLocalIDRequest_descriptor_;
}

const getEntrustByLocalIDRequest& getEntrustByLocalIDRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

getEntrustByLocalIDRequest* getEntrustByLocalIDRequest::default_instance_ = NULL;

getEntrustByLocalIDRequest* getEntrustByLocalIDRequest::New() const {
  return new getEntrustByLocalIDRequest;
}

void getEntrustByLocalIDRequest::Clear() {
  requests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool getEntrustByLocalIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.getEntrustByLocalIDRequest.call requests = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_requests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_requests;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void getEntrustByLocalIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.getEntrustByLocalIDRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requests(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* getEntrustByLocalIDRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.getEntrustByLocalIDRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->requests(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int getEntrustByLocalIDRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.getEntrustByLocalIDRequest.call requests = 1;
  total_size += 1 * this->requests_size();
  for (int i = 0; i < this->requests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requests(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getEntrustByLocalIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const getEntrustByLocalIDRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const getEntrustByLocalIDRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void getEntrustByLocalIDRequest::MergeFrom(const getEntrustByLocalIDRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  requests_.MergeFrom(from.requests_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void getEntrustByLocalIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getEntrustByLocalIDRequest::CopyFrom(const getEntrustByLocalIDRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getEntrustByLocalIDRequest::IsInitialized() const {
  
  for (int i = 0; i < requests_size(); i++) {
    if (!this->requests(i).IsInitialized()) return false;
  }
  return true;
}

void getEntrustByLocalIDRequest::Swap(getEntrustByLocalIDRequest* other) {
  if (other != this) {
    requests_.Swap(&other->requests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata getEntrustByLocalIDRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getEntrustByLocalIDRequest_descriptor_;
  metadata.reflection = getEntrustByLocalIDRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int getEntrustByLocalIDResponse_result::kLocalIDFieldNumber;
const int getEntrustByLocalIDResponse_result::kFundAccountFieldNumber;
const int getEntrustByLocalIDResponse_result::kEntrustNoFieldNumber;
#endif  // !_MSC_VER

getEntrustByLocalIDResponse_result::getEntrustByLocalIDResponse_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void getEntrustByLocalIDResponse_result::InitAsDefaultInstance() {
}

getEntrustByLocalIDResponse_result::getEntrustByLocalIDResponse_result(const getEntrustByLocalIDResponse_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void getEntrustByLocalIDResponse_result::SharedCtor() {
  _cached_size_ = 0;
  localid_ = GOOGLE_LONGLONG(0);
  fundaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entrustno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

getEntrustByLocalIDResponse_result::~getEntrustByLocalIDResponse_result() {
  SharedDtor();
}

void getEntrustByLocalIDResponse_result::SharedDtor() {
  if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete fundaccount_;
  }
  if (entrustno_ != &::google::protobuf::internal::kEmptyString) {
    delete entrustno_;
  }
  if (this != default_instance_) {
  }
}

void getEntrustByLocalIDResponse_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getEntrustByLocalIDResponse_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getEntrustByLocalIDResponse_result_descriptor_;
}

const getEntrustByLocalIDResponse_result& getEntrustByLocalIDResponse_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

getEntrustByLocalIDResponse_result* getEntrustByLocalIDResponse_result::default_instance_ = NULL;

getEntrustByLocalIDResponse_result* getEntrustByLocalIDResponse_result::New() const {
  return new getEntrustByLocalIDResponse_result;
}

void getEntrustByLocalIDResponse_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    localid_ = GOOGLE_LONGLONG(0);
    if (has_fundaccount()) {
      if (fundaccount_ != &::google::protobuf::internal::kEmptyString) {
        fundaccount_->clear();
      }
    }
    if (has_entrustno()) {
      if (entrustno_ != &::google::protobuf::internal::kEmptyString) {
        entrustno_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool getEntrustByLocalIDResponse_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 localID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &localid_)));
          set_has_localid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fundAccount;
        break;
      }
      
      // required string fundAccount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fundAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fundaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fundaccount().data(), this->fundaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entrustNo;
        break;
      }
      
      // required string entrustNo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrustNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entrustno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entrustno().data(), this->entrustno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void getEntrustByLocalIDResponse_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 localID = 1;
  if (has_localid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->localid(), output);
  }
  
  // required string fundAccount = 2;
  if (has_fundaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fundaccount().data(), this->fundaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fundaccount(), output);
  }
  
  // required string entrustNo = 3;
  if (has_entrustno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entrustno().data(), this->entrustno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->entrustno(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* getEntrustByLocalIDResponse_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 localID = 1;
  if (has_localid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->localid(), target);
  }
  
  // required string fundAccount = 2;
  if (has_fundaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fundaccount().data(), this->fundaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fundaccount(), target);
  }
  
  // required string entrustNo = 3;
  if (has_entrustno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entrustno().data(), this->entrustno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->entrustno(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int getEntrustByLocalIDResponse_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 localID = 1;
    if (has_localid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->localid());
    }
    
    // required string fundAccount = 2;
    if (has_fundaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fundaccount());
    }
    
    // required string entrustNo = 3;
    if (has_entrustno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entrustno());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getEntrustByLocalIDResponse_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const getEntrustByLocalIDResponse_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const getEntrustByLocalIDResponse_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void getEntrustByLocalIDResponse_result::MergeFrom(const getEntrustByLocalIDResponse_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_localid()) {
      set_localid(from.localid());
    }
    if (from.has_fundaccount()) {
      set_fundaccount(from.fundaccount());
    }
    if (from.has_entrustno()) {
      set_entrustno(from.entrustno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void getEntrustByLocalIDResponse_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getEntrustByLocalIDResponse_result::CopyFrom(const getEntrustByLocalIDResponse_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getEntrustByLocalIDResponse_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void getEntrustByLocalIDResponse_result::Swap(getEntrustByLocalIDResponse_result* other) {
  if (other != this) {
    std::swap(localid_, other->localid_);
    std::swap(fundaccount_, other->fundaccount_);
    std::swap(entrustno_, other->entrustno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata getEntrustByLocalIDResponse_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getEntrustByLocalIDResponse_result_descriptor_;
  metadata.reflection = getEntrustByLocalIDResponse_result_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int getEntrustByLocalIDResponse::kResponsesFieldNumber;
#endif  // !_MSC_VER

getEntrustByLocalIDResponse::getEntrustByLocalIDResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void getEntrustByLocalIDResponse::InitAsDefaultInstance() {
}

getEntrustByLocalIDResponse::getEntrustByLocalIDResponse(const getEntrustByLocalIDResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void getEntrustByLocalIDResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

getEntrustByLocalIDResponse::~getEntrustByLocalIDResponse() {
  SharedDtor();
}

void getEntrustByLocalIDResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void getEntrustByLocalIDResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* getEntrustByLocalIDResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return getEntrustByLocalIDResponse_descriptor_;
}

const getEntrustByLocalIDResponse& getEntrustByLocalIDResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

getEntrustByLocalIDResponse* getEntrustByLocalIDResponse::default_instance_ = NULL;

getEntrustByLocalIDResponse* getEntrustByLocalIDResponse::New() const {
  return new getEntrustByLocalIDResponse;
}

void getEntrustByLocalIDResponse::Clear() {
  responses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool getEntrustByLocalIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.getEntrustByLocalIDResponse.result responses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_responses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_responses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_responses;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void getEntrustByLocalIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.getEntrustByLocalIDResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->responses(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* getEntrustByLocalIDResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.getEntrustByLocalIDResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->responses(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int getEntrustByLocalIDResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.getEntrustByLocalIDResponse.result responses = 1;
  total_size += 1 * this->responses_size();
  for (int i = 0; i < this->responses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->responses(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void getEntrustByLocalIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const getEntrustByLocalIDResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const getEntrustByLocalIDResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void getEntrustByLocalIDResponse::MergeFrom(const getEntrustByLocalIDResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  responses_.MergeFrom(from.responses_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void getEntrustByLocalIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getEntrustByLocalIDResponse::CopyFrom(const getEntrustByLocalIDResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getEntrustByLocalIDResponse::IsInitialized() const {
  
  for (int i = 0; i < responses_size(); i++) {
    if (!this->responses(i).IsInitialized()) return false;
  }
  return true;
}

void getEntrustByLocalIDResponse::Swap(getEntrustByLocalIDResponse* other) {
  if (other != this) {
    responses_.Swap(&other->responses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata getEntrustByLocalIDResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = getEntrustByLocalIDResponse_descriptor_;
  metadata.reflection = getEntrustByLocalIDResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int queryOrdersRequest_call::kUsernameFieldNumber;
const int queryOrdersRequest_call::kPasswordFieldNumber;
const int queryOrdersRequest_call::kDateFieldNumber;
#endif  // !_MSC_VER

queryOrdersRequest_call::queryOrdersRequest_call()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryOrdersRequest_call::InitAsDefaultInstance() {
}

queryOrdersRequest_call::queryOrdersRequest_call(const queryOrdersRequest_call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryOrdersRequest_call::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryOrdersRequest_call::~queryOrdersRequest_call() {
  SharedDtor();
}

void queryOrdersRequest_call::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void queryOrdersRequest_call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryOrdersRequest_call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryOrdersRequest_call_descriptor_;
}

const queryOrdersRequest_call& queryOrdersRequest_call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryOrdersRequest_call* queryOrdersRequest_call::default_instance_ = NULL;

queryOrdersRequest_call* queryOrdersRequest_call::New() const {
  return new queryOrdersRequest_call;
}

void queryOrdersRequest_call::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    date_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryOrdersRequest_call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_date;
        break;
      }
      
      // required int64 date = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryOrdersRequest_call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  // required int64 date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->date(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryOrdersRequest_call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }
  
  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  // required int64 date = 3;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->date(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryOrdersRequest_call::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // required int64 date = 3;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->date());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryOrdersRequest_call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryOrdersRequest_call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryOrdersRequest_call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryOrdersRequest_call::MergeFrom(const queryOrdersRequest_call& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryOrdersRequest_call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryOrdersRequest_call::CopyFrom(const queryOrdersRequest_call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryOrdersRequest_call::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void queryOrdersRequest_call::Swap(queryOrdersRequest_call* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(date_, other->date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryOrdersRequest_call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryOrdersRequest_call_descriptor_;
  metadata.reflection = queryOrdersRequest_call_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int queryOrdersRequest::kRequestsFieldNumber;
#endif  // !_MSC_VER

queryOrdersRequest::queryOrdersRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryOrdersRequest::InitAsDefaultInstance() {
}

queryOrdersRequest::queryOrdersRequest(const queryOrdersRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryOrdersRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryOrdersRequest::~queryOrdersRequest() {
  SharedDtor();
}

void queryOrdersRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void queryOrdersRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryOrdersRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryOrdersRequest_descriptor_;
}

const queryOrdersRequest& queryOrdersRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryOrdersRequest* queryOrdersRequest::default_instance_ = NULL;

queryOrdersRequest* queryOrdersRequest::New() const {
  return new queryOrdersRequest;
}

void queryOrdersRequest::Clear() {
  requests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryOrdersRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.queryOrdersRequest.call requests = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_requests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_requests;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryOrdersRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.queryOrdersRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requests(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryOrdersRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.queryOrdersRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->requests(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryOrdersRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.queryOrdersRequest.call requests = 1;
  total_size += 1 * this->requests_size();
  for (int i = 0; i < this->requests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requests(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryOrdersRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryOrdersRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryOrdersRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryOrdersRequest::MergeFrom(const queryOrdersRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  requests_.MergeFrom(from.requests_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryOrdersRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryOrdersRequest::CopyFrom(const queryOrdersRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryOrdersRequest::IsInitialized() const {
  
  for (int i = 0; i < requests_size(); i++) {
    if (!this->requests(i).IsInitialized()) return false;
  }
  return true;
}

void queryOrdersRequest::Swap(queryOrdersRequest* other) {
  if (other != this) {
    requests_.Swap(&other->requests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryOrdersRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryOrdersRequest_descriptor_;
  metadata.reflection = queryOrdersRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int queryOrdersResponse_result_query::kReturndateFieldNumber;
const int queryOrdersResponse_result_query::kSecunameFieldNumber;
const int queryOrdersResponse_result_query::kCodeFieldNumber;
const int queryOrdersResponse_result_query::kDirectionFieldNumber;
const int queryOrdersResponse_result_query::kOrdervolFieldNumber;
const int queryOrdersResponse_result_query::kOrderpriceFieldNumber;
const int queryOrdersResponse_result_query::kAveragepriceFieldNumber;
const int queryOrdersResponse_result_query::kTradevolFieldNumber;
const int queryOrdersResponse_result_query::kCancelvolFieldNumber;
const int queryOrdersResponse_result_query::kFlagFieldNumber;
const int queryOrdersResponse_result_query::kAdddatetimeFieldNumber;
const int queryOrdersResponse_result_query::kAcidFieldNumber;
const int queryOrdersResponse_result_query::kOidFieldNumber;
#endif  // !_MSC_VER

queryOrdersResponse_result_query::queryOrdersResponse_result_query()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryOrdersResponse_result_query::InitAsDefaultInstance() {
}

queryOrdersResponse_result_query::queryOrdersResponse_result_query(const queryOrdersResponse_result_query& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryOrdersResponse_result_query::SharedCtor() {
  _cached_size_ = 0;
  returndate_ = GOOGLE_LONGLONG(0);
  secuname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  direction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ordervol_ = GOOGLE_LONGLONG(0);
  orderprice_ = GOOGLE_LONGLONG(0);
  averageprice_ = GOOGLE_LONGLONG(0);
  tradevol_ = GOOGLE_LONGLONG(0);
  cancelvol_ = GOOGLE_LONGLONG(0);
  flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  adddatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  acid_ = GOOGLE_LONGLONG(0);
  oid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryOrdersResponse_result_query::~queryOrdersResponse_result_query() {
  SharedDtor();
}

void queryOrdersResponse_result_query::SharedDtor() {
  if (secuname_ != &::google::protobuf::internal::kEmptyString) {
    delete secuname_;
  }
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (direction_ != &::google::protobuf::internal::kEmptyString) {
    delete direction_;
  }
  if (flag_ != &::google::protobuf::internal::kEmptyString) {
    delete flag_;
  }
  if (adddatetime_ != &::google::protobuf::internal::kEmptyString) {
    delete adddatetime_;
  }
  if (this != default_instance_) {
  }
}

void queryOrdersResponse_result_query::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryOrdersResponse_result_query::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryOrdersResponse_result_query_descriptor_;
}

const queryOrdersResponse_result_query& queryOrdersResponse_result_query::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryOrdersResponse_result_query* queryOrdersResponse_result_query::default_instance_ = NULL;

queryOrdersResponse_result_query* queryOrdersResponse_result_query::New() const {
  return new queryOrdersResponse_result_query;
}

void queryOrdersResponse_result_query::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    returndate_ = GOOGLE_LONGLONG(0);
    if (has_secuname()) {
      if (secuname_ != &::google::protobuf::internal::kEmptyString) {
        secuname_->clear();
      }
    }
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    if (has_direction()) {
      if (direction_ != &::google::protobuf::internal::kEmptyString) {
        direction_->clear();
      }
    }
    ordervol_ = GOOGLE_LONGLONG(0);
    orderprice_ = GOOGLE_LONGLONG(0);
    averageprice_ = GOOGLE_LONGLONG(0);
    tradevol_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cancelvol_ = GOOGLE_LONGLONG(0);
    if (has_flag()) {
      if (flag_ != &::google::protobuf::internal::kEmptyString) {
        flag_->clear();
      }
    }
    if (has_adddatetime()) {
      if (adddatetime_ != &::google::protobuf::internal::kEmptyString) {
        adddatetime_->clear();
      }
    }
    acid_ = GOOGLE_LONGLONG(0);
    oid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryOrdersResponse_result_query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 returndate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &returndate_)));
          set_has_returndate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_secuname;
        break;
      }
      
      // required string secuname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secuname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secuname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->secuname().data(), this->secuname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_code;
        break;
      }
      
      // required string code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_direction;
        break;
      }
      
      // required string direction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_direction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->direction().data(), this->direction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ordervol;
        break;
      }
      
      // required int64 ordervol = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ordervol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ordervol_)));
          set_has_ordervol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_orderprice;
        break;
      }
      
      // required int64 orderprice = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orderprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orderprice_)));
          set_has_orderprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_averageprice;
        break;
      }
      
      // required int64 averageprice = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_averageprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &averageprice_)));
          set_has_averageprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_tradevol;
        break;
      }
      
      // required int64 tradevol = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tradevol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tradevol_)));
          set_has_tradevol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cancelvol;
        break;
      }
      
      // required int64 cancelvol = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cancelvol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cancelvol_)));
          set_has_cancelvol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_flag;
        break;
      }
      
      // required string flag = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->flag().data(), this->flag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_adddatetime;
        break;
      }
      
      // required string adddatetime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adddatetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adddatetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->adddatetime().data(), this->adddatetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_acid;
        break;
      }
      
      // required int64 acid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &acid_)));
          set_has_acid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_oid;
        break;
      }
      
      // required int64 oid = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &oid_)));
          set_has_oid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryOrdersResponse_result_query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 returndate = 1;
  if (has_returndate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->returndate(), output);
  }
  
  // required string secuname = 2;
  if (has_secuname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secuname().data(), this->secuname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->secuname(), output);
  }
  
  // required string code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->code(), output);
  }
  
  // required string direction = 4;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->direction().data(), this->direction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->direction(), output);
  }
  
  // required int64 ordervol = 5;
  if (has_ordervol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->ordervol(), output);
  }
  
  // required int64 orderprice = 6;
  if (has_orderprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->orderprice(), output);
  }
  
  // required int64 averageprice = 7;
  if (has_averageprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->averageprice(), output);
  }
  
  // required int64 tradevol = 8;
  if (has_tradevol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->tradevol(), output);
  }
  
  // required int64 cancelvol = 9;
  if (has_cancelvol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->cancelvol(), output);
  }
  
  // required string flag = 10;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flag().data(), this->flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->flag(), output);
  }
  
  // required string adddatetime = 11;
  if (has_adddatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adddatetime().data(), this->adddatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->adddatetime(), output);
  }
  
  // required int64 acid = 12;
  if (has_acid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->acid(), output);
  }
  
  // required int64 oid = 13;
  if (has_oid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->oid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryOrdersResponse_result_query::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 returndate = 1;
  if (has_returndate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->returndate(), target);
  }
  
  // required string secuname = 2;
  if (has_secuname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secuname().data(), this->secuname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->secuname(), target);
  }
  
  // required string code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->code(), target);
  }
  
  // required string direction = 4;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->direction().data(), this->direction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->direction(), target);
  }
  
  // required int64 ordervol = 5;
  if (has_ordervol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->ordervol(), target);
  }
  
  // required int64 orderprice = 6;
  if (has_orderprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->orderprice(), target);
  }
  
  // required int64 averageprice = 7;
  if (has_averageprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->averageprice(), target);
  }
  
  // required int64 tradevol = 8;
  if (has_tradevol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->tradevol(), target);
  }
  
  // required int64 cancelvol = 9;
  if (has_cancelvol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->cancelvol(), target);
  }
  
  // required string flag = 10;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flag().data(), this->flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->flag(), target);
  }
  
  // required string adddatetime = 11;
  if (has_adddatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adddatetime().data(), this->adddatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->adddatetime(), target);
  }
  
  // required int64 acid = 12;
  if (has_acid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->acid(), target);
  }
  
  // required int64 oid = 13;
  if (has_oid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->oid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryOrdersResponse_result_query::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 returndate = 1;
    if (has_returndate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->returndate());
    }
    
    // required string secuname = 2;
    if (has_secuname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secuname());
    }
    
    // required string code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }
    
    // required string direction = 4;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->direction());
    }
    
    // required int64 ordervol = 5;
    if (has_ordervol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ordervol());
    }
    
    // required int64 orderprice = 6;
    if (has_orderprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->orderprice());
    }
    
    // required int64 averageprice = 7;
    if (has_averageprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->averageprice());
    }
    
    // required int64 tradevol = 8;
    if (has_tradevol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tradevol());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 cancelvol = 9;
    if (has_cancelvol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cancelvol());
    }
    
    // required string flag = 10;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flag());
    }
    
    // required string adddatetime = 11;
    if (has_adddatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adddatetime());
    }
    
    // required int64 acid = 12;
    if (has_acid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->acid());
    }
    
    // required int64 oid = 13;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->oid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryOrdersResponse_result_query::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryOrdersResponse_result_query* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryOrdersResponse_result_query*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryOrdersResponse_result_query::MergeFrom(const queryOrdersResponse_result_query& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_returndate()) {
      set_returndate(from.returndate());
    }
    if (from.has_secuname()) {
      set_secuname(from.secuname());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_ordervol()) {
      set_ordervol(from.ordervol());
    }
    if (from.has_orderprice()) {
      set_orderprice(from.orderprice());
    }
    if (from.has_averageprice()) {
      set_averageprice(from.averageprice());
    }
    if (from.has_tradevol()) {
      set_tradevol(from.tradevol());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cancelvol()) {
      set_cancelvol(from.cancelvol());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_adddatetime()) {
      set_adddatetime(from.adddatetime());
    }
    if (from.has_acid()) {
      set_acid(from.acid());
    }
    if (from.has_oid()) {
      set_oid(from.oid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryOrdersResponse_result_query::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryOrdersResponse_result_query::CopyFrom(const queryOrdersResponse_result_query& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryOrdersResponse_result_query::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;
  
  return true;
}

void queryOrdersResponse_result_query::Swap(queryOrdersResponse_result_query* other) {
  if (other != this) {
    std::swap(returndate_, other->returndate_);
    std::swap(secuname_, other->secuname_);
    std::swap(code_, other->code_);
    std::swap(direction_, other->direction_);
    std::swap(ordervol_, other->ordervol_);
    std::swap(orderprice_, other->orderprice_);
    std::swap(averageprice_, other->averageprice_);
    std::swap(tradevol_, other->tradevol_);
    std::swap(cancelvol_, other->cancelvol_);
    std::swap(flag_, other->flag_);
    std::swap(adddatetime_, other->adddatetime_);
    std::swap(acid_, other->acid_);
    std::swap(oid_, other->oid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryOrdersResponse_result_query::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryOrdersResponse_result_query_descriptor_;
  metadata.reflection = queryOrdersResponse_result_query_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int queryOrdersResponse_result::kQueriesFieldNumber;
const int queryOrdersResponse_result::kErrorNoFieldNumber;
const int queryOrdersResponse_result::kErrorMsgFieldNumber;
#endif  // !_MSC_VER

queryOrdersResponse_result::queryOrdersResponse_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryOrdersResponse_result::InitAsDefaultInstance() {
}

queryOrdersResponse_result::queryOrdersResponse_result(const queryOrdersResponse_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryOrdersResponse_result::SharedCtor() {
  _cached_size_ = 0;
  errorno_ = 0;
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryOrdersResponse_result::~queryOrdersResponse_result() {
  SharedDtor();
}

void queryOrdersResponse_result::SharedDtor() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (this != default_instance_) {
  }
}

void queryOrdersResponse_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryOrdersResponse_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryOrdersResponse_result_descriptor_;
}

const queryOrdersResponse_result& queryOrdersResponse_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryOrdersResponse_result* queryOrdersResponse_result::default_instance_ = NULL;

queryOrdersResponse_result* queryOrdersResponse_result::New() const {
  return new queryOrdersResponse_result;
}

void queryOrdersResponse_result::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    errorno_ = 0;
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
  }
  queries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryOrdersResponse_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.queryOrdersResponse.result.query queries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_queries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_queries;
        if (input->ExpectTag(16)) goto parse_errorNo;
        break;
      }
      
      // optional int32 errorNo = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorno_)));
          set_has_errorno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_errorMsg;
        break;
      }
      
      // optional string errorMsg = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryOrdersResponse_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.queryOrdersResponse.result.query queries = 1;
  for (int i = 0; i < this->queries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->queries(i), output);
  }
  
  // optional int32 errorNo = 2 [default = 0];
  if (has_errorno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errorno(), output);
  }
  
  // optional string errorMsg = 3 [default = ""];
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->errormsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryOrdersResponse_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.queryOrdersResponse.result.query queries = 1;
  for (int i = 0; i < this->queries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->queries(i), target);
  }
  
  // optional int32 errorNo = 2 [default = 0];
  if (has_errorno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->errorno(), target);
  }
  
  // optional string errorMsg = 3 [default = ""];
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errormsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryOrdersResponse_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 errorNo = 2 [default = 0];
    if (has_errorno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorno());
    }
    
    // optional string errorMsg = 3 [default = ""];
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }
    
  }
  // repeated .HSCommPB.queryOrdersResponse.result.query queries = 1;
  total_size += 1 * this->queries_size();
  for (int i = 0; i < this->queries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->queries(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryOrdersResponse_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryOrdersResponse_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryOrdersResponse_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryOrdersResponse_result::MergeFrom(const queryOrdersResponse_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  queries_.MergeFrom(from.queries_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_errorno()) {
      set_errorno(from.errorno());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryOrdersResponse_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryOrdersResponse_result::CopyFrom(const queryOrdersResponse_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryOrdersResponse_result::IsInitialized() const {
  
  for (int i = 0; i < queries_size(); i++) {
    if (!this->queries(i).IsInitialized()) return false;
  }
  return true;
}

void queryOrdersResponse_result::Swap(queryOrdersResponse_result* other) {
  if (other != this) {
    queries_.Swap(&other->queries_);
    std::swap(errorno_, other->errorno_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryOrdersResponse_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryOrdersResponse_result_descriptor_;
  metadata.reflection = queryOrdersResponse_result_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int queryOrdersResponse::kResponsesFieldNumber;
#endif  // !_MSC_VER

queryOrdersResponse::queryOrdersResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryOrdersResponse::InitAsDefaultInstance() {
}

queryOrdersResponse::queryOrdersResponse(const queryOrdersResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryOrdersResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryOrdersResponse::~queryOrdersResponse() {
  SharedDtor();
}

void queryOrdersResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void queryOrdersResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryOrdersResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryOrdersResponse_descriptor_;
}

const queryOrdersResponse& queryOrdersResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryOrdersResponse* queryOrdersResponse::default_instance_ = NULL;

queryOrdersResponse* queryOrdersResponse::New() const {
  return new queryOrdersResponse;
}

void queryOrdersResponse::Clear() {
  responses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryOrdersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.queryOrdersResponse.result responses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_responses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_responses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_responses;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryOrdersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.queryOrdersResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->responses(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryOrdersResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.queryOrdersResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->responses(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryOrdersResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.queryOrdersResponse.result responses = 1;
  total_size += 1 * this->responses_size();
  for (int i = 0; i < this->responses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->responses(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryOrdersResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryOrdersResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryOrdersResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryOrdersResponse::MergeFrom(const queryOrdersResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  responses_.MergeFrom(from.responses_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryOrdersResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryOrdersResponse::CopyFrom(const queryOrdersResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryOrdersResponse::IsInitialized() const {
  
  for (int i = 0; i < responses_size(); i++) {
    if (!this->responses(i).IsInitialized()) return false;
  }
  return true;
}

void queryOrdersResponse::Swap(queryOrdersResponse* other) {
  if (other != this) {
    responses_.Swap(&other->responses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryOrdersResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryOrdersResponse_descriptor_;
  metadata.reflection = queryOrdersResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int queryCapitalRequest_call::kAccountidFieldNumber;
#endif  // !_MSC_VER

queryCapitalRequest_call::queryCapitalRequest_call()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryCapitalRequest_call::InitAsDefaultInstance() {
}

queryCapitalRequest_call::queryCapitalRequest_call(const queryCapitalRequest_call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryCapitalRequest_call::SharedCtor() {
  _cached_size_ = 0;
  accountid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryCapitalRequest_call::~queryCapitalRequest_call() {
  SharedDtor();
}

void queryCapitalRequest_call::SharedDtor() {
  if (this != default_instance_) {
  }
}

void queryCapitalRequest_call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryCapitalRequest_call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryCapitalRequest_call_descriptor_;
}

const queryCapitalRequest_call& queryCapitalRequest_call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryCapitalRequest_call* queryCapitalRequest_call::default_instance_ = NULL;

queryCapitalRequest_call* queryCapitalRequest_call::New() const {
  return new queryCapitalRequest_call;
}

void queryCapitalRequest_call::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accountid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryCapitalRequest_call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 accountid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryCapitalRequest_call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 accountid = 1;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->accountid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryCapitalRequest_call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 accountid = 1;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->accountid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryCapitalRequest_call::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accountid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryCapitalRequest_call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryCapitalRequest_call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryCapitalRequest_call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryCapitalRequest_call::MergeFrom(const queryCapitalRequest_call& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryCapitalRequest_call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryCapitalRequest_call::CopyFrom(const queryCapitalRequest_call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryCapitalRequest_call::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void queryCapitalRequest_call::Swap(queryCapitalRequest_call* other) {
  if (other != this) {
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryCapitalRequest_call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryCapitalRequest_call_descriptor_;
  metadata.reflection = queryCapitalRequest_call_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int queryCapitalRequest::kRequestsFieldNumber;
#endif  // !_MSC_VER

queryCapitalRequest::queryCapitalRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryCapitalRequest::InitAsDefaultInstance() {
}

queryCapitalRequest::queryCapitalRequest(const queryCapitalRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryCapitalRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryCapitalRequest::~queryCapitalRequest() {
  SharedDtor();
}

void queryCapitalRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void queryCapitalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryCapitalRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryCapitalRequest_descriptor_;
}

const queryCapitalRequest& queryCapitalRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryCapitalRequest* queryCapitalRequest::default_instance_ = NULL;

queryCapitalRequest* queryCapitalRequest::New() const {
  return new queryCapitalRequest;
}

void queryCapitalRequest::Clear() {
  requests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryCapitalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.queryCapitalRequest.call requests = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_requests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_requests;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryCapitalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.queryCapitalRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requests(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryCapitalRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.queryCapitalRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->requests(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryCapitalRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.queryCapitalRequest.call requests = 1;
  total_size += 1 * this->requests_size();
  for (int i = 0; i < this->requests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requests(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryCapitalRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryCapitalRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryCapitalRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryCapitalRequest::MergeFrom(const queryCapitalRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  requests_.MergeFrom(from.requests_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryCapitalRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryCapitalRequest::CopyFrom(const queryCapitalRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryCapitalRequest::IsInitialized() const {
  
  for (int i = 0; i < requests_size(); i++) {
    if (!this->requests(i).IsInitialized()) return false;
  }
  return true;
}

void queryCapitalRequest::Swap(queryCapitalRequest* other) {
  if (other != this) {
    requests_.Swap(&other->requests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryCapitalRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryCapitalRequest_descriptor_;
  metadata.reflection = queryCapitalRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int queryCapitalResponse_result_capital::kIdFieldNumber;
const int queryCapitalResponse_result_capital::kExchangeidFieldNumber;
const int queryCapitalResponse_result_capital::kCurrencytypeFieldNumber;
const int queryCapitalResponse_result_capital::kAmountsFieldNumber;
const int queryCapitalResponse_result_capital::kFreeamountsFieldNumber;
const int queryCapitalResponse_result_capital::kFrozenamountFieldNumber;
const int queryCapitalResponse_result_capital::kMarginFieldNumber;
const int queryCapitalResponse_result_capital::kFloatingPLFieldNumber;
const int queryCapitalResponse_result_capital::kEquityFieldNumber;
const int queryCapitalResponse_result_capital::kAccountidFieldNumber;
#endif  // !_MSC_VER

queryCapitalResponse_result_capital::queryCapitalResponse_result_capital()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryCapitalResponse_result_capital::InitAsDefaultInstance() {
}

queryCapitalResponse_result_capital::queryCapitalResponse_result_capital(const queryCapitalResponse_result_capital& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryCapitalResponse_result_capital::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  exchangeid_ = GOOGLE_LONGLONG(0);
  currencytype_ = GOOGLE_LONGLONG(0);
  amounts_ = GOOGLE_LONGLONG(0);
  freeamounts_ = GOOGLE_LONGLONG(0);
  frozenamount_ = GOOGLE_LONGLONG(0);
  margin_ = GOOGLE_LONGLONG(0);
  floatingpl_ = GOOGLE_LONGLONG(0);
  equity_ = GOOGLE_LONGLONG(0);
  accountid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryCapitalResponse_result_capital::~queryCapitalResponse_result_capital() {
  SharedDtor();
}

void queryCapitalResponse_result_capital::SharedDtor() {
  if (this != default_instance_) {
  }
}

void queryCapitalResponse_result_capital::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryCapitalResponse_result_capital::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryCapitalResponse_result_capital_descriptor_;
}

const queryCapitalResponse_result_capital& queryCapitalResponse_result_capital::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryCapitalResponse_result_capital* queryCapitalResponse_result_capital::default_instance_ = NULL;

queryCapitalResponse_result_capital* queryCapitalResponse_result_capital::New() const {
  return new queryCapitalResponse_result_capital;
}

void queryCapitalResponse_result_capital::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    exchangeid_ = GOOGLE_LONGLONG(0);
    currencytype_ = GOOGLE_LONGLONG(0);
    amounts_ = GOOGLE_LONGLONG(0);
    freeamounts_ = GOOGLE_LONGLONG(0);
    frozenamount_ = GOOGLE_LONGLONG(0);
    margin_ = GOOGLE_LONGLONG(0);
    floatingpl_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    equity_ = GOOGLE_LONGLONG(0);
    accountid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryCapitalResponse_result_capital::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exchangeid;
        break;
      }
      
      // required int64 exchangeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchangeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exchangeid_)));
          set_has_exchangeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_currencytype;
        break;
      }
      
      // required int64 currencytype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currencytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currencytype_)));
          set_has_currencytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_amounts;
        break;
      }
      
      // required int64 amounts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_amounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amounts_)));
          set_has_amounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_freeamounts;
        break;
      }
      
      // required int64 freeamounts = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeamounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &freeamounts_)));
          set_has_freeamounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_frozenamount;
        break;
      }
      
      // required int64 frozenamount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frozenamount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &frozenamount_)));
          set_has_frozenamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_margin;
        break;
      }
      
      // required int64 margin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &margin_)));
          set_has_margin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_floatingPL;
        break;
      }
      
      // required int64 floatingPL = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_floatingPL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &floatingpl_)));
          set_has_floatingpl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_equity;
        break;
      }
      
      // required int64 equity = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &equity_)));
          set_has_equity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_accountid;
        break;
      }
      
      // required int64 accountid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryCapitalResponse_result_capital::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }
  
  // required int64 exchangeid = 2;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->exchangeid(), output);
  }
  
  // required int64 currencytype = 3;
  if (has_currencytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->currencytype(), output);
  }
  
  // required int64 amounts = 4;
  if (has_amounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->amounts(), output);
  }
  
  // required int64 freeamounts = 5;
  if (has_freeamounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->freeamounts(), output);
  }
  
  // required int64 frozenamount = 6;
  if (has_frozenamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->frozenamount(), output);
  }
  
  // required int64 margin = 7;
  if (has_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->margin(), output);
  }
  
  // required int64 floatingPL = 8;
  if (has_floatingpl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->floatingpl(), output);
  }
  
  // required int64 equity = 9;
  if (has_equity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->equity(), output);
  }
  
  // required int64 accountid = 10;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->accountid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryCapitalResponse_result_capital::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }
  
  // required int64 exchangeid = 2;
  if (has_exchangeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->exchangeid(), target);
  }
  
  // required int64 currencytype = 3;
  if (has_currencytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->currencytype(), target);
  }
  
  // required int64 amounts = 4;
  if (has_amounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->amounts(), target);
  }
  
  // required int64 freeamounts = 5;
  if (has_freeamounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->freeamounts(), target);
  }
  
  // required int64 frozenamount = 6;
  if (has_frozenamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->frozenamount(), target);
  }
  
  // required int64 margin = 7;
  if (has_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->margin(), target);
  }
  
  // required int64 floatingPL = 8;
  if (has_floatingpl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->floatingpl(), target);
  }
  
  // required int64 equity = 9;
  if (has_equity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->equity(), target);
  }
  
  // required int64 accountid = 10;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->accountid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryCapitalResponse_result_capital::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }
    
    // required int64 exchangeid = 2;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exchangeid());
    }
    
    // required int64 currencytype = 3;
    if (has_currencytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currencytype());
    }
    
    // required int64 amounts = 4;
    if (has_amounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->amounts());
    }
    
    // required int64 freeamounts = 5;
    if (has_freeamounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->freeamounts());
    }
    
    // required int64 frozenamount = 6;
    if (has_frozenamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->frozenamount());
    }
    
    // required int64 margin = 7;
    if (has_margin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->margin());
    }
    
    // required int64 floatingPL = 8;
    if (has_floatingpl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->floatingpl());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 equity = 9;
    if (has_equity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->equity());
    }
    
    // required int64 accountid = 10;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accountid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryCapitalResponse_result_capital::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryCapitalResponse_result_capital* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryCapitalResponse_result_capital*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryCapitalResponse_result_capital::MergeFrom(const queryCapitalResponse_result_capital& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_currencytype()) {
      set_currencytype(from.currencytype());
    }
    if (from.has_amounts()) {
      set_amounts(from.amounts());
    }
    if (from.has_freeamounts()) {
      set_freeamounts(from.freeamounts());
    }
    if (from.has_frozenamount()) {
      set_frozenamount(from.frozenamount());
    }
    if (from.has_margin()) {
      set_margin(from.margin());
    }
    if (from.has_floatingpl()) {
      set_floatingpl(from.floatingpl());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_equity()) {
      set_equity(from.equity());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryCapitalResponse_result_capital::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryCapitalResponse_result_capital::CopyFrom(const queryCapitalResponse_result_capital& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryCapitalResponse_result_capital::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  
  return true;
}

void queryCapitalResponse_result_capital::Swap(queryCapitalResponse_result_capital* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(currencytype_, other->currencytype_);
    std::swap(amounts_, other->amounts_);
    std::swap(freeamounts_, other->freeamounts_);
    std::swap(frozenamount_, other->frozenamount_);
    std::swap(margin_, other->margin_);
    std::swap(floatingpl_, other->floatingpl_);
    std::swap(equity_, other->equity_);
    std::swap(accountid_, other->accountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryCapitalResponse_result_capital::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryCapitalResponse_result_capital_descriptor_;
  metadata.reflection = queryCapitalResponse_result_capital_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int queryCapitalResponse_result::kCapitalsFieldNumber;
const int queryCapitalResponse_result::kErrorNoFieldNumber;
const int queryCapitalResponse_result::kErrorMsgFieldNumber;
#endif  // !_MSC_VER

queryCapitalResponse_result::queryCapitalResponse_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryCapitalResponse_result::InitAsDefaultInstance() {
}

queryCapitalResponse_result::queryCapitalResponse_result(const queryCapitalResponse_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryCapitalResponse_result::SharedCtor() {
  _cached_size_ = 0;
  errorno_ = 0;
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryCapitalResponse_result::~queryCapitalResponse_result() {
  SharedDtor();
}

void queryCapitalResponse_result::SharedDtor() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (this != default_instance_) {
  }
}

void queryCapitalResponse_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryCapitalResponse_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryCapitalResponse_result_descriptor_;
}

const queryCapitalResponse_result& queryCapitalResponse_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryCapitalResponse_result* queryCapitalResponse_result::default_instance_ = NULL;

queryCapitalResponse_result* queryCapitalResponse_result::New() const {
  return new queryCapitalResponse_result;
}

void queryCapitalResponse_result::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    errorno_ = 0;
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
  }
  capitals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryCapitalResponse_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.queryCapitalResponse.result.capital capitals = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_capitals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_capitals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_capitals;
        if (input->ExpectTag(16)) goto parse_errorNo;
        break;
      }
      
      // optional int32 errorNo = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorno_)));
          set_has_errorno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_errorMsg;
        break;
      }
      
      // optional string errorMsg = 3 [default = ""];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryCapitalResponse_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.queryCapitalResponse.result.capital capitals = 1;
  for (int i = 0; i < this->capitals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->capitals(i), output);
  }
  
  // optional int32 errorNo = 2 [default = 0];
  if (has_errorno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errorno(), output);
  }
  
  // optional string errorMsg = 3 [default = ""];
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->errormsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryCapitalResponse_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.queryCapitalResponse.result.capital capitals = 1;
  for (int i = 0; i < this->capitals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->capitals(i), target);
  }
  
  // optional int32 errorNo = 2 [default = 0];
  if (has_errorno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->errorno(), target);
  }
  
  // optional string errorMsg = 3 [default = ""];
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errormsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryCapitalResponse_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 errorNo = 2 [default = 0];
    if (has_errorno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorno());
    }
    
    // optional string errorMsg = 3 [default = ""];
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }
    
  }
  // repeated .HSCommPB.queryCapitalResponse.result.capital capitals = 1;
  total_size += 1 * this->capitals_size();
  for (int i = 0; i < this->capitals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->capitals(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryCapitalResponse_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryCapitalResponse_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryCapitalResponse_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryCapitalResponse_result::MergeFrom(const queryCapitalResponse_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  capitals_.MergeFrom(from.capitals_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_errorno()) {
      set_errorno(from.errorno());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryCapitalResponse_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryCapitalResponse_result::CopyFrom(const queryCapitalResponse_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryCapitalResponse_result::IsInitialized() const {
  
  for (int i = 0; i < capitals_size(); i++) {
    if (!this->capitals(i).IsInitialized()) return false;
  }
  return true;
}

void queryCapitalResponse_result::Swap(queryCapitalResponse_result* other) {
  if (other != this) {
    capitals_.Swap(&other->capitals_);
    std::swap(errorno_, other->errorno_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryCapitalResponse_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryCapitalResponse_result_descriptor_;
  metadata.reflection = queryCapitalResponse_result_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int queryCapitalResponse::kResponsesFieldNumber;
#endif  // !_MSC_VER

queryCapitalResponse::queryCapitalResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void queryCapitalResponse::InitAsDefaultInstance() {
}

queryCapitalResponse::queryCapitalResponse(const queryCapitalResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void queryCapitalResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

queryCapitalResponse::~queryCapitalResponse() {
  SharedDtor();
}

void queryCapitalResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void queryCapitalResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* queryCapitalResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return queryCapitalResponse_descriptor_;
}

const queryCapitalResponse& queryCapitalResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

queryCapitalResponse* queryCapitalResponse::default_instance_ = NULL;

queryCapitalResponse* queryCapitalResponse::New() const {
  return new queryCapitalResponse;
}

void queryCapitalResponse::Clear() {
  responses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool queryCapitalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.queryCapitalResponse.result responses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_responses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_responses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_responses;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void queryCapitalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.queryCapitalResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->responses(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* queryCapitalResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.queryCapitalResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->responses(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int queryCapitalResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.queryCapitalResponse.result responses = 1;
  total_size += 1 * this->responses_size();
  for (int i = 0; i < this->responses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->responses(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void queryCapitalResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const queryCapitalResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const queryCapitalResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void queryCapitalResponse::MergeFrom(const queryCapitalResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  responses_.MergeFrom(from.responses_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void queryCapitalResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void queryCapitalResponse::CopyFrom(const queryCapitalResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool queryCapitalResponse::IsInitialized() const {
  
  for (int i = 0; i < responses_size(); i++) {
    if (!this->responses(i).IsInitialized()) return false;
  }
  return true;
}

void queryCapitalResponse::Swap(queryCapitalResponse* other) {
  if (other != this) {
    responses_.Swap(&other->responses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata queryCapitalResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = queryCapitalResponse_descriptor_;
  metadata.reflection = queryCapitalResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int entrustCancelRequest_call::kUsernameFieldNumber;
const int entrustCancelRequest_call::kPasswordFieldNumber;
const int entrustCancelRequest_call::kOMIDFieldNumber;
#endif  // !_MSC_VER

entrustCancelRequest_call::entrustCancelRequest_call()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void entrustCancelRequest_call::InitAsDefaultInstance() {
}

entrustCancelRequest_call::entrustCancelRequest_call(const entrustCancelRequest_call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void entrustCancelRequest_call::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  omid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

entrustCancelRequest_call::~entrustCancelRequest_call() {
  SharedDtor();
}

void entrustCancelRequest_call::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void entrustCancelRequest_call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* entrustCancelRequest_call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return entrustCancelRequest_call_descriptor_;
}

const entrustCancelRequest_call& entrustCancelRequest_call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

entrustCancelRequest_call* entrustCancelRequest_call::default_instance_ = NULL;

entrustCancelRequest_call* entrustCancelRequest_call::New() const {
  return new entrustCancelRequest_call;
}

void entrustCancelRequest_call::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    omid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool entrustCancelRequest_call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OMID;
        break;
      }
      
      // required int64 OMID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OMID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &omid_)));
          set_has_omid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void entrustCancelRequest_call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }
  
  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  // required int64 OMID = 3;
  if (has_omid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->omid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* entrustCancelRequest_call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }
  
  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  // required int64 OMID = 3;
  if (has_omid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->omid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int entrustCancelRequest_call::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // required int64 OMID = 3;
    if (has_omid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->omid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void entrustCancelRequest_call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const entrustCancelRequest_call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const entrustCancelRequest_call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void entrustCancelRequest_call::MergeFrom(const entrustCancelRequest_call& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_omid()) {
      set_omid(from.omid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void entrustCancelRequest_call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void entrustCancelRequest_call::CopyFrom(const entrustCancelRequest_call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool entrustCancelRequest_call::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void entrustCancelRequest_call::Swap(entrustCancelRequest_call* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(omid_, other->omid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata entrustCancelRequest_call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = entrustCancelRequest_call_descriptor_;
  metadata.reflection = entrustCancelRequest_call_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int entrustCancelRequest::kRequestsFieldNumber;
#endif  // !_MSC_VER

entrustCancelRequest::entrustCancelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void entrustCancelRequest::InitAsDefaultInstance() {
}

entrustCancelRequest::entrustCancelRequest(const entrustCancelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void entrustCancelRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

entrustCancelRequest::~entrustCancelRequest() {
  SharedDtor();
}

void entrustCancelRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void entrustCancelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* entrustCancelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return entrustCancelRequest_descriptor_;
}

const entrustCancelRequest& entrustCancelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

entrustCancelRequest* entrustCancelRequest::default_instance_ = NULL;

entrustCancelRequest* entrustCancelRequest::New() const {
  return new entrustCancelRequest;
}

void entrustCancelRequest::Clear() {
  requests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool entrustCancelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.entrustCancelRequest.call requests = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_requests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_requests;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void entrustCancelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.entrustCancelRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requests(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* entrustCancelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.entrustCancelRequest.call requests = 1;
  for (int i = 0; i < this->requests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->requests(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int entrustCancelRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.entrustCancelRequest.call requests = 1;
  total_size += 1 * this->requests_size();
  for (int i = 0; i < this->requests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->requests(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void entrustCancelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const entrustCancelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const entrustCancelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void entrustCancelRequest::MergeFrom(const entrustCancelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  requests_.MergeFrom(from.requests_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void entrustCancelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void entrustCancelRequest::CopyFrom(const entrustCancelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool entrustCancelRequest::IsInitialized() const {
  
  for (int i = 0; i < requests_size(); i++) {
    if (!this->requests(i).IsInitialized()) return false;
  }
  return true;
}

void entrustCancelRequest::Swap(entrustCancelRequest* other) {
  if (other != this) {
    requests_.Swap(&other->requests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata entrustCancelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = entrustCancelRequest_descriptor_;
  metadata.reflection = entrustCancelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int entrustCancleResponse_result::kSuccessFieldNumber;
const int entrustCancleResponse_result::kErrormsgFieldNumber;
#endif  // !_MSC_VER

entrustCancleResponse_result::entrustCancleResponse_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void entrustCancleResponse_result::InitAsDefaultInstance() {
}

entrustCancleResponse_result::entrustCancleResponse_result(const entrustCancleResponse_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void entrustCancleResponse_result::SharedCtor() {
  _cached_size_ = 0;
  success_ = GOOGLE_LONGLONG(0);
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

entrustCancleResponse_result::~entrustCancleResponse_result() {
  SharedDtor();
}

void entrustCancleResponse_result::SharedDtor() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (this != default_instance_) {
  }
}

void entrustCancleResponse_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* entrustCancleResponse_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return entrustCancleResponse_result_descriptor_;
}

const entrustCancleResponse_result& entrustCancleResponse_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

entrustCancleResponse_result* entrustCancleResponse_result::default_instance_ = NULL;

entrustCancleResponse_result* entrustCancleResponse_result::New() const {
  return new entrustCancleResponse_result;
}

void entrustCancleResponse_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = GOOGLE_LONGLONG(0);
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool entrustCancleResponse_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_errormsg;
        break;
      }
      
      // required string errormsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errormsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void entrustCancleResponse_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->success(), output);
  }
  
  // required string errormsg = 2;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errormsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* entrustCancleResponse_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->success(), target);
  }
  
  // required string errormsg = 2;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errormsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int entrustCancleResponse_result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 success = 1;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->success());
    }
    
    // required string errormsg = 2;
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void entrustCancleResponse_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const entrustCancleResponse_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const entrustCancleResponse_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void entrustCancleResponse_result::MergeFrom(const entrustCancleResponse_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void entrustCancleResponse_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void entrustCancleResponse_result::CopyFrom(const entrustCancleResponse_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool entrustCancleResponse_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void entrustCancleResponse_result::Swap(entrustCancleResponse_result* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata entrustCancleResponse_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = entrustCancleResponse_result_descriptor_;
  metadata.reflection = entrustCancleResponse_result_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int entrustCancleResponse::kResponsesFieldNumber;
#endif  // !_MSC_VER

entrustCancleResponse::entrustCancleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void entrustCancleResponse::InitAsDefaultInstance() {
}

entrustCancleResponse::entrustCancleResponse(const entrustCancleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void entrustCancleResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

entrustCancleResponse::~entrustCancleResponse() {
  SharedDtor();
}

void entrustCancleResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void entrustCancleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* entrustCancleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return entrustCancleResponse_descriptor_;
}

const entrustCancleResponse& entrustCancleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_HSComm_2eproto();  return *default_instance_;
}

entrustCancleResponse* entrustCancleResponse::default_instance_ = NULL;

entrustCancleResponse* entrustCancleResponse::New() const {
  return new entrustCancleResponse;
}

void entrustCancleResponse::Clear() {
  responses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool entrustCancleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HSCommPB.entrustCancleResponse.result responses = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_responses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_responses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_responses;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void entrustCancleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HSCommPB.entrustCancleResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->responses(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* entrustCancleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HSCommPB.entrustCancleResponse.result responses = 1;
  for (int i = 0; i < this->responses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->responses(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int entrustCancleResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .HSCommPB.entrustCancleResponse.result responses = 1;
  total_size += 1 * this->responses_size();
  for (int i = 0; i < this->responses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->responses(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void entrustCancleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const entrustCancleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const entrustCancleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void entrustCancleResponse::MergeFrom(const entrustCancleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  responses_.MergeFrom(from.responses_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void entrustCancleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void entrustCancleResponse::CopyFrom(const entrustCancleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool entrustCancleResponse::IsInitialized() const {
  
  for (int i = 0; i < responses_size(); i++) {
    if (!this->responses(i).IsInitialized()) return false;
  }
  return true;
}

void entrustCancleResponse::Swap(entrustCancleResponse* other) {
  if (other != this) {
    responses_.Swap(&other->responses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata entrustCancleResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = entrustCancleResponse_descriptor_;
  metadata.reflection = entrustCancleResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HSCommPB

// @@protoc_insertion_point(global_scope)
