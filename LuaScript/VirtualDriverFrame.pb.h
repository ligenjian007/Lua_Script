// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VirtualDriverFrame.pb.proto

#ifndef PROTOBUF_VirtualDriverFrame_2epb_2eproto__INCLUDED
#define PROTOBUF_VirtualDriverFrame_2epb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace VirtualDriverFramePB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_VirtualDriverFrame_2epb_2eproto();
void protobuf_AssignDesc_VirtualDriverFrame_2epb_2eproto();
void protobuf_ShutdownFile_VirtualDriverFrame_2epb_2eproto();

class VirtualDriverDevice;
class VirtualDriverFrame;

// ===================================================================

class VirtualDriverDevice : public ::google::protobuf::Message {
 public:
  VirtualDriverDevice();
  virtual ~VirtualDriverDevice();
  
  VirtualDriverDevice(const VirtualDriverDevice& from);
  
  inline VirtualDriverDevice& operator=(const VirtualDriverDevice& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VirtualDriverDevice& default_instance();
  
  void Swap(VirtualDriverDevice* other);
  
  // implements Message ----------------------------------------------
  
  VirtualDriverDevice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VirtualDriverDevice& from);
  void MergeFrom(const VirtualDriverDevice& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 FuncID = 1 [default = 0];
  inline bool has_funcid() const;
  inline void clear_funcid();
  static const int kFuncIDFieldNumber = 1;
  inline ::google::protobuf::int32 funcid() const;
  inline void set_funcid(::google::protobuf::int32 value);
  
  // required int32 Location = 2 [default = 0];
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 2;
  inline ::google::protobuf::int32 location() const;
  inline void set_location(::google::protobuf::int32 value);
  
  // required int32 Sync = 3 [default = 0];
  inline bool has_sync() const;
  inline void clear_sync();
  static const int kSyncFieldNumber = 3;
  inline ::google::protobuf::int32 sync() const;
  inline void set_sync(::google::protobuf::int32 value);
  
  // optional bytes DriverName = 4 [default = ""];
  inline bool has_drivername() const;
  inline void clear_drivername();
  static const int kDriverNameFieldNumber = 4;
  inline const ::std::string& drivername() const;
  inline void set_drivername(const ::std::string& value);
  inline void set_drivername(const char* value);
  inline void set_drivername(const void* value, size_t size);
  inline ::std::string* mutable_drivername();
  inline ::std::string* release_drivername();
  
  // optional bytes DeviceName = 5 [default = ""];
  inline bool has_devicename() const;
  inline void clear_devicename();
  static const int kDeviceNameFieldNumber = 5;
  inline const ::std::string& devicename() const;
  inline void set_devicename(const ::std::string& value);
  inline void set_devicename(const char* value);
  inline void set_devicename(const void* value, size_t size);
  inline ::std::string* mutable_devicename();
  inline ::std::string* release_devicename();
  
  // @@protoc_insertion_point(class_scope:VirtualDriverFramePB.VirtualDriverDevice)
 private:
  inline void set_has_funcid();
  inline void clear_has_funcid();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_sync();
  inline void clear_has_sync();
  inline void set_has_drivername();
  inline void clear_has_drivername();
  inline void set_has_devicename();
  inline void clear_has_devicename();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 funcid_;
  ::google::protobuf::int32 location_;
  ::std::string* drivername_;
  ::std::string* devicename_;
  ::google::protobuf::int32 sync_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_VirtualDriverFrame_2epb_2eproto();
  friend void protobuf_AssignDesc_VirtualDriverFrame_2epb_2eproto();
  friend void protobuf_ShutdownFile_VirtualDriverFrame_2epb_2eproto();
  
  void InitAsDefaultInstance();
  static VirtualDriverDevice* default_instance_;
};
// -------------------------------------------------------------------

class VirtualDriverFrame : public ::google::protobuf::Message {
 public:
  VirtualDriverFrame();
  virtual ~VirtualDriverFrame();
  
  VirtualDriverFrame(const VirtualDriverFrame& from);
  
  inline VirtualDriverFrame& operator=(const VirtualDriverFrame& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VirtualDriverFrame& default_instance();
  
  void Swap(VirtualDriverFrame* other);
  
  // implements Message ----------------------------------------------
  
  VirtualDriverFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VirtualDriverFrame& from);
  void MergeFrom(const VirtualDriverFrame& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes Version = 1 [default = ""];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const void* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  
  // required uint32 UID = 2 [default = 0];
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUIDFieldNumber = 2;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);
  
  // required uint32 CSUID = 3 [default = 0];
  inline bool has_csuid() const;
  inline void clear_csuid();
  static const int kCSUIDFieldNumber = 3;
  inline ::google::protobuf::uint32 csuid() const;
  inline void set_csuid(::google::protobuf::uint32 value);
  
  // required .VirtualDriverFramePB.VirtualDriverDevice ReqDev = 4;
  inline bool has_reqdev() const;
  inline void clear_reqdev();
  static const int kReqDevFieldNumber = 4;
  inline const ::VirtualDriverFramePB::VirtualDriverDevice& reqdev() const;
  inline ::VirtualDriverFramePB::VirtualDriverDevice* mutable_reqdev();
  inline ::VirtualDriverFramePB::VirtualDriverDevice* release_reqdev();
  
  // required int32 MajorCmd = 5 [default = 0];
  inline bool has_majorcmd() const;
  inline void clear_majorcmd();
  static const int kMajorCmdFieldNumber = 5;
  inline ::google::protobuf::int32 majorcmd() const;
  inline void set_majorcmd(::google::protobuf::int32 value);
  
  // required int32 MinorCmd = 6 [default = 0];
  inline bool has_minorcmd() const;
  inline void clear_minorcmd();
  static const int kMinorCmdFieldNumber = 6;
  inline ::google::protobuf::int32 minorcmd() const;
  inline void set_minorcmd(::google::protobuf::int32 value);
  
  // optional int32 TimeOut = 7 [default = 3000];
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeOutFieldNumber = 7;
  inline ::google::protobuf::int32 timeout() const;
  inline void set_timeout(::google::protobuf::int32 value);
  
  // required bytes Username = 8 [default = ""];
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 8;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const void* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // required bytes Password = 9 [default = ""];
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 9;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const void* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // optional uint32 RequestQueueHandle = 10 [default = 0];
  inline bool has_requestqueuehandle() const;
  inline void clear_requestqueuehandle();
  static const int kRequestQueueHandleFieldNumber = 10;
  inline ::google::protobuf::uint32 requestqueuehandle() const;
  inline void set_requestqueuehandle(::google::protobuf::uint32 value);
  
  // optional int32 StateCode = 11 [default = 0];
  inline bool has_statecode() const;
  inline void clear_statecode();
  static const int kStateCodeFieldNumber = 11;
  inline ::google::protobuf::int32 statecode() const;
  inline void set_statecode(::google::protobuf::int32 value);
  
  // optional int32 ErrorCode = 12 [default = 0];
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 12;
  inline ::google::protobuf::int32 errorcode() const;
  inline void set_errorcode(::google::protobuf::int32 value);
  
  // optional bytes ErrorInfo = 13 [default = ""];
  inline bool has_errorinfo() const;
  inline void clear_errorinfo();
  static const int kErrorInfoFieldNumber = 13;
  inline const ::std::string& errorinfo() const;
  inline void set_errorinfo(const ::std::string& value);
  inline void set_errorinfo(const char* value);
  inline void set_errorinfo(const void* value, size_t size);
  inline ::std::string* mutable_errorinfo();
  inline ::std::string* release_errorinfo();
  
  // optional bytes Body = 51 [default = ""];
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 51;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const void* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  
  // @@protoc_insertion_point(class_scope:VirtualDriverFramePB.VirtualDriverFrame)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_csuid();
  inline void clear_has_csuid();
  inline void set_has_reqdev();
  inline void clear_has_reqdev();
  inline void set_has_majorcmd();
  inline void clear_has_majorcmd();
  inline void set_has_minorcmd();
  inline void clear_has_minorcmd();
  inline void set_has_timeout();
  inline void clear_has_timeout();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_requestqueuehandle();
  inline void clear_has_requestqueuehandle();
  inline void set_has_statecode();
  inline void clear_has_statecode();
  inline void set_has_errorcode();
  inline void clear_has_errorcode();
  inline void set_has_errorinfo();
  inline void clear_has_errorinfo();
  inline void set_has_body();
  inline void clear_has_body();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* version_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 csuid_;
  ::VirtualDriverFramePB::VirtualDriverDevice* reqdev_;
  ::google::protobuf::int32 majorcmd_;
  ::google::protobuf::int32 minorcmd_;
  ::std::string* username_;
  ::google::protobuf::int32 timeout_;
  ::google::protobuf::uint32 requestqueuehandle_;
  ::std::string* password_;
  ::google::protobuf::int32 statecode_;
  ::google::protobuf::int32 errorcode_;
  ::std::string* errorinfo_;
  ::std::string* body_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_VirtualDriverFrame_2epb_2eproto();
  friend void protobuf_AssignDesc_VirtualDriverFrame_2epb_2eproto();
  friend void protobuf_ShutdownFile_VirtualDriverFrame_2epb_2eproto();
  
  void InitAsDefaultInstance();
  static VirtualDriverFrame* default_instance_;
};
// ===================================================================


// ===================================================================

// VirtualDriverDevice

// required int32 FuncID = 1 [default = 0];
inline bool VirtualDriverDevice::has_funcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VirtualDriverDevice::set_has_funcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VirtualDriverDevice::clear_has_funcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VirtualDriverDevice::clear_funcid() {
  funcid_ = 0;
  clear_has_funcid();
}
inline ::google::protobuf::int32 VirtualDriverDevice::funcid() const {
  return funcid_;
}
inline void VirtualDriverDevice::set_funcid(::google::protobuf::int32 value) {
  set_has_funcid();
  funcid_ = value;
}

// required int32 Location = 2 [default = 0];
inline bool VirtualDriverDevice::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VirtualDriverDevice::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VirtualDriverDevice::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VirtualDriverDevice::clear_location() {
  location_ = 0;
  clear_has_location();
}
inline ::google::protobuf::int32 VirtualDriverDevice::location() const {
  return location_;
}
inline void VirtualDriverDevice::set_location(::google::protobuf::int32 value) {
  set_has_location();
  location_ = value;
}

// required int32 Sync = 3 [default = 0];
inline bool VirtualDriverDevice::has_sync() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VirtualDriverDevice::set_has_sync() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VirtualDriverDevice::clear_has_sync() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VirtualDriverDevice::clear_sync() {
  sync_ = 0;
  clear_has_sync();
}
inline ::google::protobuf::int32 VirtualDriverDevice::sync() const {
  return sync_;
}
inline void VirtualDriverDevice::set_sync(::google::protobuf::int32 value) {
  set_has_sync();
  sync_ = value;
}

// optional bytes DriverName = 4 [default = ""];
inline bool VirtualDriverDevice::has_drivername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VirtualDriverDevice::set_has_drivername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VirtualDriverDevice::clear_has_drivername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VirtualDriverDevice::clear_drivername() {
  if (drivername_ != &::google::protobuf::internal::kEmptyString) {
    drivername_->clear();
  }
  clear_has_drivername();
}
inline const ::std::string& VirtualDriverDevice::drivername() const {
  return *drivername_;
}
inline void VirtualDriverDevice::set_drivername(const ::std::string& value) {
  set_has_drivername();
  if (drivername_ == &::google::protobuf::internal::kEmptyString) {
    drivername_ = new ::std::string;
  }
  drivername_->assign(value);
}
inline void VirtualDriverDevice::set_drivername(const char* value) {
  set_has_drivername();
  if (drivername_ == &::google::protobuf::internal::kEmptyString) {
    drivername_ = new ::std::string;
  }
  drivername_->assign(value);
}
inline void VirtualDriverDevice::set_drivername(const void* value, size_t size) {
  set_has_drivername();
  if (drivername_ == &::google::protobuf::internal::kEmptyString) {
    drivername_ = new ::std::string;
  }
  drivername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VirtualDriverDevice::mutable_drivername() {
  set_has_drivername();
  if (drivername_ == &::google::protobuf::internal::kEmptyString) {
    drivername_ = new ::std::string;
  }
  return drivername_;
}
inline ::std::string* VirtualDriverDevice::release_drivername() {
  clear_has_drivername();
  if (drivername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = drivername_;
    drivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes DeviceName = 5 [default = ""];
inline bool VirtualDriverDevice::has_devicename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VirtualDriverDevice::set_has_devicename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VirtualDriverDevice::clear_has_devicename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VirtualDriverDevice::clear_devicename() {
  if (devicename_ != &::google::protobuf::internal::kEmptyString) {
    devicename_->clear();
  }
  clear_has_devicename();
}
inline const ::std::string& VirtualDriverDevice::devicename() const {
  return *devicename_;
}
inline void VirtualDriverDevice::set_devicename(const ::std::string& value) {
  set_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    devicename_ = new ::std::string;
  }
  devicename_->assign(value);
}
inline void VirtualDriverDevice::set_devicename(const char* value) {
  set_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    devicename_ = new ::std::string;
  }
  devicename_->assign(value);
}
inline void VirtualDriverDevice::set_devicename(const void* value, size_t size) {
  set_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    devicename_ = new ::std::string;
  }
  devicename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VirtualDriverDevice::mutable_devicename() {
  set_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    devicename_ = new ::std::string;
  }
  return devicename_;
}
inline ::std::string* VirtualDriverDevice::release_devicename() {
  clear_has_devicename();
  if (devicename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = devicename_;
    devicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// VirtualDriverFrame

// required bytes Version = 1 [default = ""];
inline bool VirtualDriverFrame::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VirtualDriverFrame::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VirtualDriverFrame::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VirtualDriverFrame::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& VirtualDriverFrame::version() const {
  return *version_;
}
inline void VirtualDriverFrame::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void VirtualDriverFrame::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void VirtualDriverFrame::set_version(const void* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VirtualDriverFrame::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* VirtualDriverFrame::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 UID = 2 [default = 0];
inline bool VirtualDriverFrame::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VirtualDriverFrame::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VirtualDriverFrame::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VirtualDriverFrame::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 VirtualDriverFrame::uid() const {
  return uid_;
}
inline void VirtualDriverFrame::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// required uint32 CSUID = 3 [default = 0];
inline bool VirtualDriverFrame::has_csuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VirtualDriverFrame::set_has_csuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VirtualDriverFrame::clear_has_csuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VirtualDriverFrame::clear_csuid() {
  csuid_ = 0u;
  clear_has_csuid();
}
inline ::google::protobuf::uint32 VirtualDriverFrame::csuid() const {
  return csuid_;
}
inline void VirtualDriverFrame::set_csuid(::google::protobuf::uint32 value) {
  set_has_csuid();
  csuid_ = value;
}

// required .VirtualDriverFramePB.VirtualDriverDevice ReqDev = 4;
inline bool VirtualDriverFrame::has_reqdev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VirtualDriverFrame::set_has_reqdev() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VirtualDriverFrame::clear_has_reqdev() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VirtualDriverFrame::clear_reqdev() {
  if (reqdev_ != NULL) reqdev_->::VirtualDriverFramePB::VirtualDriverDevice::Clear();
  clear_has_reqdev();
}
inline const ::VirtualDriverFramePB::VirtualDriverDevice& VirtualDriverFrame::reqdev() const {
  return reqdev_ != NULL ? *reqdev_ : *default_instance_->reqdev_;
}
inline ::VirtualDriverFramePB::VirtualDriverDevice* VirtualDriverFrame::mutable_reqdev() {
  set_has_reqdev();
  if (reqdev_ == NULL) reqdev_ = new ::VirtualDriverFramePB::VirtualDriverDevice;
  return reqdev_;
}
inline ::VirtualDriverFramePB::VirtualDriverDevice* VirtualDriverFrame::release_reqdev() {
  clear_has_reqdev();
  ::VirtualDriverFramePB::VirtualDriverDevice* temp = reqdev_;
  reqdev_ = NULL;
  return temp;
}

// required int32 MajorCmd = 5 [default = 0];
inline bool VirtualDriverFrame::has_majorcmd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VirtualDriverFrame::set_has_majorcmd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VirtualDriverFrame::clear_has_majorcmd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VirtualDriverFrame::clear_majorcmd() {
  majorcmd_ = 0;
  clear_has_majorcmd();
}
inline ::google::protobuf::int32 VirtualDriverFrame::majorcmd() const {
  return majorcmd_;
}
inline void VirtualDriverFrame::set_majorcmd(::google::protobuf::int32 value) {
  set_has_majorcmd();
  majorcmd_ = value;
}

// required int32 MinorCmd = 6 [default = 0];
inline bool VirtualDriverFrame::has_minorcmd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VirtualDriverFrame::set_has_minorcmd() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VirtualDriverFrame::clear_has_minorcmd() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VirtualDriverFrame::clear_minorcmd() {
  minorcmd_ = 0;
  clear_has_minorcmd();
}
inline ::google::protobuf::int32 VirtualDriverFrame::minorcmd() const {
  return minorcmd_;
}
inline void VirtualDriverFrame::set_minorcmd(::google::protobuf::int32 value) {
  set_has_minorcmd();
  minorcmd_ = value;
}

// optional int32 TimeOut = 7 [default = 3000];
inline bool VirtualDriverFrame::has_timeout() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VirtualDriverFrame::set_has_timeout() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VirtualDriverFrame::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VirtualDriverFrame::clear_timeout() {
  timeout_ = 3000;
  clear_has_timeout();
}
inline ::google::protobuf::int32 VirtualDriverFrame::timeout() const {
  return timeout_;
}
inline void VirtualDriverFrame::set_timeout(::google::protobuf::int32 value) {
  set_has_timeout();
  timeout_ = value;
}

// required bytes Username = 8 [default = ""];
inline bool VirtualDriverFrame::has_username() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VirtualDriverFrame::set_has_username() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VirtualDriverFrame::clear_has_username() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VirtualDriverFrame::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& VirtualDriverFrame::username() const {
  return *username_;
}
inline void VirtualDriverFrame::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void VirtualDriverFrame::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void VirtualDriverFrame::set_username(const void* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VirtualDriverFrame::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* VirtualDriverFrame::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes Password = 9 [default = ""];
inline bool VirtualDriverFrame::has_password() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VirtualDriverFrame::set_has_password() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VirtualDriverFrame::clear_has_password() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VirtualDriverFrame::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& VirtualDriverFrame::password() const {
  return *password_;
}
inline void VirtualDriverFrame::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void VirtualDriverFrame::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void VirtualDriverFrame::set_password(const void* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VirtualDriverFrame::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* VirtualDriverFrame::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 RequestQueueHandle = 10 [default = 0];
inline bool VirtualDriverFrame::has_requestqueuehandle() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VirtualDriverFrame::set_has_requestqueuehandle() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VirtualDriverFrame::clear_has_requestqueuehandle() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VirtualDriverFrame::clear_requestqueuehandle() {
  requestqueuehandle_ = 0u;
  clear_has_requestqueuehandle();
}
inline ::google::protobuf::uint32 VirtualDriverFrame::requestqueuehandle() const {
  return requestqueuehandle_;
}
inline void VirtualDriverFrame::set_requestqueuehandle(::google::protobuf::uint32 value) {
  set_has_requestqueuehandle();
  requestqueuehandle_ = value;
}

// optional int32 StateCode = 11 [default = 0];
inline bool VirtualDriverFrame::has_statecode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VirtualDriverFrame::set_has_statecode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VirtualDriverFrame::clear_has_statecode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VirtualDriverFrame::clear_statecode() {
  statecode_ = 0;
  clear_has_statecode();
}
inline ::google::protobuf::int32 VirtualDriverFrame::statecode() const {
  return statecode_;
}
inline void VirtualDriverFrame::set_statecode(::google::protobuf::int32 value) {
  set_has_statecode();
  statecode_ = value;
}

// optional int32 ErrorCode = 12 [default = 0];
inline bool VirtualDriverFrame::has_errorcode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VirtualDriverFrame::set_has_errorcode() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VirtualDriverFrame::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VirtualDriverFrame::clear_errorcode() {
  errorcode_ = 0;
  clear_has_errorcode();
}
inline ::google::protobuf::int32 VirtualDriverFrame::errorcode() const {
  return errorcode_;
}
inline void VirtualDriverFrame::set_errorcode(::google::protobuf::int32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// optional bytes ErrorInfo = 13 [default = ""];
inline bool VirtualDriverFrame::has_errorinfo() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void VirtualDriverFrame::set_has_errorinfo() {
  _has_bits_[0] |= 0x00001000u;
}
inline void VirtualDriverFrame::clear_has_errorinfo() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void VirtualDriverFrame::clear_errorinfo() {
  if (errorinfo_ != &::google::protobuf::internal::kEmptyString) {
    errorinfo_->clear();
  }
  clear_has_errorinfo();
}
inline const ::std::string& VirtualDriverFrame::errorinfo() const {
  return *errorinfo_;
}
inline void VirtualDriverFrame::set_errorinfo(const ::std::string& value) {
  set_has_errorinfo();
  if (errorinfo_ == &::google::protobuf::internal::kEmptyString) {
    errorinfo_ = new ::std::string;
  }
  errorinfo_->assign(value);
}
inline void VirtualDriverFrame::set_errorinfo(const char* value) {
  set_has_errorinfo();
  if (errorinfo_ == &::google::protobuf::internal::kEmptyString) {
    errorinfo_ = new ::std::string;
  }
  errorinfo_->assign(value);
}
inline void VirtualDriverFrame::set_errorinfo(const void* value, size_t size) {
  set_has_errorinfo();
  if (errorinfo_ == &::google::protobuf::internal::kEmptyString) {
    errorinfo_ = new ::std::string;
  }
  errorinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VirtualDriverFrame::mutable_errorinfo() {
  set_has_errorinfo();
  if (errorinfo_ == &::google::protobuf::internal::kEmptyString) {
    errorinfo_ = new ::std::string;
  }
  return errorinfo_;
}
inline ::std::string* VirtualDriverFrame::release_errorinfo() {
  clear_has_errorinfo();
  if (errorinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errorinfo_;
    errorinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes Body = 51 [default = ""];
inline bool VirtualDriverFrame::has_body() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VirtualDriverFrame::set_has_body() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VirtualDriverFrame::clear_has_body() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VirtualDriverFrame::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& VirtualDriverFrame::body() const {
  return *body_;
}
inline void VirtualDriverFrame::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void VirtualDriverFrame::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void VirtualDriverFrame::set_body(const void* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VirtualDriverFrame::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* VirtualDriverFrame::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace VirtualDriverFramePB

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_VirtualDriverFrame_2epb_2eproto__INCLUDED
