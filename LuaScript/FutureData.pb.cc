// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "stdafx.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FutureData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FutureDataPB {

namespace {

const ::google::protobuf::Descriptor* CThostFtdcDepthMarketDataFieldStruct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CThostFtdcDepthMarketDataFieldStruct_reflection_ = NULL;
const ::google::protobuf::Descriptor* FutureData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FutureData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FutureData_MarketData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FutureData_MarketData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurrentDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrentDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurrentDataRequest_ContractInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrentDataRequest_ContractInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryDataRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryDataRequest_HistoryDataInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryDataRequest_HistoryDataInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryDataResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryDataResponse_MarketDataSeries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryDataResponse_MarketDataSeries_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FutureData_2eproto() {
  protobuf_AddDesc_FutureData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FutureData.proto");
  GOOGLE_CHECK(file != NULL);
  CThostFtdcDepthMarketDataFieldStruct_descriptor_ = file->message_type(0);
  static const int CThostFtdcDepthMarketDataFieldStruct_offsets_[43] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, exchangeinstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, lastprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, presettlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, precloseprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, preopeninterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, openprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, highestprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, lowestprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, openinterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, closeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, settlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, upperlimitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, lowerlimitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, predelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, currdelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, updatemillisec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, bidprice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, bidvolume1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, askprice1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, askvolume1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, bidprice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, bidvolume2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, askprice2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, askvolume2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, bidprice3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, bidvolume3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, askprice3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, askvolume3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, bidprice4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, bidvolume4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, askprice4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, askvolume4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, bidprice5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, bidvolume5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, askprice5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, askvolume5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, averageprice_),
  };
  CThostFtdcDepthMarketDataFieldStruct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CThostFtdcDepthMarketDataFieldStruct_descriptor_,
      CThostFtdcDepthMarketDataFieldStruct::default_instance_,
      CThostFtdcDepthMarketDataFieldStruct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CThostFtdcDepthMarketDataFieldStruct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CThostFtdcDepthMarketDataFieldStruct));
  FutureData_descriptor_ = file->message_type(1);
  static const int FutureData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, datapack_),
  };
  FutureData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FutureData_descriptor_,
      FutureData::default_instance_,
      FutureData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FutureData));
  FutureData_MarketData_descriptor_ = FutureData_descriptor_->nested_type(0);
  static const int FutureData_MarketData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData_MarketData, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData_MarketData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData_MarketData, data_),
  };
  FutureData_MarketData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FutureData_MarketData_descriptor_,
      FutureData_MarketData::default_instance_,
      FutureData_MarketData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData_MarketData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FutureData_MarketData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FutureData_MarketData));
  CurrentDataRequest_descriptor_ = file->message_type(2);
  static const int CurrentDataRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentDataRequest, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentDataRequest, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentDataRequest, contractlist_),
  };
  CurrentDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurrentDataRequest_descriptor_,
      CurrentDataRequest::default_instance_,
      CurrentDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurrentDataRequest));
  CurrentDataRequest_ContractInfo_descriptor_ = CurrentDataRequest_descriptor_->nested_type(0);
  static const int CurrentDataRequest_ContractInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentDataRequest_ContractInfo, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentDataRequest_ContractInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentDataRequest_ContractInfo, contract_),
  };
  CurrentDataRequest_ContractInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CurrentDataRequest_ContractInfo_descriptor_,
      CurrentDataRequest_ContractInfo::default_instance_,
      CurrentDataRequest_ContractInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentDataRequest_ContractInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrentDataRequest_ContractInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CurrentDataRequest_ContractInfo));
  HistoryDataRequest_descriptor_ = file->message_type(3);
  static const int HistoryDataRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryDataRequest, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryDataRequest, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryDataRequest, datainfo_),
  };
  HistoryDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryDataRequest_descriptor_,
      HistoryDataRequest::default_instance_,
      HistoryDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryDataRequest));
  HistoryDataRequest_HistoryDataInfo_descriptor_ = HistoryDataRequest_descriptor_->nested_type(0);
  static const int HistoryDataRequest_HistoryDataInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryDataRequest_HistoryDataInfo, contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryDataRequest_HistoryDataInfo, startdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryDataRequest_HistoryDataInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryDataRequest_HistoryDataInfo, enddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryDataRequest_HistoryDataInfo, endtime_),
  };
  HistoryDataRequest_HistoryDataInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryDataRequest_HistoryDataInfo_descriptor_,
      HistoryDataRequest_HistoryDataInfo::default_instance_,
      HistoryDataRequest_HistoryDataInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryDataRequest_HistoryDataInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryDataRequest_HistoryDataInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryDataRequest_HistoryDataInfo));
  HistoryDataResponse_descriptor_ = file->message_type(4);
  static const int HistoryDataResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryDataResponse, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryDataResponse, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryDataResponse, dataseries_),
  };
  HistoryDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryDataResponse_descriptor_,
      HistoryDataResponse::default_instance_,
      HistoryDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryDataResponse));
  HistoryDataResponse_MarketDataSeries_descriptor_ = HistoryDataResponse_descriptor_->nested_type(0);
  static const int HistoryDataResponse_MarketDataSeries_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryDataResponse_MarketDataSeries, contract_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryDataResponse_MarketDataSeries, data_),
  };
  HistoryDataResponse_MarketDataSeries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryDataResponse_MarketDataSeries_descriptor_,
      HistoryDataResponse_MarketDataSeries::default_instance_,
      HistoryDataResponse_MarketDataSeries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryDataResponse_MarketDataSeries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryDataResponse_MarketDataSeries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryDataResponse_MarketDataSeries));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FutureData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CThostFtdcDepthMarketDataFieldStruct_descriptor_, &CThostFtdcDepthMarketDataFieldStruct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FutureData_descriptor_, &FutureData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FutureData_MarketData_descriptor_, &FutureData_MarketData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurrentDataRequest_descriptor_, &CurrentDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CurrentDataRequest_ContractInfo_descriptor_, &CurrentDataRequest_ContractInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryDataRequest_descriptor_, &HistoryDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryDataRequest_HistoryDataInfo_descriptor_, &HistoryDataRequest_HistoryDataInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryDataResponse_descriptor_, &HistoryDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryDataResponse_MarketDataSeries_descriptor_, &HistoryDataResponse_MarketDataSeries::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FutureData_2eproto() {
  delete CThostFtdcDepthMarketDataFieldStruct::default_instance_;
  delete CThostFtdcDepthMarketDataFieldStruct_reflection_;
  delete FutureData::default_instance_;
  delete FutureData_reflection_;
  delete FutureData_MarketData::default_instance_;
  delete FutureData_MarketData_reflection_;
  delete CurrentDataRequest::default_instance_;
  delete CurrentDataRequest_reflection_;
  delete CurrentDataRequest_ContractInfo::default_instance_;
  delete CurrentDataRequest_ContractInfo_reflection_;
  delete HistoryDataRequest::default_instance_;
  delete HistoryDataRequest_reflection_;
  delete HistoryDataRequest_HistoryDataInfo::default_instance_;
  delete HistoryDataRequest_HistoryDataInfo_reflection_;
  delete HistoryDataResponse::default_instance_;
  delete HistoryDataResponse_reflection_;
  delete HistoryDataResponse_MarketDataSeries::default_instance_;
  delete HistoryDataResponse_MarketDataSeries_reflection_;
}

void protobuf_AddDesc_FutureData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020FutureData.proto\022\014FutureDataPB\"\235\007\n$CTh"
    "ostFtdcDepthMarketDataFieldStruct\022\022\n\nTra"
    "dingDay\030\001 \002(\t\022\024\n\014InstrumentID\030\002 \002(\t\022\022\n\nE"
    "xchangeID\030\003 \002(\t\022\026\n\016ExchangeInstID\030\004 \002(\t\022"
    "\021\n\tLastPrice\030\005 \002(\001\022\032\n\022PreSettlementPrice"
    "\030\006 \002(\001\022\025\n\rPreClosePrice\030\007 \002(\001\022\027\n\017PreOpen"
    "Interest\030\010 \002(\001\022\021\n\tOpenPrice\030\t \002(\001\022\024\n\014Hig"
    "hestPrice\030\n \002(\001\022\023\n\013LowestPrice\030\013 \002(\001\022\016\n\006"
    "Volume\030\014 \002(\005\022\020\n\010Turnover\030\r \002(\001\022\024\n\014OpenIn"
    "terest\030\016 \002(\001\022\022\n\nClosePrice\030\017 \002(\001\022\027\n\017Sett"
    "lementPrice\030\020 \002(\001\022\027\n\017UpperLimitPrice\030\021 \002"
    "(\001\022\027\n\017LowerLimitPrice\030\022 \002(\001\022\020\n\010PreDelta\030"
    "\023 \002(\001\022\021\n\tCurrDelta\030\024 \002(\001\022\022\n\nUpdateTime\030\025"
    " \002(\t\022\026\n\016UpdateMillisec\030\026 \002(\005\022\021\n\tBidPrice"
    "1\030\027 \002(\001\022\022\n\nBidVolume1\030\030 \002(\005\022\021\n\tAskPrice1"
    "\030\031 \002(\001\022\022\n\nAskVolume1\030\032 \002(\005\022\021\n\tBidPrice2\030"
    "\033 \002(\001\022\022\n\nBidVolume2\030\034 \002(\005\022\021\n\tAskPrice2\030\035"
    " \002(\001\022\022\n\nAskVolume2\030\036 \002(\005\022\021\n\tBidPrice3\030\037 "
    "\002(\001\022\022\n\nBidVolume3\030  \002(\005\022\021\n\tAskPrice3\030! \002"
    "(\001\022\022\n\nAskVolume3\030\" \002(\005\022\021\n\tBidPrice4\030# \002("
    "\001\022\022\n\nBidVolume4\030$ \002(\005\022\021\n\tAskPrice4\030% \002(\001"
    "\022\022\n\nAskVolume4\030& \002(\005\022\021\n\tBidPrice5\030\' \002(\001\022"
    "\022\n\nBidVolume5\030( \002(\005\022\021\n\tAskPrice5\030) \002(\001\022\022"
    "\n\nAskVolume5\030* \002(\005\022\024\n\014AveragePrice\030+ \002(\001"
    "\"\322\001\n\nFutureData\022\021\n\tTimestamp\030\001 \002(\005\022\016\n\006Ha"
    "ndle\030\002 \002(\005\0225\n\010DataPack\030\003 \003(\0132#.FutureDat"
    "aPB.FutureData.MarketData\032j\n\nMarketData\022"
    "\014\n\004Date\030\001 \002(\005\022\014\n\004Time\030\002 \002(\005\022@\n\004Data\030\003 \002("
    "\01322.FutureDataPB.CThostFtdcDepthMarketDa"
    "taFieldStruct\"\272\001\n\022CurrentDataRequest\022\021\n\t"
    "TimeStamp\030\001 \002(\005\022\016\n\006Handle\030\002 \002(\005\022C\n\014Contr"
    "actList\030\003 \003(\0132-.FutureDataPB.CurrentData"
    "Request.ContractInfo\032<\n\014ContractInfo\022\014\n\004"
    "Date\030\001 \002(\005\022\014\n\004Time\030\002 \002(\005\022\020\n\010Contract\030\003 \002"
    "(\t\"\350\001\n\022HistoryDataRequest\022\021\n\tTimeStamp\030\001"
    " \002(\005\022\016\n\006Handle\030\002 \002(\005\022B\n\010DataInfo\030\003 \003(\01320"
    ".FutureDataPB.HistoryDataRequest.History"
    "DataInfo\032k\n\017HistoryDataInfo\022\020\n\010Contract\030"
    "\001 \002(\t\022\021\n\tStartDate\030\002 \002(\005\022\021\n\tStartTime\030\003 "
    "\002(\005\022\017\n\007EndDate\030\004 \002(\005\022\017\n\007EndTime\030\005 \002(\005\"\350\001"
    "\n\023HistoryDataResponse\022\021\n\tTimestamp\030\001 \002(\005"
    "\022\016\n\006Handle\030\002 \002(\005\022F\n\nDataSeries\030\003 \003(\01322.F"
    "utureDataPB.HistoryDataResponse.MarketDa"
    "taSeries\032f\n\020MarketDataSeries\022\020\n\010Contract"
    "\030\001 \002(\t\022@\n\004Data\030\002 \003(\01322.FutureDataPB.CTho"
    "stFtdcDepthMarketDataFieldStruct", 1832);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FutureData.proto", &protobuf_RegisterTypes);
  CThostFtdcDepthMarketDataFieldStruct::default_instance_ = new CThostFtdcDepthMarketDataFieldStruct();
  FutureData::default_instance_ = new FutureData();
  FutureData_MarketData::default_instance_ = new FutureData_MarketData();
  CurrentDataRequest::default_instance_ = new CurrentDataRequest();
  CurrentDataRequest_ContractInfo::default_instance_ = new CurrentDataRequest_ContractInfo();
  HistoryDataRequest::default_instance_ = new HistoryDataRequest();
  HistoryDataRequest_HistoryDataInfo::default_instance_ = new HistoryDataRequest_HistoryDataInfo();
  HistoryDataResponse::default_instance_ = new HistoryDataResponse();
  HistoryDataResponse_MarketDataSeries::default_instance_ = new HistoryDataResponse_MarketDataSeries();
  CThostFtdcDepthMarketDataFieldStruct::default_instance_->InitAsDefaultInstance();
  FutureData::default_instance_->InitAsDefaultInstance();
  FutureData_MarketData::default_instance_->InitAsDefaultInstance();
  CurrentDataRequest::default_instance_->InitAsDefaultInstance();
  CurrentDataRequest_ContractInfo::default_instance_->InitAsDefaultInstance();
  HistoryDataRequest::default_instance_->InitAsDefaultInstance();
  HistoryDataRequest_HistoryDataInfo::default_instance_->InitAsDefaultInstance();
  HistoryDataResponse::default_instance_->InitAsDefaultInstance();
  HistoryDataResponse_MarketDataSeries::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FutureData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FutureData_2eproto {
  StaticDescriptorInitializer_FutureData_2eproto() {
    protobuf_AddDesc_FutureData_2eproto();
  }
} static_descriptor_initializer_FutureData_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CThostFtdcDepthMarketDataFieldStruct::kTradingDayFieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kInstrumentIDFieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kExchangeIDFieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kExchangeInstIDFieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kLastPriceFieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kPreSettlementPriceFieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kPreClosePriceFieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kPreOpenInterestFieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kOpenPriceFieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kHighestPriceFieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kLowestPriceFieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kVolumeFieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kTurnoverFieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kOpenInterestFieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kClosePriceFieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kSettlementPriceFieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kUpperLimitPriceFieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kLowerLimitPriceFieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kPreDeltaFieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kCurrDeltaFieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kUpdateTimeFieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kUpdateMillisecFieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kBidPrice1FieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kBidVolume1FieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kAskPrice1FieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kAskVolume1FieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kBidPrice2FieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kBidVolume2FieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kAskPrice2FieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kAskVolume2FieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kBidPrice3FieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kBidVolume3FieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kAskPrice3FieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kAskVolume3FieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kBidPrice4FieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kBidVolume4FieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kAskPrice4FieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kAskVolume4FieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kBidPrice5FieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kBidVolume5FieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kAskPrice5FieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kAskVolume5FieldNumber;
const int CThostFtdcDepthMarketDataFieldStruct::kAveragePriceFieldNumber;
#endif  // !_MSC_VER

CThostFtdcDepthMarketDataFieldStruct::CThostFtdcDepthMarketDataFieldStruct()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CThostFtdcDepthMarketDataFieldStruct::InitAsDefaultInstance() {
}

CThostFtdcDepthMarketDataFieldStruct::CThostFtdcDepthMarketDataFieldStruct(const CThostFtdcDepthMarketDataFieldStruct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CThostFtdcDepthMarketDataFieldStruct::SharedCtor() {
  _cached_size_ = 0;
  tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instrumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeinstid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastprice_ = 0;
  presettlementprice_ = 0;
  precloseprice_ = 0;
  preopeninterest_ = 0;
  openprice_ = 0;
  highestprice_ = 0;
  lowestprice_ = 0;
  volume_ = 0;
  turnover_ = 0;
  openinterest_ = 0;
  closeprice_ = 0;
  settlementprice_ = 0;
  upperlimitprice_ = 0;
  lowerlimitprice_ = 0;
  predelta_ = 0;
  currdelta_ = 0;
  updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updatemillisec_ = 0;
  bidprice1_ = 0;
  bidvolume1_ = 0;
  askprice1_ = 0;
  askvolume1_ = 0;
  bidprice2_ = 0;
  bidvolume2_ = 0;
  askprice2_ = 0;
  askvolume2_ = 0;
  bidprice3_ = 0;
  bidvolume3_ = 0;
  askprice3_ = 0;
  askvolume3_ = 0;
  bidprice4_ = 0;
  bidvolume4_ = 0;
  askprice4_ = 0;
  askvolume4_ = 0;
  bidprice5_ = 0;
  bidvolume5_ = 0;
  askprice5_ = 0;
  askvolume5_ = 0;
  averageprice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CThostFtdcDepthMarketDataFieldStruct::~CThostFtdcDepthMarketDataFieldStruct() {
  SharedDtor();
}

void CThostFtdcDepthMarketDataFieldStruct::SharedDtor() {
  if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
    delete tradingday_;
  }
  if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete instrumentid_;
  }
  if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeid_;
  }
  if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeinstid_;
  }
  if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
    delete updatetime_;
  }
  if (this != default_instance_) {
  }
}

void CThostFtdcDepthMarketDataFieldStruct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CThostFtdcDepthMarketDataFieldStruct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CThostFtdcDepthMarketDataFieldStruct_descriptor_;
}

const CThostFtdcDepthMarketDataFieldStruct& CThostFtdcDepthMarketDataFieldStruct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureData_2eproto();  return *default_instance_;
}

CThostFtdcDepthMarketDataFieldStruct* CThostFtdcDepthMarketDataFieldStruct::default_instance_ = NULL;

CThostFtdcDepthMarketDataFieldStruct* CThostFtdcDepthMarketDataFieldStruct::New() const {
  return new CThostFtdcDepthMarketDataFieldStruct;
}

void CThostFtdcDepthMarketDataFieldStruct::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tradingday()) {
      if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
        tradingday_->clear();
      }
    }
    if (has_instrumentid()) {
      if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
        instrumentid_->clear();
      }
    }
    if (has_exchangeid()) {
      if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeid_->clear();
      }
    }
    if (has_exchangeinstid()) {
      if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeinstid_->clear();
      }
    }
    lastprice_ = 0;
    presettlementprice_ = 0;
    precloseprice_ = 0;
    preopeninterest_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    openprice_ = 0;
    highestprice_ = 0;
    lowestprice_ = 0;
    volume_ = 0;
    turnover_ = 0;
    openinterest_ = 0;
    closeprice_ = 0;
    settlementprice_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    upperlimitprice_ = 0;
    lowerlimitprice_ = 0;
    predelta_ = 0;
    currdelta_ = 0;
    if (has_updatetime()) {
      if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
        updatetime_->clear();
      }
    }
    updatemillisec_ = 0;
    bidprice1_ = 0;
    bidvolume1_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    askprice1_ = 0;
    askvolume1_ = 0;
    bidprice2_ = 0;
    bidvolume2_ = 0;
    askprice2_ = 0;
    askvolume2_ = 0;
    bidprice3_ = 0;
    bidvolume3_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    askprice3_ = 0;
    askvolume3_ = 0;
    bidprice4_ = 0;
    bidvolume4_ = 0;
    askprice4_ = 0;
    askvolume4_ = 0;
    bidprice5_ = 0;
    bidvolume5_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    askprice5_ = 0;
    askvolume5_ = 0;
    averageprice_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CThostFtdcDepthMarketDataFieldStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string TradingDay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_InstrumentID;
        break;
      }
      
      // required string InstrumentID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InstrumentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ExchangeID;
        break;
      }
      
      // required string ExchangeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ExchangeInstID;
        break;
      }
      
      // required string ExchangeInstID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeInstID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeinstid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeinstid().data(), this->exchangeinstid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_LastPrice;
        break;
      }
      
      // required double LastPrice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LastPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastprice_)));
          set_has_lastprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_PreSettlementPrice;
        break;
      }
      
      // required double PreSettlementPrice = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreSettlementPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &presettlementprice_)));
          set_has_presettlementprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_PreClosePrice;
        break;
      }
      
      // required double PreClosePrice = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreClosePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precloseprice_)));
          set_has_precloseprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_PreOpenInterest;
        break;
      }
      
      // required double PreOpenInterest = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreOpenInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preopeninterest_)));
          set_has_preopeninterest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_OpenPrice;
        break;
      }
      
      // required double OpenPrice = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_OpenPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));
          set_has_openprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_HighestPrice;
        break;
      }
      
      // required double HighestPrice = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_HighestPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &highestprice_)));
          set_has_highestprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_LowestPrice;
        break;
      }
      
      // required double LowestPrice = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LowestPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowestprice_)));
          set_has_lowestprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_Volume;
        break;
      }
      
      // required int32 Volume = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_Turnover;
        break;
      }
      
      // required double Turnover = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &turnover_)));
          set_has_turnover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_OpenInterest;
        break;
      }
      
      // required double OpenInterest = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_OpenInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openinterest_)));
          set_has_openinterest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_ClosePrice;
        break;
      }
      
      // required double ClosePrice = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ClosePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprice_)));
          set_has_closeprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_SettlementPrice;
        break;
      }
      
      // required double SettlementPrice = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SettlementPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settlementprice_)));
          set_has_settlementprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_UpperLimitPrice;
        break;
      }
      
      // required double UpperLimitPrice = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_UpperLimitPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upperlimitprice_)));
          set_has_upperlimitprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_LowerLimitPrice;
        break;
      }
      
      // required double LowerLimitPrice = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LowerLimitPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowerlimitprice_)));
          set_has_lowerlimitprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_PreDelta;
        break;
      }
      
      // required double PreDelta = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreDelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &predelta_)));
          set_has_predelta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_CurrDelta;
        break;
      }
      
      // required double CurrDelta = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CurrDelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currdelta_)));
          set_has_currdelta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_UpdateTime;
        break;
      }
      
      // required string UpdateTime = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UpdateTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updatetime().data(), this->updatetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_UpdateMillisec;
        break;
      }
      
      // required int32 UpdateMillisec = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateMillisec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updatemillisec_)));
          set_has_updatemillisec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_BidPrice1;
        break;
      }
      
      // required double BidPrice1 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BidPrice1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice1_)));
          set_has_bidprice1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_BidVolume1;
        break;
      }
      
      // required int32 BidVolume1 = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BidVolume1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume1_)));
          set_has_bidvolume1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_AskPrice1;
        break;
      }
      
      // required double AskPrice1 = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AskPrice1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice1_)));
          set_has_askprice1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_AskVolume1;
        break;
      }
      
      // required int32 AskVolume1 = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AskVolume1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume1_)));
          set_has_askvolume1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_BidPrice2;
        break;
      }
      
      // required double BidPrice2 = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BidPrice2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice2_)));
          set_has_bidprice2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_BidVolume2;
        break;
      }
      
      // required int32 BidVolume2 = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BidVolume2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume2_)));
          set_has_bidvolume2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_AskPrice2;
        break;
      }
      
      // required double AskPrice2 = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AskPrice2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice2_)));
          set_has_askprice2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_AskVolume2;
        break;
      }
      
      // required int32 AskVolume2 = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AskVolume2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume2_)));
          set_has_askvolume2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_BidPrice3;
        break;
      }
      
      // required double BidPrice3 = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BidPrice3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice3_)));
          set_has_bidprice3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_BidVolume3;
        break;
      }
      
      // required int32 BidVolume3 = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BidVolume3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume3_)));
          set_has_bidvolume3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_AskPrice3;
        break;
      }
      
      // required double AskPrice3 = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AskPrice3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice3_)));
          set_has_askprice3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_AskVolume3;
        break;
      }
      
      // required int32 AskVolume3 = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AskVolume3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume3_)));
          set_has_askvolume3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(281)) goto parse_BidPrice4;
        break;
      }
      
      // required double BidPrice4 = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BidPrice4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice4_)));
          set_has_bidprice4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_BidVolume4;
        break;
      }
      
      // required int32 BidVolume4 = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BidVolume4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume4_)));
          set_has_bidvolume4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(297)) goto parse_AskPrice4;
        break;
      }
      
      // required double AskPrice4 = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AskPrice4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice4_)));
          set_has_askprice4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_AskVolume4;
        break;
      }
      
      // required int32 AskVolume4 = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AskVolume4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume4_)));
          set_has_askvolume4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(313)) goto parse_BidPrice5;
        break;
      }
      
      // required double BidPrice5 = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BidPrice5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice5_)));
          set_has_bidprice5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_BidVolume5;
        break;
      }
      
      // required int32 BidVolume5 = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BidVolume5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume5_)));
          set_has_bidvolume5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(329)) goto parse_AskPrice5;
        break;
      }
      
      // required double AskPrice5 = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AskPrice5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice5_)));
          set_has_askprice5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_AskVolume5;
        break;
      }
      
      // required int32 AskVolume5 = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AskVolume5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume5_)));
          set_has_askvolume5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(345)) goto parse_AveragePrice;
        break;
      }
      
      // required double AveragePrice = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_AveragePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &averageprice_)));
          set_has_averageprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CThostFtdcDepthMarketDataFieldStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string TradingDay = 1;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tradingday(), output);
  }
  
  // required string InstrumentID = 2;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->instrumentid(), output);
  }
  
  // required string ExchangeID = 3;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->exchangeid(), output);
  }
  
  // required string ExchangeInstID = 4;
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->exchangeinstid(), output);
  }
  
  // required double LastPrice = 5;
  if (has_lastprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lastprice(), output);
  }
  
  // required double PreSettlementPrice = 6;
  if (has_presettlementprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->presettlementprice(), output);
  }
  
  // required double PreClosePrice = 7;
  if (has_precloseprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->precloseprice(), output);
  }
  
  // required double PreOpenInterest = 8;
  if (has_preopeninterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->preopeninterest(), output);
  }
  
  // required double OpenPrice = 9;
  if (has_openprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->openprice(), output);
  }
  
  // required double HighestPrice = 10;
  if (has_highestprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->highestprice(), output);
  }
  
  // required double LowestPrice = 11;
  if (has_lowestprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->lowestprice(), output);
  }
  
  // required int32 Volume = 12;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->volume(), output);
  }
  
  // required double Turnover = 13;
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->turnover(), output);
  }
  
  // required double OpenInterest = 14;
  if (has_openinterest()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->openinterest(), output);
  }
  
  // required double ClosePrice = 15;
  if (has_closeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->closeprice(), output);
  }
  
  // required double SettlementPrice = 16;
  if (has_settlementprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->settlementprice(), output);
  }
  
  // required double UpperLimitPrice = 17;
  if (has_upperlimitprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->upperlimitprice(), output);
  }
  
  // required double LowerLimitPrice = 18;
  if (has_lowerlimitprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->lowerlimitprice(), output);
  }
  
  // required double PreDelta = 19;
  if (has_predelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->predelta(), output);
  }
  
  // required double CurrDelta = 20;
  if (has_currdelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->currdelta(), output);
  }
  
  // required string UpdateTime = 21;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->updatetime(), output);
  }
  
  // required int32 UpdateMillisec = 22;
  if (has_updatemillisec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->updatemillisec(), output);
  }
  
  // required double BidPrice1 = 23;
  if (has_bidprice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->bidprice1(), output);
  }
  
  // required int32 BidVolume1 = 24;
  if (has_bidvolume1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->bidvolume1(), output);
  }
  
  // required double AskPrice1 = 25;
  if (has_askprice1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->askprice1(), output);
  }
  
  // required int32 AskVolume1 = 26;
  if (has_askvolume1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->askvolume1(), output);
  }
  
  // required double BidPrice2 = 27;
  if (has_bidprice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->bidprice2(), output);
  }
  
  // required int32 BidVolume2 = 28;
  if (has_bidvolume2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->bidvolume2(), output);
  }
  
  // required double AskPrice2 = 29;
  if (has_askprice2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->askprice2(), output);
  }
  
  // required int32 AskVolume2 = 30;
  if (has_askvolume2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->askvolume2(), output);
  }
  
  // required double BidPrice3 = 31;
  if (has_bidprice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->bidprice3(), output);
  }
  
  // required int32 BidVolume3 = 32;
  if (has_bidvolume3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->bidvolume3(), output);
  }
  
  // required double AskPrice3 = 33;
  if (has_askprice3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->askprice3(), output);
  }
  
  // required int32 AskVolume3 = 34;
  if (has_askvolume3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->askvolume3(), output);
  }
  
  // required double BidPrice4 = 35;
  if (has_bidprice4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->bidprice4(), output);
  }
  
  // required int32 BidVolume4 = 36;
  if (has_bidvolume4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->bidvolume4(), output);
  }
  
  // required double AskPrice4 = 37;
  if (has_askprice4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->askprice4(), output);
  }
  
  // required int32 AskVolume4 = 38;
  if (has_askvolume4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->askvolume4(), output);
  }
  
  // required double BidPrice5 = 39;
  if (has_bidprice5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->bidprice5(), output);
  }
  
  // required int32 BidVolume5 = 40;
  if (has_bidvolume5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->bidvolume5(), output);
  }
  
  // required double AskPrice5 = 41;
  if (has_askprice5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->askprice5(), output);
  }
  
  // required int32 AskVolume5 = 42;
  if (has_askvolume5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->askvolume5(), output);
  }
  
  // required double AveragePrice = 43;
  if (has_averageprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(43, this->averageprice(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CThostFtdcDepthMarketDataFieldStruct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string TradingDay = 1;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tradingday(), target);
  }
  
  // required string InstrumentID = 2;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instrumentid(), target);
  }
  
  // required string ExchangeID = 3;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchangeid(), target);
  }
  
  // required string ExchangeInstID = 4;
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exchangeinstid(), target);
  }
  
  // required double LastPrice = 5;
  if (has_lastprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lastprice(), target);
  }
  
  // required double PreSettlementPrice = 6;
  if (has_presettlementprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->presettlementprice(), target);
  }
  
  // required double PreClosePrice = 7;
  if (has_precloseprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->precloseprice(), target);
  }
  
  // required double PreOpenInterest = 8;
  if (has_preopeninterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->preopeninterest(), target);
  }
  
  // required double OpenPrice = 9;
  if (has_openprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->openprice(), target);
  }
  
  // required double HighestPrice = 10;
  if (has_highestprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->highestprice(), target);
  }
  
  // required double LowestPrice = 11;
  if (has_lowestprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->lowestprice(), target);
  }
  
  // required int32 Volume = 12;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->volume(), target);
  }
  
  // required double Turnover = 13;
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->turnover(), target);
  }
  
  // required double OpenInterest = 14;
  if (has_openinterest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->openinterest(), target);
  }
  
  // required double ClosePrice = 15;
  if (has_closeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->closeprice(), target);
  }
  
  // required double SettlementPrice = 16;
  if (has_settlementprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->settlementprice(), target);
  }
  
  // required double UpperLimitPrice = 17;
  if (has_upperlimitprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->upperlimitprice(), target);
  }
  
  // required double LowerLimitPrice = 18;
  if (has_lowerlimitprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->lowerlimitprice(), target);
  }
  
  // required double PreDelta = 19;
  if (has_predelta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->predelta(), target);
  }
  
  // required double CurrDelta = 20;
  if (has_currdelta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->currdelta(), target);
  }
  
  // required string UpdateTime = 21;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->updatetime(), target);
  }
  
  // required int32 UpdateMillisec = 22;
  if (has_updatemillisec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->updatemillisec(), target);
  }
  
  // required double BidPrice1 = 23;
  if (has_bidprice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->bidprice1(), target);
  }
  
  // required int32 BidVolume1 = 24;
  if (has_bidvolume1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->bidvolume1(), target);
  }
  
  // required double AskPrice1 = 25;
  if (has_askprice1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->askprice1(), target);
  }
  
  // required int32 AskVolume1 = 26;
  if (has_askvolume1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->askvolume1(), target);
  }
  
  // required double BidPrice2 = 27;
  if (has_bidprice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->bidprice2(), target);
  }
  
  // required int32 BidVolume2 = 28;
  if (has_bidvolume2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->bidvolume2(), target);
  }
  
  // required double AskPrice2 = 29;
  if (has_askprice2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->askprice2(), target);
  }
  
  // required int32 AskVolume2 = 30;
  if (has_askvolume2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->askvolume2(), target);
  }
  
  // required double BidPrice3 = 31;
  if (has_bidprice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->bidprice3(), target);
  }
  
  // required int32 BidVolume3 = 32;
  if (has_bidvolume3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->bidvolume3(), target);
  }
  
  // required double AskPrice3 = 33;
  if (has_askprice3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->askprice3(), target);
  }
  
  // required int32 AskVolume3 = 34;
  if (has_askvolume3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->askvolume3(), target);
  }
  
  // required double BidPrice4 = 35;
  if (has_bidprice4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->bidprice4(), target);
  }
  
  // required int32 BidVolume4 = 36;
  if (has_bidvolume4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->bidvolume4(), target);
  }
  
  // required double AskPrice4 = 37;
  if (has_askprice4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->askprice4(), target);
  }
  
  // required int32 AskVolume4 = 38;
  if (has_askvolume4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->askvolume4(), target);
  }
  
  // required double BidPrice5 = 39;
  if (has_bidprice5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->bidprice5(), target);
  }
  
  // required int32 BidVolume5 = 40;
  if (has_bidvolume5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->bidvolume5(), target);
  }
  
  // required double AskPrice5 = 41;
  if (has_askprice5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->askprice5(), target);
  }
  
  // required int32 AskVolume5 = 42;
  if (has_askvolume5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->askvolume5(), target);
  }
  
  // required double AveragePrice = 43;
  if (has_averageprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(43, this->averageprice(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CThostFtdcDepthMarketDataFieldStruct::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string TradingDay = 1;
    if (has_tradingday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradingday());
    }
    
    // required string InstrumentID = 2;
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }
    
    // required string ExchangeID = 3;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }
    
    // required string ExchangeInstID = 4;
    if (has_exchangeinstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeinstid());
    }
    
    // required double LastPrice = 5;
    if (has_lastprice()) {
      total_size += 1 + 8;
    }
    
    // required double PreSettlementPrice = 6;
    if (has_presettlementprice()) {
      total_size += 1 + 8;
    }
    
    // required double PreClosePrice = 7;
    if (has_precloseprice()) {
      total_size += 1 + 8;
    }
    
    // required double PreOpenInterest = 8;
    if (has_preopeninterest()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double OpenPrice = 9;
    if (has_openprice()) {
      total_size += 1 + 8;
    }
    
    // required double HighestPrice = 10;
    if (has_highestprice()) {
      total_size += 1 + 8;
    }
    
    // required double LowestPrice = 11;
    if (has_lowestprice()) {
      total_size += 1 + 8;
    }
    
    // required int32 Volume = 12;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }
    
    // required double Turnover = 13;
    if (has_turnover()) {
      total_size += 1 + 8;
    }
    
    // required double OpenInterest = 14;
    if (has_openinterest()) {
      total_size += 1 + 8;
    }
    
    // required double ClosePrice = 15;
    if (has_closeprice()) {
      total_size += 1 + 8;
    }
    
    // required double SettlementPrice = 16;
    if (has_settlementprice()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double UpperLimitPrice = 17;
    if (has_upperlimitprice()) {
      total_size += 2 + 8;
    }
    
    // required double LowerLimitPrice = 18;
    if (has_lowerlimitprice()) {
      total_size += 2 + 8;
    }
    
    // required double PreDelta = 19;
    if (has_predelta()) {
      total_size += 2 + 8;
    }
    
    // required double CurrDelta = 20;
    if (has_currdelta()) {
      total_size += 2 + 8;
    }
    
    // required string UpdateTime = 21;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updatetime());
    }
    
    // required int32 UpdateMillisec = 22;
    if (has_updatemillisec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updatemillisec());
    }
    
    // required double BidPrice1 = 23;
    if (has_bidprice1()) {
      total_size += 2 + 8;
    }
    
    // required int32 BidVolume1 = 24;
    if (has_bidvolume1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume1());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double AskPrice1 = 25;
    if (has_askprice1()) {
      total_size += 2 + 8;
    }
    
    // required int32 AskVolume1 = 26;
    if (has_askvolume1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume1());
    }
    
    // required double BidPrice2 = 27;
    if (has_bidprice2()) {
      total_size += 2 + 8;
    }
    
    // required int32 BidVolume2 = 28;
    if (has_bidvolume2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume2());
    }
    
    // required double AskPrice2 = 29;
    if (has_askprice2()) {
      total_size += 2 + 8;
    }
    
    // required int32 AskVolume2 = 30;
    if (has_askvolume2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume2());
    }
    
    // required double BidPrice3 = 31;
    if (has_bidprice3()) {
      total_size += 2 + 8;
    }
    
    // required int32 BidVolume3 = 32;
    if (has_bidvolume3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume3());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required double AskPrice3 = 33;
    if (has_askprice3()) {
      total_size += 2 + 8;
    }
    
    // required int32 AskVolume3 = 34;
    if (has_askvolume3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume3());
    }
    
    // required double BidPrice4 = 35;
    if (has_bidprice4()) {
      total_size += 2 + 8;
    }
    
    // required int32 BidVolume4 = 36;
    if (has_bidvolume4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume4());
    }
    
    // required double AskPrice4 = 37;
    if (has_askprice4()) {
      total_size += 2 + 8;
    }
    
    // required int32 AskVolume4 = 38;
    if (has_askvolume4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume4());
    }
    
    // required double BidPrice5 = 39;
    if (has_bidprice5()) {
      total_size += 2 + 8;
    }
    
    // required int32 BidVolume5 = 40;
    if (has_bidvolume5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidvolume5());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required double AskPrice5 = 41;
    if (has_askprice5()) {
      total_size += 2 + 8;
    }
    
    // required int32 AskVolume5 = 42;
    if (has_askvolume5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askvolume5());
    }
    
    // required double AveragePrice = 43;
    if (has_averageprice()) {
      total_size += 2 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CThostFtdcDepthMarketDataFieldStruct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CThostFtdcDepthMarketDataFieldStruct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CThostFtdcDepthMarketDataFieldStruct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CThostFtdcDepthMarketDataFieldStruct::MergeFrom(const CThostFtdcDepthMarketDataFieldStruct& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_instrumentid()) {
      set_instrumentid(from.instrumentid());
    }
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_exchangeinstid()) {
      set_exchangeinstid(from.exchangeinstid());
    }
    if (from.has_lastprice()) {
      set_lastprice(from.lastprice());
    }
    if (from.has_presettlementprice()) {
      set_presettlementprice(from.presettlementprice());
    }
    if (from.has_precloseprice()) {
      set_precloseprice(from.precloseprice());
    }
    if (from.has_preopeninterest()) {
      set_preopeninterest(from.preopeninterest());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_openprice()) {
      set_openprice(from.openprice());
    }
    if (from.has_highestprice()) {
      set_highestprice(from.highestprice());
    }
    if (from.has_lowestprice()) {
      set_lowestprice(from.lowestprice());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
    if (from.has_openinterest()) {
      set_openinterest(from.openinterest());
    }
    if (from.has_closeprice()) {
      set_closeprice(from.closeprice());
    }
    if (from.has_settlementprice()) {
      set_settlementprice(from.settlementprice());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_upperlimitprice()) {
      set_upperlimitprice(from.upperlimitprice());
    }
    if (from.has_lowerlimitprice()) {
      set_lowerlimitprice(from.lowerlimitprice());
    }
    if (from.has_predelta()) {
      set_predelta(from.predelta());
    }
    if (from.has_currdelta()) {
      set_currdelta(from.currdelta());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_updatemillisec()) {
      set_updatemillisec(from.updatemillisec());
    }
    if (from.has_bidprice1()) {
      set_bidprice1(from.bidprice1());
    }
    if (from.has_bidvolume1()) {
      set_bidvolume1(from.bidvolume1());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_askprice1()) {
      set_askprice1(from.askprice1());
    }
    if (from.has_askvolume1()) {
      set_askvolume1(from.askvolume1());
    }
    if (from.has_bidprice2()) {
      set_bidprice2(from.bidprice2());
    }
    if (from.has_bidvolume2()) {
      set_bidvolume2(from.bidvolume2());
    }
    if (from.has_askprice2()) {
      set_askprice2(from.askprice2());
    }
    if (from.has_askvolume2()) {
      set_askvolume2(from.askvolume2());
    }
    if (from.has_bidprice3()) {
      set_bidprice3(from.bidprice3());
    }
    if (from.has_bidvolume3()) {
      set_bidvolume3(from.bidvolume3());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_askprice3()) {
      set_askprice3(from.askprice3());
    }
    if (from.has_askvolume3()) {
      set_askvolume3(from.askvolume3());
    }
    if (from.has_bidprice4()) {
      set_bidprice4(from.bidprice4());
    }
    if (from.has_bidvolume4()) {
      set_bidvolume4(from.bidvolume4());
    }
    if (from.has_askprice4()) {
      set_askprice4(from.askprice4());
    }
    if (from.has_askvolume4()) {
      set_askvolume4(from.askvolume4());
    }
    if (from.has_bidprice5()) {
      set_bidprice5(from.bidprice5());
    }
    if (from.has_bidvolume5()) {
      set_bidvolume5(from.bidvolume5());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_askprice5()) {
      set_askprice5(from.askprice5());
    }
    if (from.has_askvolume5()) {
      set_askvolume5(from.askvolume5());
    }
    if (from.has_averageprice()) {
      set_averageprice(from.averageprice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CThostFtdcDepthMarketDataFieldStruct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CThostFtdcDepthMarketDataFieldStruct::CopyFrom(const CThostFtdcDepthMarketDataFieldStruct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CThostFtdcDepthMarketDataFieldStruct::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x000007ff) != 0x000007ff) return false;
  
  return true;
}

void CThostFtdcDepthMarketDataFieldStruct::Swap(CThostFtdcDepthMarketDataFieldStruct* other) {
  if (other != this) {
    std::swap(tradingday_, other->tradingday_);
    std::swap(instrumentid_, other->instrumentid_);
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(exchangeinstid_, other->exchangeinstid_);
    std::swap(lastprice_, other->lastprice_);
    std::swap(presettlementprice_, other->presettlementprice_);
    std::swap(precloseprice_, other->precloseprice_);
    std::swap(preopeninterest_, other->preopeninterest_);
    std::swap(openprice_, other->openprice_);
    std::swap(highestprice_, other->highestprice_);
    std::swap(lowestprice_, other->lowestprice_);
    std::swap(volume_, other->volume_);
    std::swap(turnover_, other->turnover_);
    std::swap(openinterest_, other->openinterest_);
    std::swap(closeprice_, other->closeprice_);
    std::swap(settlementprice_, other->settlementprice_);
    std::swap(upperlimitprice_, other->upperlimitprice_);
    std::swap(lowerlimitprice_, other->lowerlimitprice_);
    std::swap(predelta_, other->predelta_);
    std::swap(currdelta_, other->currdelta_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(updatemillisec_, other->updatemillisec_);
    std::swap(bidprice1_, other->bidprice1_);
    std::swap(bidvolume1_, other->bidvolume1_);
    std::swap(askprice1_, other->askprice1_);
    std::swap(askvolume1_, other->askvolume1_);
    std::swap(bidprice2_, other->bidprice2_);
    std::swap(bidvolume2_, other->bidvolume2_);
    std::swap(askprice2_, other->askprice2_);
    std::swap(askvolume2_, other->askvolume2_);
    std::swap(bidprice3_, other->bidprice3_);
    std::swap(bidvolume3_, other->bidvolume3_);
    std::swap(askprice3_, other->askprice3_);
    std::swap(askvolume3_, other->askvolume3_);
    std::swap(bidprice4_, other->bidprice4_);
    std::swap(bidvolume4_, other->bidvolume4_);
    std::swap(askprice4_, other->askprice4_);
    std::swap(askvolume4_, other->askvolume4_);
    std::swap(bidprice5_, other->bidprice5_);
    std::swap(bidvolume5_, other->bidvolume5_);
    std::swap(askprice5_, other->askprice5_);
    std::swap(askvolume5_, other->askvolume5_);
    std::swap(averageprice_, other->averageprice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CThostFtdcDepthMarketDataFieldStruct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CThostFtdcDepthMarketDataFieldStruct_descriptor_;
  metadata.reflection = CThostFtdcDepthMarketDataFieldStruct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FutureData_MarketData::kDateFieldNumber;
const int FutureData_MarketData::kTimeFieldNumber;
const int FutureData_MarketData::kDataFieldNumber;
#endif  // !_MSC_VER

FutureData_MarketData::FutureData_MarketData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FutureData_MarketData::InitAsDefaultInstance() {
  data_ = const_cast< ::FutureDataPB::CThostFtdcDepthMarketDataFieldStruct*>(&::FutureDataPB::CThostFtdcDepthMarketDataFieldStruct::default_instance());
}

FutureData_MarketData::FutureData_MarketData(const FutureData_MarketData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FutureData_MarketData::SharedCtor() {
  _cached_size_ = 0;
  date_ = 0;
  time_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FutureData_MarketData::~FutureData_MarketData() {
  SharedDtor();
}

void FutureData_MarketData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void FutureData_MarketData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FutureData_MarketData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FutureData_MarketData_descriptor_;
}

const FutureData_MarketData& FutureData_MarketData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureData_2eproto();  return *default_instance_;
}

FutureData_MarketData* FutureData_MarketData::default_instance_ = NULL;

FutureData_MarketData* FutureData_MarketData::New() const {
  return new FutureData_MarketData;
}

void FutureData_MarketData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    date_ = 0;
    time_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::FutureDataPB::CThostFtdcDepthMarketDataFieldStruct::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FutureData_MarketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Date = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Time;
        break;
      }
      
      // required int32 Time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Data;
        break;
      }
      
      // required .FutureDataPB.CThostFtdcDepthMarketDataFieldStruct Data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FutureData_MarketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->date(), output);
  }
  
  // required int32 Time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }
  
  // required .FutureDataPB.CThostFtdcDepthMarketDataFieldStruct Data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FutureData_MarketData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Date = 1;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->date(), target);
  }
  
  // required int32 Time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }
  
  // required .FutureDataPB.CThostFtdcDepthMarketDataFieldStruct Data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FutureData_MarketData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Date = 1;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date());
    }
    
    // required int32 Time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // required .FutureDataPB.CThostFtdcDepthMarketDataFieldStruct Data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FutureData_MarketData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FutureData_MarketData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FutureData_MarketData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FutureData_MarketData::MergeFrom(const FutureData_MarketData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_data()) {
      mutable_data()->::FutureDataPB::CThostFtdcDepthMarketDataFieldStruct::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FutureData_MarketData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureData_MarketData::CopyFrom(const FutureData_MarketData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureData_MarketData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void FutureData_MarketData::Swap(FutureData_MarketData* other) {
  if (other != this) {
    std::swap(date_, other->date_);
    std::swap(time_, other->time_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FutureData_MarketData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FutureData_MarketData_descriptor_;
  metadata.reflection = FutureData_MarketData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int FutureData::kTimestampFieldNumber;
const int FutureData::kHandleFieldNumber;
const int FutureData::kDataPackFieldNumber;
#endif  // !_MSC_VER

FutureData::FutureData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FutureData::InitAsDefaultInstance() {
}

FutureData::FutureData(const FutureData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FutureData::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  handle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FutureData::~FutureData() {
  SharedDtor();
}

void FutureData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FutureData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FutureData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FutureData_descriptor_;
}

const FutureData& FutureData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureData_2eproto();  return *default_instance_;
}

FutureData* FutureData::default_instance_ = NULL;

FutureData* FutureData::New() const {
  return new FutureData;
}

void FutureData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0;
    handle_ = 0;
  }
  datapack_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FutureData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Handle;
        break;
      }
      
      // required int32 Handle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DataPack;
        break;
      }
      
      // repeated .FutureDataPB.FutureData.MarketData DataPack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DataPack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datapack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DataPack;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FutureData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timestamp(), output);
  }
  
  // required int32 Handle = 2;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->handle(), output);
  }
  
  // repeated .FutureDataPB.FutureData.MarketData DataPack = 3;
  for (int i = 0; i < this->datapack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->datapack(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FutureData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timestamp(), target);
  }
  
  // required int32 Handle = 2;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->handle(), target);
  }
  
  // repeated .FutureDataPB.FutureData.MarketData DataPack = 3;
  for (int i = 0; i < this->datapack_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->datapack(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FutureData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }
    
    // required int32 Handle = 2;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handle());
    }
    
  }
  // repeated .FutureDataPB.FutureData.MarketData DataPack = 3;
  total_size += 1 * this->datapack_size();
  for (int i = 0; i < this->datapack_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datapack(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FutureData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FutureData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FutureData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FutureData::MergeFrom(const FutureData& from) {
  GOOGLE_CHECK_NE(&from, this);
  datapack_.MergeFrom(from.datapack_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FutureData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FutureData::CopyFrom(const FutureData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FutureData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < datapack_size(); i++) {
    if (!this->datapack(i).IsInitialized()) return false;
  }
  return true;
}

void FutureData::Swap(FutureData* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(handle_, other->handle_);
    datapack_.Swap(&other->datapack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FutureData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FutureData_descriptor_;
  metadata.reflection = FutureData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CurrentDataRequest_ContractInfo::kDateFieldNumber;
const int CurrentDataRequest_ContractInfo::kTimeFieldNumber;
const int CurrentDataRequest_ContractInfo::kContractFieldNumber;
#endif  // !_MSC_VER

CurrentDataRequest_ContractInfo::CurrentDataRequest_ContractInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CurrentDataRequest_ContractInfo::InitAsDefaultInstance() {
}

CurrentDataRequest_ContractInfo::CurrentDataRequest_ContractInfo(const CurrentDataRequest_ContractInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CurrentDataRequest_ContractInfo::SharedCtor() {
  _cached_size_ = 0;
  date_ = 0;
  time_ = 0;
  contract_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrentDataRequest_ContractInfo::~CurrentDataRequest_ContractInfo() {
  SharedDtor();
}

void CurrentDataRequest_ContractInfo::SharedDtor() {
  if (contract_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_;
  }
  if (this != default_instance_) {
  }
}

void CurrentDataRequest_ContractInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrentDataRequest_ContractInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrentDataRequest_ContractInfo_descriptor_;
}

const CurrentDataRequest_ContractInfo& CurrentDataRequest_ContractInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureData_2eproto();  return *default_instance_;
}

CurrentDataRequest_ContractInfo* CurrentDataRequest_ContractInfo::default_instance_ = NULL;

CurrentDataRequest_ContractInfo* CurrentDataRequest_ContractInfo::New() const {
  return new CurrentDataRequest_ContractInfo;
}

void CurrentDataRequest_ContractInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    date_ = 0;
    time_ = 0;
    if (has_contract()) {
      if (contract_ != &::google::protobuf::internal::kEmptyString) {
        contract_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurrentDataRequest_ContractInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Date = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Time;
        break;
      }
      
      // required int32 Time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Contract;
        break;
      }
      
      // required string Contract = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Contract:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contract().data(), this->contract().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CurrentDataRequest_ContractInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->date(), output);
  }
  
  // required int32 Time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }
  
  // required string Contract = 3;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->contract(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CurrentDataRequest_ContractInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Date = 1;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->date(), target);
  }
  
  // required int32 Time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }
  
  // required string Contract = 3;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->contract(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CurrentDataRequest_ContractInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Date = 1;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date());
    }
    
    // required int32 Time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // required string Contract = 3;
    if (has_contract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contract());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrentDataRequest_ContractInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurrentDataRequest_ContractInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurrentDataRequest_ContractInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurrentDataRequest_ContractInfo::MergeFrom(const CurrentDataRequest_ContractInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_contract()) {
      set_contract(from.contract());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurrentDataRequest_ContractInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentDataRequest_ContractInfo::CopyFrom(const CurrentDataRequest_ContractInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentDataRequest_ContractInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CurrentDataRequest_ContractInfo::Swap(CurrentDataRequest_ContractInfo* other) {
  if (other != this) {
    std::swap(date_, other->date_);
    std::swap(time_, other->time_);
    std::swap(contract_, other->contract_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurrentDataRequest_ContractInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrentDataRequest_ContractInfo_descriptor_;
  metadata.reflection = CurrentDataRequest_ContractInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CurrentDataRequest::kTimeStampFieldNumber;
const int CurrentDataRequest::kHandleFieldNumber;
const int CurrentDataRequest::kContractListFieldNumber;
#endif  // !_MSC_VER

CurrentDataRequest::CurrentDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CurrentDataRequest::InitAsDefaultInstance() {
}

CurrentDataRequest::CurrentDataRequest(const CurrentDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CurrentDataRequest::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  handle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrentDataRequest::~CurrentDataRequest() {
  SharedDtor();
}

void CurrentDataRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurrentDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrentDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrentDataRequest_descriptor_;
}

const CurrentDataRequest& CurrentDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureData_2eproto();  return *default_instance_;
}

CurrentDataRequest* CurrentDataRequest::default_instance_ = NULL;

CurrentDataRequest* CurrentDataRequest::New() const {
  return new CurrentDataRequest;
}

void CurrentDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0;
    handle_ = 0;
  }
  contractlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CurrentDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 TimeStamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Handle;
        break;
      }
      
      // required int32 Handle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ContractList;
        break;
      }
      
      // repeated .FutureDataPB.CurrentDataRequest.ContractInfo ContractList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContractList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contractlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ContractList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CurrentDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 TimeStamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timestamp(), output);
  }
  
  // required int32 Handle = 2;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->handle(), output);
  }
  
  // repeated .FutureDataPB.CurrentDataRequest.ContractInfo ContractList = 3;
  for (int i = 0; i < this->contractlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->contractlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CurrentDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 TimeStamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timestamp(), target);
  }
  
  // required int32 Handle = 2;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->handle(), target);
  }
  
  // repeated .FutureDataPB.CurrentDataRequest.ContractInfo ContractList = 3;
  for (int i = 0; i < this->contractlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->contractlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CurrentDataRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 TimeStamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }
    
    // required int32 Handle = 2;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handle());
    }
    
  }
  // repeated .FutureDataPB.CurrentDataRequest.ContractInfo ContractList = 3;
  total_size += 1 * this->contractlist_size();
  for (int i = 0; i < this->contractlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contractlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrentDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CurrentDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CurrentDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CurrentDataRequest::MergeFrom(const CurrentDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  contractlist_.MergeFrom(from.contractlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CurrentDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrentDataRequest::CopyFrom(const CurrentDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < contractlist_size(); i++) {
    if (!this->contractlist(i).IsInitialized()) return false;
  }
  return true;
}

void CurrentDataRequest::Swap(CurrentDataRequest* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(handle_, other->handle_);
    contractlist_.Swap(&other->contractlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CurrentDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrentDataRequest_descriptor_;
  metadata.reflection = CurrentDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryDataRequest_HistoryDataInfo::kContractFieldNumber;
const int HistoryDataRequest_HistoryDataInfo::kStartDateFieldNumber;
const int HistoryDataRequest_HistoryDataInfo::kStartTimeFieldNumber;
const int HistoryDataRequest_HistoryDataInfo::kEndDateFieldNumber;
const int HistoryDataRequest_HistoryDataInfo::kEndTimeFieldNumber;
#endif  // !_MSC_VER

HistoryDataRequest_HistoryDataInfo::HistoryDataRequest_HistoryDataInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryDataRequest_HistoryDataInfo::InitAsDefaultInstance() {
}

HistoryDataRequest_HistoryDataInfo::HistoryDataRequest_HistoryDataInfo(const HistoryDataRequest_HistoryDataInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryDataRequest_HistoryDataInfo::SharedCtor() {
  _cached_size_ = 0;
  contract_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  startdate_ = 0;
  starttime_ = 0;
  enddate_ = 0;
  endtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryDataRequest_HistoryDataInfo::~HistoryDataRequest_HistoryDataInfo() {
  SharedDtor();
}

void HistoryDataRequest_HistoryDataInfo::SharedDtor() {
  if (contract_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_;
  }
  if (this != default_instance_) {
  }
}

void HistoryDataRequest_HistoryDataInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryDataRequest_HistoryDataInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryDataRequest_HistoryDataInfo_descriptor_;
}

const HistoryDataRequest_HistoryDataInfo& HistoryDataRequest_HistoryDataInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureData_2eproto();  return *default_instance_;
}

HistoryDataRequest_HistoryDataInfo* HistoryDataRequest_HistoryDataInfo::default_instance_ = NULL;

HistoryDataRequest_HistoryDataInfo* HistoryDataRequest_HistoryDataInfo::New() const {
  return new HistoryDataRequest_HistoryDataInfo;
}

void HistoryDataRequest_HistoryDataInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_contract()) {
      if (contract_ != &::google::protobuf::internal::kEmptyString) {
        contract_->clear();
      }
    }
    startdate_ = 0;
    starttime_ = 0;
    enddate_ = 0;
    endtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryDataRequest_HistoryDataInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Contract = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contract().data(), this->contract().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_StartDate;
        break;
      }
      
      // required int32 StartDate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StartDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startdate_)));
          set_has_startdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_StartTime;
        break;
      }
      
      // required int32 StartTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_EndDate;
        break;
      }
      
      // required int32 EndDate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enddate_)));
          set_has_enddate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_EndTime;
        break;
      }
      
      // required int32 EndTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryDataRequest_HistoryDataInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Contract = 1;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->contract(), output);
  }
  
  // required int32 StartDate = 2;
  if (has_startdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->startdate(), output);
  }
  
  // required int32 StartTime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->starttime(), output);
  }
  
  // required int32 EndDate = 4;
  if (has_enddate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->enddate(), output);
  }
  
  // required int32 EndTime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->endtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryDataRequest_HistoryDataInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Contract = 1;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->contract(), target);
  }
  
  // required int32 StartDate = 2;
  if (has_startdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->startdate(), target);
  }
  
  // required int32 StartTime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->starttime(), target);
  }
  
  // required int32 EndDate = 4;
  if (has_enddate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->enddate(), target);
  }
  
  // required int32 EndTime = 5;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->endtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryDataRequest_HistoryDataInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Contract = 1;
    if (has_contract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contract());
    }
    
    // required int32 StartDate = 2;
    if (has_startdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startdate());
    }
    
    // required int32 StartTime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }
    
    // required int32 EndDate = 4;
    if (has_enddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enddate());
    }
    
    // required int32 EndTime = 5;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryDataRequest_HistoryDataInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryDataRequest_HistoryDataInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryDataRequest_HistoryDataInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryDataRequest_HistoryDataInfo::MergeFrom(const HistoryDataRequest_HistoryDataInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contract()) {
      set_contract(from.contract());
    }
    if (from.has_startdate()) {
      set_startdate(from.startdate());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_enddate()) {
      set_enddate(from.enddate());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryDataRequest_HistoryDataInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryDataRequest_HistoryDataInfo::CopyFrom(const HistoryDataRequest_HistoryDataInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryDataRequest_HistoryDataInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void HistoryDataRequest_HistoryDataInfo::Swap(HistoryDataRequest_HistoryDataInfo* other) {
  if (other != this) {
    std::swap(contract_, other->contract_);
    std::swap(startdate_, other->startdate_);
    std::swap(starttime_, other->starttime_);
    std::swap(enddate_, other->enddate_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryDataRequest_HistoryDataInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryDataRequest_HistoryDataInfo_descriptor_;
  metadata.reflection = HistoryDataRequest_HistoryDataInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int HistoryDataRequest::kTimeStampFieldNumber;
const int HistoryDataRequest::kHandleFieldNumber;
const int HistoryDataRequest::kDataInfoFieldNumber;
#endif  // !_MSC_VER

HistoryDataRequest::HistoryDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryDataRequest::InitAsDefaultInstance() {
}

HistoryDataRequest::HistoryDataRequest(const HistoryDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryDataRequest::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  handle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryDataRequest::~HistoryDataRequest() {
  SharedDtor();
}

void HistoryDataRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryDataRequest_descriptor_;
}

const HistoryDataRequest& HistoryDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureData_2eproto();  return *default_instance_;
}

HistoryDataRequest* HistoryDataRequest::default_instance_ = NULL;

HistoryDataRequest* HistoryDataRequest::New() const {
  return new HistoryDataRequest;
}

void HistoryDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0;
    handle_ = 0;
  }
  datainfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 TimeStamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Handle;
        break;
      }
      
      // required int32 Handle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DataInfo;
        break;
      }
      
      // repeated .FutureDataPB.HistoryDataRequest.HistoryDataInfo DataInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DataInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datainfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DataInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 TimeStamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timestamp(), output);
  }
  
  // required int32 Handle = 2;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->handle(), output);
  }
  
  // repeated .FutureDataPB.HistoryDataRequest.HistoryDataInfo DataInfo = 3;
  for (int i = 0; i < this->datainfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->datainfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 TimeStamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timestamp(), target);
  }
  
  // required int32 Handle = 2;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->handle(), target);
  }
  
  // repeated .FutureDataPB.HistoryDataRequest.HistoryDataInfo DataInfo = 3;
  for (int i = 0; i < this->datainfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->datainfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryDataRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 TimeStamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }
    
    // required int32 Handle = 2;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handle());
    }
    
  }
  // repeated .FutureDataPB.HistoryDataRequest.HistoryDataInfo DataInfo = 3;
  total_size += 1 * this->datainfo_size();
  for (int i = 0; i < this->datainfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datainfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryDataRequest::MergeFrom(const HistoryDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  datainfo_.MergeFrom(from.datainfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryDataRequest::CopyFrom(const HistoryDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < datainfo_size(); i++) {
    if (!this->datainfo(i).IsInitialized()) return false;
  }
  return true;
}

void HistoryDataRequest::Swap(HistoryDataRequest* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(handle_, other->handle_);
    datainfo_.Swap(&other->datainfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryDataRequest_descriptor_;
  metadata.reflection = HistoryDataRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryDataResponse_MarketDataSeries::kContractFieldNumber;
const int HistoryDataResponse_MarketDataSeries::kDataFieldNumber;
#endif  // !_MSC_VER

HistoryDataResponse_MarketDataSeries::HistoryDataResponse_MarketDataSeries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryDataResponse_MarketDataSeries::InitAsDefaultInstance() {
}

HistoryDataResponse_MarketDataSeries::HistoryDataResponse_MarketDataSeries(const HistoryDataResponse_MarketDataSeries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryDataResponse_MarketDataSeries::SharedCtor() {
  _cached_size_ = 0;
  contract_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryDataResponse_MarketDataSeries::~HistoryDataResponse_MarketDataSeries() {
  SharedDtor();
}

void HistoryDataResponse_MarketDataSeries::SharedDtor() {
  if (contract_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_;
  }
  if (this != default_instance_) {
  }
}

void HistoryDataResponse_MarketDataSeries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryDataResponse_MarketDataSeries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryDataResponse_MarketDataSeries_descriptor_;
}

const HistoryDataResponse_MarketDataSeries& HistoryDataResponse_MarketDataSeries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureData_2eproto();  return *default_instance_;
}

HistoryDataResponse_MarketDataSeries* HistoryDataResponse_MarketDataSeries::default_instance_ = NULL;

HistoryDataResponse_MarketDataSeries* HistoryDataResponse_MarketDataSeries::New() const {
  return new HistoryDataResponse_MarketDataSeries;
}

void HistoryDataResponse_MarketDataSeries::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_contract()) {
      if (contract_ != &::google::protobuf::internal::kEmptyString) {
        contract_->clear();
      }
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryDataResponse_MarketDataSeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Contract = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contract()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contract().data(), this->contract().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }
      
      // repeated .FutureDataPB.CThostFtdcDepthMarketDataFieldStruct Data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryDataResponse_MarketDataSeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Contract = 1;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->contract(), output);
  }
  
  // repeated .FutureDataPB.CThostFtdcDepthMarketDataFieldStruct Data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryDataResponse_MarketDataSeries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string Contract = 1;
  if (has_contract()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contract().data(), this->contract().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->contract(), target);
  }
  
  // repeated .FutureDataPB.CThostFtdcDepthMarketDataFieldStruct Data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryDataResponse_MarketDataSeries::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Contract = 1;
    if (has_contract()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contract());
    }
    
  }
  // repeated .FutureDataPB.CThostFtdcDepthMarketDataFieldStruct Data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryDataResponse_MarketDataSeries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryDataResponse_MarketDataSeries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryDataResponse_MarketDataSeries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryDataResponse_MarketDataSeries::MergeFrom(const HistoryDataResponse_MarketDataSeries& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contract()) {
      set_contract(from.contract());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryDataResponse_MarketDataSeries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryDataResponse_MarketDataSeries::CopyFrom(const HistoryDataResponse_MarketDataSeries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryDataResponse_MarketDataSeries::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void HistoryDataResponse_MarketDataSeries::Swap(HistoryDataResponse_MarketDataSeries* other) {
  if (other != this) {
    std::swap(contract_, other->contract_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryDataResponse_MarketDataSeries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryDataResponse_MarketDataSeries_descriptor_;
  metadata.reflection = HistoryDataResponse_MarketDataSeries_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int HistoryDataResponse::kTimestampFieldNumber;
const int HistoryDataResponse::kHandleFieldNumber;
const int HistoryDataResponse::kDataSeriesFieldNumber;
#endif  // !_MSC_VER

HistoryDataResponse::HistoryDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryDataResponse::InitAsDefaultInstance() {
}

HistoryDataResponse::HistoryDataResponse(const HistoryDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryDataResponse::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  handle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryDataResponse::~HistoryDataResponse() {
  SharedDtor();
}

void HistoryDataResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryDataResponse_descriptor_;
}

const HistoryDataResponse& HistoryDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureData_2eproto();  return *default_instance_;
}

HistoryDataResponse* HistoryDataResponse::default_instance_ = NULL;

HistoryDataResponse* HistoryDataResponse::New() const {
  return new HistoryDataResponse;
}

void HistoryDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0;
    handle_ = 0;
  }
  dataseries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Handle;
        break;
      }
      
      // required int32 Handle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DataSeries;
        break;
      }
      
      // repeated .FutureDataPB.HistoryDataResponse.MarketDataSeries DataSeries = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DataSeries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dataseries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DataSeries;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timestamp(), output);
  }
  
  // required int32 Handle = 2;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->handle(), output);
  }
  
  // repeated .FutureDataPB.HistoryDataResponse.MarketDataSeries DataSeries = 3;
  for (int i = 0; i < this->dataseries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dataseries(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timestamp(), target);
  }
  
  // required int32 Handle = 2;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->handle(), target);
  }
  
  // repeated .FutureDataPB.HistoryDataResponse.MarketDataSeries DataSeries = 3;
  for (int i = 0; i < this->dataseries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dataseries(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryDataResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }
    
    // required int32 Handle = 2;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handle());
    }
    
  }
  // repeated .FutureDataPB.HistoryDataResponse.MarketDataSeries DataSeries = 3;
  total_size += 1 * this->dataseries_size();
  for (int i = 0; i < this->dataseries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dataseries(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryDataResponse::MergeFrom(const HistoryDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  dataseries_.MergeFrom(from.dataseries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryDataResponse::CopyFrom(const HistoryDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryDataResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < dataseries_size(); i++) {
    if (!this->dataseries(i).IsInitialized()) return false;
  }
  return true;
}

void HistoryDataResponse::Swap(HistoryDataResponse* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(handle_, other->handle_);
    dataseries_.Swap(&other->dataseries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryDataResponse_descriptor_;
  metadata.reflection = HistoryDataResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FutureDataPB

// @@protoc_insertion_point(global_scope)
