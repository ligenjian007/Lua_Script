// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stdafx.h"
#include "VirtualDriverFrame.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace VirtualDriverFramePB {

namespace {

const ::google::protobuf::Descriptor* VirtualDriverDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VirtualDriverDevice_reflection_ = NULL;
const ::google::protobuf::Descriptor* VirtualDriverFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VirtualDriverFrame_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_VirtualDriverFrame_2epb_2eproto() {
  protobuf_AddDesc_VirtualDriverFrame_2epb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "VirtualDriverFrame.pb.proto");
  GOOGLE_CHECK(file != NULL);
  VirtualDriverDevice_descriptor_ = file->message_type(0);
  static const int VirtualDriverDevice_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualDriverDevice, funcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualDriverDevice, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualDriverDevice, sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualDriverDevice, drivername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualDriverDevice, devicename_),
  };
  VirtualDriverDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VirtualDriverDevice_descriptor_,
      VirtualDriverDevice::default_instance_,
      VirtualDriverDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualDriverDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualDriverDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VirtualDriverDevice));
  VirtualDriverFrame_descriptor_ = file->message_type(1);
  static const int VirtualDriverFrame_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualDriverFrame, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualDriverFrame, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualDriverFrame, csuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualDriverFrame, reqdev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualDriverFrame, majorcmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualDriverFrame, minorcmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualDriverFrame, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualDriverFrame, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualDriverFrame, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualDriverFrame, requestqueuehandle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualDriverFrame, statecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualDriverFrame, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualDriverFrame, errorinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualDriverFrame, body_),
  };
  VirtualDriverFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VirtualDriverFrame_descriptor_,
      VirtualDriverFrame::default_instance_,
      VirtualDriverFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualDriverFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualDriverFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VirtualDriverFrame));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_VirtualDriverFrame_2epb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VirtualDriverDevice_descriptor_, &VirtualDriverDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VirtualDriverFrame_descriptor_, &VirtualDriverFrame::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_VirtualDriverFrame_2epb_2eproto() {
  delete VirtualDriverDevice::default_instance_;
  delete VirtualDriverDevice_reflection_;
  delete VirtualDriverFrame::default_instance_;
  delete VirtualDriverFrame_reflection_;
}

void protobuf_AddDesc_VirtualDriverFrame_2epb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033VirtualDriverFrame.pb.proto\022\024VirtualDr"
    "iverFramePB\"z\n\023VirtualDriverDevice\022\021\n\006Fu"
    "ncID\030\001 \002(\005:\0010\022\023\n\010Location\030\002 \002(\005:\0010\022\017\n\004Sy"
    "nc\030\003 \002(\005:\0010\022\024\n\nDriverName\030\004 \001(\014:\000\022\024\n\nDev"
    "iceName\030\005 \001(\014:\000\"\335\002\n\022VirtualDriverFrame\022\021"
    "\n\007Version\030\001 \002(\014:\000\022\016\n\003UID\030\002 \002(\r:\0010\022\020\n\005CSU"
    "ID\030\003 \002(\r:\0010\0229\n\006ReqDev\030\004 \002(\0132).VirtualDri"
    "verFramePB.VirtualDriverDevice\022\023\n\010MajorC"
    "md\030\005 \002(\005:\0010\022\023\n\010MinorCmd\030\006 \002(\005:\0010\022\025\n\007Time"
    "Out\030\007 \001(\005:\0043000\022\022\n\010Username\030\010 \002(\014:\000\022\022\n\010P"
    "assword\030\t \002(\014:\000\022\035\n\022RequestQueueHandle\030\n "
    "\001(\r:\0010\022\024\n\tStateCode\030\013 \001(\005:\0010\022\024\n\tErrorCod"
    "e\030\014 \001(\005:\0010\022\023\n\tErrorInfo\030\r \001(\014:\000\022\016\n\004Body\030"
    "3 \001(\014:\000", 527);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "VirtualDriverFrame.pb.proto", &protobuf_RegisterTypes);
  VirtualDriverDevice::default_instance_ = new VirtualDriverDevice();
  VirtualDriverFrame::default_instance_ = new VirtualDriverFrame();
  VirtualDriverDevice::default_instance_->InitAsDefaultInstance();
  VirtualDriverFrame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_VirtualDriverFrame_2epb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_VirtualDriverFrame_2epb_2eproto {
  StaticDescriptorInitializer_VirtualDriverFrame_2epb_2eproto() {
    protobuf_AddDesc_VirtualDriverFrame_2epb_2eproto();
  }
} static_descriptor_initializer_VirtualDriverFrame_2epb_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int VirtualDriverDevice::kFuncIDFieldNumber;
const int VirtualDriverDevice::kLocationFieldNumber;
const int VirtualDriverDevice::kSyncFieldNumber;
const int VirtualDriverDevice::kDriverNameFieldNumber;
const int VirtualDriverDevice::kDeviceNameFieldNumber;
#endif  // !_MSC_VER

VirtualDriverDevice::VirtualDriverDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VirtualDriverDevice::InitAsDefaultInstance() {
}

VirtualDriverDevice::VirtualDriverDevice(const VirtualDriverDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VirtualDriverDevice::SharedCtor() {
  _cached_size_ = 0;
  funcid_ = 0;
  location_ = 0;
  sync_ = 0;
  drivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  devicename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VirtualDriverDevice::~VirtualDriverDevice() {
  SharedDtor();
}

void VirtualDriverDevice::SharedDtor() {
  if (drivername_ != &::google::protobuf::internal::kEmptyString) {
    delete drivername_;
  }
  if (devicename_ != &::google::protobuf::internal::kEmptyString) {
    delete devicename_;
  }
  if (this != default_instance_) {
  }
}

void VirtualDriverDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VirtualDriverDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VirtualDriverDevice_descriptor_;
}

const VirtualDriverDevice& VirtualDriverDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VirtualDriverFrame_2epb_2eproto();  return *default_instance_;
}

VirtualDriverDevice* VirtualDriverDevice::default_instance_ = NULL;

VirtualDriverDevice* VirtualDriverDevice::New() const {
  return new VirtualDriverDevice;
}

void VirtualDriverDevice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    funcid_ = 0;
    location_ = 0;
    sync_ = 0;
    if (has_drivername()) {
      if (drivername_ != &::google::protobuf::internal::kEmptyString) {
        drivername_->clear();
      }
    }
    if (has_devicename()) {
      if (devicename_ != &::google::protobuf::internal::kEmptyString) {
        devicename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VirtualDriverDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 FuncID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &funcid_)));
          set_has_funcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Location;
        break;
      }
      
      // required int32 Location = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &location_)));
          set_has_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Sync;
        break;
      }
      
      // required int32 Sync = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Sync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sync_)));
          set_has_sync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_DriverName;
        break;
      }
      
      // optional bytes DriverName = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DriverName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_drivername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_DeviceName;
        break;
      }
      
      // optional bytes DeviceName = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeviceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devicename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VirtualDriverDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 FuncID = 1 [default = 0];
  if (has_funcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->funcid(), output);
  }
  
  // required int32 Location = 2 [default = 0];
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->location(), output);
  }
  
  // required int32 Sync = 3 [default = 0];
  if (has_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sync(), output);
  }
  
  // optional bytes DriverName = 4 [default = ""];
  if (has_drivername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->drivername(), output);
  }
  
  // optional bytes DeviceName = 5 [default = ""];
  if (has_devicename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->devicename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VirtualDriverDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 FuncID = 1 [default = 0];
  if (has_funcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->funcid(), target);
  }
  
  // required int32 Location = 2 [default = 0];
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->location(), target);
  }
  
  // required int32 Sync = 3 [default = 0];
  if (has_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sync(), target);
  }
  
  // optional bytes DriverName = 4 [default = ""];
  if (has_drivername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->drivername(), target);
  }
  
  // optional bytes DeviceName = 5 [default = ""];
  if (has_devicename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->devicename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VirtualDriverDevice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 FuncID = 1 [default = 0];
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->funcid());
    }
    
    // required int32 Location = 2 [default = 0];
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->location());
    }
    
    // required int32 Sync = 3 [default = 0];
    if (has_sync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sync());
    }
    
    // optional bytes DriverName = 4 [default = ""];
    if (has_drivername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->drivername());
    }
    
    // optional bytes DeviceName = 5 [default = ""];
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->devicename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VirtualDriverDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VirtualDriverDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VirtualDriverDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VirtualDriverDevice::MergeFrom(const VirtualDriverDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_funcid()) {
      set_funcid(from.funcid());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_sync()) {
      set_sync(from.sync());
    }
    if (from.has_drivername()) {
      set_drivername(from.drivername());
    }
    if (from.has_devicename()) {
      set_devicename(from.devicename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VirtualDriverDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirtualDriverDevice::CopyFrom(const VirtualDriverDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualDriverDevice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void VirtualDriverDevice::Swap(VirtualDriverDevice* other) {
  if (other != this) {
    std::swap(funcid_, other->funcid_);
    std::swap(location_, other->location_);
    std::swap(sync_, other->sync_);
    std::swap(drivername_, other->drivername_);
    std::swap(devicename_, other->devicename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VirtualDriverDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VirtualDriverDevice_descriptor_;
  metadata.reflection = VirtualDriverDevice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VirtualDriverFrame::kVersionFieldNumber;
const int VirtualDriverFrame::kUIDFieldNumber;
const int VirtualDriverFrame::kCSUIDFieldNumber;
const int VirtualDriverFrame::kReqDevFieldNumber;
const int VirtualDriverFrame::kMajorCmdFieldNumber;
const int VirtualDriverFrame::kMinorCmdFieldNumber;
const int VirtualDriverFrame::kTimeOutFieldNumber;
const int VirtualDriverFrame::kUsernameFieldNumber;
const int VirtualDriverFrame::kPasswordFieldNumber;
const int VirtualDriverFrame::kRequestQueueHandleFieldNumber;
const int VirtualDriverFrame::kStateCodeFieldNumber;
const int VirtualDriverFrame::kErrorCodeFieldNumber;
const int VirtualDriverFrame::kErrorInfoFieldNumber;
const int VirtualDriverFrame::kBodyFieldNumber;
#endif  // !_MSC_VER

VirtualDriverFrame::VirtualDriverFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VirtualDriverFrame::InitAsDefaultInstance() {
  reqdev_ = const_cast< ::VirtualDriverFramePB::VirtualDriverDevice*>(&::VirtualDriverFramePB::VirtualDriverDevice::default_instance());
}

VirtualDriverFrame::VirtualDriverFrame(const VirtualDriverFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VirtualDriverFrame::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = 0u;
  csuid_ = 0u;
  reqdev_ = NULL;
  majorcmd_ = 0;
  minorcmd_ = 0;
  timeout_ = 3000;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requestqueuehandle_ = 0u;
  statecode_ = 0;
  errorcode_ = 0;
  errorinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VirtualDriverFrame::~VirtualDriverFrame() {
  SharedDtor();
}

void VirtualDriverFrame::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (errorinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete errorinfo_;
  }
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (this != default_instance_) {
    delete reqdev_;
  }
}

void VirtualDriverFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VirtualDriverFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VirtualDriverFrame_descriptor_;
}

const VirtualDriverFrame& VirtualDriverFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VirtualDriverFrame_2epb_2eproto();  return *default_instance_;
}

VirtualDriverFrame* VirtualDriverFrame::default_instance_ = NULL;

VirtualDriverFrame* VirtualDriverFrame::New() const {
  return new VirtualDriverFrame;
}

void VirtualDriverFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    uid_ = 0u;
    csuid_ = 0u;
    if (has_reqdev()) {
      if (reqdev_ != NULL) reqdev_->::VirtualDriverFramePB::VirtualDriverDevice::Clear();
    }
    majorcmd_ = 0;
    minorcmd_ = 0;
    timeout_ = 3000;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    requestqueuehandle_ = 0u;
    statecode_ = 0;
    errorcode_ = 0;
    if (has_errorinfo()) {
      if (errorinfo_ != &::google::protobuf::internal::kEmptyString) {
        errorinfo_->clear();
      }
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VirtualDriverFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes Version = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_UID;
        break;
      }
      
      // required uint32 UID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CSUID;
        break;
      }
      
      // required uint32 CSUID = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CSUID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &csuid_)));
          set_has_csuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ReqDev;
        break;
      }
      
      // required .VirtualDriverFramePB.VirtualDriverDevice ReqDev = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ReqDev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reqdev()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_MajorCmd;
        break;
      }
      
      // required int32 MajorCmd = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MajorCmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &majorcmd_)));
          set_has_majorcmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_MinorCmd;
        break;
      }
      
      // required int32 MinorCmd = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MinorCmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minorcmd_)));
          set_has_minorcmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_TimeOut;
        break;
      }
      
      // optional int32 TimeOut = 7 [default = 3000];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeOut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Username;
        break;
      }
      
      // required bytes Username = 8 [default = ""];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_username()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Password;
        break;
      }
      
      // required bytes Password = 9 [default = ""];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_RequestQueueHandle;
        break;
      }
      
      // optional uint32 RequestQueueHandle = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RequestQueueHandle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestqueuehandle_)));
          set_has_requestqueuehandle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_StateCode;
        break;
      }
      
      // optional int32 StateCode = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StateCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statecode_)));
          set_has_statecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ErrorCode;
        break;
      }
      
      // optional int32 ErrorCode = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_ErrorInfo;
        break;
      }
      
      // optional bytes ErrorInfo = 13 [default = ""];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ErrorInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_errorinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_Body;
        break;
      }
      
      // optional bytes Body = 51 [default = ""];
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VirtualDriverFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes Version = 1 [default = ""];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->version(), output);
  }
  
  // required uint32 UID = 2 [default = 0];
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }
  
  // required uint32 CSUID = 3 [default = 0];
  if (has_csuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->csuid(), output);
  }
  
  // required .VirtualDriverFramePB.VirtualDriverDevice ReqDev = 4;
  if (has_reqdev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reqdev(), output);
  }
  
  // required int32 MajorCmd = 5 [default = 0];
  if (has_majorcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->majorcmd(), output);
  }
  
  // required int32 MinorCmd = 6 [default = 0];
  if (has_minorcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->minorcmd(), output);
  }
  
  // optional int32 TimeOut = 7 [default = 3000];
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->timeout(), output);
  }
  
  // required bytes Username = 8 [default = ""];
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->username(), output);
  }
  
  // required bytes Password = 9 [default = ""];
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->password(), output);
  }
  
  // optional uint32 RequestQueueHandle = 10 [default = 0];
  if (has_requestqueuehandle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->requestqueuehandle(), output);
  }
  
  // optional int32 StateCode = 11 [default = 0];
  if (has_statecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->statecode(), output);
  }
  
  // optional int32 ErrorCode = 12 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->errorcode(), output);
  }
  
  // optional bytes ErrorInfo = 13 [default = ""];
  if (has_errorinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->errorinfo(), output);
  }
  
  // optional bytes Body = 51 [default = ""];
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      51, this->body(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VirtualDriverFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes Version = 1 [default = ""];
  if (has_version()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->version(), target);
  }
  
  // required uint32 UID = 2 [default = 0];
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }
  
  // required uint32 CSUID = 3 [default = 0];
  if (has_csuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->csuid(), target);
  }
  
  // required .VirtualDriverFramePB.VirtualDriverDevice ReqDev = 4;
  if (has_reqdev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reqdev(), target);
  }
  
  // required int32 MajorCmd = 5 [default = 0];
  if (has_majorcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->majorcmd(), target);
  }
  
  // required int32 MinorCmd = 6 [default = 0];
  if (has_minorcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->minorcmd(), target);
  }
  
  // optional int32 TimeOut = 7 [default = 3000];
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->timeout(), target);
  }
  
  // required bytes Username = 8 [default = ""];
  if (has_username()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->username(), target);
  }
  
  // required bytes Password = 9 [default = ""];
  if (has_password()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->password(), target);
  }
  
  // optional uint32 RequestQueueHandle = 10 [default = 0];
  if (has_requestqueuehandle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->requestqueuehandle(), target);
  }
  
  // optional int32 StateCode = 11 [default = 0];
  if (has_statecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->statecode(), target);
  }
  
  // optional int32 ErrorCode = 12 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->errorcode(), target);
  }
  
  // optional bytes ErrorInfo = 13 [default = ""];
  if (has_errorinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->errorinfo(), target);
  }
  
  // optional bytes Body = 51 [default = ""];
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        51, this->body(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VirtualDriverFrame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes Version = 1 [default = ""];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->version());
    }
    
    // required uint32 UID = 2 [default = 0];
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }
    
    // required uint32 CSUID = 3 [default = 0];
    if (has_csuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->csuid());
    }
    
    // required .VirtualDriverFramePB.VirtualDriverDevice ReqDev = 4;
    if (has_reqdev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reqdev());
    }
    
    // required int32 MajorCmd = 5 [default = 0];
    if (has_majorcmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->majorcmd());
    }
    
    // required int32 MinorCmd = 6 [default = 0];
    if (has_minorcmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minorcmd());
    }
    
    // optional int32 TimeOut = 7 [default = 3000];
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }
    
    // required bytes Username = 8 [default = ""];
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->username());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bytes Password = 9 [default = ""];
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->password());
    }
    
    // optional uint32 RequestQueueHandle = 10 [default = 0];
    if (has_requestqueuehandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requestqueuehandle());
    }
    
    // optional int32 StateCode = 11 [default = 0];
    if (has_statecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statecode());
    }
    
    // optional int32 ErrorCode = 12 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }
    
    // optional bytes ErrorInfo = 13 [default = ""];
    if (has_errorinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->errorinfo());
    }
    
    // optional bytes Body = 51 [default = ""];
    if (has_body()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VirtualDriverFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VirtualDriverFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VirtualDriverFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VirtualDriverFrame::MergeFrom(const VirtualDriverFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_csuid()) {
      set_csuid(from.csuid());
    }
    if (from.has_reqdev()) {
      mutable_reqdev()->::VirtualDriverFramePB::VirtualDriverDevice::MergeFrom(from.reqdev());
    }
    if (from.has_majorcmd()) {
      set_majorcmd(from.majorcmd());
    }
    if (from.has_minorcmd()) {
      set_minorcmd(from.minorcmd());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_requestqueuehandle()) {
      set_requestqueuehandle(from.requestqueuehandle());
    }
    if (from.has_statecode()) {
      set_statecode(from.statecode());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_errorinfo()) {
      set_errorinfo(from.errorinfo());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VirtualDriverFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirtualDriverFrame::CopyFrom(const VirtualDriverFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualDriverFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001bf) != 0x000001bf) return false;
  
  if (has_reqdev()) {
    if (!this->reqdev().IsInitialized()) return false;
  }
  return true;
}

void VirtualDriverFrame::Swap(VirtualDriverFrame* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(uid_, other->uid_);
    std::swap(csuid_, other->csuid_);
    std::swap(reqdev_, other->reqdev_);
    std::swap(majorcmd_, other->majorcmd_);
    std::swap(minorcmd_, other->minorcmd_);
    std::swap(timeout_, other->timeout_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(requestqueuehandle_, other->requestqueuehandle_);
    std::swap(statecode_, other->statecode_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(errorinfo_, other->errorinfo_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VirtualDriverFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VirtualDriverFrame_descriptor_;
  metadata.reflection = VirtualDriverFrame_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace VirtualDriverFramePB

// @@protoc_insertion_point(global_scope)
