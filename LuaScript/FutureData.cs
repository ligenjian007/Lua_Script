// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace FutureDataPB {
  
  namespace Proto {
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static partial class FutureData {
    
      #region Extension registration
      public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
      }
      #endregion
      #region Static variables
      internal static pbd::MessageDescriptor internal__static_FutureDataPB_CThostFtdcDepthMarketDataFieldStruct__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct, global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct.Builder> internal__static_FutureDataPB_CThostFtdcDepthMarketDataFieldStruct__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_FutureDataPB_FutureData__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::FutureDataPB.FutureData, global::FutureDataPB.FutureData.Builder> internal__static_FutureDataPB_FutureData__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_FutureDataPB_FutureData_MarketData__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::FutureDataPB.FutureData.Types.MarketData, global::FutureDataPB.FutureData.Types.MarketData.Builder> internal__static_FutureDataPB_FutureData_MarketData__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_FutureDataPB_CurrentDataRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::FutureDataPB.CurrentDataRequest, global::FutureDataPB.CurrentDataRequest.Builder> internal__static_FutureDataPB_CurrentDataRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_FutureDataPB_CurrentDataRequest_ContractInfo__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::FutureDataPB.CurrentDataRequest.Types.ContractInfo, global::FutureDataPB.CurrentDataRequest.Types.ContractInfo.Builder> internal__static_FutureDataPB_CurrentDataRequest_ContractInfo__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_FutureDataPB_HistoryDataRequest__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::FutureDataPB.HistoryDataRequest, global::FutureDataPB.HistoryDataRequest.Builder> internal__static_FutureDataPB_HistoryDataRequest__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_FutureDataPB_HistoryDataRequest_HistoryDataInfo__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::FutureDataPB.HistoryDataRequest.Types.HistoryDataInfo, global::FutureDataPB.HistoryDataRequest.Types.HistoryDataInfo.Builder> internal__static_FutureDataPB_HistoryDataRequest_HistoryDataInfo__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_FutureDataPB_HistoryDataResponse__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::FutureDataPB.HistoryDataResponse, global::FutureDataPB.HistoryDataResponse.Builder> internal__static_FutureDataPB_HistoryDataResponse__FieldAccessorTable;
      internal static pbd::MessageDescriptor internal__static_FutureDataPB_HistoryDataResponse_MarketDataSeries__Descriptor;
      internal static pb::FieldAccess.FieldAccessorTable<global::FutureDataPB.HistoryDataResponse.Types.MarketDataSeries, global::FutureDataPB.HistoryDataResponse.Types.MarketDataSeries.Builder> internal__static_FutureDataPB_HistoryDataResponse_MarketDataSeries__FieldAccessorTable;
      #endregion
      #region Descriptor
      public static pbd::FileDescriptor Descriptor {
        get { return descriptor; }
      }
      private static pbd::FileDescriptor descriptor;
      
      static FutureData() {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            "ChBGdXR1cmVEYXRhLnByb3RvEgxGdXR1cmVEYXRhUEIinQcKJENUaG9zdEZ0" + 
            "ZGNEZXB0aE1hcmtldERhdGFGaWVsZFN0cnVjdBISCgpUcmFkaW5nRGF5GAEg" + 
            "AigJEhQKDEluc3RydW1lbnRJRBgCIAIoCRISCgpFeGNoYW5nZUlEGAMgAigJ" + 
            "EhYKDkV4Y2hhbmdlSW5zdElEGAQgAigJEhEKCUxhc3RQcmljZRgFIAIoARIa" + 
            "ChJQcmVTZXR0bGVtZW50UHJpY2UYBiACKAESFQoNUHJlQ2xvc2VQcmljZRgH" + 
            "IAIoARIXCg9QcmVPcGVuSW50ZXJlc3QYCCACKAESEQoJT3BlblByaWNlGAkg" + 
            "AigBEhQKDEhpZ2hlc3RQcmljZRgKIAIoARITCgtMb3dlc3RQcmljZRgLIAIo" + 
            "ARIOCgZWb2x1bWUYDCACKAUSEAoIVHVybm92ZXIYDSACKAESFAoMT3Blbklu" + 
            "dGVyZXN0GA4gAigBEhIKCkNsb3NlUHJpY2UYDyACKAESFwoPU2V0dGxlbWVu" + 
            "dFByaWNlGBAgAigBEhcKD1VwcGVyTGltaXRQcmljZRgRIAIoARIXCg9Mb3dl" + 
            "ckxpbWl0UHJpY2UYEiACKAESEAoIUHJlRGVsdGEYEyACKAESEQoJQ3VyckRl" + 
            "bHRhGBQgAigBEhIKClVwZGF0ZVRpbWUYFSACKAkSFgoOVXBkYXRlTWlsbGlz" + 
            "ZWMYFiACKAUSEQoJQmlkUHJpY2UxGBcgAigBEhIKCkJpZFZvbHVtZTEYGCAC" + 
            "KAUSEQoJQXNrUHJpY2UxGBkgAigBEhIKCkFza1ZvbHVtZTEYGiACKAUSEQoJ" + 
            "QmlkUHJpY2UyGBsgAigBEhIKCkJpZFZvbHVtZTIYHCACKAUSEQoJQXNrUHJp" + 
            "Y2UyGB0gAigBEhIKCkFza1ZvbHVtZTIYHiACKAUSEQoJQmlkUHJpY2UzGB8g" + 
            "AigBEhIKCkJpZFZvbHVtZTMYICACKAUSEQoJQXNrUHJpY2UzGCEgAigBEhIK" + 
            "CkFza1ZvbHVtZTMYIiACKAUSEQoJQmlkUHJpY2U0GCMgAigBEhIKCkJpZFZv" + 
            "bHVtZTQYJCACKAUSEQoJQXNrUHJpY2U0GCUgAigBEhIKCkFza1ZvbHVtZTQY" + 
            "JiACKAUSEQoJQmlkUHJpY2U1GCcgAigBEhIKCkJpZFZvbHVtZTUYKCACKAUS" + 
            "EQoJQXNrUHJpY2U1GCkgAigBEhIKCkFza1ZvbHVtZTUYKiACKAUSFAoMQXZl" + 
            "cmFnZVByaWNlGCsgAigBItIBCgpGdXR1cmVEYXRhEhEKCVRpbWVzdGFtcBgB" + 
            "IAIoBRIOCgZIYW5kbGUYAiACKAUSNQoIRGF0YVBhY2sYAyADKAsyIy5GdXR1" + 
            "cmVEYXRhUEIuRnV0dXJlRGF0YS5NYXJrZXREYXRhGmoKCk1hcmtldERhdGES" + 
            "DAoERGF0ZRgBIAIoBRIMCgRUaW1lGAIgAigFEkAKBERhdGEYAyACKAsyMi5G" + 
            "dXR1cmVEYXRhUEIuQ1Rob3N0RnRkY0RlcHRoTWFya2V0RGF0YUZpZWxkU3Ry" + 
            "dWN0IroBChJDdXJyZW50RGF0YVJlcXVlc3QSEQoJVGltZVN0YW1wGAEgAigF" + 
            "Eg4KBkhhbmRsZRgCIAIoBRJDCgxDb250cmFjdExpc3QYAyADKAsyLS5GdXR1" + 
            "cmVEYXRhUEIuQ3VycmVudERhdGFSZXF1ZXN0LkNvbnRyYWN0SW5mbxo8CgxD" + 
            "b250cmFjdEluZm8SDAoERGF0ZRgBIAIoBRIMCgRUaW1lGAIgAigFEhAKCENv" + 
            "bnRyYWN0GAMgAigJIugBChJIaXN0b3J5RGF0YVJlcXVlc3QSEQoJVGltZVN0" + 
            "YW1wGAEgAigFEg4KBkhhbmRsZRgCIAIoBRJCCghEYXRhSW5mbxgDIAMoCzIw" + 
            "LkZ1dHVyZURhdGFQQi5IaXN0b3J5RGF0YVJlcXVlc3QuSGlzdG9yeURhdGFJ" + 
            "bmZvGmsKD0hpc3RvcnlEYXRhSW5mbxIQCghDb250cmFjdBgBIAIoCRIRCglT" + 
            "dGFydERhdGUYAiACKAUSEQoJU3RhcnRUaW1lGAMgAigFEg8KB0VuZERhdGUY" + 
            "BCACKAUSDwoHRW5kVGltZRgFIAIoBSLoAQoTSGlzdG9yeURhdGFSZXNwb25z" + 
            "ZRIRCglUaW1lc3RhbXAYASACKAUSDgoGSGFuZGxlGAIgAigFEkYKCkRhdGFT" + 
            "ZXJpZXMYAyADKAsyMi5GdXR1cmVEYXRhUEIuSGlzdG9yeURhdGFSZXNwb25z" + 
            "ZS5NYXJrZXREYXRhU2VyaWVzGmYKEE1hcmtldERhdGFTZXJpZXMSEAoIQ29u" + 
            "dHJhY3QYASACKAkSQAoERGF0YRgCIAMoCzIyLkZ1dHVyZURhdGFQQi5DVGhv" + 
            "c3RGdGRjRGVwdGhNYXJrZXREYXRhRmllbGRTdHJ1Y3Q=");
        pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
          descriptor = root;
          internal__static_FutureDataPB_CThostFtdcDepthMarketDataFieldStruct__Descriptor = Descriptor.MessageTypes[0];
          internal__static_FutureDataPB_CThostFtdcDepthMarketDataFieldStruct__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct, global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct.Builder>(internal__static_FutureDataPB_CThostFtdcDepthMarketDataFieldStruct__Descriptor,
                  new string[] { "TradingDay", "InstrumentID", "ExchangeID", "ExchangeInstID", "LastPrice", "PreSettlementPrice", "PreClosePrice", "PreOpenInterest", "OpenPrice", "HighestPrice", "LowestPrice", "Volume", "Turnover", "OpenInterest", "ClosePrice", "SettlementPrice", "UpperLimitPrice", "LowerLimitPrice", "PreDelta", "CurrDelta", "UpdateTime", "UpdateMillisec", "BidPrice1", "BidVolume1", "AskPrice1", "AskVolume1", "BidPrice2", "BidVolume2", "AskPrice2", "AskVolume2", "BidPrice3", "BidVolume3", "AskPrice3", "AskVolume3", "BidPrice4", "BidVolume4", "AskPrice4", "AskVolume4", "BidPrice5", "BidVolume5", "AskPrice5", "AskVolume5", "AveragePrice", });
          internal__static_FutureDataPB_FutureData__Descriptor = Descriptor.MessageTypes[1];
          internal__static_FutureDataPB_FutureData__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::FutureDataPB.FutureData, global::FutureDataPB.FutureData.Builder>(internal__static_FutureDataPB_FutureData__Descriptor,
                  new string[] { "Timestamp", "Handle", "DataPack", });
          internal__static_FutureDataPB_FutureData_MarketData__Descriptor = internal__static_FutureDataPB_FutureData__Descriptor.NestedTypes[0];
          internal__static_FutureDataPB_FutureData_MarketData__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::FutureDataPB.FutureData.Types.MarketData, global::FutureDataPB.FutureData.Types.MarketData.Builder>(internal__static_FutureDataPB_FutureData_MarketData__Descriptor,
                  new string[] { "Date", "Time", "Data", });
          internal__static_FutureDataPB_CurrentDataRequest__Descriptor = Descriptor.MessageTypes[2];
          internal__static_FutureDataPB_CurrentDataRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::FutureDataPB.CurrentDataRequest, global::FutureDataPB.CurrentDataRequest.Builder>(internal__static_FutureDataPB_CurrentDataRequest__Descriptor,
                  new string[] { "TimeStamp", "Handle", "ContractList", });
          internal__static_FutureDataPB_CurrentDataRequest_ContractInfo__Descriptor = internal__static_FutureDataPB_CurrentDataRequest__Descriptor.NestedTypes[0];
          internal__static_FutureDataPB_CurrentDataRequest_ContractInfo__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::FutureDataPB.CurrentDataRequest.Types.ContractInfo, global::FutureDataPB.CurrentDataRequest.Types.ContractInfo.Builder>(internal__static_FutureDataPB_CurrentDataRequest_ContractInfo__Descriptor,
                  new string[] { "Date", "Time", "Contract", });
          internal__static_FutureDataPB_HistoryDataRequest__Descriptor = Descriptor.MessageTypes[3];
          internal__static_FutureDataPB_HistoryDataRequest__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::FutureDataPB.HistoryDataRequest, global::FutureDataPB.HistoryDataRequest.Builder>(internal__static_FutureDataPB_HistoryDataRequest__Descriptor,
                  new string[] { "TimeStamp", "Handle", "DataInfo", });
          internal__static_FutureDataPB_HistoryDataRequest_HistoryDataInfo__Descriptor = internal__static_FutureDataPB_HistoryDataRequest__Descriptor.NestedTypes[0];
          internal__static_FutureDataPB_HistoryDataRequest_HistoryDataInfo__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::FutureDataPB.HistoryDataRequest.Types.HistoryDataInfo, global::FutureDataPB.HistoryDataRequest.Types.HistoryDataInfo.Builder>(internal__static_FutureDataPB_HistoryDataRequest_HistoryDataInfo__Descriptor,
                  new string[] { "Contract", "StartDate", "StartTime", "EndDate", "EndTime", });
          internal__static_FutureDataPB_HistoryDataResponse__Descriptor = Descriptor.MessageTypes[4];
          internal__static_FutureDataPB_HistoryDataResponse__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::FutureDataPB.HistoryDataResponse, global::FutureDataPB.HistoryDataResponse.Builder>(internal__static_FutureDataPB_HistoryDataResponse__Descriptor,
                  new string[] { "Timestamp", "Handle", "DataSeries", });
          internal__static_FutureDataPB_HistoryDataResponse_MarketDataSeries__Descriptor = internal__static_FutureDataPB_HistoryDataResponse__Descriptor.NestedTypes[0];
          internal__static_FutureDataPB_HistoryDataResponse_MarketDataSeries__FieldAccessorTable = 
              new pb::FieldAccess.FieldAccessorTable<global::FutureDataPB.HistoryDataResponse.Types.MarketDataSeries, global::FutureDataPB.HistoryDataResponse.Types.MarketDataSeries.Builder>(internal__static_FutureDataPB_HistoryDataResponse_MarketDataSeries__Descriptor,
                  new string[] { "Contract", "Data", });
          return null;
        };
        pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
            new pbd::FileDescriptor[] {
            }, assigner);
      }
      #endregion
      
    }
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CThostFtdcDepthMarketDataFieldStruct : pb::GeneratedMessage<CThostFtdcDepthMarketDataFieldStruct, CThostFtdcDepthMarketDataFieldStruct.Builder> {
    private CThostFtdcDepthMarketDataFieldStruct() { }
    private static readonly CThostFtdcDepthMarketDataFieldStruct defaultInstance = new CThostFtdcDepthMarketDataFieldStruct().MakeReadOnly();
    private static readonly string[] _cThostFtdcDepthMarketDataFieldStructFieldNames = new string[] { "AskPrice1", "AskPrice2", "AskPrice3", "AskPrice4", "AskPrice5", "AskVolume1", "AskVolume2", "AskVolume3", "AskVolume4", "AskVolume5", "AveragePrice", "BidPrice1", "BidPrice2", "BidPrice3", "BidPrice4", "BidPrice5", "BidVolume1", "BidVolume2", "BidVolume3", "BidVolume4", "BidVolume5", "ClosePrice", "CurrDelta", "ExchangeID", "ExchangeInstID", "HighestPrice", "InstrumentID", "LastPrice", "LowerLimitPrice", "LowestPrice", "OpenInterest", "OpenPrice", "PreClosePrice", "PreDelta", "PreOpenInterest", "PreSettlementPrice", "SettlementPrice", "TradingDay", "Turnover", "UpdateMillisec", "UpdateTime", "UpperLimitPrice", "Volume" };
    private static readonly uint[] _cThostFtdcDepthMarketDataFieldStructFieldTags = new uint[] { 201, 233, 265, 297, 329, 208, 240, 272, 304, 336, 345, 185, 217, 249, 281, 313, 192, 224, 256, 288, 320, 121, 161, 26, 34, 81, 18, 41, 145, 89, 113, 73, 57, 153, 65, 49, 129, 10, 105, 176, 170, 137, 96 };
    public static CThostFtdcDepthMarketDataFieldStruct DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CThostFtdcDepthMarketDataFieldStruct DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CThostFtdcDepthMarketDataFieldStruct ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::FutureDataPB.Proto.FutureData.internal__static_FutureDataPB_CThostFtdcDepthMarketDataFieldStruct__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CThostFtdcDepthMarketDataFieldStruct, CThostFtdcDepthMarketDataFieldStruct.Builder> InternalFieldAccessors {
      get { return global::FutureDataPB.Proto.FutureData.internal__static_FutureDataPB_CThostFtdcDepthMarketDataFieldStruct__FieldAccessorTable; }
    }
    
    public const int TradingDayFieldNumber = 1;
    private bool hasTradingDay;
    private string tradingDay_ = "";
    public bool HasTradingDay {
      get { return hasTradingDay; }
    }
    public string TradingDay {
      get { return tradingDay_; }
    }
    
    public const int InstrumentIDFieldNumber = 2;
    private bool hasInstrumentID;
    private string instrumentID_ = "";
    public bool HasInstrumentID {
      get { return hasInstrumentID; }
    }
    public string InstrumentID {
      get { return instrumentID_; }
    }
    
    public const int ExchangeIDFieldNumber = 3;
    private bool hasExchangeID;
    private string exchangeID_ = "";
    public bool HasExchangeID {
      get { return hasExchangeID; }
    }
    public string ExchangeID {
      get { return exchangeID_; }
    }
    
    public const int ExchangeInstIDFieldNumber = 4;
    private bool hasExchangeInstID;
    private string exchangeInstID_ = "";
    public bool HasExchangeInstID {
      get { return hasExchangeInstID; }
    }
    public string ExchangeInstID {
      get { return exchangeInstID_; }
    }
    
    public const int LastPriceFieldNumber = 5;
    private bool hasLastPrice;
    private double lastPrice_;
    public bool HasLastPrice {
      get { return hasLastPrice; }
    }
    public double LastPrice {
      get { return lastPrice_; }
    }
    
    public const int PreSettlementPriceFieldNumber = 6;
    private bool hasPreSettlementPrice;
    private double preSettlementPrice_;
    public bool HasPreSettlementPrice {
      get { return hasPreSettlementPrice; }
    }
    public double PreSettlementPrice {
      get { return preSettlementPrice_; }
    }
    
    public const int PreClosePriceFieldNumber = 7;
    private bool hasPreClosePrice;
    private double preClosePrice_;
    public bool HasPreClosePrice {
      get { return hasPreClosePrice; }
    }
    public double PreClosePrice {
      get { return preClosePrice_; }
    }
    
    public const int PreOpenInterestFieldNumber = 8;
    private bool hasPreOpenInterest;
    private double preOpenInterest_;
    public bool HasPreOpenInterest {
      get { return hasPreOpenInterest; }
    }
    public double PreOpenInterest {
      get { return preOpenInterest_; }
    }
    
    public const int OpenPriceFieldNumber = 9;
    private bool hasOpenPrice;
    private double openPrice_;
    public bool HasOpenPrice {
      get { return hasOpenPrice; }
    }
    public double OpenPrice {
      get { return openPrice_; }
    }
    
    public const int HighestPriceFieldNumber = 10;
    private bool hasHighestPrice;
    private double highestPrice_;
    public bool HasHighestPrice {
      get { return hasHighestPrice; }
    }
    public double HighestPrice {
      get { return highestPrice_; }
    }
    
    public const int LowestPriceFieldNumber = 11;
    private bool hasLowestPrice;
    private double lowestPrice_;
    public bool HasLowestPrice {
      get { return hasLowestPrice; }
    }
    public double LowestPrice {
      get { return lowestPrice_; }
    }
    
    public const int VolumeFieldNumber = 12;
    private bool hasVolume;
    private int volume_;
    public bool HasVolume {
      get { return hasVolume; }
    }
    public int Volume {
      get { return volume_; }
    }
    
    public const int TurnoverFieldNumber = 13;
    private bool hasTurnover;
    private double turnover_;
    public bool HasTurnover {
      get { return hasTurnover; }
    }
    public double Turnover {
      get { return turnover_; }
    }
    
    public const int OpenInterestFieldNumber = 14;
    private bool hasOpenInterest;
    private double openInterest_;
    public bool HasOpenInterest {
      get { return hasOpenInterest; }
    }
    public double OpenInterest {
      get { return openInterest_; }
    }
    
    public const int ClosePriceFieldNumber = 15;
    private bool hasClosePrice;
    private double closePrice_;
    public bool HasClosePrice {
      get { return hasClosePrice; }
    }
    public double ClosePrice {
      get { return closePrice_; }
    }
    
    public const int SettlementPriceFieldNumber = 16;
    private bool hasSettlementPrice;
    private double settlementPrice_;
    public bool HasSettlementPrice {
      get { return hasSettlementPrice; }
    }
    public double SettlementPrice {
      get { return settlementPrice_; }
    }
    
    public const int UpperLimitPriceFieldNumber = 17;
    private bool hasUpperLimitPrice;
    private double upperLimitPrice_;
    public bool HasUpperLimitPrice {
      get { return hasUpperLimitPrice; }
    }
    public double UpperLimitPrice {
      get { return upperLimitPrice_; }
    }
    
    public const int LowerLimitPriceFieldNumber = 18;
    private bool hasLowerLimitPrice;
    private double lowerLimitPrice_;
    public bool HasLowerLimitPrice {
      get { return hasLowerLimitPrice; }
    }
    public double LowerLimitPrice {
      get { return lowerLimitPrice_; }
    }
    
    public const int PreDeltaFieldNumber = 19;
    private bool hasPreDelta;
    private double preDelta_;
    public bool HasPreDelta {
      get { return hasPreDelta; }
    }
    public double PreDelta {
      get { return preDelta_; }
    }
    
    public const int CurrDeltaFieldNumber = 20;
    private bool hasCurrDelta;
    private double currDelta_;
    public bool HasCurrDelta {
      get { return hasCurrDelta; }
    }
    public double CurrDelta {
      get { return currDelta_; }
    }
    
    public const int UpdateTimeFieldNumber = 21;
    private bool hasUpdateTime;
    private string updateTime_ = "";
    public bool HasUpdateTime {
      get { return hasUpdateTime; }
    }
    public string UpdateTime {
      get { return updateTime_; }
    }
    
    public const int UpdateMillisecFieldNumber = 22;
    private bool hasUpdateMillisec;
    private int updateMillisec_;
    public bool HasUpdateMillisec {
      get { return hasUpdateMillisec; }
    }
    public int UpdateMillisec {
      get { return updateMillisec_; }
    }
    
    public const int BidPrice1FieldNumber = 23;
    private bool hasBidPrice1;
    private double bidPrice1_;
    public bool HasBidPrice1 {
      get { return hasBidPrice1; }
    }
    public double BidPrice1 {
      get { return bidPrice1_; }
    }
    
    public const int BidVolume1FieldNumber = 24;
    private bool hasBidVolume1;
    private int bidVolume1_;
    public bool HasBidVolume1 {
      get { return hasBidVolume1; }
    }
    public int BidVolume1 {
      get { return bidVolume1_; }
    }
    
    public const int AskPrice1FieldNumber = 25;
    private bool hasAskPrice1;
    private double askPrice1_;
    public bool HasAskPrice1 {
      get { return hasAskPrice1; }
    }
    public double AskPrice1 {
      get { return askPrice1_; }
    }
    
    public const int AskVolume1FieldNumber = 26;
    private bool hasAskVolume1;
    private int askVolume1_;
    public bool HasAskVolume1 {
      get { return hasAskVolume1; }
    }
    public int AskVolume1 {
      get { return askVolume1_; }
    }
    
    public const int BidPrice2FieldNumber = 27;
    private bool hasBidPrice2;
    private double bidPrice2_;
    public bool HasBidPrice2 {
      get { return hasBidPrice2; }
    }
    public double BidPrice2 {
      get { return bidPrice2_; }
    }
    
    public const int BidVolume2FieldNumber = 28;
    private bool hasBidVolume2;
    private int bidVolume2_;
    public bool HasBidVolume2 {
      get { return hasBidVolume2; }
    }
    public int BidVolume2 {
      get { return bidVolume2_; }
    }
    
    public const int AskPrice2FieldNumber = 29;
    private bool hasAskPrice2;
    private double askPrice2_;
    public bool HasAskPrice2 {
      get { return hasAskPrice2; }
    }
    public double AskPrice2 {
      get { return askPrice2_; }
    }
    
    public const int AskVolume2FieldNumber = 30;
    private bool hasAskVolume2;
    private int askVolume2_;
    public bool HasAskVolume2 {
      get { return hasAskVolume2; }
    }
    public int AskVolume2 {
      get { return askVolume2_; }
    }
    
    public const int BidPrice3FieldNumber = 31;
    private bool hasBidPrice3;
    private double bidPrice3_;
    public bool HasBidPrice3 {
      get { return hasBidPrice3; }
    }
    public double BidPrice3 {
      get { return bidPrice3_; }
    }
    
    public const int BidVolume3FieldNumber = 32;
    private bool hasBidVolume3;
    private int bidVolume3_;
    public bool HasBidVolume3 {
      get { return hasBidVolume3; }
    }
    public int BidVolume3 {
      get { return bidVolume3_; }
    }
    
    public const int AskPrice3FieldNumber = 33;
    private bool hasAskPrice3;
    private double askPrice3_;
    public bool HasAskPrice3 {
      get { return hasAskPrice3; }
    }
    public double AskPrice3 {
      get { return askPrice3_; }
    }
    
    public const int AskVolume3FieldNumber = 34;
    private bool hasAskVolume3;
    private int askVolume3_;
    public bool HasAskVolume3 {
      get { return hasAskVolume3; }
    }
    public int AskVolume3 {
      get { return askVolume3_; }
    }
    
    public const int BidPrice4FieldNumber = 35;
    private bool hasBidPrice4;
    private double bidPrice4_;
    public bool HasBidPrice4 {
      get { return hasBidPrice4; }
    }
    public double BidPrice4 {
      get { return bidPrice4_; }
    }
    
    public const int BidVolume4FieldNumber = 36;
    private bool hasBidVolume4;
    private int bidVolume4_;
    public bool HasBidVolume4 {
      get { return hasBidVolume4; }
    }
    public int BidVolume4 {
      get { return bidVolume4_; }
    }
    
    public const int AskPrice4FieldNumber = 37;
    private bool hasAskPrice4;
    private double askPrice4_;
    public bool HasAskPrice4 {
      get { return hasAskPrice4; }
    }
    public double AskPrice4 {
      get { return askPrice4_; }
    }
    
    public const int AskVolume4FieldNumber = 38;
    private bool hasAskVolume4;
    private int askVolume4_;
    public bool HasAskVolume4 {
      get { return hasAskVolume4; }
    }
    public int AskVolume4 {
      get { return askVolume4_; }
    }
    
    public const int BidPrice5FieldNumber = 39;
    private bool hasBidPrice5;
    private double bidPrice5_;
    public bool HasBidPrice5 {
      get { return hasBidPrice5; }
    }
    public double BidPrice5 {
      get { return bidPrice5_; }
    }
    
    public const int BidVolume5FieldNumber = 40;
    private bool hasBidVolume5;
    private int bidVolume5_;
    public bool HasBidVolume5 {
      get { return hasBidVolume5; }
    }
    public int BidVolume5 {
      get { return bidVolume5_; }
    }
    
    public const int AskPrice5FieldNumber = 41;
    private bool hasAskPrice5;
    private double askPrice5_;
    public bool HasAskPrice5 {
      get { return hasAskPrice5; }
    }
    public double AskPrice5 {
      get { return askPrice5_; }
    }
    
    public const int AskVolume5FieldNumber = 42;
    private bool hasAskVolume5;
    private int askVolume5_;
    public bool HasAskVolume5 {
      get { return hasAskVolume5; }
    }
    public int AskVolume5 {
      get { return askVolume5_; }
    }
    
    public const int AveragePriceFieldNumber = 43;
    private bool hasAveragePrice;
    private double averagePrice_;
    public bool HasAveragePrice {
      get { return hasAveragePrice; }
    }
    public double AveragePrice {
      get { return averagePrice_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTradingDay) return false;
        if (!hasInstrumentID) return false;
        if (!hasExchangeID) return false;
        if (!hasExchangeInstID) return false;
        if (!hasLastPrice) return false;
        if (!hasPreSettlementPrice) return false;
        if (!hasPreClosePrice) return false;
        if (!hasPreOpenInterest) return false;
        if (!hasOpenPrice) return false;
        if (!hasHighestPrice) return false;
        if (!hasLowestPrice) return false;
        if (!hasVolume) return false;
        if (!hasTurnover) return false;
        if (!hasOpenInterest) return false;
        if (!hasClosePrice) return false;
        if (!hasSettlementPrice) return false;
        if (!hasUpperLimitPrice) return false;
        if (!hasLowerLimitPrice) return false;
        if (!hasPreDelta) return false;
        if (!hasCurrDelta) return false;
        if (!hasUpdateTime) return false;
        if (!hasUpdateMillisec) return false;
        if (!hasBidPrice1) return false;
        if (!hasBidVolume1) return false;
        if (!hasAskPrice1) return false;
        if (!hasAskVolume1) return false;
        if (!hasBidPrice2) return false;
        if (!hasBidVolume2) return false;
        if (!hasAskPrice2) return false;
        if (!hasAskVolume2) return false;
        if (!hasBidPrice3) return false;
        if (!hasBidVolume3) return false;
        if (!hasAskPrice3) return false;
        if (!hasAskVolume3) return false;
        if (!hasBidPrice4) return false;
        if (!hasBidVolume4) return false;
        if (!hasAskPrice4) return false;
        if (!hasAskVolume4) return false;
        if (!hasBidPrice5) return false;
        if (!hasBidVolume5) return false;
        if (!hasAskPrice5) return false;
        if (!hasAskVolume5) return false;
        if (!hasAveragePrice) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _cThostFtdcDepthMarketDataFieldStructFieldNames;
      if (hasTradingDay) {
        output.WriteString(1, field_names[37], TradingDay);
      }
      if (hasInstrumentID) {
        output.WriteString(2, field_names[26], InstrumentID);
      }
      if (hasExchangeID) {
        output.WriteString(3, field_names[23], ExchangeID);
      }
      if (hasExchangeInstID) {
        output.WriteString(4, field_names[24], ExchangeInstID);
      }
      if (hasLastPrice) {
        output.WriteDouble(5, field_names[27], LastPrice);
      }
      if (hasPreSettlementPrice) {
        output.WriteDouble(6, field_names[35], PreSettlementPrice);
      }
      if (hasPreClosePrice) {
        output.WriteDouble(7, field_names[32], PreClosePrice);
      }
      if (hasPreOpenInterest) {
        output.WriteDouble(8, field_names[34], PreOpenInterest);
      }
      if (hasOpenPrice) {
        output.WriteDouble(9, field_names[31], OpenPrice);
      }
      if (hasHighestPrice) {
        output.WriteDouble(10, field_names[25], HighestPrice);
      }
      if (hasLowestPrice) {
        output.WriteDouble(11, field_names[29], LowestPrice);
      }
      if (hasVolume) {
        output.WriteInt32(12, field_names[42], Volume);
      }
      if (hasTurnover) {
        output.WriteDouble(13, field_names[38], Turnover);
      }
      if (hasOpenInterest) {
        output.WriteDouble(14, field_names[30], OpenInterest);
      }
      if (hasClosePrice) {
        output.WriteDouble(15, field_names[21], ClosePrice);
      }
      if (hasSettlementPrice) {
        output.WriteDouble(16, field_names[36], SettlementPrice);
      }
      if (hasUpperLimitPrice) {
        output.WriteDouble(17, field_names[41], UpperLimitPrice);
      }
      if (hasLowerLimitPrice) {
        output.WriteDouble(18, field_names[28], LowerLimitPrice);
      }
      if (hasPreDelta) {
        output.WriteDouble(19, field_names[33], PreDelta);
      }
      if (hasCurrDelta) {
        output.WriteDouble(20, field_names[22], CurrDelta);
      }
      if (hasUpdateTime) {
        output.WriteString(21, field_names[40], UpdateTime);
      }
      if (hasUpdateMillisec) {
        output.WriteInt32(22, field_names[39], UpdateMillisec);
      }
      if (hasBidPrice1) {
        output.WriteDouble(23, field_names[11], BidPrice1);
      }
      if (hasBidVolume1) {
        output.WriteInt32(24, field_names[16], BidVolume1);
      }
      if (hasAskPrice1) {
        output.WriteDouble(25, field_names[0], AskPrice1);
      }
      if (hasAskVolume1) {
        output.WriteInt32(26, field_names[5], AskVolume1);
      }
      if (hasBidPrice2) {
        output.WriteDouble(27, field_names[12], BidPrice2);
      }
      if (hasBidVolume2) {
        output.WriteInt32(28, field_names[17], BidVolume2);
      }
      if (hasAskPrice2) {
        output.WriteDouble(29, field_names[1], AskPrice2);
      }
      if (hasAskVolume2) {
        output.WriteInt32(30, field_names[6], AskVolume2);
      }
      if (hasBidPrice3) {
        output.WriteDouble(31, field_names[13], BidPrice3);
      }
      if (hasBidVolume3) {
        output.WriteInt32(32, field_names[18], BidVolume3);
      }
      if (hasAskPrice3) {
        output.WriteDouble(33, field_names[2], AskPrice3);
      }
      if (hasAskVolume3) {
        output.WriteInt32(34, field_names[7], AskVolume3);
      }
      if (hasBidPrice4) {
        output.WriteDouble(35, field_names[14], BidPrice4);
      }
      if (hasBidVolume4) {
        output.WriteInt32(36, field_names[19], BidVolume4);
      }
      if (hasAskPrice4) {
        output.WriteDouble(37, field_names[3], AskPrice4);
      }
      if (hasAskVolume4) {
        output.WriteInt32(38, field_names[8], AskVolume4);
      }
      if (hasBidPrice5) {
        output.WriteDouble(39, field_names[15], BidPrice5);
      }
      if (hasBidVolume5) {
        output.WriteInt32(40, field_names[20], BidVolume5);
      }
      if (hasAskPrice5) {
        output.WriteDouble(41, field_names[4], AskPrice5);
      }
      if (hasAskVolume5) {
        output.WriteInt32(42, field_names[9], AskVolume5);
      }
      if (hasAveragePrice) {
        output.WriteDouble(43, field_names[10], AveragePrice);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTradingDay) {
          size += pb::CodedOutputStream.ComputeStringSize(1, TradingDay);
        }
        if (hasInstrumentID) {
          size += pb::CodedOutputStream.ComputeStringSize(2, InstrumentID);
        }
        if (hasExchangeID) {
          size += pb::CodedOutputStream.ComputeStringSize(3, ExchangeID);
        }
        if (hasExchangeInstID) {
          size += pb::CodedOutputStream.ComputeStringSize(4, ExchangeInstID);
        }
        if (hasLastPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(5, LastPrice);
        }
        if (hasPreSettlementPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(6, PreSettlementPrice);
        }
        if (hasPreClosePrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(7, PreClosePrice);
        }
        if (hasPreOpenInterest) {
          size += pb::CodedOutputStream.ComputeDoubleSize(8, PreOpenInterest);
        }
        if (hasOpenPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(9, OpenPrice);
        }
        if (hasHighestPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(10, HighestPrice);
        }
        if (hasLowestPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(11, LowestPrice);
        }
        if (hasVolume) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, Volume);
        }
        if (hasTurnover) {
          size += pb::CodedOutputStream.ComputeDoubleSize(13, Turnover);
        }
        if (hasOpenInterest) {
          size += pb::CodedOutputStream.ComputeDoubleSize(14, OpenInterest);
        }
        if (hasClosePrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(15, ClosePrice);
        }
        if (hasSettlementPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(16, SettlementPrice);
        }
        if (hasUpperLimitPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(17, UpperLimitPrice);
        }
        if (hasLowerLimitPrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(18, LowerLimitPrice);
        }
        if (hasPreDelta) {
          size += pb::CodedOutputStream.ComputeDoubleSize(19, PreDelta);
        }
        if (hasCurrDelta) {
          size += pb::CodedOutputStream.ComputeDoubleSize(20, CurrDelta);
        }
        if (hasUpdateTime) {
          size += pb::CodedOutputStream.ComputeStringSize(21, UpdateTime);
        }
        if (hasUpdateMillisec) {
          size += pb::CodedOutputStream.ComputeInt32Size(22, UpdateMillisec);
        }
        if (hasBidPrice1) {
          size += pb::CodedOutputStream.ComputeDoubleSize(23, BidPrice1);
        }
        if (hasBidVolume1) {
          size += pb::CodedOutputStream.ComputeInt32Size(24, BidVolume1);
        }
        if (hasAskPrice1) {
          size += pb::CodedOutputStream.ComputeDoubleSize(25, AskPrice1);
        }
        if (hasAskVolume1) {
          size += pb::CodedOutputStream.ComputeInt32Size(26, AskVolume1);
        }
        if (hasBidPrice2) {
          size += pb::CodedOutputStream.ComputeDoubleSize(27, BidPrice2);
        }
        if (hasBidVolume2) {
          size += pb::CodedOutputStream.ComputeInt32Size(28, BidVolume2);
        }
        if (hasAskPrice2) {
          size += pb::CodedOutputStream.ComputeDoubleSize(29, AskPrice2);
        }
        if (hasAskVolume2) {
          size += pb::CodedOutputStream.ComputeInt32Size(30, AskVolume2);
        }
        if (hasBidPrice3) {
          size += pb::CodedOutputStream.ComputeDoubleSize(31, BidPrice3);
        }
        if (hasBidVolume3) {
          size += pb::CodedOutputStream.ComputeInt32Size(32, BidVolume3);
        }
        if (hasAskPrice3) {
          size += pb::CodedOutputStream.ComputeDoubleSize(33, AskPrice3);
        }
        if (hasAskVolume3) {
          size += pb::CodedOutputStream.ComputeInt32Size(34, AskVolume3);
        }
        if (hasBidPrice4) {
          size += pb::CodedOutputStream.ComputeDoubleSize(35, BidPrice4);
        }
        if (hasBidVolume4) {
          size += pb::CodedOutputStream.ComputeInt32Size(36, BidVolume4);
        }
        if (hasAskPrice4) {
          size += pb::CodedOutputStream.ComputeDoubleSize(37, AskPrice4);
        }
        if (hasAskVolume4) {
          size += pb::CodedOutputStream.ComputeInt32Size(38, AskVolume4);
        }
        if (hasBidPrice5) {
          size += pb::CodedOutputStream.ComputeDoubleSize(39, BidPrice5);
        }
        if (hasBidVolume5) {
          size += pb::CodedOutputStream.ComputeInt32Size(40, BidVolume5);
        }
        if (hasAskPrice5) {
          size += pb::CodedOutputStream.ComputeDoubleSize(41, AskPrice5);
        }
        if (hasAskVolume5) {
          size += pb::CodedOutputStream.ComputeInt32Size(42, AskVolume5);
        }
        if (hasAveragePrice) {
          size += pb::CodedOutputStream.ComputeDoubleSize(43, AveragePrice);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CThostFtdcDepthMarketDataFieldStruct ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CThostFtdcDepthMarketDataFieldStruct ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CThostFtdcDepthMarketDataFieldStruct ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CThostFtdcDepthMarketDataFieldStruct ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CThostFtdcDepthMarketDataFieldStruct ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CThostFtdcDepthMarketDataFieldStruct ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CThostFtdcDepthMarketDataFieldStruct ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CThostFtdcDepthMarketDataFieldStruct ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CThostFtdcDepthMarketDataFieldStruct ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CThostFtdcDepthMarketDataFieldStruct ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CThostFtdcDepthMarketDataFieldStruct MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CThostFtdcDepthMarketDataFieldStruct prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CThostFtdcDepthMarketDataFieldStruct, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CThostFtdcDepthMarketDataFieldStruct cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CThostFtdcDepthMarketDataFieldStruct result;
      
      private CThostFtdcDepthMarketDataFieldStruct PrepareBuilder() {
        if (resultIsReadOnly) {
          CThostFtdcDepthMarketDataFieldStruct original = result;
          result = new CThostFtdcDepthMarketDataFieldStruct();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CThostFtdcDepthMarketDataFieldStruct MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct.Descriptor; }
      }
      
      public override CThostFtdcDepthMarketDataFieldStruct DefaultInstanceForType {
        get { return global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct.DefaultInstance; }
      }
      
      public override CThostFtdcDepthMarketDataFieldStruct BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CThostFtdcDepthMarketDataFieldStruct) {
          return MergeFrom((CThostFtdcDepthMarketDataFieldStruct) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CThostFtdcDepthMarketDataFieldStruct other) {
        if (other == global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTradingDay) {
          TradingDay = other.TradingDay;
        }
        if (other.HasInstrumentID) {
          InstrumentID = other.InstrumentID;
        }
        if (other.HasExchangeID) {
          ExchangeID = other.ExchangeID;
        }
        if (other.HasExchangeInstID) {
          ExchangeInstID = other.ExchangeInstID;
        }
        if (other.HasLastPrice) {
          LastPrice = other.LastPrice;
        }
        if (other.HasPreSettlementPrice) {
          PreSettlementPrice = other.PreSettlementPrice;
        }
        if (other.HasPreClosePrice) {
          PreClosePrice = other.PreClosePrice;
        }
        if (other.HasPreOpenInterest) {
          PreOpenInterest = other.PreOpenInterest;
        }
        if (other.HasOpenPrice) {
          OpenPrice = other.OpenPrice;
        }
        if (other.HasHighestPrice) {
          HighestPrice = other.HighestPrice;
        }
        if (other.HasLowestPrice) {
          LowestPrice = other.LowestPrice;
        }
        if (other.HasVolume) {
          Volume = other.Volume;
        }
        if (other.HasTurnover) {
          Turnover = other.Turnover;
        }
        if (other.HasOpenInterest) {
          OpenInterest = other.OpenInterest;
        }
        if (other.HasClosePrice) {
          ClosePrice = other.ClosePrice;
        }
        if (other.HasSettlementPrice) {
          SettlementPrice = other.SettlementPrice;
        }
        if (other.HasUpperLimitPrice) {
          UpperLimitPrice = other.UpperLimitPrice;
        }
        if (other.HasLowerLimitPrice) {
          LowerLimitPrice = other.LowerLimitPrice;
        }
        if (other.HasPreDelta) {
          PreDelta = other.PreDelta;
        }
        if (other.HasCurrDelta) {
          CurrDelta = other.CurrDelta;
        }
        if (other.HasUpdateTime) {
          UpdateTime = other.UpdateTime;
        }
        if (other.HasUpdateMillisec) {
          UpdateMillisec = other.UpdateMillisec;
        }
        if (other.HasBidPrice1) {
          BidPrice1 = other.BidPrice1;
        }
        if (other.HasBidVolume1) {
          BidVolume1 = other.BidVolume1;
        }
        if (other.HasAskPrice1) {
          AskPrice1 = other.AskPrice1;
        }
        if (other.HasAskVolume1) {
          AskVolume1 = other.AskVolume1;
        }
        if (other.HasBidPrice2) {
          BidPrice2 = other.BidPrice2;
        }
        if (other.HasBidVolume2) {
          BidVolume2 = other.BidVolume2;
        }
        if (other.HasAskPrice2) {
          AskPrice2 = other.AskPrice2;
        }
        if (other.HasAskVolume2) {
          AskVolume2 = other.AskVolume2;
        }
        if (other.HasBidPrice3) {
          BidPrice3 = other.BidPrice3;
        }
        if (other.HasBidVolume3) {
          BidVolume3 = other.BidVolume3;
        }
        if (other.HasAskPrice3) {
          AskPrice3 = other.AskPrice3;
        }
        if (other.HasAskVolume3) {
          AskVolume3 = other.AskVolume3;
        }
        if (other.HasBidPrice4) {
          BidPrice4 = other.BidPrice4;
        }
        if (other.HasBidVolume4) {
          BidVolume4 = other.BidVolume4;
        }
        if (other.HasAskPrice4) {
          AskPrice4 = other.AskPrice4;
        }
        if (other.HasAskVolume4) {
          AskVolume4 = other.AskVolume4;
        }
        if (other.HasBidPrice5) {
          BidPrice5 = other.BidPrice5;
        }
        if (other.HasBidVolume5) {
          BidVolume5 = other.BidVolume5;
        }
        if (other.HasAskPrice5) {
          AskPrice5 = other.AskPrice5;
        }
        if (other.HasAskVolume5) {
          AskVolume5 = other.AskVolume5;
        }
        if (other.HasAveragePrice) {
          AveragePrice = other.AveragePrice;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cThostFtdcDepthMarketDataFieldStructFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cThostFtdcDepthMarketDataFieldStructFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasTradingDay = input.ReadString(ref result.tradingDay_);
              break;
            }
            case 18: {
              result.hasInstrumentID = input.ReadString(ref result.instrumentID_);
              break;
            }
            case 26: {
              result.hasExchangeID = input.ReadString(ref result.exchangeID_);
              break;
            }
            case 34: {
              result.hasExchangeInstID = input.ReadString(ref result.exchangeInstID_);
              break;
            }
            case 41: {
              result.hasLastPrice = input.ReadDouble(ref result.lastPrice_);
              break;
            }
            case 49: {
              result.hasPreSettlementPrice = input.ReadDouble(ref result.preSettlementPrice_);
              break;
            }
            case 57: {
              result.hasPreClosePrice = input.ReadDouble(ref result.preClosePrice_);
              break;
            }
            case 65: {
              result.hasPreOpenInterest = input.ReadDouble(ref result.preOpenInterest_);
              break;
            }
            case 73: {
              result.hasOpenPrice = input.ReadDouble(ref result.openPrice_);
              break;
            }
            case 81: {
              result.hasHighestPrice = input.ReadDouble(ref result.highestPrice_);
              break;
            }
            case 89: {
              result.hasLowestPrice = input.ReadDouble(ref result.lowestPrice_);
              break;
            }
            case 96: {
              result.hasVolume = input.ReadInt32(ref result.volume_);
              break;
            }
            case 105: {
              result.hasTurnover = input.ReadDouble(ref result.turnover_);
              break;
            }
            case 113: {
              result.hasOpenInterest = input.ReadDouble(ref result.openInterest_);
              break;
            }
            case 121: {
              result.hasClosePrice = input.ReadDouble(ref result.closePrice_);
              break;
            }
            case 129: {
              result.hasSettlementPrice = input.ReadDouble(ref result.settlementPrice_);
              break;
            }
            case 137: {
              result.hasUpperLimitPrice = input.ReadDouble(ref result.upperLimitPrice_);
              break;
            }
            case 145: {
              result.hasLowerLimitPrice = input.ReadDouble(ref result.lowerLimitPrice_);
              break;
            }
            case 153: {
              result.hasPreDelta = input.ReadDouble(ref result.preDelta_);
              break;
            }
            case 161: {
              result.hasCurrDelta = input.ReadDouble(ref result.currDelta_);
              break;
            }
            case 170: {
              result.hasUpdateTime = input.ReadString(ref result.updateTime_);
              break;
            }
            case 176: {
              result.hasUpdateMillisec = input.ReadInt32(ref result.updateMillisec_);
              break;
            }
            case 185: {
              result.hasBidPrice1 = input.ReadDouble(ref result.bidPrice1_);
              break;
            }
            case 192: {
              result.hasBidVolume1 = input.ReadInt32(ref result.bidVolume1_);
              break;
            }
            case 201: {
              result.hasAskPrice1 = input.ReadDouble(ref result.askPrice1_);
              break;
            }
            case 208: {
              result.hasAskVolume1 = input.ReadInt32(ref result.askVolume1_);
              break;
            }
            case 217: {
              result.hasBidPrice2 = input.ReadDouble(ref result.bidPrice2_);
              break;
            }
            case 224: {
              result.hasBidVolume2 = input.ReadInt32(ref result.bidVolume2_);
              break;
            }
            case 233: {
              result.hasAskPrice2 = input.ReadDouble(ref result.askPrice2_);
              break;
            }
            case 240: {
              result.hasAskVolume2 = input.ReadInt32(ref result.askVolume2_);
              break;
            }
            case 249: {
              result.hasBidPrice3 = input.ReadDouble(ref result.bidPrice3_);
              break;
            }
            case 256: {
              result.hasBidVolume3 = input.ReadInt32(ref result.bidVolume3_);
              break;
            }
            case 265: {
              result.hasAskPrice3 = input.ReadDouble(ref result.askPrice3_);
              break;
            }
            case 272: {
              result.hasAskVolume3 = input.ReadInt32(ref result.askVolume3_);
              break;
            }
            case 281: {
              result.hasBidPrice4 = input.ReadDouble(ref result.bidPrice4_);
              break;
            }
            case 288: {
              result.hasBidVolume4 = input.ReadInt32(ref result.bidVolume4_);
              break;
            }
            case 297: {
              result.hasAskPrice4 = input.ReadDouble(ref result.askPrice4_);
              break;
            }
            case 304: {
              result.hasAskVolume4 = input.ReadInt32(ref result.askVolume4_);
              break;
            }
            case 313: {
              result.hasBidPrice5 = input.ReadDouble(ref result.bidPrice5_);
              break;
            }
            case 320: {
              result.hasBidVolume5 = input.ReadInt32(ref result.bidVolume5_);
              break;
            }
            case 329: {
              result.hasAskPrice5 = input.ReadDouble(ref result.askPrice5_);
              break;
            }
            case 336: {
              result.hasAskVolume5 = input.ReadInt32(ref result.askVolume5_);
              break;
            }
            case 345: {
              result.hasAveragePrice = input.ReadDouble(ref result.averagePrice_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTradingDay {
        get { return result.hasTradingDay; }
      }
      public string TradingDay {
        get { return result.TradingDay; }
        set { SetTradingDay(value); }
      }
      public Builder SetTradingDay(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTradingDay = true;
        result.tradingDay_ = value;
        return this;
      }
      public Builder ClearTradingDay() {
        PrepareBuilder();
        result.hasTradingDay = false;
        result.tradingDay_ = "";
        return this;
      }
      
      public bool HasInstrumentID {
        get { return result.hasInstrumentID; }
      }
      public string InstrumentID {
        get { return result.InstrumentID; }
        set { SetInstrumentID(value); }
      }
      public Builder SetInstrumentID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInstrumentID = true;
        result.instrumentID_ = value;
        return this;
      }
      public Builder ClearInstrumentID() {
        PrepareBuilder();
        result.hasInstrumentID = false;
        result.instrumentID_ = "";
        return this;
      }
      
      public bool HasExchangeID {
        get { return result.hasExchangeID; }
      }
      public string ExchangeID {
        get { return result.ExchangeID; }
        set { SetExchangeID(value); }
      }
      public Builder SetExchangeID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchangeID = true;
        result.exchangeID_ = value;
        return this;
      }
      public Builder ClearExchangeID() {
        PrepareBuilder();
        result.hasExchangeID = false;
        result.exchangeID_ = "";
        return this;
      }
      
      public bool HasExchangeInstID {
        get { return result.hasExchangeInstID; }
      }
      public string ExchangeInstID {
        get { return result.ExchangeInstID; }
        set { SetExchangeInstID(value); }
      }
      public Builder SetExchangeInstID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExchangeInstID = true;
        result.exchangeInstID_ = value;
        return this;
      }
      public Builder ClearExchangeInstID() {
        PrepareBuilder();
        result.hasExchangeInstID = false;
        result.exchangeInstID_ = "";
        return this;
      }
      
      public bool HasLastPrice {
        get { return result.hasLastPrice; }
      }
      public double LastPrice {
        get { return result.LastPrice; }
        set { SetLastPrice(value); }
      }
      public Builder SetLastPrice(double value) {
        PrepareBuilder();
        result.hasLastPrice = true;
        result.lastPrice_ = value;
        return this;
      }
      public Builder ClearLastPrice() {
        PrepareBuilder();
        result.hasLastPrice = false;
        result.lastPrice_ = 0D;
        return this;
      }
      
      public bool HasPreSettlementPrice {
        get { return result.hasPreSettlementPrice; }
      }
      public double PreSettlementPrice {
        get { return result.PreSettlementPrice; }
        set { SetPreSettlementPrice(value); }
      }
      public Builder SetPreSettlementPrice(double value) {
        PrepareBuilder();
        result.hasPreSettlementPrice = true;
        result.preSettlementPrice_ = value;
        return this;
      }
      public Builder ClearPreSettlementPrice() {
        PrepareBuilder();
        result.hasPreSettlementPrice = false;
        result.preSettlementPrice_ = 0D;
        return this;
      }
      
      public bool HasPreClosePrice {
        get { return result.hasPreClosePrice; }
      }
      public double PreClosePrice {
        get { return result.PreClosePrice; }
        set { SetPreClosePrice(value); }
      }
      public Builder SetPreClosePrice(double value) {
        PrepareBuilder();
        result.hasPreClosePrice = true;
        result.preClosePrice_ = value;
        return this;
      }
      public Builder ClearPreClosePrice() {
        PrepareBuilder();
        result.hasPreClosePrice = false;
        result.preClosePrice_ = 0D;
        return this;
      }
      
      public bool HasPreOpenInterest {
        get { return result.hasPreOpenInterest; }
      }
      public double PreOpenInterest {
        get { return result.PreOpenInterest; }
        set { SetPreOpenInterest(value); }
      }
      public Builder SetPreOpenInterest(double value) {
        PrepareBuilder();
        result.hasPreOpenInterest = true;
        result.preOpenInterest_ = value;
        return this;
      }
      public Builder ClearPreOpenInterest() {
        PrepareBuilder();
        result.hasPreOpenInterest = false;
        result.preOpenInterest_ = 0D;
        return this;
      }
      
      public bool HasOpenPrice {
        get { return result.hasOpenPrice; }
      }
      public double OpenPrice {
        get { return result.OpenPrice; }
        set { SetOpenPrice(value); }
      }
      public Builder SetOpenPrice(double value) {
        PrepareBuilder();
        result.hasOpenPrice = true;
        result.openPrice_ = value;
        return this;
      }
      public Builder ClearOpenPrice() {
        PrepareBuilder();
        result.hasOpenPrice = false;
        result.openPrice_ = 0D;
        return this;
      }
      
      public bool HasHighestPrice {
        get { return result.hasHighestPrice; }
      }
      public double HighestPrice {
        get { return result.HighestPrice; }
        set { SetHighestPrice(value); }
      }
      public Builder SetHighestPrice(double value) {
        PrepareBuilder();
        result.hasHighestPrice = true;
        result.highestPrice_ = value;
        return this;
      }
      public Builder ClearHighestPrice() {
        PrepareBuilder();
        result.hasHighestPrice = false;
        result.highestPrice_ = 0D;
        return this;
      }
      
      public bool HasLowestPrice {
        get { return result.hasLowestPrice; }
      }
      public double LowestPrice {
        get { return result.LowestPrice; }
        set { SetLowestPrice(value); }
      }
      public Builder SetLowestPrice(double value) {
        PrepareBuilder();
        result.hasLowestPrice = true;
        result.lowestPrice_ = value;
        return this;
      }
      public Builder ClearLowestPrice() {
        PrepareBuilder();
        result.hasLowestPrice = false;
        result.lowestPrice_ = 0D;
        return this;
      }
      
      public bool HasVolume {
        get { return result.hasVolume; }
      }
      public int Volume {
        get { return result.Volume; }
        set { SetVolume(value); }
      }
      public Builder SetVolume(int value) {
        PrepareBuilder();
        result.hasVolume = true;
        result.volume_ = value;
        return this;
      }
      public Builder ClearVolume() {
        PrepareBuilder();
        result.hasVolume = false;
        result.volume_ = 0;
        return this;
      }
      
      public bool HasTurnover {
        get { return result.hasTurnover; }
      }
      public double Turnover {
        get { return result.Turnover; }
        set { SetTurnover(value); }
      }
      public Builder SetTurnover(double value) {
        PrepareBuilder();
        result.hasTurnover = true;
        result.turnover_ = value;
        return this;
      }
      public Builder ClearTurnover() {
        PrepareBuilder();
        result.hasTurnover = false;
        result.turnover_ = 0D;
        return this;
      }
      
      public bool HasOpenInterest {
        get { return result.hasOpenInterest; }
      }
      public double OpenInterest {
        get { return result.OpenInterest; }
        set { SetOpenInterest(value); }
      }
      public Builder SetOpenInterest(double value) {
        PrepareBuilder();
        result.hasOpenInterest = true;
        result.openInterest_ = value;
        return this;
      }
      public Builder ClearOpenInterest() {
        PrepareBuilder();
        result.hasOpenInterest = false;
        result.openInterest_ = 0D;
        return this;
      }
      
      public bool HasClosePrice {
        get { return result.hasClosePrice; }
      }
      public double ClosePrice {
        get { return result.ClosePrice; }
        set { SetClosePrice(value); }
      }
      public Builder SetClosePrice(double value) {
        PrepareBuilder();
        result.hasClosePrice = true;
        result.closePrice_ = value;
        return this;
      }
      public Builder ClearClosePrice() {
        PrepareBuilder();
        result.hasClosePrice = false;
        result.closePrice_ = 0D;
        return this;
      }
      
      public bool HasSettlementPrice {
        get { return result.hasSettlementPrice; }
      }
      public double SettlementPrice {
        get { return result.SettlementPrice; }
        set { SetSettlementPrice(value); }
      }
      public Builder SetSettlementPrice(double value) {
        PrepareBuilder();
        result.hasSettlementPrice = true;
        result.settlementPrice_ = value;
        return this;
      }
      public Builder ClearSettlementPrice() {
        PrepareBuilder();
        result.hasSettlementPrice = false;
        result.settlementPrice_ = 0D;
        return this;
      }
      
      public bool HasUpperLimitPrice {
        get { return result.hasUpperLimitPrice; }
      }
      public double UpperLimitPrice {
        get { return result.UpperLimitPrice; }
        set { SetUpperLimitPrice(value); }
      }
      public Builder SetUpperLimitPrice(double value) {
        PrepareBuilder();
        result.hasUpperLimitPrice = true;
        result.upperLimitPrice_ = value;
        return this;
      }
      public Builder ClearUpperLimitPrice() {
        PrepareBuilder();
        result.hasUpperLimitPrice = false;
        result.upperLimitPrice_ = 0D;
        return this;
      }
      
      public bool HasLowerLimitPrice {
        get { return result.hasLowerLimitPrice; }
      }
      public double LowerLimitPrice {
        get { return result.LowerLimitPrice; }
        set { SetLowerLimitPrice(value); }
      }
      public Builder SetLowerLimitPrice(double value) {
        PrepareBuilder();
        result.hasLowerLimitPrice = true;
        result.lowerLimitPrice_ = value;
        return this;
      }
      public Builder ClearLowerLimitPrice() {
        PrepareBuilder();
        result.hasLowerLimitPrice = false;
        result.lowerLimitPrice_ = 0D;
        return this;
      }
      
      public bool HasPreDelta {
        get { return result.hasPreDelta; }
      }
      public double PreDelta {
        get { return result.PreDelta; }
        set { SetPreDelta(value); }
      }
      public Builder SetPreDelta(double value) {
        PrepareBuilder();
        result.hasPreDelta = true;
        result.preDelta_ = value;
        return this;
      }
      public Builder ClearPreDelta() {
        PrepareBuilder();
        result.hasPreDelta = false;
        result.preDelta_ = 0D;
        return this;
      }
      
      public bool HasCurrDelta {
        get { return result.hasCurrDelta; }
      }
      public double CurrDelta {
        get { return result.CurrDelta; }
        set { SetCurrDelta(value); }
      }
      public Builder SetCurrDelta(double value) {
        PrepareBuilder();
        result.hasCurrDelta = true;
        result.currDelta_ = value;
        return this;
      }
      public Builder ClearCurrDelta() {
        PrepareBuilder();
        result.hasCurrDelta = false;
        result.currDelta_ = 0D;
        return this;
      }
      
      public bool HasUpdateTime {
        get { return result.hasUpdateTime; }
      }
      public string UpdateTime {
        get { return result.UpdateTime; }
        set { SetUpdateTime(value); }
      }
      public Builder SetUpdateTime(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUpdateTime = true;
        result.updateTime_ = value;
        return this;
      }
      public Builder ClearUpdateTime() {
        PrepareBuilder();
        result.hasUpdateTime = false;
        result.updateTime_ = "";
        return this;
      }
      
      public bool HasUpdateMillisec {
        get { return result.hasUpdateMillisec; }
      }
      public int UpdateMillisec {
        get { return result.UpdateMillisec; }
        set { SetUpdateMillisec(value); }
      }
      public Builder SetUpdateMillisec(int value) {
        PrepareBuilder();
        result.hasUpdateMillisec = true;
        result.updateMillisec_ = value;
        return this;
      }
      public Builder ClearUpdateMillisec() {
        PrepareBuilder();
        result.hasUpdateMillisec = false;
        result.updateMillisec_ = 0;
        return this;
      }
      
      public bool HasBidPrice1 {
        get { return result.hasBidPrice1; }
      }
      public double BidPrice1 {
        get { return result.BidPrice1; }
        set { SetBidPrice1(value); }
      }
      public Builder SetBidPrice1(double value) {
        PrepareBuilder();
        result.hasBidPrice1 = true;
        result.bidPrice1_ = value;
        return this;
      }
      public Builder ClearBidPrice1() {
        PrepareBuilder();
        result.hasBidPrice1 = false;
        result.bidPrice1_ = 0D;
        return this;
      }
      
      public bool HasBidVolume1 {
        get { return result.hasBidVolume1; }
      }
      public int BidVolume1 {
        get { return result.BidVolume1; }
        set { SetBidVolume1(value); }
      }
      public Builder SetBidVolume1(int value) {
        PrepareBuilder();
        result.hasBidVolume1 = true;
        result.bidVolume1_ = value;
        return this;
      }
      public Builder ClearBidVolume1() {
        PrepareBuilder();
        result.hasBidVolume1 = false;
        result.bidVolume1_ = 0;
        return this;
      }
      
      public bool HasAskPrice1 {
        get { return result.hasAskPrice1; }
      }
      public double AskPrice1 {
        get { return result.AskPrice1; }
        set { SetAskPrice1(value); }
      }
      public Builder SetAskPrice1(double value) {
        PrepareBuilder();
        result.hasAskPrice1 = true;
        result.askPrice1_ = value;
        return this;
      }
      public Builder ClearAskPrice1() {
        PrepareBuilder();
        result.hasAskPrice1 = false;
        result.askPrice1_ = 0D;
        return this;
      }
      
      public bool HasAskVolume1 {
        get { return result.hasAskVolume1; }
      }
      public int AskVolume1 {
        get { return result.AskVolume1; }
        set { SetAskVolume1(value); }
      }
      public Builder SetAskVolume1(int value) {
        PrepareBuilder();
        result.hasAskVolume1 = true;
        result.askVolume1_ = value;
        return this;
      }
      public Builder ClearAskVolume1() {
        PrepareBuilder();
        result.hasAskVolume1 = false;
        result.askVolume1_ = 0;
        return this;
      }
      
      public bool HasBidPrice2 {
        get { return result.hasBidPrice2; }
      }
      public double BidPrice2 {
        get { return result.BidPrice2; }
        set { SetBidPrice2(value); }
      }
      public Builder SetBidPrice2(double value) {
        PrepareBuilder();
        result.hasBidPrice2 = true;
        result.bidPrice2_ = value;
        return this;
      }
      public Builder ClearBidPrice2() {
        PrepareBuilder();
        result.hasBidPrice2 = false;
        result.bidPrice2_ = 0D;
        return this;
      }
      
      public bool HasBidVolume2 {
        get { return result.hasBidVolume2; }
      }
      public int BidVolume2 {
        get { return result.BidVolume2; }
        set { SetBidVolume2(value); }
      }
      public Builder SetBidVolume2(int value) {
        PrepareBuilder();
        result.hasBidVolume2 = true;
        result.bidVolume2_ = value;
        return this;
      }
      public Builder ClearBidVolume2() {
        PrepareBuilder();
        result.hasBidVolume2 = false;
        result.bidVolume2_ = 0;
        return this;
      }
      
      public bool HasAskPrice2 {
        get { return result.hasAskPrice2; }
      }
      public double AskPrice2 {
        get { return result.AskPrice2; }
        set { SetAskPrice2(value); }
      }
      public Builder SetAskPrice2(double value) {
        PrepareBuilder();
        result.hasAskPrice2 = true;
        result.askPrice2_ = value;
        return this;
      }
      public Builder ClearAskPrice2() {
        PrepareBuilder();
        result.hasAskPrice2 = false;
        result.askPrice2_ = 0D;
        return this;
      }
      
      public bool HasAskVolume2 {
        get { return result.hasAskVolume2; }
      }
      public int AskVolume2 {
        get { return result.AskVolume2; }
        set { SetAskVolume2(value); }
      }
      public Builder SetAskVolume2(int value) {
        PrepareBuilder();
        result.hasAskVolume2 = true;
        result.askVolume2_ = value;
        return this;
      }
      public Builder ClearAskVolume2() {
        PrepareBuilder();
        result.hasAskVolume2 = false;
        result.askVolume2_ = 0;
        return this;
      }
      
      public bool HasBidPrice3 {
        get { return result.hasBidPrice3; }
      }
      public double BidPrice3 {
        get { return result.BidPrice3; }
        set { SetBidPrice3(value); }
      }
      public Builder SetBidPrice3(double value) {
        PrepareBuilder();
        result.hasBidPrice3 = true;
        result.bidPrice3_ = value;
        return this;
      }
      public Builder ClearBidPrice3() {
        PrepareBuilder();
        result.hasBidPrice3 = false;
        result.bidPrice3_ = 0D;
        return this;
      }
      
      public bool HasBidVolume3 {
        get { return result.hasBidVolume3; }
      }
      public int BidVolume3 {
        get { return result.BidVolume3; }
        set { SetBidVolume3(value); }
      }
      public Builder SetBidVolume3(int value) {
        PrepareBuilder();
        result.hasBidVolume3 = true;
        result.bidVolume3_ = value;
        return this;
      }
      public Builder ClearBidVolume3() {
        PrepareBuilder();
        result.hasBidVolume3 = false;
        result.bidVolume3_ = 0;
        return this;
      }
      
      public bool HasAskPrice3 {
        get { return result.hasAskPrice3; }
      }
      public double AskPrice3 {
        get { return result.AskPrice3; }
        set { SetAskPrice3(value); }
      }
      public Builder SetAskPrice3(double value) {
        PrepareBuilder();
        result.hasAskPrice3 = true;
        result.askPrice3_ = value;
        return this;
      }
      public Builder ClearAskPrice3() {
        PrepareBuilder();
        result.hasAskPrice3 = false;
        result.askPrice3_ = 0D;
        return this;
      }
      
      public bool HasAskVolume3 {
        get { return result.hasAskVolume3; }
      }
      public int AskVolume3 {
        get { return result.AskVolume3; }
        set { SetAskVolume3(value); }
      }
      public Builder SetAskVolume3(int value) {
        PrepareBuilder();
        result.hasAskVolume3 = true;
        result.askVolume3_ = value;
        return this;
      }
      public Builder ClearAskVolume3() {
        PrepareBuilder();
        result.hasAskVolume3 = false;
        result.askVolume3_ = 0;
        return this;
      }
      
      public bool HasBidPrice4 {
        get { return result.hasBidPrice4; }
      }
      public double BidPrice4 {
        get { return result.BidPrice4; }
        set { SetBidPrice4(value); }
      }
      public Builder SetBidPrice4(double value) {
        PrepareBuilder();
        result.hasBidPrice4 = true;
        result.bidPrice4_ = value;
        return this;
      }
      public Builder ClearBidPrice4() {
        PrepareBuilder();
        result.hasBidPrice4 = false;
        result.bidPrice4_ = 0D;
        return this;
      }
      
      public bool HasBidVolume4 {
        get { return result.hasBidVolume4; }
      }
      public int BidVolume4 {
        get { return result.BidVolume4; }
        set { SetBidVolume4(value); }
      }
      public Builder SetBidVolume4(int value) {
        PrepareBuilder();
        result.hasBidVolume4 = true;
        result.bidVolume4_ = value;
        return this;
      }
      public Builder ClearBidVolume4() {
        PrepareBuilder();
        result.hasBidVolume4 = false;
        result.bidVolume4_ = 0;
        return this;
      }
      
      public bool HasAskPrice4 {
        get { return result.hasAskPrice4; }
      }
      public double AskPrice4 {
        get { return result.AskPrice4; }
        set { SetAskPrice4(value); }
      }
      public Builder SetAskPrice4(double value) {
        PrepareBuilder();
        result.hasAskPrice4 = true;
        result.askPrice4_ = value;
        return this;
      }
      public Builder ClearAskPrice4() {
        PrepareBuilder();
        result.hasAskPrice4 = false;
        result.askPrice4_ = 0D;
        return this;
      }
      
      public bool HasAskVolume4 {
        get { return result.hasAskVolume4; }
      }
      public int AskVolume4 {
        get { return result.AskVolume4; }
        set { SetAskVolume4(value); }
      }
      public Builder SetAskVolume4(int value) {
        PrepareBuilder();
        result.hasAskVolume4 = true;
        result.askVolume4_ = value;
        return this;
      }
      public Builder ClearAskVolume4() {
        PrepareBuilder();
        result.hasAskVolume4 = false;
        result.askVolume4_ = 0;
        return this;
      }
      
      public bool HasBidPrice5 {
        get { return result.hasBidPrice5; }
      }
      public double BidPrice5 {
        get { return result.BidPrice5; }
        set { SetBidPrice5(value); }
      }
      public Builder SetBidPrice5(double value) {
        PrepareBuilder();
        result.hasBidPrice5 = true;
        result.bidPrice5_ = value;
        return this;
      }
      public Builder ClearBidPrice5() {
        PrepareBuilder();
        result.hasBidPrice5 = false;
        result.bidPrice5_ = 0D;
        return this;
      }
      
      public bool HasBidVolume5 {
        get { return result.hasBidVolume5; }
      }
      public int BidVolume5 {
        get { return result.BidVolume5; }
        set { SetBidVolume5(value); }
      }
      public Builder SetBidVolume5(int value) {
        PrepareBuilder();
        result.hasBidVolume5 = true;
        result.bidVolume5_ = value;
        return this;
      }
      public Builder ClearBidVolume5() {
        PrepareBuilder();
        result.hasBidVolume5 = false;
        result.bidVolume5_ = 0;
        return this;
      }
      
      public bool HasAskPrice5 {
        get { return result.hasAskPrice5; }
      }
      public double AskPrice5 {
        get { return result.AskPrice5; }
        set { SetAskPrice5(value); }
      }
      public Builder SetAskPrice5(double value) {
        PrepareBuilder();
        result.hasAskPrice5 = true;
        result.askPrice5_ = value;
        return this;
      }
      public Builder ClearAskPrice5() {
        PrepareBuilder();
        result.hasAskPrice5 = false;
        result.askPrice5_ = 0D;
        return this;
      }
      
      public bool HasAskVolume5 {
        get { return result.hasAskVolume5; }
      }
      public int AskVolume5 {
        get { return result.AskVolume5; }
        set { SetAskVolume5(value); }
      }
      public Builder SetAskVolume5(int value) {
        PrepareBuilder();
        result.hasAskVolume5 = true;
        result.askVolume5_ = value;
        return this;
      }
      public Builder ClearAskVolume5() {
        PrepareBuilder();
        result.hasAskVolume5 = false;
        result.askVolume5_ = 0;
        return this;
      }
      
      public bool HasAveragePrice {
        get { return result.hasAveragePrice; }
      }
      public double AveragePrice {
        get { return result.AveragePrice; }
        set { SetAveragePrice(value); }
      }
      public Builder SetAveragePrice(double value) {
        PrepareBuilder();
        result.hasAveragePrice = true;
        result.averagePrice_ = value;
        return this;
      }
      public Builder ClearAveragePrice() {
        PrepareBuilder();
        result.hasAveragePrice = false;
        result.averagePrice_ = 0D;
        return this;
      }
    }
    static CThostFtdcDepthMarketDataFieldStruct() {
      object.ReferenceEquals(global::FutureDataPB.Proto.FutureData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class FutureData : pb::GeneratedMessage<FutureData, FutureData.Builder> {
    private FutureData() { }
    private static readonly FutureData defaultInstance = new FutureData().MakeReadOnly();
    private static readonly string[] _futureDataFieldNames = new string[] { "DataPack", "Handle", "Timestamp" };
    private static readonly uint[] _futureDataFieldTags = new uint[] { 26, 16, 8 };
    public static FutureData DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override FutureData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override FutureData ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::FutureDataPB.Proto.FutureData.internal__static_FutureDataPB_FutureData__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<FutureData, FutureData.Builder> InternalFieldAccessors {
      get { return global::FutureDataPB.Proto.FutureData.internal__static_FutureDataPB_FutureData__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class MarketData : pb::GeneratedMessage<MarketData, MarketData.Builder> {
        private MarketData() { }
        private static readonly MarketData defaultInstance = new MarketData().MakeReadOnly();
        private static readonly string[] _marketDataFieldNames = new string[] { "Data", "Date", "Time" };
        private static readonly uint[] _marketDataFieldTags = new uint[] { 26, 8, 16 };
        public static MarketData DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override MarketData DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override MarketData ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::FutureDataPB.Proto.FutureData.internal__static_FutureDataPB_FutureData_MarketData__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<MarketData, MarketData.Builder> InternalFieldAccessors {
          get { return global::FutureDataPB.Proto.FutureData.internal__static_FutureDataPB_FutureData_MarketData__FieldAccessorTable; }
        }
        
        public const int DateFieldNumber = 1;
        private bool hasDate;
        private int date_;
        public bool HasDate {
          get { return hasDate; }
        }
        public int Date {
          get { return date_; }
        }
        
        public const int TimeFieldNumber = 2;
        private bool hasTime;
        private int time_;
        public bool HasTime {
          get { return hasTime; }
        }
        public int Time {
          get { return time_; }
        }
        
        public const int DataFieldNumber = 3;
        private bool hasData;
        private global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct data_;
        public bool HasData {
          get { return hasData; }
        }
        public global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct Data {
          get { return data_ ?? global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct.DefaultInstance; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasDate) return false;
            if (!hasTime) return false;
            if (!hasData) return false;
            if (!Data.IsInitialized) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _marketDataFieldNames;
          if (hasDate) {
            output.WriteInt32(1, field_names[1], Date);
          }
          if (hasTime) {
            output.WriteInt32(2, field_names[2], Time);
          }
          if (hasData) {
            output.WriteMessage(3, field_names[0], Data);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasDate) {
              size += pb::CodedOutputStream.ComputeInt32Size(1, Date);
            }
            if (hasTime) {
              size += pb::CodedOutputStream.ComputeInt32Size(2, Time);
            }
            if (hasData) {
              size += pb::CodedOutputStream.ComputeMessageSize(3, Data);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static MarketData ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static MarketData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static MarketData ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static MarketData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static MarketData ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static MarketData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static MarketData ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static MarketData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static MarketData ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static MarketData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private MarketData MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(MarketData prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<MarketData, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(MarketData cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private MarketData result;
          
          private MarketData PrepareBuilder() {
            if (resultIsReadOnly) {
              MarketData original = result;
              result = new MarketData();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override MarketData MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::FutureDataPB.FutureData.Types.MarketData.Descriptor; }
          }
          
          public override MarketData DefaultInstanceForType {
            get { return global::FutureDataPB.FutureData.Types.MarketData.DefaultInstance; }
          }
          
          public override MarketData BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is MarketData) {
              return MergeFrom((MarketData) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(MarketData other) {
            if (other == global::FutureDataPB.FutureData.Types.MarketData.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasDate) {
              Date = other.Date;
            }
            if (other.HasTime) {
              Time = other.Time;
            }
            if (other.HasData) {
              MergeData(other.Data);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_marketDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _marketDataFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasDate = input.ReadInt32(ref result.date_);
                  break;
                }
                case 16: {
                  result.hasTime = input.ReadInt32(ref result.time_);
                  break;
                }
                case 26: {
                  global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct.Builder subBuilder = global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct.CreateBuilder();
                  if (result.hasData) {
                    subBuilder.MergeFrom(Data);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Data = subBuilder.BuildPartial();
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasDate {
            get { return result.hasDate; }
          }
          public int Date {
            get { return result.Date; }
            set { SetDate(value); }
          }
          public Builder SetDate(int value) {
            PrepareBuilder();
            result.hasDate = true;
            result.date_ = value;
            return this;
          }
          public Builder ClearDate() {
            PrepareBuilder();
            result.hasDate = false;
            result.date_ = 0;
            return this;
          }
          
          public bool HasTime {
            get { return result.hasTime; }
          }
          public int Time {
            get { return result.Time; }
            set { SetTime(value); }
          }
          public Builder SetTime(int value) {
            PrepareBuilder();
            result.hasTime = true;
            result.time_ = value;
            return this;
          }
          public Builder ClearTime() {
            PrepareBuilder();
            result.hasTime = false;
            result.time_ = 0;
            return this;
          }
          
          public bool HasData {
           get { return result.hasData; }
          }
          public global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct Data {
            get { return result.Data; }
            set { SetData(value); }
          }
          public Builder SetData(global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasData = true;
            result.data_ = value;
            return this;
          }
          public Builder SetData(global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasData = true;
            result.data_ = builderForValue.Build();
            return this;
          }
          public Builder MergeData(global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasData &&
                result.data_ != global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct.DefaultInstance) {
                result.data_ = global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct.CreateBuilder(result.data_).MergeFrom(value).BuildPartial();
            } else {
              result.data_ = value;
            }
            result.hasData = true;
            return this;
          }
          public Builder ClearData() {
            PrepareBuilder();
            result.hasData = false;
            result.data_ = null;
            return this;
          }
        }
        static MarketData() {
          object.ReferenceEquals(global::FutureDataPB.Proto.FutureData.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int TimestampFieldNumber = 1;
    private bool hasTimestamp;
    private int timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public int Timestamp {
      get { return timestamp_; }
    }
    
    public const int HandleFieldNumber = 2;
    private bool hasHandle;
    private int handle_;
    public bool HasHandle {
      get { return hasHandle; }
    }
    public int Handle {
      get { return handle_; }
    }
    
    public const int DataPackFieldNumber = 3;
    private pbc::PopsicleList<global::FutureDataPB.FutureData.Types.MarketData> dataPack_ = new pbc::PopsicleList<global::FutureDataPB.FutureData.Types.MarketData>();
    public scg::IList<global::FutureDataPB.FutureData.Types.MarketData> DataPackList {
      get { return dataPack_; }
    }
    public int DataPackCount {
      get { return dataPack_.Count; }
    }
    public global::FutureDataPB.FutureData.Types.MarketData GetDataPack(int index) {
      return dataPack_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTimestamp) return false;
        if (!hasHandle) return false;
        foreach (global::FutureDataPB.FutureData.Types.MarketData element in DataPackList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _futureDataFieldNames;
      if (hasTimestamp) {
        output.WriteInt32(1, field_names[2], Timestamp);
      }
      if (hasHandle) {
        output.WriteInt32(2, field_names[1], Handle);
      }
      if (dataPack_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], dataPack_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Timestamp);
        }
        if (hasHandle) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Handle);
        }
        foreach (global::FutureDataPB.FutureData.Types.MarketData element in DataPackList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static FutureData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FutureData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FutureData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static FutureData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static FutureData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FutureData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static FutureData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static FutureData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static FutureData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static FutureData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private FutureData MakeReadOnly() {
      dataPack_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(FutureData prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<FutureData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(FutureData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private FutureData result;
      
      private FutureData PrepareBuilder() {
        if (resultIsReadOnly) {
          FutureData original = result;
          result = new FutureData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override FutureData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::FutureDataPB.FutureData.Descriptor; }
      }
      
      public override FutureData DefaultInstanceForType {
        get { return global::FutureDataPB.FutureData.DefaultInstance; }
      }
      
      public override FutureData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is FutureData) {
          return MergeFrom((FutureData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(FutureData other) {
        if (other == global::FutureDataPB.FutureData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasHandle) {
          Handle = other.Handle;
        }
        if (other.dataPack_.Count != 0) {
          result.dataPack_.Add(other.dataPack_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_futureDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _futureDataFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTimestamp = input.ReadInt32(ref result.timestamp_);
              break;
            }
            case 16: {
              result.hasHandle = input.ReadInt32(ref result.handle_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.dataPack_, global::FutureDataPB.FutureData.Types.MarketData.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public int Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(int value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0;
        return this;
      }
      
      public bool HasHandle {
        get { return result.hasHandle; }
      }
      public int Handle {
        get { return result.Handle; }
        set { SetHandle(value); }
      }
      public Builder SetHandle(int value) {
        PrepareBuilder();
        result.hasHandle = true;
        result.handle_ = value;
        return this;
      }
      public Builder ClearHandle() {
        PrepareBuilder();
        result.hasHandle = false;
        result.handle_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::FutureDataPB.FutureData.Types.MarketData> DataPackList {
        get { return PrepareBuilder().dataPack_; }
      }
      public int DataPackCount {
        get { return result.DataPackCount; }
      }
      public global::FutureDataPB.FutureData.Types.MarketData GetDataPack(int index) {
        return result.GetDataPack(index);
      }
      public Builder SetDataPack(int index, global::FutureDataPB.FutureData.Types.MarketData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dataPack_[index] = value;
        return this;
      }
      public Builder SetDataPack(int index, global::FutureDataPB.FutureData.Types.MarketData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.dataPack_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDataPack(global::FutureDataPB.FutureData.Types.MarketData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dataPack_.Add(value);
        return this;
      }
      public Builder AddDataPack(global::FutureDataPB.FutureData.Types.MarketData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.dataPack_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDataPack(scg::IEnumerable<global::FutureDataPB.FutureData.Types.MarketData> values) {
        PrepareBuilder();
        result.dataPack_.Add(values);
        return this;
      }
      public Builder ClearDataPack() {
        PrepareBuilder();
        result.dataPack_.Clear();
        return this;
      }
    }
    static FutureData() {
      object.ReferenceEquals(global::FutureDataPB.Proto.FutureData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class CurrentDataRequest : pb::GeneratedMessage<CurrentDataRequest, CurrentDataRequest.Builder> {
    private CurrentDataRequest() { }
    private static readonly CurrentDataRequest defaultInstance = new CurrentDataRequest().MakeReadOnly();
    private static readonly string[] _currentDataRequestFieldNames = new string[] { "ContractList", "Handle", "TimeStamp" };
    private static readonly uint[] _currentDataRequestFieldTags = new uint[] { 26, 16, 8 };
    public static CurrentDataRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CurrentDataRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CurrentDataRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::FutureDataPB.Proto.FutureData.internal__static_FutureDataPB_CurrentDataRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CurrentDataRequest, CurrentDataRequest.Builder> InternalFieldAccessors {
      get { return global::FutureDataPB.Proto.FutureData.internal__static_FutureDataPB_CurrentDataRequest__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class ContractInfo : pb::GeneratedMessage<ContractInfo, ContractInfo.Builder> {
        private ContractInfo() { }
        private static readonly ContractInfo defaultInstance = new ContractInfo().MakeReadOnly();
        private static readonly string[] _contractInfoFieldNames = new string[] { "Contract", "Date", "Time" };
        private static readonly uint[] _contractInfoFieldTags = new uint[] { 26, 8, 16 };
        public static ContractInfo DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override ContractInfo DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override ContractInfo ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::FutureDataPB.Proto.FutureData.internal__static_FutureDataPB_CurrentDataRequest_ContractInfo__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<ContractInfo, ContractInfo.Builder> InternalFieldAccessors {
          get { return global::FutureDataPB.Proto.FutureData.internal__static_FutureDataPB_CurrentDataRequest_ContractInfo__FieldAccessorTable; }
        }
        
        public const int DateFieldNumber = 1;
        private bool hasDate;
        private int date_;
        public bool HasDate {
          get { return hasDate; }
        }
        public int Date {
          get { return date_; }
        }
        
        public const int TimeFieldNumber = 2;
        private bool hasTime;
        private int time_;
        public bool HasTime {
          get { return hasTime; }
        }
        public int Time {
          get { return time_; }
        }
        
        public const int ContractFieldNumber = 3;
        private bool hasContract;
        private string contract_ = "";
        public bool HasContract {
          get { return hasContract; }
        }
        public string Contract {
          get { return contract_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasDate) return false;
            if (!hasTime) return false;
            if (!hasContract) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _contractInfoFieldNames;
          if (hasDate) {
            output.WriteInt32(1, field_names[1], Date);
          }
          if (hasTime) {
            output.WriteInt32(2, field_names[2], Time);
          }
          if (hasContract) {
            output.WriteString(3, field_names[0], Contract);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasDate) {
              size += pb::CodedOutputStream.ComputeInt32Size(1, Date);
            }
            if (hasTime) {
              size += pb::CodedOutputStream.ComputeInt32Size(2, Time);
            }
            if (hasContract) {
              size += pb::CodedOutputStream.ComputeStringSize(3, Contract);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static ContractInfo ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ContractInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ContractInfo ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ContractInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ContractInfo ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ContractInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ContractInfo ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ContractInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ContractInfo ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ContractInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ContractInfo MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ContractInfo prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<ContractInfo, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(ContractInfo cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private ContractInfo result;
          
          private ContractInfo PrepareBuilder() {
            if (resultIsReadOnly) {
              ContractInfo original = result;
              result = new ContractInfo();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override ContractInfo MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::FutureDataPB.CurrentDataRequest.Types.ContractInfo.Descriptor; }
          }
          
          public override ContractInfo DefaultInstanceForType {
            get { return global::FutureDataPB.CurrentDataRequest.Types.ContractInfo.DefaultInstance; }
          }
          
          public override ContractInfo BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is ContractInfo) {
              return MergeFrom((ContractInfo) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(ContractInfo other) {
            if (other == global::FutureDataPB.CurrentDataRequest.Types.ContractInfo.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasDate) {
              Date = other.Date;
            }
            if (other.HasTime) {
              Time = other.Time;
            }
            if (other.HasContract) {
              Contract = other.Contract;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_contractInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _contractInfoFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasDate = input.ReadInt32(ref result.date_);
                  break;
                }
                case 16: {
                  result.hasTime = input.ReadInt32(ref result.time_);
                  break;
                }
                case 26: {
                  result.hasContract = input.ReadString(ref result.contract_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasDate {
            get { return result.hasDate; }
          }
          public int Date {
            get { return result.Date; }
            set { SetDate(value); }
          }
          public Builder SetDate(int value) {
            PrepareBuilder();
            result.hasDate = true;
            result.date_ = value;
            return this;
          }
          public Builder ClearDate() {
            PrepareBuilder();
            result.hasDate = false;
            result.date_ = 0;
            return this;
          }
          
          public bool HasTime {
            get { return result.hasTime; }
          }
          public int Time {
            get { return result.Time; }
            set { SetTime(value); }
          }
          public Builder SetTime(int value) {
            PrepareBuilder();
            result.hasTime = true;
            result.time_ = value;
            return this;
          }
          public Builder ClearTime() {
            PrepareBuilder();
            result.hasTime = false;
            result.time_ = 0;
            return this;
          }
          
          public bool HasContract {
            get { return result.hasContract; }
          }
          public string Contract {
            get { return result.Contract; }
            set { SetContract(value); }
          }
          public Builder SetContract(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasContract = true;
            result.contract_ = value;
            return this;
          }
          public Builder ClearContract() {
            PrepareBuilder();
            result.hasContract = false;
            result.contract_ = "";
            return this;
          }
        }
        static ContractInfo() {
          object.ReferenceEquals(global::FutureDataPB.Proto.FutureData.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int TimeStampFieldNumber = 1;
    private bool hasTimeStamp;
    private int timeStamp_;
    public bool HasTimeStamp {
      get { return hasTimeStamp; }
    }
    public int TimeStamp {
      get { return timeStamp_; }
    }
    
    public const int HandleFieldNumber = 2;
    private bool hasHandle;
    private int handle_;
    public bool HasHandle {
      get { return hasHandle; }
    }
    public int Handle {
      get { return handle_; }
    }
    
    public const int ContractListFieldNumber = 3;
    private pbc::PopsicleList<global::FutureDataPB.CurrentDataRequest.Types.ContractInfo> contractList_ = new pbc::PopsicleList<global::FutureDataPB.CurrentDataRequest.Types.ContractInfo>();
    public scg::IList<global::FutureDataPB.CurrentDataRequest.Types.ContractInfo> ContractListList {
      get { return contractList_; }
    }
    public int ContractListCount {
      get { return contractList_.Count; }
    }
    public global::FutureDataPB.CurrentDataRequest.Types.ContractInfo GetContractList(int index) {
      return contractList_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTimeStamp) return false;
        if (!hasHandle) return false;
        foreach (global::FutureDataPB.CurrentDataRequest.Types.ContractInfo element in ContractListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _currentDataRequestFieldNames;
      if (hasTimeStamp) {
        output.WriteInt32(1, field_names[2], TimeStamp);
      }
      if (hasHandle) {
        output.WriteInt32(2, field_names[1], Handle);
      }
      if (contractList_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], contractList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTimeStamp) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, TimeStamp);
        }
        if (hasHandle) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Handle);
        }
        foreach (global::FutureDataPB.CurrentDataRequest.Types.ContractInfo element in ContractListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CurrentDataRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CurrentDataRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CurrentDataRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CurrentDataRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CurrentDataRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CurrentDataRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CurrentDataRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CurrentDataRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CurrentDataRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CurrentDataRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CurrentDataRequest MakeReadOnly() {
      contractList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CurrentDataRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<CurrentDataRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CurrentDataRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CurrentDataRequest result;
      
      private CurrentDataRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CurrentDataRequest original = result;
          result = new CurrentDataRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CurrentDataRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::FutureDataPB.CurrentDataRequest.Descriptor; }
      }
      
      public override CurrentDataRequest DefaultInstanceForType {
        get { return global::FutureDataPB.CurrentDataRequest.DefaultInstance; }
      }
      
      public override CurrentDataRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CurrentDataRequest) {
          return MergeFrom((CurrentDataRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CurrentDataRequest other) {
        if (other == global::FutureDataPB.CurrentDataRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTimeStamp) {
          TimeStamp = other.TimeStamp;
        }
        if (other.HasHandle) {
          Handle = other.Handle;
        }
        if (other.contractList_.Count != 0) {
          result.contractList_.Add(other.contractList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_currentDataRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _currentDataRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTimeStamp = input.ReadInt32(ref result.timeStamp_);
              break;
            }
            case 16: {
              result.hasHandle = input.ReadInt32(ref result.handle_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.contractList_, global::FutureDataPB.CurrentDataRequest.Types.ContractInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTimeStamp {
        get { return result.hasTimeStamp; }
      }
      public int TimeStamp {
        get { return result.TimeStamp; }
        set { SetTimeStamp(value); }
      }
      public Builder SetTimeStamp(int value) {
        PrepareBuilder();
        result.hasTimeStamp = true;
        result.timeStamp_ = value;
        return this;
      }
      public Builder ClearTimeStamp() {
        PrepareBuilder();
        result.hasTimeStamp = false;
        result.timeStamp_ = 0;
        return this;
      }
      
      public bool HasHandle {
        get { return result.hasHandle; }
      }
      public int Handle {
        get { return result.Handle; }
        set { SetHandle(value); }
      }
      public Builder SetHandle(int value) {
        PrepareBuilder();
        result.hasHandle = true;
        result.handle_ = value;
        return this;
      }
      public Builder ClearHandle() {
        PrepareBuilder();
        result.hasHandle = false;
        result.handle_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::FutureDataPB.CurrentDataRequest.Types.ContractInfo> ContractListList {
        get { return PrepareBuilder().contractList_; }
      }
      public int ContractListCount {
        get { return result.ContractListCount; }
      }
      public global::FutureDataPB.CurrentDataRequest.Types.ContractInfo GetContractList(int index) {
        return result.GetContractList(index);
      }
      public Builder SetContractList(int index, global::FutureDataPB.CurrentDataRequest.Types.ContractInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.contractList_[index] = value;
        return this;
      }
      public Builder SetContractList(int index, global::FutureDataPB.CurrentDataRequest.Types.ContractInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.contractList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddContractList(global::FutureDataPB.CurrentDataRequest.Types.ContractInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.contractList_.Add(value);
        return this;
      }
      public Builder AddContractList(global::FutureDataPB.CurrentDataRequest.Types.ContractInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.contractList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeContractList(scg::IEnumerable<global::FutureDataPB.CurrentDataRequest.Types.ContractInfo> values) {
        PrepareBuilder();
        result.contractList_.Add(values);
        return this;
      }
      public Builder ClearContractList() {
        PrepareBuilder();
        result.contractList_.Clear();
        return this;
      }
    }
    static CurrentDataRequest() {
      object.ReferenceEquals(global::FutureDataPB.Proto.FutureData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class HistoryDataRequest : pb::GeneratedMessage<HistoryDataRequest, HistoryDataRequest.Builder> {
    private HistoryDataRequest() { }
    private static readonly HistoryDataRequest defaultInstance = new HistoryDataRequest().MakeReadOnly();
    private static readonly string[] _historyDataRequestFieldNames = new string[] { "DataInfo", "Handle", "TimeStamp" };
    private static readonly uint[] _historyDataRequestFieldTags = new uint[] { 26, 16, 8 };
    public static HistoryDataRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HistoryDataRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HistoryDataRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::FutureDataPB.Proto.FutureData.internal__static_FutureDataPB_HistoryDataRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HistoryDataRequest, HistoryDataRequest.Builder> InternalFieldAccessors {
      get { return global::FutureDataPB.Proto.FutureData.internal__static_FutureDataPB_HistoryDataRequest__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class HistoryDataInfo : pb::GeneratedMessage<HistoryDataInfo, HistoryDataInfo.Builder> {
        private HistoryDataInfo() { }
        private static readonly HistoryDataInfo defaultInstance = new HistoryDataInfo().MakeReadOnly();
        private static readonly string[] _historyDataInfoFieldNames = new string[] { "Contract", "EndDate", "EndTime", "StartDate", "StartTime" };
        private static readonly uint[] _historyDataInfoFieldTags = new uint[] { 10, 32, 40, 16, 24 };
        public static HistoryDataInfo DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override HistoryDataInfo DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override HistoryDataInfo ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::FutureDataPB.Proto.FutureData.internal__static_FutureDataPB_HistoryDataRequest_HistoryDataInfo__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<HistoryDataInfo, HistoryDataInfo.Builder> InternalFieldAccessors {
          get { return global::FutureDataPB.Proto.FutureData.internal__static_FutureDataPB_HistoryDataRequest_HistoryDataInfo__FieldAccessorTable; }
        }
        
        public const int ContractFieldNumber = 1;
        private bool hasContract;
        private string contract_ = "";
        public bool HasContract {
          get { return hasContract; }
        }
        public string Contract {
          get { return contract_; }
        }
        
        public const int StartDateFieldNumber = 2;
        private bool hasStartDate;
        private int startDate_;
        public bool HasStartDate {
          get { return hasStartDate; }
        }
        public int StartDate {
          get { return startDate_; }
        }
        
        public const int StartTimeFieldNumber = 3;
        private bool hasStartTime;
        private int startTime_;
        public bool HasStartTime {
          get { return hasStartTime; }
        }
        public int StartTime {
          get { return startTime_; }
        }
        
        public const int EndDateFieldNumber = 4;
        private bool hasEndDate;
        private int endDate_;
        public bool HasEndDate {
          get { return hasEndDate; }
        }
        public int EndDate {
          get { return endDate_; }
        }
        
        public const int EndTimeFieldNumber = 5;
        private bool hasEndTime;
        private int endTime_;
        public bool HasEndTime {
          get { return hasEndTime; }
        }
        public int EndTime {
          get { return endTime_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasContract) return false;
            if (!hasStartDate) return false;
            if (!hasStartTime) return false;
            if (!hasEndDate) return false;
            if (!hasEndTime) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _historyDataInfoFieldNames;
          if (hasContract) {
            output.WriteString(1, field_names[0], Contract);
          }
          if (hasStartDate) {
            output.WriteInt32(2, field_names[3], StartDate);
          }
          if (hasStartTime) {
            output.WriteInt32(3, field_names[4], StartTime);
          }
          if (hasEndDate) {
            output.WriteInt32(4, field_names[1], EndDate);
          }
          if (hasEndTime) {
            output.WriteInt32(5, field_names[2], EndTime);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasContract) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Contract);
            }
            if (hasStartDate) {
              size += pb::CodedOutputStream.ComputeInt32Size(2, StartDate);
            }
            if (hasStartTime) {
              size += pb::CodedOutputStream.ComputeInt32Size(3, StartTime);
            }
            if (hasEndDate) {
              size += pb::CodedOutputStream.ComputeInt32Size(4, EndDate);
            }
            if (hasEndTime) {
              size += pb::CodedOutputStream.ComputeInt32Size(5, EndTime);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static HistoryDataInfo ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static HistoryDataInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static HistoryDataInfo ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static HistoryDataInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static HistoryDataInfo ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static HistoryDataInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static HistoryDataInfo ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static HistoryDataInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static HistoryDataInfo ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static HistoryDataInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private HistoryDataInfo MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(HistoryDataInfo prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<HistoryDataInfo, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(HistoryDataInfo cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private HistoryDataInfo result;
          
          private HistoryDataInfo PrepareBuilder() {
            if (resultIsReadOnly) {
              HistoryDataInfo original = result;
              result = new HistoryDataInfo();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override HistoryDataInfo MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::FutureDataPB.HistoryDataRequest.Types.HistoryDataInfo.Descriptor; }
          }
          
          public override HistoryDataInfo DefaultInstanceForType {
            get { return global::FutureDataPB.HistoryDataRequest.Types.HistoryDataInfo.DefaultInstance; }
          }
          
          public override HistoryDataInfo BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is HistoryDataInfo) {
              return MergeFrom((HistoryDataInfo) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(HistoryDataInfo other) {
            if (other == global::FutureDataPB.HistoryDataRequest.Types.HistoryDataInfo.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasContract) {
              Contract = other.Contract;
            }
            if (other.HasStartDate) {
              StartDate = other.StartDate;
            }
            if (other.HasStartTime) {
              StartTime = other.StartTime;
            }
            if (other.HasEndDate) {
              EndDate = other.EndDate;
            }
            if (other.HasEndTime) {
              EndTime = other.EndTime;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_historyDataInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _historyDataInfoFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasContract = input.ReadString(ref result.contract_);
                  break;
                }
                case 16: {
                  result.hasStartDate = input.ReadInt32(ref result.startDate_);
                  break;
                }
                case 24: {
                  result.hasStartTime = input.ReadInt32(ref result.startTime_);
                  break;
                }
                case 32: {
                  result.hasEndDate = input.ReadInt32(ref result.endDate_);
                  break;
                }
                case 40: {
                  result.hasEndTime = input.ReadInt32(ref result.endTime_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasContract {
            get { return result.hasContract; }
          }
          public string Contract {
            get { return result.Contract; }
            set { SetContract(value); }
          }
          public Builder SetContract(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasContract = true;
            result.contract_ = value;
            return this;
          }
          public Builder ClearContract() {
            PrepareBuilder();
            result.hasContract = false;
            result.contract_ = "";
            return this;
          }
          
          public bool HasStartDate {
            get { return result.hasStartDate; }
          }
          public int StartDate {
            get { return result.StartDate; }
            set { SetStartDate(value); }
          }
          public Builder SetStartDate(int value) {
            PrepareBuilder();
            result.hasStartDate = true;
            result.startDate_ = value;
            return this;
          }
          public Builder ClearStartDate() {
            PrepareBuilder();
            result.hasStartDate = false;
            result.startDate_ = 0;
            return this;
          }
          
          public bool HasStartTime {
            get { return result.hasStartTime; }
          }
          public int StartTime {
            get { return result.StartTime; }
            set { SetStartTime(value); }
          }
          public Builder SetStartTime(int value) {
            PrepareBuilder();
            result.hasStartTime = true;
            result.startTime_ = value;
            return this;
          }
          public Builder ClearStartTime() {
            PrepareBuilder();
            result.hasStartTime = false;
            result.startTime_ = 0;
            return this;
          }
          
          public bool HasEndDate {
            get { return result.hasEndDate; }
          }
          public int EndDate {
            get { return result.EndDate; }
            set { SetEndDate(value); }
          }
          public Builder SetEndDate(int value) {
            PrepareBuilder();
            result.hasEndDate = true;
            result.endDate_ = value;
            return this;
          }
          public Builder ClearEndDate() {
            PrepareBuilder();
            result.hasEndDate = false;
            result.endDate_ = 0;
            return this;
          }
          
          public bool HasEndTime {
            get { return result.hasEndTime; }
          }
          public int EndTime {
            get { return result.EndTime; }
            set { SetEndTime(value); }
          }
          public Builder SetEndTime(int value) {
            PrepareBuilder();
            result.hasEndTime = true;
            result.endTime_ = value;
            return this;
          }
          public Builder ClearEndTime() {
            PrepareBuilder();
            result.hasEndTime = false;
            result.endTime_ = 0;
            return this;
          }
        }
        static HistoryDataInfo() {
          object.ReferenceEquals(global::FutureDataPB.Proto.FutureData.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int TimeStampFieldNumber = 1;
    private bool hasTimeStamp;
    private int timeStamp_;
    public bool HasTimeStamp {
      get { return hasTimeStamp; }
    }
    public int TimeStamp {
      get { return timeStamp_; }
    }
    
    public const int HandleFieldNumber = 2;
    private bool hasHandle;
    private int handle_;
    public bool HasHandle {
      get { return hasHandle; }
    }
    public int Handle {
      get { return handle_; }
    }
    
    public const int DataInfoFieldNumber = 3;
    private pbc::PopsicleList<global::FutureDataPB.HistoryDataRequest.Types.HistoryDataInfo> dataInfo_ = new pbc::PopsicleList<global::FutureDataPB.HistoryDataRequest.Types.HistoryDataInfo>();
    public scg::IList<global::FutureDataPB.HistoryDataRequest.Types.HistoryDataInfo> DataInfoList {
      get { return dataInfo_; }
    }
    public int DataInfoCount {
      get { return dataInfo_.Count; }
    }
    public global::FutureDataPB.HistoryDataRequest.Types.HistoryDataInfo GetDataInfo(int index) {
      return dataInfo_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTimeStamp) return false;
        if (!hasHandle) return false;
        foreach (global::FutureDataPB.HistoryDataRequest.Types.HistoryDataInfo element in DataInfoList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _historyDataRequestFieldNames;
      if (hasTimeStamp) {
        output.WriteInt32(1, field_names[2], TimeStamp);
      }
      if (hasHandle) {
        output.WriteInt32(2, field_names[1], Handle);
      }
      if (dataInfo_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], dataInfo_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTimeStamp) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, TimeStamp);
        }
        if (hasHandle) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Handle);
        }
        foreach (global::FutureDataPB.HistoryDataRequest.Types.HistoryDataInfo element in DataInfoList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HistoryDataRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HistoryDataRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HistoryDataRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HistoryDataRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HistoryDataRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HistoryDataRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HistoryDataRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HistoryDataRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HistoryDataRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HistoryDataRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HistoryDataRequest MakeReadOnly() {
      dataInfo_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HistoryDataRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<HistoryDataRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HistoryDataRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HistoryDataRequest result;
      
      private HistoryDataRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          HistoryDataRequest original = result;
          result = new HistoryDataRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HistoryDataRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::FutureDataPB.HistoryDataRequest.Descriptor; }
      }
      
      public override HistoryDataRequest DefaultInstanceForType {
        get { return global::FutureDataPB.HistoryDataRequest.DefaultInstance; }
      }
      
      public override HistoryDataRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HistoryDataRequest) {
          return MergeFrom((HistoryDataRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HistoryDataRequest other) {
        if (other == global::FutureDataPB.HistoryDataRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTimeStamp) {
          TimeStamp = other.TimeStamp;
        }
        if (other.HasHandle) {
          Handle = other.Handle;
        }
        if (other.dataInfo_.Count != 0) {
          result.dataInfo_.Add(other.dataInfo_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_historyDataRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _historyDataRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTimeStamp = input.ReadInt32(ref result.timeStamp_);
              break;
            }
            case 16: {
              result.hasHandle = input.ReadInt32(ref result.handle_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.dataInfo_, global::FutureDataPB.HistoryDataRequest.Types.HistoryDataInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTimeStamp {
        get { return result.hasTimeStamp; }
      }
      public int TimeStamp {
        get { return result.TimeStamp; }
        set { SetTimeStamp(value); }
      }
      public Builder SetTimeStamp(int value) {
        PrepareBuilder();
        result.hasTimeStamp = true;
        result.timeStamp_ = value;
        return this;
      }
      public Builder ClearTimeStamp() {
        PrepareBuilder();
        result.hasTimeStamp = false;
        result.timeStamp_ = 0;
        return this;
      }
      
      public bool HasHandle {
        get { return result.hasHandle; }
      }
      public int Handle {
        get { return result.Handle; }
        set { SetHandle(value); }
      }
      public Builder SetHandle(int value) {
        PrepareBuilder();
        result.hasHandle = true;
        result.handle_ = value;
        return this;
      }
      public Builder ClearHandle() {
        PrepareBuilder();
        result.hasHandle = false;
        result.handle_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::FutureDataPB.HistoryDataRequest.Types.HistoryDataInfo> DataInfoList {
        get { return PrepareBuilder().dataInfo_; }
      }
      public int DataInfoCount {
        get { return result.DataInfoCount; }
      }
      public global::FutureDataPB.HistoryDataRequest.Types.HistoryDataInfo GetDataInfo(int index) {
        return result.GetDataInfo(index);
      }
      public Builder SetDataInfo(int index, global::FutureDataPB.HistoryDataRequest.Types.HistoryDataInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dataInfo_[index] = value;
        return this;
      }
      public Builder SetDataInfo(int index, global::FutureDataPB.HistoryDataRequest.Types.HistoryDataInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.dataInfo_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDataInfo(global::FutureDataPB.HistoryDataRequest.Types.HistoryDataInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dataInfo_.Add(value);
        return this;
      }
      public Builder AddDataInfo(global::FutureDataPB.HistoryDataRequest.Types.HistoryDataInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.dataInfo_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDataInfo(scg::IEnumerable<global::FutureDataPB.HistoryDataRequest.Types.HistoryDataInfo> values) {
        PrepareBuilder();
        result.dataInfo_.Add(values);
        return this;
      }
      public Builder ClearDataInfo() {
        PrepareBuilder();
        result.dataInfo_.Clear();
        return this;
      }
    }
    static HistoryDataRequest() {
      object.ReferenceEquals(global::FutureDataPB.Proto.FutureData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class HistoryDataResponse : pb::GeneratedMessage<HistoryDataResponse, HistoryDataResponse.Builder> {
    private HistoryDataResponse() { }
    private static readonly HistoryDataResponse defaultInstance = new HistoryDataResponse().MakeReadOnly();
    private static readonly string[] _historyDataResponseFieldNames = new string[] { "DataSeries", "Handle", "Timestamp" };
    private static readonly uint[] _historyDataResponseFieldTags = new uint[] { 26, 16, 8 };
    public static HistoryDataResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override HistoryDataResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override HistoryDataResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::FutureDataPB.Proto.FutureData.internal__static_FutureDataPB_HistoryDataResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<HistoryDataResponse, HistoryDataResponse.Builder> InternalFieldAccessors {
      get { return global::FutureDataPB.Proto.FutureData.internal__static_FutureDataPB_HistoryDataResponse__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class MarketDataSeries : pb::GeneratedMessage<MarketDataSeries, MarketDataSeries.Builder> {
        private MarketDataSeries() { }
        private static readonly MarketDataSeries defaultInstance = new MarketDataSeries().MakeReadOnly();
        private static readonly string[] _marketDataSeriesFieldNames = new string[] { "Contract", "Data" };
        private static readonly uint[] _marketDataSeriesFieldTags = new uint[] { 10, 18 };
        public static MarketDataSeries DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override MarketDataSeries DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override MarketDataSeries ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::FutureDataPB.Proto.FutureData.internal__static_FutureDataPB_HistoryDataResponse_MarketDataSeries__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<MarketDataSeries, MarketDataSeries.Builder> InternalFieldAccessors {
          get { return global::FutureDataPB.Proto.FutureData.internal__static_FutureDataPB_HistoryDataResponse_MarketDataSeries__FieldAccessorTable; }
        }
        
        public const int ContractFieldNumber = 1;
        private bool hasContract;
        private string contract_ = "";
        public bool HasContract {
          get { return hasContract; }
        }
        public string Contract {
          get { return contract_; }
        }
        
        public const int DataFieldNumber = 2;
        private pbc::PopsicleList<global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct> data_ = new pbc::PopsicleList<global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct>();
        public scg::IList<global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct> DataList {
          get { return data_; }
        }
        public int DataCount {
          get { return data_.Count; }
        }
        public global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct GetData(int index) {
          return data_[index];
        }
        
        public override bool IsInitialized {
          get {
            if (!hasContract) return false;
            foreach (global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct element in DataList) {
              if (!element.IsInitialized) return false;
            }
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _marketDataSeriesFieldNames;
          if (hasContract) {
            output.WriteString(1, field_names[0], Contract);
          }
          if (data_.Count > 0) {
            output.WriteMessageArray(2, field_names[1], data_);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasContract) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Contract);
            }
            foreach (global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct element in DataList) {
              size += pb::CodedOutputStream.ComputeMessageSize(2, element);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static MarketDataSeries ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static MarketDataSeries ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static MarketDataSeries ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static MarketDataSeries ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static MarketDataSeries ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static MarketDataSeries ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static MarketDataSeries ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static MarketDataSeries ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static MarketDataSeries ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static MarketDataSeries ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private MarketDataSeries MakeReadOnly() {
          data_.MakeReadOnly();
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(MarketDataSeries prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<MarketDataSeries, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(MarketDataSeries cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private MarketDataSeries result;
          
          private MarketDataSeries PrepareBuilder() {
            if (resultIsReadOnly) {
              MarketDataSeries original = result;
              result = new MarketDataSeries();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override MarketDataSeries MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::FutureDataPB.HistoryDataResponse.Types.MarketDataSeries.Descriptor; }
          }
          
          public override MarketDataSeries DefaultInstanceForType {
            get { return global::FutureDataPB.HistoryDataResponse.Types.MarketDataSeries.DefaultInstance; }
          }
          
          public override MarketDataSeries BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is MarketDataSeries) {
              return MergeFrom((MarketDataSeries) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(MarketDataSeries other) {
            if (other == global::FutureDataPB.HistoryDataResponse.Types.MarketDataSeries.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasContract) {
              Contract = other.Contract;
            }
            if (other.data_.Count != 0) {
              result.data_.Add(other.data_);
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_marketDataSeriesFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _marketDataSeriesFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasContract = input.ReadString(ref result.contract_);
                  break;
                }
                case 18: {
                  input.ReadMessageArray(tag, field_name, result.data_, global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct.DefaultInstance, extensionRegistry);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasContract {
            get { return result.hasContract; }
          }
          public string Contract {
            get { return result.Contract; }
            set { SetContract(value); }
          }
          public Builder SetContract(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasContract = true;
            result.contract_ = value;
            return this;
          }
          public Builder ClearContract() {
            PrepareBuilder();
            result.hasContract = false;
            result.contract_ = "";
            return this;
          }
          
          public pbc::IPopsicleList<global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct> DataList {
            get { return PrepareBuilder().data_; }
          }
          public int DataCount {
            get { return result.DataCount; }
          }
          public global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct GetData(int index) {
            return result.GetData(index);
          }
          public Builder SetData(int index, global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.data_[index] = value;
            return this;
          }
          public Builder SetData(int index, global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.data_[index] = builderForValue.Build();
            return this;
          }
          public Builder AddData(global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.data_.Add(value);
            return this;
          }
          public Builder AddData(global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.data_.Add(builderForValue.Build());
            return this;
          }
          public Builder AddRangeData(scg::IEnumerable<global::FutureDataPB.CThostFtdcDepthMarketDataFieldStruct> values) {
            PrepareBuilder();
            result.data_.Add(values);
            return this;
          }
          public Builder ClearData() {
            PrepareBuilder();
            result.data_.Clear();
            return this;
          }
        }
        static MarketDataSeries() {
          object.ReferenceEquals(global::FutureDataPB.Proto.FutureData.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int TimestampFieldNumber = 1;
    private bool hasTimestamp;
    private int timestamp_;
    public bool HasTimestamp {
      get { return hasTimestamp; }
    }
    public int Timestamp {
      get { return timestamp_; }
    }
    
    public const int HandleFieldNumber = 2;
    private bool hasHandle;
    private int handle_;
    public bool HasHandle {
      get { return hasHandle; }
    }
    public int Handle {
      get { return handle_; }
    }
    
    public const int DataSeriesFieldNumber = 3;
    private pbc::PopsicleList<global::FutureDataPB.HistoryDataResponse.Types.MarketDataSeries> dataSeries_ = new pbc::PopsicleList<global::FutureDataPB.HistoryDataResponse.Types.MarketDataSeries>();
    public scg::IList<global::FutureDataPB.HistoryDataResponse.Types.MarketDataSeries> DataSeriesList {
      get { return dataSeries_; }
    }
    public int DataSeriesCount {
      get { return dataSeries_.Count; }
    }
    public global::FutureDataPB.HistoryDataResponse.Types.MarketDataSeries GetDataSeries(int index) {
      return dataSeries_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTimestamp) return false;
        if (!hasHandle) return false;
        foreach (global::FutureDataPB.HistoryDataResponse.Types.MarketDataSeries element in DataSeriesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _historyDataResponseFieldNames;
      if (hasTimestamp) {
        output.WriteInt32(1, field_names[2], Timestamp);
      }
      if (hasHandle) {
        output.WriteInt32(2, field_names[1], Handle);
      }
      if (dataSeries_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], dataSeries_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTimestamp) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Timestamp);
        }
        if (hasHandle) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Handle);
        }
        foreach (global::FutureDataPB.HistoryDataResponse.Types.MarketDataSeries element in DataSeriesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static HistoryDataResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HistoryDataResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HistoryDataResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static HistoryDataResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static HistoryDataResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HistoryDataResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static HistoryDataResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static HistoryDataResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static HistoryDataResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static HistoryDataResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private HistoryDataResponse MakeReadOnly() {
      dataSeries_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(HistoryDataResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<HistoryDataResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(HistoryDataResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private HistoryDataResponse result;
      
      private HistoryDataResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          HistoryDataResponse original = result;
          result = new HistoryDataResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override HistoryDataResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::FutureDataPB.HistoryDataResponse.Descriptor; }
      }
      
      public override HistoryDataResponse DefaultInstanceForType {
        get { return global::FutureDataPB.HistoryDataResponse.DefaultInstance; }
      }
      
      public override HistoryDataResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is HistoryDataResponse) {
          return MergeFrom((HistoryDataResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(HistoryDataResponse other) {
        if (other == global::FutureDataPB.HistoryDataResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTimestamp) {
          Timestamp = other.Timestamp;
        }
        if (other.HasHandle) {
          Handle = other.Handle;
        }
        if (other.dataSeries_.Count != 0) {
          result.dataSeries_.Add(other.dataSeries_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_historyDataResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _historyDataResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTimestamp = input.ReadInt32(ref result.timestamp_);
              break;
            }
            case 16: {
              result.hasHandle = input.ReadInt32(ref result.handle_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.dataSeries_, global::FutureDataPB.HistoryDataResponse.Types.MarketDataSeries.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTimestamp {
        get { return result.hasTimestamp; }
      }
      public int Timestamp {
        get { return result.Timestamp; }
        set { SetTimestamp(value); }
      }
      public Builder SetTimestamp(int value) {
        PrepareBuilder();
        result.hasTimestamp = true;
        result.timestamp_ = value;
        return this;
      }
      public Builder ClearTimestamp() {
        PrepareBuilder();
        result.hasTimestamp = false;
        result.timestamp_ = 0;
        return this;
      }
      
      public bool HasHandle {
        get { return result.hasHandle; }
      }
      public int Handle {
        get { return result.Handle; }
        set { SetHandle(value); }
      }
      public Builder SetHandle(int value) {
        PrepareBuilder();
        result.hasHandle = true;
        result.handle_ = value;
        return this;
      }
      public Builder ClearHandle() {
        PrepareBuilder();
        result.hasHandle = false;
        result.handle_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::FutureDataPB.HistoryDataResponse.Types.MarketDataSeries> DataSeriesList {
        get { return PrepareBuilder().dataSeries_; }
      }
      public int DataSeriesCount {
        get { return result.DataSeriesCount; }
      }
      public global::FutureDataPB.HistoryDataResponse.Types.MarketDataSeries GetDataSeries(int index) {
        return result.GetDataSeries(index);
      }
      public Builder SetDataSeries(int index, global::FutureDataPB.HistoryDataResponse.Types.MarketDataSeries value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dataSeries_[index] = value;
        return this;
      }
      public Builder SetDataSeries(int index, global::FutureDataPB.HistoryDataResponse.Types.MarketDataSeries.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.dataSeries_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDataSeries(global::FutureDataPB.HistoryDataResponse.Types.MarketDataSeries value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dataSeries_.Add(value);
        return this;
      }
      public Builder AddDataSeries(global::FutureDataPB.HistoryDataResponse.Types.MarketDataSeries.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.dataSeries_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDataSeries(scg::IEnumerable<global::FutureDataPB.HistoryDataResponse.Types.MarketDataSeries> values) {
        PrepareBuilder();
        result.dataSeries_.Add(values);
        return this;
      }
      public Builder ClearDataSeries() {
        PrepareBuilder();
        result.dataSeries_.Clear();
        return this;
      }
    }
    static HistoryDataResponse() {
      object.ReferenceEquals(global::FutureDataPB.Proto.FutureData.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
