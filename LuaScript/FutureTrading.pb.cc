// Generated by the protocol buffer compiler.  DO NOT EDIT!
#include "stdafx.h"

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FutureTrading.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FutureTradingPB {

namespace {

const ::google::protobuf::Descriptor* Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* InsertOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InsertOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtnInsertOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtnInsertOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* WaitInsertOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WaitInsertOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBuffInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBuffInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtnTradedInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtnTradedInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtnAllTradedInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtnAllTradedInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MThostFtdcOrderField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MThostFtdcOrderField_reflection_ = NULL;
const ::google::protobuf::Descriptor* MThostFtdcTradeField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MThostFtdcTradeField_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MThostFtdcQryInvestorPositionField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MThostFtdcQryInvestorPositionField_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtnMThostFtdcQryInvestorPositionField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtnMThostFtdcQryInvestorPositionField_reflection_ = NULL;
const ::google::protobuf::Descriptor* MThostFtdcInvestorPositionField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MThostFtdcInvestorPositionField_reflection_ = NULL;
const ::google::protobuf::Descriptor* MThostFtdcTradingAccountField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MThostFtdcTradingAccountField_reflection_ = NULL;
const ::google::protobuf::Descriptor* MThostFtdcQryTradingAccountField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MThostFtdcQryTradingAccountField_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MThostFtdcInstrumentField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MThostFtdcInstrumentField_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FutureTrading_2eproto() {
  protobuf_AddDesc_FutureTrading_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FutureTrading.proto");
  GOOGLE_CHECK(file != NULL);
  Login_descriptor_ = file->message_type(0);
  static const int Login_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, frontadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, investorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, password_),
  };
  Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Login_descriptor_,
      Login::default_instance_,
      Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Login));
  Error_descriptor_ = file->message_type(1);
  static const int Error_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, errorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, errormsg_),
  };
  Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error));
  InsertOrder_descriptor_ = file->message_type(2);
  static const int InsertOrder_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertOrder, handleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertOrder, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertOrder, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertOrder, limitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertOrder, volumetotaloriginal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertOrder, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertOrder, comboffsetflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertOrder, orderpricetype_),
  };
  InsertOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InsertOrder_descriptor_,
      InsertOrder::default_instance_,
      InsertOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InsertOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InsertOrder));
  RtnInsertOrder_descriptor_ = file->message_type(3);
  static const int RtnInsertOrder_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtnInsertOrder, handleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtnInsertOrder, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtnInsertOrder, frontid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtnInsertOrder, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtnInsertOrder, lastorder_),
  };
  RtnInsertOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtnInsertOrder_descriptor_,
      RtnInsertOrder::default_instance_,
      RtnInsertOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtnInsertOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtnInsertOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtnInsertOrder));
  WaitInsertOrder_descriptor_ = file->message_type(4);
  static const int WaitInsertOrder_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitInsertOrder, handleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitInsertOrder, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitInsertOrder, frontid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitInsertOrder, sessionid_),
  };
  WaitInsertOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WaitInsertOrder_descriptor_,
      WaitInsertOrder::default_instance_,
      WaitInsertOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitInsertOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitInsertOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WaitInsertOrder));
  ReqBuffInfo_descriptor_ = file->message_type(5);
  static const int ReqBuffInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuffInfo, handleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuffInfo, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuffInfo, frontid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuffInfo, sessionid_),
  };
  ReqBuffInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBuffInfo_descriptor_,
      ReqBuffInfo::default_instance_,
      ReqBuffInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuffInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuffInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBuffInfo));
  RtnTradedInfo_descriptor_ = file->message_type(6);
  static const int RtnTradedInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtnTradedInfo, handleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtnTradedInfo, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtnTradedInfo, frontid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtnTradedInfo, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtnTradedInfo, lastorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtnTradedInfo, lasttrade_),
  };
  RtnTradedInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtnTradedInfo_descriptor_,
      RtnTradedInfo::default_instance_,
      RtnTradedInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtnTradedInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtnTradedInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtnTradedInfo));
  RtnAllTradedInfo_descriptor_ = file->message_type(7);
  static const int RtnAllTradedInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtnAllTradedInfo, alltradedinfo_),
  };
  RtnAllTradedInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtnAllTradedInfo_descriptor_,
      RtnAllTradedInfo::default_instance_,
      RtnAllTradedInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtnAllTradedInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtnAllTradedInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtnAllTradedInfo));
  MThostFtdcOrderField_descriptor_ = file->message_type(8);
  static const int MThostFtdcOrderField_offsets_[39] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, orderref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, orderpricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, comboffsetflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, combhedgeflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, limitprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, volumetotaloriginal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, timecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, gtddate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, orderlocalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, exchangeinstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, ordersubmitstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, notifysequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, settlementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, ordersysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, ordersource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, orderstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, ordertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, volumetraded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, volumetotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, insertdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, inserttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, activetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, suspendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, canceltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, activetraderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, clearingpartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, sequenceno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, frontid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, userproductinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, statusmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, userforceclose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, brokerorderseq_),
  };
  MThostFtdcOrderField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MThostFtdcOrderField_descriptor_,
      MThostFtdcOrderField::default_instance_,
      MThostFtdcOrderField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcOrderField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MThostFtdcOrderField));
  MThostFtdcTradeField_descriptor_ = file->message_type(9);
  static const int MThostFtdcTradeField_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, orderref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, tradeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, ordersysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, participantid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, tradingrole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, exchangeinstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, offsetflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, hedgeflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, tradedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, tradetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, tradetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, pricesource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, traderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, orderlocalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, clearingpartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, sequenceno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, settlementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, brokerorderseq_),
  };
  MThostFtdcTradeField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MThostFtdcTradeField_descriptor_,
      MThostFtdcTradeField::default_instance_,
      MThostFtdcTradeField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradeField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MThostFtdcTradeField));
  OrderAction_descriptor_ = file->message_type(10);
  static const int OrderAction_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderAction, handleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderAction, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderAction, ordersysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderAction, frontid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderAction, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderAction, exchangeid_),
  };
  OrderAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderAction_descriptor_,
      OrderAction::default_instance_,
      OrderAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderAction));
  MThostFtdcQryInvestorPositionField_descriptor_ = file->message_type(11);
  static const int MThostFtdcQryInvestorPositionField_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcQryInvestorPositionField, instrumentid_),
  };
  MThostFtdcQryInvestorPositionField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MThostFtdcQryInvestorPositionField_descriptor_,
      MThostFtdcQryInvestorPositionField::default_instance_,
      MThostFtdcQryInvestorPositionField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcQryInvestorPositionField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcQryInvestorPositionField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MThostFtdcQryInvestorPositionField));
  RtnMThostFtdcQryInvestorPositionField_descriptor_ = file->message_type(12);
  static const int RtnMThostFtdcQryInvestorPositionField_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtnMThostFtdcQryInvestorPositionField, investorposition_),
  };
  RtnMThostFtdcQryInvestorPositionField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtnMThostFtdcQryInvestorPositionField_descriptor_,
      RtnMThostFtdcQryInvestorPositionField::default_instance_,
      RtnMThostFtdcQryInvestorPositionField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtnMThostFtdcQryInvestorPositionField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtnMThostFtdcQryInvestorPositionField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtnMThostFtdcQryInvestorPositionField));
  MThostFtdcInvestorPositionField_descriptor_ = file->message_type(13);
  static const int MThostFtdcInvestorPositionField_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, posidirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, hedgeflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, positiondate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, ydposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, longfrozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, shortfrozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, longfrozenamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, shortfrozenamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, openvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, closevolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, openamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, closeamount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, positioncost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, premargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, usemargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, frozenmargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, frozencash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, frozencommission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, cashin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, commission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, closeprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, positionprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, presettlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, settlementprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, settlementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, opencost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, exchangemargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, combposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, comblongfrozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, combshortfrozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, closeprofitbydate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, closeprofitbytrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, todayposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, marginratebymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, marginratebyvolume_),
  };
  MThostFtdcInvestorPositionField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MThostFtdcInvestorPositionField_descriptor_,
      MThostFtdcInvestorPositionField::default_instance_,
      MThostFtdcInvestorPositionField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInvestorPositionField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MThostFtdcInvestorPositionField));
  MThostFtdcTradingAccountField_descriptor_ = file->message_type(14);
  static const int MThostFtdcTradingAccountField_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, premortgage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, precredit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, predeposit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, prebalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, premargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, interestbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, interest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, deposit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, withdraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, frozenmargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, frozencash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, frozencommission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, currmargin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, cashin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, commission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, closeprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, positionprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, balance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, withdrawquota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, reserve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, settlementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, mortgage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, exchangemargin_),
  };
  MThostFtdcTradingAccountField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MThostFtdcTradingAccountField_descriptor_,
      MThostFtdcTradingAccountField::default_instance_,
      MThostFtdcTradingAccountField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcTradingAccountField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MThostFtdcTradingAccountField));
  MThostFtdcQryTradingAccountField_descriptor_ = file->message_type(15);
  static const int MThostFtdcQryTradingAccountField_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcQryTradingAccountField, brokerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcQryTradingAccountField, investorid_),
  };
  MThostFtdcQryTradingAccountField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MThostFtdcQryTradingAccountField_descriptor_,
      MThostFtdcQryTradingAccountField::default_instance_,
      MThostFtdcQryTradingAccountField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcQryTradingAccountField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcQryTradingAccountField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MThostFtdcQryTradingAccountField));
  ConRequest_descriptor_ = file->message_type(16);
  static const int ConRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConRequest, quetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConRequest, contractlist_),
  };
  ConRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConRequest_descriptor_,
      ConRequest::default_instance_,
      ConRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConRequest));
  ConResponse_descriptor_ = file->message_type(17);
  static const int ConResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConResponse, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConResponse, contractlist_),
  };
  ConResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConResponse_descriptor_,
      ConResponse::default_instance_,
      ConResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConResponse));
  MThostFtdcInstrumentField_descriptor_ = file->message_type(18);
  static const int MThostFtdcInstrumentField_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, instrumentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, instrumentname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, exchangeinstid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, productclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, deliveryyear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, deliverymonth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, maxmarketordervolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, minmarketordervolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, maxlimitordervolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, minlimitordervolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, volumemultiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, pricetick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, createdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, opendate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, expiredate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, startdelivdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, enddelivdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, instlifephase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, istrading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, positiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, positiondatetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, longmarginratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, shortmarginratio_),
  };
  MThostFtdcInstrumentField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MThostFtdcInstrumentField_descriptor_,
      MThostFtdcInstrumentField::default_instance_,
      MThostFtdcInstrumentField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MThostFtdcInstrumentField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MThostFtdcInstrumentField));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FutureTrading_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_descriptor_, &Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_descriptor_, &Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InsertOrder_descriptor_, &InsertOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtnInsertOrder_descriptor_, &RtnInsertOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WaitInsertOrder_descriptor_, &WaitInsertOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBuffInfo_descriptor_, &ReqBuffInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtnTradedInfo_descriptor_, &RtnTradedInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtnAllTradedInfo_descriptor_, &RtnAllTradedInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MThostFtdcOrderField_descriptor_, &MThostFtdcOrderField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MThostFtdcTradeField_descriptor_, &MThostFtdcTradeField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderAction_descriptor_, &OrderAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MThostFtdcQryInvestorPositionField_descriptor_, &MThostFtdcQryInvestorPositionField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtnMThostFtdcQryInvestorPositionField_descriptor_, &RtnMThostFtdcQryInvestorPositionField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MThostFtdcInvestorPositionField_descriptor_, &MThostFtdcInvestorPositionField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MThostFtdcTradingAccountField_descriptor_, &MThostFtdcTradingAccountField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MThostFtdcQryTradingAccountField_descriptor_, &MThostFtdcQryTradingAccountField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConRequest_descriptor_, &ConRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConResponse_descriptor_, &ConResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MThostFtdcInstrumentField_descriptor_, &MThostFtdcInstrumentField::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FutureTrading_2eproto() {
  delete Login::default_instance_;
  delete Login_reflection_;
  delete Error::default_instance_;
  delete Error_reflection_;
  delete InsertOrder::default_instance_;
  delete InsertOrder_reflection_;
  delete RtnInsertOrder::default_instance_;
  delete RtnInsertOrder_reflection_;
  delete WaitInsertOrder::default_instance_;
  delete WaitInsertOrder_reflection_;
  delete ReqBuffInfo::default_instance_;
  delete ReqBuffInfo_reflection_;
  delete RtnTradedInfo::default_instance_;
  delete RtnTradedInfo_reflection_;
  delete RtnAllTradedInfo::default_instance_;
  delete RtnAllTradedInfo_reflection_;
  delete MThostFtdcOrderField::default_instance_;
  delete MThostFtdcOrderField_reflection_;
  delete MThostFtdcTradeField::default_instance_;
  delete MThostFtdcTradeField_reflection_;
  delete OrderAction::default_instance_;
  delete OrderAction_reflection_;
  delete MThostFtdcQryInvestorPositionField::default_instance_;
  delete MThostFtdcQryInvestorPositionField_reflection_;
  delete RtnMThostFtdcQryInvestorPositionField::default_instance_;
  delete RtnMThostFtdcQryInvestorPositionField_reflection_;
  delete MThostFtdcInvestorPositionField::default_instance_;
  delete MThostFtdcInvestorPositionField_reflection_;
  delete MThostFtdcTradingAccountField::default_instance_;
  delete MThostFtdcTradingAccountField_reflection_;
  delete MThostFtdcQryTradingAccountField::default_instance_;
  delete MThostFtdcQryTradingAccountField_reflection_;
  delete ConRequest::default_instance_;
  delete ConRequest_reflection_;
  delete ConResponse::default_instance_;
  delete ConResponse_reflection_;
  delete MThostFtdcInstrumentField::default_instance_;
  delete MThostFtdcInstrumentField_reflection_;
}

void protobuf_AddDesc_FutureTrading_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023FutureTrading.proto\022\017FutureTradingPB\"Q"
    "\n\005Login\022\020\n\010FrontAdd\030\001 \002(\t\022\020\n\010BrokerID\030\002 "
    "\002(\t\022\022\n\nInvestorID\030\003 \002(\t\022\020\n\010Password\030\004 \002("
    "\t\"*\n\005Error\022\017\n\007ErrorID\030\001 \002(\005\022\020\n\010ErrorMsg\030"
    "\002 \002(\t\"\275\001\n\013InsertOrder\022\020\n\010HandleID\030\001 \002(\005\022"
    "\024\n\014InstrumentID\030\002 \002(\t\022\022\n\nExchangeID\030\003 \002("
    "\t\022\022\n\nLimitPrice\030\004 \002(\001\022\033\n\023VolumeTotalOrig"
    "inal\030\005 \002(\005\022\021\n\tDirection\030\006 \002(\t\022\026\n\016CombOff"
    "setFlag\030\007 \002(\t\022\026\n\016OrderPriceType\030\010 \002(\t\"\215\001"
    "\n\016RtnInsertOrder\022\020\n\010HandleID\030\001 \002(\005\022\013\n\003Re"
    "f\030\002 \002(\005\022\017\n\007FrontID\030\003 \002(\005\022\021\n\tSessionID\030\004 "
    "\002(\005\0228\n\tLastOrder\030\005 \003(\0132%.FutureTradingPB"
    ".MThostFtdcOrderField\"T\n\017WaitInsertOrder"
    "\022\020\n\010HandleID\030\001 \002(\005\022\013\n\003Ref\030\002 \002(\005\022\017\n\007Front"
    "ID\030\003 \002(\005\022\021\n\tSessionID\030\004 \002(\005\"P\n\013ReqBuffIn"
    "fo\022\020\n\010HandleID\030\001 \002(\005\022\013\n\003Ref\030\002 \002(\005\022\017\n\007Fro"
    "ntID\030\003 \002(\005\022\021\n\tSessionID\030\004 \002(\005\"\306\001\n\rRtnTra"
    "dedInfo\022\020\n\010HandleID\030\001 \002(\005\022\013\n\003Ref\030\002 \002(\005\022\017"
    "\n\007FrontID\030\003 \002(\005\022\021\n\tSessionID\030\004 \002(\005\0228\n\tLa"
    "stOrder\030\005 \003(\0132%.FutureTradingPB.MThostFt"
    "dcOrderField\0228\n\tLastTrade\030\006 \003(\0132%.Future"
    "TradingPB.MThostFtdcTradeField\"I\n\020RtnAll"
    "TradedInfo\0225\n\rAllTradedInfo\030\001 \003(\0132\036.Futu"
    "reTradingPB.RtnTradedInfo\"\334\006\n\024MThostFtdc"
    "OrderField\022\024\n\014InstrumentID\030\001 \002(\t\022\020\n\010Orde"
    "rRef\030\002 \002(\t\022\026\n\016OrderPriceType\030\003 \002(\t\022\021\n\tDi"
    "rection\030\004 \002(\t\022\026\n\016CombOffsetFlag\030\005 \002(\t\022\025\n"
    "\rCombHedgeFlag\030\006 \002(\t\022\022\n\nLimitPrice\030\007 \002(\001"
    "\022\033\n\023VolumeTotalOriginal\030\010 \002(\005\022\025\n\rTimeCon"
    "dition\030\t \002(\t\022\017\n\007GTDDate\030\n \002(\t\022\021\n\tRequest"
    "ID\030\013 \002(\005\022\024\n\014OrderLocalID\030\014 \002(\t\022\022\n\nExchan"
    "geID\030\r \002(\t\022\026\n\016ExchangeInstID\030\016 \002(\t\022\031\n\021Or"
    "derSubmitStatus\030\017 \002(\t\022\026\n\016NotifySequence\030"
    "\020 \002(\005\022\022\n\nTradingDay\030\021 \002(\t\022\024\n\014SettlementI"
    "D\030\022 \002(\005\022\022\n\nOrderSysID\030\023 \002(\t\022\023\n\013OrderSour"
    "ce\030\024 \002(\t\022\023\n\013OrderStatus\030\025 \002(\t\022\021\n\tOrderTy"
    "pe\030\026 \002(\t\022\024\n\014VolumeTraded\030\027 \002(\005\022\023\n\013Volume"
    "Total\030\030 \002(\005\022\022\n\nInsertDate\030\031 \002(\t\022\022\n\nInser"
    "tTime\030\032 \002(\t\022\022\n\nActiveTime\030\033 \002(\t\022\023\n\013Suspe"
    "ndTime\030\034 \002(\t\022\022\n\nUpdateTime\030\035 \002(\t\022\022\n\nCanc"
    "elTime\030\036 \002(\t\022\026\n\016ActiveTraderID\030\037 \002(\t\022\026\n\016"
    "ClearingPartID\030  \002(\t\022\022\n\nSequenceNo\030! \002(\005"
    "\022\017\n\007FrontID\030\" \002(\005\022\021\n\tSessionID\030# \002(\005\022\027\n\017"
    "UserProductInfo\030$ \002(\t\022\021\n\tStatusMsg\030% \002(\t"
    "\022\026\n\016UserForceClose\030& \002(\005\022\026\n\016BrokerOrderS"
    "eq\030\' \002(\005\"\232\004\n\024MThostFtdcTradeField\022\024\n\014Ins"
    "trumentID\030\001 \002(\t\022\020\n\010OrderRef\030\002 \002(\t\022\016\n\006Use"
    "rID\030\003 \002(\t\022\022\n\nExchangeID\030\004 \002(\t\022\017\n\007TradeID"
    "\030\005 \002(\t\022\021\n\tDirection\030\006 \002(\t\022\022\n\nOrderSysID\030"
    "\007 \002(\t\022\025\n\rParticipantID\030\010 \002(\t\022\020\n\010ClientID"
    "\030\t \002(\t\022\023\n\013TradingRole\030\n \002(\t\022\026\n\016ExchangeI"
    "nstID\030\013 \002(\t\022\022\n\nOffsetFlag\030\014 \002(\t\022\021\n\tHedge"
    "Flag\030\r \002(\t\022\r\n\005Price\030\016 \002(\001\022\016\n\006Volume\030\017 \002("
    "\005\022\021\n\tTradeDate\030\020 \002(\t\022\021\n\tTradeTime\030\021 \002(\t\022"
    "\021\n\tTradeType\030\022 \002(\t\022\023\n\013PriceSource\030\023 \002(\t\022"
    "\020\n\010TraderID\030\024 \002(\t\022\024\n\014OrderLocalID\030\025 \002(\t\022"
    "\026\n\016ClearingPartID\030\026 \002(\t\022\022\n\nSequenceNo\030\027 "
    "\002(\005\022\022\n\nTradingDay\030\030 \002(\t\022\024\n\014SettlementID\030"
    "\031 \002(\005\022\026\n\016BrokerOrderSeq\030\032 \002(\005\"x\n\013OrderAc"
    "tion\022\020\n\010HandleID\030\001 \002(\005\022\013\n\003Ref\030\002 \002(\005\022\022\n\nO"
    "rderSysID\030\003 \001(\t\022\017\n\007FrontID\030\004 \001(\005\022\021\n\tSess"
    "ionID\030\005 \001(\005\022\022\n\nExchangeID\030\006 \001(\t\":\n\"MThos"
    "tFtdcQryInvestorPositionField\022\024\n\014Instrum"
    "entID\030\001 \003(\t\"s\n%RtnMThostFtdcQryInvestorP"
    "ositionField\022J\n\020InvestorPosition\030\001 \003(\01320"
    ".FutureTradingPB.MThostFtdcInvestorPosit"
    "ionField\"\363\006\n\037MThostFtdcInvestorPositionF"
    "ield\022\024\n\014InstrumentID\030\001 \002(\t\022\025\n\rPosiDirect"
    "ion\030\002 \002(\t\022\021\n\tHedgeFlag\030\003 \002(\t\022\024\n\014Position"
    "Date\030\004 \002(\t\022\022\n\nYdPosition\030\005 \002(\005\022\020\n\010Positi"
    "on\030\006 \002(\005\022\022\n\nLongFrozen\030\007 \002(\005\022\023\n\013ShortFro"
    "zen\030\010 \002(\005\022\030\n\020LongFrozenAmount\030\t \002(\001\022\031\n\021S"
    "hortFrozenAmount\030\n \002(\001\022\022\n\nOpenVolume\030\013 \002"
    "(\005\022\023\n\013CloseVolume\030\014 \002(\005\022\022\n\nOpenAmount\030\r "
    "\002(\001\022\023\n\013CloseAmount\030\016 \002(\001\022\024\n\014PositionCost"
    "\030\017 \002(\001\022\021\n\tPreMargin\030\020 \002(\001\022\021\n\tUseMargin\030\021"
    " \002(\001\022\024\n\014FrozenMargin\030\022 \002(\001\022\022\n\nFrozenCash"
    "\030\023 \002(\001\022\030\n\020FrozenCommission\030\024 \002(\001\022\016\n\006Cash"
    "In\030\025 \002(\001\022\022\n\nCommission\030\026 \002(\001\022\023\n\013ClosePro"
    "fit\030\027 \002(\001\022\026\n\016PositionProfit\030\030 \002(\001\022\032\n\022Pre"
    "SettlementPrice\030\031 \002(\001\022\027\n\017SettlementPrice"
    "\030\032 \002(\001\022\022\n\nTradingDay\030\033 \002(\t\022\024\n\014Settlement"
    "ID\030\034 \002(\005\022\020\n\010OpenCost\030\035 \002(\001\022\026\n\016ExchangeMa"
    "rgin\030\036 \002(\001\022\024\n\014CombPosition\030\037 \002(\001\022\026\n\016Comb"
    "LongFrozen\030  \002(\001\022\027\n\017CombShortFrozen\030! \002("
    "\001\022\031\n\021CloseProfitByDate\030\" \002(\001\022\032\n\022ClosePro"
    "fitByTrade\030# \002(\001\022\025\n\rTodayPosition\030$ \002(\001\022"
    "\031\n\021MarginRateByMoney\030% \002(\001\022\032\n\022MarginRate"
    "ByVolume\030& \002(\001\"\313\004\n\035MThostFtdcTradingAcco"
    "untField\022\020\n\010BrokerID\030\001 \002(\t\022\021\n\tAccountID\030"
    "\002 \002(\t\022\023\n\013PreMortgage\030\003 \002(\001\022\021\n\tPreCredit\030"
    "\004 \002(\001\022\022\n\nPreDeposit\030\005 \002(\001\022\022\n\nPreBalance\030"
    "\006 \002(\001\022\021\n\tPreMargin\030\007 \002(\001\022\024\n\014InterestBase"
    "\030\010 \002(\001\022\020\n\010Interest\030\t \002(\001\022\017\n\007Deposit\030\n \002("
    "\001\022\020\n\010Withdraw\030\013 \002(\001\022\024\n\014FrozenMargin\030\014 \002("
    "\001\022\022\n\nFrozenCash\030\r \002(\001\022\030\n\020FrozenCommissio"
    "n\030\016 \002(\001\022\022\n\nCurrMargin\030\017 \002(\001\022\016\n\006CashIn\030\020 "
    "\002(\001\022\022\n\nCommission\030\021 \002(\001\022\023\n\013CloseProfit\030\022"
    " \002(\001\022\026\n\016PositionProfit\030\023 \002(\001\022\017\n\007Balance\030"
    "\024 \002(\001\022\021\n\tAvailable\030\025 \002(\001\022\025\n\rWithdrawQuot"
    "a\030\026 \002(\001\022\017\n\007Reserve\030\027 \002(\001\022\022\n\nTradingDay\030\030"
    " \002(\t\022\024\n\014SettlementID\030\031 \002(\005\022\016\n\006Credit\030\032 \002"
    "(\001\022\020\n\010Mortgage\030\033 \002(\001\022\026\n\016ExchangeMargin\030\034"
    " \002(\001\"H\n MThostFtdcQryTradingAccountField"
    "\022\020\n\010BrokerID\030\001 \002(\t\022\022\n\nInvestorID\030\002 \002(\t\"3"
    "\n\nConRequest\022\017\n\007QueType\030\001 \002(\005\022\024\n\014Contrac"
    "tList\030\002 \002(\t\"b\n\013ConResponse\022\021\n\tTimeStamp\030"
    "\001 \002(\005\022@\n\014ContractList\030\002 \003(\0132*.FutureTrad"
    "ingPB.MThostFtdcInstrumentField\"\341\004\n\031MTho"
    "stFtdcInstrumentField\022\024\n\014InstrumentID\030\001 "
    "\002(\t\022\022\n\nExchangeID\030\002 \002(\t\022\026\n\016InstrumentNam"
    "e\030\003 \002(\t\022\026\n\016ExchangeInstID\030\004 \002(\t\022\021\n\tProdu"
    "ctID\030\005 \002(\t\022\024\n\014ProductClass\030\006 \002(\t\022\024\n\014Deli"
    "veryYear\030\007 \002(\005\022\025\n\rDeliveryMonth\030\010 \002(\005\022\034\n"
    "\024MaxMarketOrderVolume\030\t \002(\005\022\034\n\024MinMarket"
    "OrderVolume\030\n \002(\005\022\033\n\023MaxLimitOrderVolume"
    "\030\013 \002(\005\022\033\n\023MinLimitOrderVolume\030\014 \002(\005\022\026\n\016V"
    "olumeMultiple\030\r \002(\005\022\021\n\tPriceTick\030\016 \002(\001\022\022"
    "\n\nCreateDate\030\017 \002(\t\022\020\n\010OpenDate\030\020 \002(\t\022\022\n\n"
    "ExpireDate\030\021 \002(\t\022\026\n\016StartDelivDate\030\022 \002(\t"
    "\022\024\n\014EndDelivDate\030\023 \002(\t\022\025\n\rInstLifePhase\030"
    "\024 \002(\t\022\021\n\tIsTrading\030\025 \002(\005\022\024\n\014PositionType"
    "\030\026 \002(\t\022\030\n\020PositionDateType\030\027 \002(\t\022\027\n\017Long"
    "MarginRatio\030\030 \002(\001\022\030\n\020ShortMarginRatio\030\031 "
    "\002(\001", 4963);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FutureTrading.proto", &protobuf_RegisterTypes);
  Login::default_instance_ = new Login();
  Error::default_instance_ = new Error();
  InsertOrder::default_instance_ = new InsertOrder();
  RtnInsertOrder::default_instance_ = new RtnInsertOrder();
  WaitInsertOrder::default_instance_ = new WaitInsertOrder();
  ReqBuffInfo::default_instance_ = new ReqBuffInfo();
  RtnTradedInfo::default_instance_ = new RtnTradedInfo();
  RtnAllTradedInfo::default_instance_ = new RtnAllTradedInfo();
  MThostFtdcOrderField::default_instance_ = new MThostFtdcOrderField();
  MThostFtdcTradeField::default_instance_ = new MThostFtdcTradeField();
  OrderAction::default_instance_ = new OrderAction();
  MThostFtdcQryInvestorPositionField::default_instance_ = new MThostFtdcQryInvestorPositionField();
  RtnMThostFtdcQryInvestorPositionField::default_instance_ = new RtnMThostFtdcQryInvestorPositionField();
  MThostFtdcInvestorPositionField::default_instance_ = new MThostFtdcInvestorPositionField();
  MThostFtdcTradingAccountField::default_instance_ = new MThostFtdcTradingAccountField();
  MThostFtdcQryTradingAccountField::default_instance_ = new MThostFtdcQryTradingAccountField();
  ConRequest::default_instance_ = new ConRequest();
  ConResponse::default_instance_ = new ConResponse();
  MThostFtdcInstrumentField::default_instance_ = new MThostFtdcInstrumentField();
  Login::default_instance_->InitAsDefaultInstance();
  Error::default_instance_->InitAsDefaultInstance();
  InsertOrder::default_instance_->InitAsDefaultInstance();
  RtnInsertOrder::default_instance_->InitAsDefaultInstance();
  WaitInsertOrder::default_instance_->InitAsDefaultInstance();
  ReqBuffInfo::default_instance_->InitAsDefaultInstance();
  RtnTradedInfo::default_instance_->InitAsDefaultInstance();
  RtnAllTradedInfo::default_instance_->InitAsDefaultInstance();
  MThostFtdcOrderField::default_instance_->InitAsDefaultInstance();
  MThostFtdcTradeField::default_instance_->InitAsDefaultInstance();
  OrderAction::default_instance_->InitAsDefaultInstance();
  MThostFtdcQryInvestorPositionField::default_instance_->InitAsDefaultInstance();
  RtnMThostFtdcQryInvestorPositionField::default_instance_->InitAsDefaultInstance();
  MThostFtdcInvestorPositionField::default_instance_->InitAsDefaultInstance();
  MThostFtdcTradingAccountField::default_instance_->InitAsDefaultInstance();
  MThostFtdcQryTradingAccountField::default_instance_->InitAsDefaultInstance();
  ConRequest::default_instance_->InitAsDefaultInstance();
  ConResponse::default_instance_->InitAsDefaultInstance();
  MThostFtdcInstrumentField::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FutureTrading_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FutureTrading_2eproto {
  StaticDescriptorInitializer_FutureTrading_2eproto() {
    protobuf_AddDesc_FutureTrading_2eproto();
  }
} static_descriptor_initializer_FutureTrading_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Login::kFrontAddFieldNumber;
const int Login::kBrokerIDFieldNumber;
const int Login::kInvestorIDFieldNumber;
const int Login::kPasswordFieldNumber;
#endif  // !_MSC_VER

Login::Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Login::InitAsDefaultInstance() {
}

Login::Login(const Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Login::SharedCtor() {
  _cached_size_ = 0;
  frontadd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  brokerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  investorid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login::~Login() {
  SharedDtor();
}

void Login::SharedDtor() {
  if (frontadd_ != &::google::protobuf::internal::kEmptyString) {
    delete frontadd_;
  }
  if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
    delete brokerid_;
  }
  if (investorid_ != &::google::protobuf::internal::kEmptyString) {
    delete investorid_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_descriptor_;
}

const Login& Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureTrading_2eproto();  return *default_instance_;
}

Login* Login::default_instance_ = NULL;

Login* Login::New() const {
  return new Login;
}

void Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_frontadd()) {
      if (frontadd_ != &::google::protobuf::internal::kEmptyString) {
        frontadd_->clear();
      }
    }
    if (has_brokerid()) {
      if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
        brokerid_->clear();
      }
    }
    if (has_investorid()) {
      if (investorid_ != &::google::protobuf::internal::kEmptyString) {
        investorid_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string FrontAdd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frontadd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->frontadd().data(), this->frontadd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_BrokerID;
        break;
      }
      
      // required string BrokerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BrokerID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_InvestorID;
        break;
      }
      
      // required string InvestorID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InvestorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Password;
        break;
      }
      
      // required string Password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string FrontAdd = 1;
  if (has_frontadd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->frontadd().data(), this->frontadd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->frontadd(), output);
  }
  
  // required string BrokerID = 2;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->brokerid(), output);
  }
  
  // required string InvestorID = 3;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->investorid(), output);
  }
  
  // required string Password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string FrontAdd = 1;
  if (has_frontadd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->frontadd().data(), this->frontadd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->frontadd(), target);
  }
  
  // required string BrokerID = 2;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brokerid(), target);
  }
  
  // required string InvestorID = 3;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->investorid(), target);
  }
  
  // required string Password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Login::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string FrontAdd = 1;
    if (has_frontadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frontadd());
    }
    
    // required string BrokerID = 2;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brokerid());
    }
    
    // required string InvestorID = 3;
    if (has_investorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->investorid());
    }
    
    // required string Password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frontadd()) {
      set_frontadd(from.frontadd());
    }
    if (from.has_brokerid()) {
      set_brokerid(from.brokerid());
    }
    if (from.has_investorid()) {
      set_investorid(from.investorid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void Login::Swap(Login* other) {
  if (other != this) {
    std::swap(frontadd_, other->frontadd_);
    std::swap(brokerid_, other->brokerid_);
    std::swap(investorid_, other->investorid_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Login_descriptor_;
  metadata.reflection = Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Error::kErrorIDFieldNumber;
const int Error::kErrorMsgFieldNumber;
#endif  // !_MSC_VER

Error::Error()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Error::SharedCtor() {
  _cached_size_ = 0;
  errorid_ = 0;
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  SharedDtor();
}

void Error::SharedDtor() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureTrading_2eproto();  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New() const {
  return new Error;
}

void Error::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorid_ = 0;
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ErrorID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorid_)));
          set_has_errorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ErrorMsg;
        break;
      }
      
      // required string ErrorMsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ErrorMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ErrorID = 1;
  if (has_errorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorid(), output);
  }
  
  // required string ErrorMsg = 2;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errormsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ErrorID = 1;
  if (has_errorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorid(), target);
  }
  
  // required string ErrorMsg = 2;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errormsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ErrorID = 1;
    if (has_errorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorid());
    }
    
    // required string ErrorMsg = 2;
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorid()) {
      set_errorid(from.errorid());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Error::Swap(Error* other) {
  if (other != this) {
    std::swap(errorid_, other->errorid_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InsertOrder::kHandleIDFieldNumber;
const int InsertOrder::kInstrumentIDFieldNumber;
const int InsertOrder::kExchangeIDFieldNumber;
const int InsertOrder::kLimitPriceFieldNumber;
const int InsertOrder::kVolumeTotalOriginalFieldNumber;
const int InsertOrder::kDirectionFieldNumber;
const int InsertOrder::kCombOffsetFlagFieldNumber;
const int InsertOrder::kOrderPriceTypeFieldNumber;
#endif  // !_MSC_VER

InsertOrder::InsertOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InsertOrder::InitAsDefaultInstance() {
}

InsertOrder::InsertOrder(const InsertOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InsertOrder::SharedCtor() {
  _cached_size_ = 0;
  handleid_ = 0;
  instrumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limitprice_ = 0;
  volumetotaloriginal_ = 0;
  direction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comboffsetflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderpricetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InsertOrder::~InsertOrder() {
  SharedDtor();
}

void InsertOrder::SharedDtor() {
  if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete instrumentid_;
  }
  if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeid_;
  }
  if (direction_ != &::google::protobuf::internal::kEmptyString) {
    delete direction_;
  }
  if (comboffsetflag_ != &::google::protobuf::internal::kEmptyString) {
    delete comboffsetflag_;
  }
  if (orderpricetype_ != &::google::protobuf::internal::kEmptyString) {
    delete orderpricetype_;
  }
  if (this != default_instance_) {
  }
}

void InsertOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InsertOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InsertOrder_descriptor_;
}

const InsertOrder& InsertOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureTrading_2eproto();  return *default_instance_;
}

InsertOrder* InsertOrder::default_instance_ = NULL;

InsertOrder* InsertOrder::New() const {
  return new InsertOrder;
}

void InsertOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    handleid_ = 0;
    if (has_instrumentid()) {
      if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
        instrumentid_->clear();
      }
    }
    if (has_exchangeid()) {
      if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeid_->clear();
      }
    }
    limitprice_ = 0;
    volumetotaloriginal_ = 0;
    if (has_direction()) {
      if (direction_ != &::google::protobuf::internal::kEmptyString) {
        direction_->clear();
      }
    }
    if (has_comboffsetflag()) {
      if (comboffsetflag_ != &::google::protobuf::internal::kEmptyString) {
        comboffsetflag_->clear();
      }
    }
    if (has_orderpricetype()) {
      if (orderpricetype_ != &::google::protobuf::internal::kEmptyString) {
        orderpricetype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InsertOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 HandleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handleid_)));
          set_has_handleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_InstrumentID;
        break;
      }
      
      // required string InstrumentID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InstrumentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ExchangeID;
        break;
      }
      
      // required string ExchangeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_LimitPrice;
        break;
      }
      
      // required double LimitPrice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LimitPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limitprice_)));
          set_has_limitprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_VolumeTotalOriginal;
        break;
      }
      
      // required int32 VolumeTotalOriginal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VolumeTotalOriginal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumetotaloriginal_)));
          set_has_volumetotaloriginal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Direction;
        break;
      }
      
      // required string Direction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_direction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->direction().data(), this->direction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_CombOffsetFlag;
        break;
      }
      
      // required string CombOffsetFlag = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CombOffsetFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comboffsetflag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comboffsetflag().data(), this->comboffsetflag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_OrderPriceType;
        break;
      }
      
      // required string OrderPriceType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderPriceType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderpricetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderpricetype().data(), this->orderpricetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InsertOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 HandleID = 1;
  if (has_handleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->handleid(), output);
  }
  
  // required string InstrumentID = 2;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->instrumentid(), output);
  }
  
  // required string ExchangeID = 3;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->exchangeid(), output);
  }
  
  // required double LimitPrice = 4;
  if (has_limitprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->limitprice(), output);
  }
  
  // required int32 VolumeTotalOriginal = 5;
  if (has_volumetotaloriginal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->volumetotaloriginal(), output);
  }
  
  // required string Direction = 6;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->direction().data(), this->direction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->direction(), output);
  }
  
  // required string CombOffsetFlag = 7;
  if (has_comboffsetflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comboffsetflag().data(), this->comboffsetflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->comboffsetflag(), output);
  }
  
  // required string OrderPriceType = 8;
  if (has_orderpricetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderpricetype().data(), this->orderpricetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->orderpricetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InsertOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 HandleID = 1;
  if (has_handleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->handleid(), target);
  }
  
  // required string InstrumentID = 2;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instrumentid(), target);
  }
  
  // required string ExchangeID = 3;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchangeid(), target);
  }
  
  // required double LimitPrice = 4;
  if (has_limitprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->limitprice(), target);
  }
  
  // required int32 VolumeTotalOriginal = 5;
  if (has_volumetotaloriginal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->volumetotaloriginal(), target);
  }
  
  // required string Direction = 6;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->direction().data(), this->direction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->direction(), target);
  }
  
  // required string CombOffsetFlag = 7;
  if (has_comboffsetflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comboffsetflag().data(), this->comboffsetflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->comboffsetflag(), target);
  }
  
  // required string OrderPriceType = 8;
  if (has_orderpricetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderpricetype().data(), this->orderpricetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->orderpricetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InsertOrder::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 HandleID = 1;
    if (has_handleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handleid());
    }
    
    // required string InstrumentID = 2;
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }
    
    // required string ExchangeID = 3;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }
    
    // required double LimitPrice = 4;
    if (has_limitprice()) {
      total_size += 1 + 8;
    }
    
    // required int32 VolumeTotalOriginal = 5;
    if (has_volumetotaloriginal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volumetotaloriginal());
    }
    
    // required string Direction = 6;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->direction());
    }
    
    // required string CombOffsetFlag = 7;
    if (has_comboffsetflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comboffsetflag());
    }
    
    // required string OrderPriceType = 8;
    if (has_orderpricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderpricetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InsertOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InsertOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InsertOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InsertOrder::MergeFrom(const InsertOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handleid()) {
      set_handleid(from.handleid());
    }
    if (from.has_instrumentid()) {
      set_instrumentid(from.instrumentid());
    }
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_limitprice()) {
      set_limitprice(from.limitprice());
    }
    if (from.has_volumetotaloriginal()) {
      set_volumetotaloriginal(from.volumetotaloriginal());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_comboffsetflag()) {
      set_comboffsetflag(from.comboffsetflag());
    }
    if (from.has_orderpricetype()) {
      set_orderpricetype(from.orderpricetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InsertOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertOrder::CopyFrom(const InsertOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void InsertOrder::Swap(InsertOrder* other) {
  if (other != this) {
    std::swap(handleid_, other->handleid_);
    std::swap(instrumentid_, other->instrumentid_);
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(limitprice_, other->limitprice_);
    std::swap(volumetotaloriginal_, other->volumetotaloriginal_);
    std::swap(direction_, other->direction_);
    std::swap(comboffsetflag_, other->comboffsetflag_);
    std::swap(orderpricetype_, other->orderpricetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InsertOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InsertOrder_descriptor_;
  metadata.reflection = InsertOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtnInsertOrder::kHandleIDFieldNumber;
const int RtnInsertOrder::kRefFieldNumber;
const int RtnInsertOrder::kFrontIDFieldNumber;
const int RtnInsertOrder::kSessionIDFieldNumber;
const int RtnInsertOrder::kLastOrderFieldNumber;
#endif  // !_MSC_VER

RtnInsertOrder::RtnInsertOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtnInsertOrder::InitAsDefaultInstance() {
}

RtnInsertOrder::RtnInsertOrder(const RtnInsertOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtnInsertOrder::SharedCtor() {
  _cached_size_ = 0;
  handleid_ = 0;
  ref_ = 0;
  frontid_ = 0;
  sessionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtnInsertOrder::~RtnInsertOrder() {
  SharedDtor();
}

void RtnInsertOrder::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtnInsertOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtnInsertOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtnInsertOrder_descriptor_;
}

const RtnInsertOrder& RtnInsertOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureTrading_2eproto();  return *default_instance_;
}

RtnInsertOrder* RtnInsertOrder::default_instance_ = NULL;

RtnInsertOrder* RtnInsertOrder::New() const {
  return new RtnInsertOrder;
}

void RtnInsertOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    handleid_ = 0;
    ref_ = 0;
    frontid_ = 0;
    sessionid_ = 0;
  }
  lastorder_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtnInsertOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 HandleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handleid_)));
          set_has_handleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Ref;
        break;
      }
      
      // required int32 Ref = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ref_)));
          set_has_ref();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FrontID;
        break;
      }
      
      // required int32 FrontID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FrontID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontid_)));
          set_has_frontid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SessionID;
        break;
      }
      
      // required int32 SessionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_LastOrder;
        break;
      }
      
      // repeated .FutureTradingPB.MThostFtdcOrderField LastOrder = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LastOrder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lastorder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_LastOrder;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtnInsertOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 HandleID = 1;
  if (has_handleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->handleid(), output);
  }
  
  // required int32 Ref = 2;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ref(), output);
  }
  
  // required int32 FrontID = 3;
  if (has_frontid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frontid(), output);
  }
  
  // required int32 SessionID = 4;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sessionid(), output);
  }
  
  // repeated .FutureTradingPB.MThostFtdcOrderField LastOrder = 5;
  for (int i = 0; i < this->lastorder_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->lastorder(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtnInsertOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 HandleID = 1;
  if (has_handleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->handleid(), target);
  }
  
  // required int32 Ref = 2;
  if (has_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ref(), target);
  }
  
  // required int32 FrontID = 3;
  if (has_frontid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->frontid(), target);
  }
  
  // required int32 SessionID = 4;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sessionid(), target);
  }
  
  // repeated .FutureTradingPB.MThostFtdcOrderField LastOrder = 5;
  for (int i = 0; i < this->lastorder_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->lastorder(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtnInsertOrder::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 HandleID = 1;
    if (has_handleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handleid());
    }
    
    // required int32 Ref = 2;
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ref());
    }
    
    // required int32 FrontID = 3;
    if (has_frontid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frontid());
    }
    
    // required int32 SessionID = 4;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }
    
  }
  // repeated .FutureTradingPB.MThostFtdcOrderField LastOrder = 5;
  total_size += 1 * this->lastorder_size();
  for (int i = 0; i < this->lastorder_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lastorder(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtnInsertOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtnInsertOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtnInsertOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtnInsertOrder::MergeFrom(const RtnInsertOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  lastorder_.MergeFrom(from.lastorder_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handleid()) {
      set_handleid(from.handleid());
    }
    if (from.has_ref()) {
      set_ref(from.ref());
    }
    if (from.has_frontid()) {
      set_frontid(from.frontid());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtnInsertOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtnInsertOrder::CopyFrom(const RtnInsertOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtnInsertOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < lastorder_size(); i++) {
    if (!this->lastorder(i).IsInitialized()) return false;
  }
  return true;
}

void RtnInsertOrder::Swap(RtnInsertOrder* other) {
  if (other != this) {
    std::swap(handleid_, other->handleid_);
    std::swap(ref_, other->ref_);
    std::swap(frontid_, other->frontid_);
    std::swap(sessionid_, other->sessionid_);
    lastorder_.Swap(&other->lastorder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtnInsertOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtnInsertOrder_descriptor_;
  metadata.reflection = RtnInsertOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WaitInsertOrder::kHandleIDFieldNumber;
const int WaitInsertOrder::kRefFieldNumber;
const int WaitInsertOrder::kFrontIDFieldNumber;
const int WaitInsertOrder::kSessionIDFieldNumber;
#endif  // !_MSC_VER

WaitInsertOrder::WaitInsertOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WaitInsertOrder::InitAsDefaultInstance() {
}

WaitInsertOrder::WaitInsertOrder(const WaitInsertOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WaitInsertOrder::SharedCtor() {
  _cached_size_ = 0;
  handleid_ = 0;
  ref_ = 0;
  frontid_ = 0;
  sessionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WaitInsertOrder::~WaitInsertOrder() {
  SharedDtor();
}

void WaitInsertOrder::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WaitInsertOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WaitInsertOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WaitInsertOrder_descriptor_;
}

const WaitInsertOrder& WaitInsertOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureTrading_2eproto();  return *default_instance_;
}

WaitInsertOrder* WaitInsertOrder::default_instance_ = NULL;

WaitInsertOrder* WaitInsertOrder::New() const {
  return new WaitInsertOrder;
}

void WaitInsertOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    handleid_ = 0;
    ref_ = 0;
    frontid_ = 0;
    sessionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WaitInsertOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 HandleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handleid_)));
          set_has_handleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Ref;
        break;
      }
      
      // required int32 Ref = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ref_)));
          set_has_ref();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FrontID;
        break;
      }
      
      // required int32 FrontID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FrontID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontid_)));
          set_has_frontid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SessionID;
        break;
      }
      
      // required int32 SessionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WaitInsertOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 HandleID = 1;
  if (has_handleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->handleid(), output);
  }
  
  // required int32 Ref = 2;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ref(), output);
  }
  
  // required int32 FrontID = 3;
  if (has_frontid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frontid(), output);
  }
  
  // required int32 SessionID = 4;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sessionid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WaitInsertOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 HandleID = 1;
  if (has_handleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->handleid(), target);
  }
  
  // required int32 Ref = 2;
  if (has_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ref(), target);
  }
  
  // required int32 FrontID = 3;
  if (has_frontid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->frontid(), target);
  }
  
  // required int32 SessionID = 4;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sessionid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WaitInsertOrder::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 HandleID = 1;
    if (has_handleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handleid());
    }
    
    // required int32 Ref = 2;
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ref());
    }
    
    // required int32 FrontID = 3;
    if (has_frontid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frontid());
    }
    
    // required int32 SessionID = 4;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WaitInsertOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WaitInsertOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WaitInsertOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WaitInsertOrder::MergeFrom(const WaitInsertOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handleid()) {
      set_handleid(from.handleid());
    }
    if (from.has_ref()) {
      set_ref(from.ref());
    }
    if (from.has_frontid()) {
      set_frontid(from.frontid());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WaitInsertOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitInsertOrder::CopyFrom(const WaitInsertOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitInsertOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void WaitInsertOrder::Swap(WaitInsertOrder* other) {
  if (other != this) {
    std::swap(handleid_, other->handleid_);
    std::swap(ref_, other->ref_);
    std::swap(frontid_, other->frontid_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WaitInsertOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WaitInsertOrder_descriptor_;
  metadata.reflection = WaitInsertOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqBuffInfo::kHandleIDFieldNumber;
const int ReqBuffInfo::kRefFieldNumber;
const int ReqBuffInfo::kFrontIDFieldNumber;
const int ReqBuffInfo::kSessionIDFieldNumber;
#endif  // !_MSC_VER

ReqBuffInfo::ReqBuffInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBuffInfo::InitAsDefaultInstance() {
}

ReqBuffInfo::ReqBuffInfo(const ReqBuffInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBuffInfo::SharedCtor() {
  _cached_size_ = 0;
  handleid_ = 0;
  ref_ = 0;
  frontid_ = 0;
  sessionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBuffInfo::~ReqBuffInfo() {
  SharedDtor();
}

void ReqBuffInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqBuffInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBuffInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBuffInfo_descriptor_;
}

const ReqBuffInfo& ReqBuffInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureTrading_2eproto();  return *default_instance_;
}

ReqBuffInfo* ReqBuffInfo::default_instance_ = NULL;

ReqBuffInfo* ReqBuffInfo::New() const {
  return new ReqBuffInfo;
}

void ReqBuffInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    handleid_ = 0;
    ref_ = 0;
    frontid_ = 0;
    sessionid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBuffInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 HandleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handleid_)));
          set_has_handleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Ref;
        break;
      }
      
      // required int32 Ref = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ref_)));
          set_has_ref();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FrontID;
        break;
      }
      
      // required int32 FrontID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FrontID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontid_)));
          set_has_frontid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SessionID;
        break;
      }
      
      // required int32 SessionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqBuffInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 HandleID = 1;
  if (has_handleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->handleid(), output);
  }
  
  // required int32 Ref = 2;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ref(), output);
  }
  
  // required int32 FrontID = 3;
  if (has_frontid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frontid(), output);
  }
  
  // required int32 SessionID = 4;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sessionid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBuffInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 HandleID = 1;
  if (has_handleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->handleid(), target);
  }
  
  // required int32 Ref = 2;
  if (has_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ref(), target);
  }
  
  // required int32 FrontID = 3;
  if (has_frontid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->frontid(), target);
  }
  
  // required int32 SessionID = 4;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sessionid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBuffInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 HandleID = 1;
    if (has_handleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handleid());
    }
    
    // required int32 Ref = 2;
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ref());
    }
    
    // required int32 FrontID = 3;
    if (has_frontid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frontid());
    }
    
    // required int32 SessionID = 4;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBuffInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBuffInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBuffInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBuffInfo::MergeFrom(const ReqBuffInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handleid()) {
      set_handleid(from.handleid());
    }
    if (from.has_ref()) {
      set_ref(from.ref());
    }
    if (from.has_frontid()) {
      set_frontid(from.frontid());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBuffInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBuffInfo::CopyFrom(const ReqBuffInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBuffInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ReqBuffInfo::Swap(ReqBuffInfo* other) {
  if (other != this) {
    std::swap(handleid_, other->handleid_);
    std::swap(ref_, other->ref_);
    std::swap(frontid_, other->frontid_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBuffInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBuffInfo_descriptor_;
  metadata.reflection = ReqBuffInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtnTradedInfo::kHandleIDFieldNumber;
const int RtnTradedInfo::kRefFieldNumber;
const int RtnTradedInfo::kFrontIDFieldNumber;
const int RtnTradedInfo::kSessionIDFieldNumber;
const int RtnTradedInfo::kLastOrderFieldNumber;
const int RtnTradedInfo::kLastTradeFieldNumber;
#endif  // !_MSC_VER

RtnTradedInfo::RtnTradedInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtnTradedInfo::InitAsDefaultInstance() {
}

RtnTradedInfo::RtnTradedInfo(const RtnTradedInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtnTradedInfo::SharedCtor() {
  _cached_size_ = 0;
  handleid_ = 0;
  ref_ = 0;
  frontid_ = 0;
  sessionid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtnTradedInfo::~RtnTradedInfo() {
  SharedDtor();
}

void RtnTradedInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtnTradedInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtnTradedInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtnTradedInfo_descriptor_;
}

const RtnTradedInfo& RtnTradedInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureTrading_2eproto();  return *default_instance_;
}

RtnTradedInfo* RtnTradedInfo::default_instance_ = NULL;

RtnTradedInfo* RtnTradedInfo::New() const {
  return new RtnTradedInfo;
}

void RtnTradedInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    handleid_ = 0;
    ref_ = 0;
    frontid_ = 0;
    sessionid_ = 0;
  }
  lastorder_.Clear();
  lasttrade_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtnTradedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 HandleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handleid_)));
          set_has_handleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Ref;
        break;
      }
      
      // required int32 Ref = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ref_)));
          set_has_ref();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FrontID;
        break;
      }
      
      // required int32 FrontID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FrontID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontid_)));
          set_has_frontid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SessionID;
        break;
      }
      
      // required int32 SessionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_LastOrder;
        break;
      }
      
      // repeated .FutureTradingPB.MThostFtdcOrderField LastOrder = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LastOrder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lastorder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_LastOrder;
        if (input->ExpectTag(50)) goto parse_LastTrade;
        break;
      }
      
      // repeated .FutureTradingPB.MThostFtdcTradeField LastTrade = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LastTrade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lasttrade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_LastTrade;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtnTradedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 HandleID = 1;
  if (has_handleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->handleid(), output);
  }
  
  // required int32 Ref = 2;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ref(), output);
  }
  
  // required int32 FrontID = 3;
  if (has_frontid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frontid(), output);
  }
  
  // required int32 SessionID = 4;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sessionid(), output);
  }
  
  // repeated .FutureTradingPB.MThostFtdcOrderField LastOrder = 5;
  for (int i = 0; i < this->lastorder_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->lastorder(i), output);
  }
  
  // repeated .FutureTradingPB.MThostFtdcTradeField LastTrade = 6;
  for (int i = 0; i < this->lasttrade_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->lasttrade(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtnTradedInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 HandleID = 1;
  if (has_handleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->handleid(), target);
  }
  
  // required int32 Ref = 2;
  if (has_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ref(), target);
  }
  
  // required int32 FrontID = 3;
  if (has_frontid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->frontid(), target);
  }
  
  // required int32 SessionID = 4;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sessionid(), target);
  }
  
  // repeated .FutureTradingPB.MThostFtdcOrderField LastOrder = 5;
  for (int i = 0; i < this->lastorder_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->lastorder(i), target);
  }
  
  // repeated .FutureTradingPB.MThostFtdcTradeField LastTrade = 6;
  for (int i = 0; i < this->lasttrade_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->lasttrade(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtnTradedInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 HandleID = 1;
    if (has_handleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handleid());
    }
    
    // required int32 Ref = 2;
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ref());
    }
    
    // required int32 FrontID = 3;
    if (has_frontid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frontid());
    }
    
    // required int32 SessionID = 4;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }
    
  }
  // repeated .FutureTradingPB.MThostFtdcOrderField LastOrder = 5;
  total_size += 1 * this->lastorder_size();
  for (int i = 0; i < this->lastorder_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lastorder(i));
  }
  
  // repeated .FutureTradingPB.MThostFtdcTradeField LastTrade = 6;
  total_size += 1 * this->lasttrade_size();
  for (int i = 0; i < this->lasttrade_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lasttrade(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtnTradedInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtnTradedInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtnTradedInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtnTradedInfo::MergeFrom(const RtnTradedInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  lastorder_.MergeFrom(from.lastorder_);
  lasttrade_.MergeFrom(from.lasttrade_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handleid()) {
      set_handleid(from.handleid());
    }
    if (from.has_ref()) {
      set_ref(from.ref());
    }
    if (from.has_frontid()) {
      set_frontid(from.frontid());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtnTradedInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtnTradedInfo::CopyFrom(const RtnTradedInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtnTradedInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  for (int i = 0; i < lastorder_size(); i++) {
    if (!this->lastorder(i).IsInitialized()) return false;
  }
  for (int i = 0; i < lasttrade_size(); i++) {
    if (!this->lasttrade(i).IsInitialized()) return false;
  }
  return true;
}

void RtnTradedInfo::Swap(RtnTradedInfo* other) {
  if (other != this) {
    std::swap(handleid_, other->handleid_);
    std::swap(ref_, other->ref_);
    std::swap(frontid_, other->frontid_);
    std::swap(sessionid_, other->sessionid_);
    lastorder_.Swap(&other->lastorder_);
    lasttrade_.Swap(&other->lasttrade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtnTradedInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtnTradedInfo_descriptor_;
  metadata.reflection = RtnTradedInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtnAllTradedInfo::kAllTradedInfoFieldNumber;
#endif  // !_MSC_VER

RtnAllTradedInfo::RtnAllTradedInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtnAllTradedInfo::InitAsDefaultInstance() {
}

RtnAllTradedInfo::RtnAllTradedInfo(const RtnAllTradedInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtnAllTradedInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtnAllTradedInfo::~RtnAllTradedInfo() {
  SharedDtor();
}

void RtnAllTradedInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtnAllTradedInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtnAllTradedInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtnAllTradedInfo_descriptor_;
}

const RtnAllTradedInfo& RtnAllTradedInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureTrading_2eproto();  return *default_instance_;
}

RtnAllTradedInfo* RtnAllTradedInfo::default_instance_ = NULL;

RtnAllTradedInfo* RtnAllTradedInfo::New() const {
  return new RtnAllTradedInfo;
}

void RtnAllTradedInfo::Clear() {
  alltradedinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtnAllTradedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FutureTradingPB.RtnTradedInfo AllTradedInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AllTradedInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alltradedinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_AllTradedInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtnAllTradedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FutureTradingPB.RtnTradedInfo AllTradedInfo = 1;
  for (int i = 0; i < this->alltradedinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alltradedinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtnAllTradedInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FutureTradingPB.RtnTradedInfo AllTradedInfo = 1;
  for (int i = 0; i < this->alltradedinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alltradedinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtnAllTradedInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .FutureTradingPB.RtnTradedInfo AllTradedInfo = 1;
  total_size += 1 * this->alltradedinfo_size();
  for (int i = 0; i < this->alltradedinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alltradedinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtnAllTradedInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtnAllTradedInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtnAllTradedInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtnAllTradedInfo::MergeFrom(const RtnAllTradedInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  alltradedinfo_.MergeFrom(from.alltradedinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtnAllTradedInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtnAllTradedInfo::CopyFrom(const RtnAllTradedInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtnAllTradedInfo::IsInitialized() const {
  
  for (int i = 0; i < alltradedinfo_size(); i++) {
    if (!this->alltradedinfo(i).IsInitialized()) return false;
  }
  return true;
}

void RtnAllTradedInfo::Swap(RtnAllTradedInfo* other) {
  if (other != this) {
    alltradedinfo_.Swap(&other->alltradedinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtnAllTradedInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtnAllTradedInfo_descriptor_;
  metadata.reflection = RtnAllTradedInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MThostFtdcOrderField::kInstrumentIDFieldNumber;
const int MThostFtdcOrderField::kOrderRefFieldNumber;
const int MThostFtdcOrderField::kOrderPriceTypeFieldNumber;
const int MThostFtdcOrderField::kDirectionFieldNumber;
const int MThostFtdcOrderField::kCombOffsetFlagFieldNumber;
const int MThostFtdcOrderField::kCombHedgeFlagFieldNumber;
const int MThostFtdcOrderField::kLimitPriceFieldNumber;
const int MThostFtdcOrderField::kVolumeTotalOriginalFieldNumber;
const int MThostFtdcOrderField::kTimeConditionFieldNumber;
const int MThostFtdcOrderField::kGTDDateFieldNumber;
const int MThostFtdcOrderField::kRequestIDFieldNumber;
const int MThostFtdcOrderField::kOrderLocalIDFieldNumber;
const int MThostFtdcOrderField::kExchangeIDFieldNumber;
const int MThostFtdcOrderField::kExchangeInstIDFieldNumber;
const int MThostFtdcOrderField::kOrderSubmitStatusFieldNumber;
const int MThostFtdcOrderField::kNotifySequenceFieldNumber;
const int MThostFtdcOrderField::kTradingDayFieldNumber;
const int MThostFtdcOrderField::kSettlementIDFieldNumber;
const int MThostFtdcOrderField::kOrderSysIDFieldNumber;
const int MThostFtdcOrderField::kOrderSourceFieldNumber;
const int MThostFtdcOrderField::kOrderStatusFieldNumber;
const int MThostFtdcOrderField::kOrderTypeFieldNumber;
const int MThostFtdcOrderField::kVolumeTradedFieldNumber;
const int MThostFtdcOrderField::kVolumeTotalFieldNumber;
const int MThostFtdcOrderField::kInsertDateFieldNumber;
const int MThostFtdcOrderField::kInsertTimeFieldNumber;
const int MThostFtdcOrderField::kActiveTimeFieldNumber;
const int MThostFtdcOrderField::kSuspendTimeFieldNumber;
const int MThostFtdcOrderField::kUpdateTimeFieldNumber;
const int MThostFtdcOrderField::kCancelTimeFieldNumber;
const int MThostFtdcOrderField::kActiveTraderIDFieldNumber;
const int MThostFtdcOrderField::kClearingPartIDFieldNumber;
const int MThostFtdcOrderField::kSequenceNoFieldNumber;
const int MThostFtdcOrderField::kFrontIDFieldNumber;
const int MThostFtdcOrderField::kSessionIDFieldNumber;
const int MThostFtdcOrderField::kUserProductInfoFieldNumber;
const int MThostFtdcOrderField::kStatusMsgFieldNumber;
const int MThostFtdcOrderField::kUserForceCloseFieldNumber;
const int MThostFtdcOrderField::kBrokerOrderSeqFieldNumber;
#endif  // !_MSC_VER

MThostFtdcOrderField::MThostFtdcOrderField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MThostFtdcOrderField::InitAsDefaultInstance() {
}

MThostFtdcOrderField::MThostFtdcOrderField(const MThostFtdcOrderField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MThostFtdcOrderField::SharedCtor() {
  _cached_size_ = 0;
  instrumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderpricetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  direction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comboffsetflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  combhedgeflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limitprice_ = 0;
  volumetotaloriginal_ = 0;
  timecondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gtddate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  requestid_ = 0;
  orderlocalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeinstid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ordersubmitstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notifysequence_ = 0;
  tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  settlementid_ = 0;
  ordersysid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ordersource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ordertype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  volumetraded_ = 0;
  volumetotal_ = 0;
  insertdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inserttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  suspendtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  canceltime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activetraderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clearingpartid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sequenceno_ = 0;
  frontid_ = 0;
  sessionid_ = 0;
  userproductinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  statusmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userforceclose_ = 0;
  brokerorderseq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MThostFtdcOrderField::~MThostFtdcOrderField() {
  SharedDtor();
}

void MThostFtdcOrderField::SharedDtor() {
  if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete instrumentid_;
  }
  if (orderref_ != &::google::protobuf::internal::kEmptyString) {
    delete orderref_;
  }
  if (orderpricetype_ != &::google::protobuf::internal::kEmptyString) {
    delete orderpricetype_;
  }
  if (direction_ != &::google::protobuf::internal::kEmptyString) {
    delete direction_;
  }
  if (comboffsetflag_ != &::google::protobuf::internal::kEmptyString) {
    delete comboffsetflag_;
  }
  if (combhedgeflag_ != &::google::protobuf::internal::kEmptyString) {
    delete combhedgeflag_;
  }
  if (timecondition_ != &::google::protobuf::internal::kEmptyString) {
    delete timecondition_;
  }
  if (gtddate_ != &::google::protobuf::internal::kEmptyString) {
    delete gtddate_;
  }
  if (orderlocalid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderlocalid_;
  }
  if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeid_;
  }
  if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeinstid_;
  }
  if (ordersubmitstatus_ != &::google::protobuf::internal::kEmptyString) {
    delete ordersubmitstatus_;
  }
  if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
    delete tradingday_;
  }
  if (ordersysid_ != &::google::protobuf::internal::kEmptyString) {
    delete ordersysid_;
  }
  if (ordersource_ != &::google::protobuf::internal::kEmptyString) {
    delete ordersource_;
  }
  if (orderstatus_ != &::google::protobuf::internal::kEmptyString) {
    delete orderstatus_;
  }
  if (ordertype_ != &::google::protobuf::internal::kEmptyString) {
    delete ordertype_;
  }
  if (insertdate_ != &::google::protobuf::internal::kEmptyString) {
    delete insertdate_;
  }
  if (inserttime_ != &::google::protobuf::internal::kEmptyString) {
    delete inserttime_;
  }
  if (activetime_ != &::google::protobuf::internal::kEmptyString) {
    delete activetime_;
  }
  if (suspendtime_ != &::google::protobuf::internal::kEmptyString) {
    delete suspendtime_;
  }
  if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
    delete updatetime_;
  }
  if (canceltime_ != &::google::protobuf::internal::kEmptyString) {
    delete canceltime_;
  }
  if (activetraderid_ != &::google::protobuf::internal::kEmptyString) {
    delete activetraderid_;
  }
  if (clearingpartid_ != &::google::protobuf::internal::kEmptyString) {
    delete clearingpartid_;
  }
  if (userproductinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete userproductinfo_;
  }
  if (statusmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete statusmsg_;
  }
  if (this != default_instance_) {
  }
}

void MThostFtdcOrderField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MThostFtdcOrderField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MThostFtdcOrderField_descriptor_;
}

const MThostFtdcOrderField& MThostFtdcOrderField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureTrading_2eproto();  return *default_instance_;
}

MThostFtdcOrderField* MThostFtdcOrderField::default_instance_ = NULL;

MThostFtdcOrderField* MThostFtdcOrderField::New() const {
  return new MThostFtdcOrderField;
}

void MThostFtdcOrderField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instrumentid()) {
      if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
        instrumentid_->clear();
      }
    }
    if (has_orderref()) {
      if (orderref_ != &::google::protobuf::internal::kEmptyString) {
        orderref_->clear();
      }
    }
    if (has_orderpricetype()) {
      if (orderpricetype_ != &::google::protobuf::internal::kEmptyString) {
        orderpricetype_->clear();
      }
    }
    if (has_direction()) {
      if (direction_ != &::google::protobuf::internal::kEmptyString) {
        direction_->clear();
      }
    }
    if (has_comboffsetflag()) {
      if (comboffsetflag_ != &::google::protobuf::internal::kEmptyString) {
        comboffsetflag_->clear();
      }
    }
    if (has_combhedgeflag()) {
      if (combhedgeflag_ != &::google::protobuf::internal::kEmptyString) {
        combhedgeflag_->clear();
      }
    }
    limitprice_ = 0;
    volumetotaloriginal_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_timecondition()) {
      if (timecondition_ != &::google::protobuf::internal::kEmptyString) {
        timecondition_->clear();
      }
    }
    if (has_gtddate()) {
      if (gtddate_ != &::google::protobuf::internal::kEmptyString) {
        gtddate_->clear();
      }
    }
    requestid_ = 0;
    if (has_orderlocalid()) {
      if (orderlocalid_ != &::google::protobuf::internal::kEmptyString) {
        orderlocalid_->clear();
      }
    }
    if (has_exchangeid()) {
      if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeid_->clear();
      }
    }
    if (has_exchangeinstid()) {
      if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeinstid_->clear();
      }
    }
    if (has_ordersubmitstatus()) {
      if (ordersubmitstatus_ != &::google::protobuf::internal::kEmptyString) {
        ordersubmitstatus_->clear();
      }
    }
    notifysequence_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_tradingday()) {
      if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
        tradingday_->clear();
      }
    }
    settlementid_ = 0;
    if (has_ordersysid()) {
      if (ordersysid_ != &::google::protobuf::internal::kEmptyString) {
        ordersysid_->clear();
      }
    }
    if (has_ordersource()) {
      if (ordersource_ != &::google::protobuf::internal::kEmptyString) {
        ordersource_->clear();
      }
    }
    if (has_orderstatus()) {
      if (orderstatus_ != &::google::protobuf::internal::kEmptyString) {
        orderstatus_->clear();
      }
    }
    if (has_ordertype()) {
      if (ordertype_ != &::google::protobuf::internal::kEmptyString) {
        ordertype_->clear();
      }
    }
    volumetraded_ = 0;
    volumetotal_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_insertdate()) {
      if (insertdate_ != &::google::protobuf::internal::kEmptyString) {
        insertdate_->clear();
      }
    }
    if (has_inserttime()) {
      if (inserttime_ != &::google::protobuf::internal::kEmptyString) {
        inserttime_->clear();
      }
    }
    if (has_activetime()) {
      if (activetime_ != &::google::protobuf::internal::kEmptyString) {
        activetime_->clear();
      }
    }
    if (has_suspendtime()) {
      if (suspendtime_ != &::google::protobuf::internal::kEmptyString) {
        suspendtime_->clear();
      }
    }
    if (has_updatetime()) {
      if (updatetime_ != &::google::protobuf::internal::kEmptyString) {
        updatetime_->clear();
      }
    }
    if (has_canceltime()) {
      if (canceltime_ != &::google::protobuf::internal::kEmptyString) {
        canceltime_->clear();
      }
    }
    if (has_activetraderid()) {
      if (activetraderid_ != &::google::protobuf::internal::kEmptyString) {
        activetraderid_->clear();
      }
    }
    if (has_clearingpartid()) {
      if (clearingpartid_ != &::google::protobuf::internal::kEmptyString) {
        clearingpartid_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    sequenceno_ = 0;
    frontid_ = 0;
    sessionid_ = 0;
    if (has_userproductinfo()) {
      if (userproductinfo_ != &::google::protobuf::internal::kEmptyString) {
        userproductinfo_->clear();
      }
    }
    if (has_statusmsg()) {
      if (statusmsg_ != &::google::protobuf::internal::kEmptyString) {
        statusmsg_->clear();
      }
    }
    userforceclose_ = 0;
    brokerorderseq_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MThostFtdcOrderField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InstrumentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OrderRef;
        break;
      }
      
      // required string OrderRef = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderRef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderref().data(), this->orderref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_OrderPriceType;
        break;
      }
      
      // required string OrderPriceType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderPriceType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderpricetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderpricetype().data(), this->orderpricetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Direction;
        break;
      }
      
      // required string Direction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_direction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->direction().data(), this->direction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_CombOffsetFlag;
        break;
      }
      
      // required string CombOffsetFlag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CombOffsetFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comboffsetflag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comboffsetflag().data(), this->comboffsetflag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_CombHedgeFlag;
        break;
      }
      
      // required string CombHedgeFlag = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CombHedgeFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_combhedgeflag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->combhedgeflag().data(), this->combhedgeflag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_LimitPrice;
        break;
      }
      
      // required double LimitPrice = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LimitPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &limitprice_)));
          set_has_limitprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_VolumeTotalOriginal;
        break;
      }
      
      // required int32 VolumeTotalOriginal = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VolumeTotalOriginal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumetotaloriginal_)));
          set_has_volumetotaloriginal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_TimeCondition;
        break;
      }
      
      // required string TimeCondition = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TimeCondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timecondition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timecondition().data(), this->timecondition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_GTDDate;
        break;
      }
      
      // required string GTDDate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GTDDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gtddate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gtddate().data(), this->gtddate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_RequestID;
        break;
      }
      
      // required int32 RequestID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RequestID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestid_)));
          set_has_requestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_OrderLocalID;
        break;
      }
      
      // required string OrderLocalID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderLocalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderlocalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderlocalid().data(), this->orderlocalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_ExchangeID;
        break;
      }
      
      // required string ExchangeID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_ExchangeInstID;
        break;
      }
      
      // required string ExchangeInstID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeInstID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeinstid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeinstid().data(), this->exchangeinstid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_OrderSubmitStatus;
        break;
      }
      
      // required string OrderSubmitStatus = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderSubmitStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordersubmitstatus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ordersubmitstatus().data(), this->ordersubmitstatus().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_NotifySequence;
        break;
      }
      
      // required int32 NotifySequence = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NotifySequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notifysequence_)));
          set_has_notifysequence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_TradingDay;
        break;
      }
      
      // required string TradingDay = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TradingDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_SettlementID;
        break;
      }
      
      // required int32 SettlementID = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SettlementID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlementid_)));
          set_has_settlementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_OrderSysID;
        break;
      }
      
      // required string OrderSysID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderSysID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordersysid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ordersysid().data(), this->ordersysid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_OrderSource;
        break;
      }
      
      // required string OrderSource = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderSource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordersource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ordersource().data(), this->ordersource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_OrderStatus;
        break;
      }
      
      // required string OrderStatus = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderstatus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderstatus().data(), this->orderstatus().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_OrderType;
        break;
      }
      
      // required string OrderType = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordertype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ordertype().data(), this->ordertype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_VolumeTraded;
        break;
      }
      
      // required int32 VolumeTraded = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VolumeTraded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumetraded_)));
          set_has_volumetraded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_VolumeTotal;
        break;
      }
      
      // required int32 VolumeTotal = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VolumeTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumetotal_)));
          set_has_volumetotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_InsertDate;
        break;
      }
      
      // required string InsertDate = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InsertDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_insertdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->insertdate().data(), this->insertdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_InsertTime;
        break;
      }
      
      // required string InsertTime = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InsertTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inserttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inserttime().data(), this->inserttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_ActiveTime;
        break;
      }
      
      // required string ActiveTime = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActiveTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activetime().data(), this->activetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_SuspendTime;
        break;
      }
      
      // required string SuspendTime = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SuspendTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suspendtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->suspendtime().data(), this->suspendtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_UpdateTime;
        break;
      }
      
      // required string UpdateTime = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UpdateTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_updatetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->updatetime().data(), this->updatetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_CancelTime;
        break;
      }
      
      // required string CancelTime = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CancelTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_canceltime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->canceltime().data(), this->canceltime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_ActiveTraderID;
        break;
      }
      
      // required string ActiveTraderID = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActiveTraderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activetraderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activetraderid().data(), this->activetraderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_ClearingPartID;
        break;
      }
      
      // required string ClearingPartID = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ClearingPartID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clearingpartid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clearingpartid().data(), this->clearingpartid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_SequenceNo;
        break;
      }
      
      // required int32 SequenceNo = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SequenceNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequenceno_)));
          set_has_sequenceno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_FrontID;
        break;
      }
      
      // required int32 FrontID = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FrontID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontid_)));
          set_has_frontid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_SessionID;
        break;
      }
      
      // required int32 SessionID = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_UserProductInfo;
        break;
      }
      
      // required string UserProductInfo = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserProductInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userproductinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userproductinfo().data(), this->userproductinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_StatusMsg;
        break;
      }
      
      // required string StatusMsg = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StatusMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statusmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->statusmsg().data(), this->statusmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_UserForceClose;
        break;
      }
      
      // required int32 UserForceClose = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserForceClose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userforceclose_)));
          set_has_userforceclose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_BrokerOrderSeq;
        break;
      }
      
      // required int32 BrokerOrderSeq = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BrokerOrderSeq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brokerorderseq_)));
          set_has_brokerorderseq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MThostFtdcOrderField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string InstrumentID = 1;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instrumentid(), output);
  }
  
  // required string OrderRef = 2;
  if (has_orderref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->orderref(), output);
  }
  
  // required string OrderPriceType = 3;
  if (has_orderpricetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderpricetype().data(), this->orderpricetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->orderpricetype(), output);
  }
  
  // required string Direction = 4;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->direction().data(), this->direction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->direction(), output);
  }
  
  // required string CombOffsetFlag = 5;
  if (has_comboffsetflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comboffsetflag().data(), this->comboffsetflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->comboffsetflag(), output);
  }
  
  // required string CombHedgeFlag = 6;
  if (has_combhedgeflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->combhedgeflag().data(), this->combhedgeflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->combhedgeflag(), output);
  }
  
  // required double LimitPrice = 7;
  if (has_limitprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->limitprice(), output);
  }
  
  // required int32 VolumeTotalOriginal = 8;
  if (has_volumetotaloriginal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->volumetotaloriginal(), output);
  }
  
  // required string TimeCondition = 9;
  if (has_timecondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timecondition().data(), this->timecondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->timecondition(), output);
  }
  
  // required string GTDDate = 10;
  if (has_gtddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gtddate().data(), this->gtddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->gtddate(), output);
  }
  
  // required int32 RequestID = 11;
  if (has_requestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->requestid(), output);
  }
  
  // required string OrderLocalID = 12;
  if (has_orderlocalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderlocalid().data(), this->orderlocalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->orderlocalid(), output);
  }
  
  // required string ExchangeID = 13;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->exchangeid(), output);
  }
  
  // required string ExchangeInstID = 14;
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->exchangeinstid(), output);
  }
  
  // required string OrderSubmitStatus = 15;
  if (has_ordersubmitstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordersubmitstatus().data(), this->ordersubmitstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->ordersubmitstatus(), output);
  }
  
  // required int32 NotifySequence = 16;
  if (has_notifysequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->notifysequence(), output);
  }
  
  // required string TradingDay = 17;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->tradingday(), output);
  }
  
  // required int32 SettlementID = 18;
  if (has_settlementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->settlementid(), output);
  }
  
  // required string OrderSysID = 19;
  if (has_ordersysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordersysid().data(), this->ordersysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->ordersysid(), output);
  }
  
  // required string OrderSource = 20;
  if (has_ordersource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordersource().data(), this->ordersource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->ordersource(), output);
  }
  
  // required string OrderStatus = 21;
  if (has_orderstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderstatus().data(), this->orderstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->orderstatus(), output);
  }
  
  // required string OrderType = 22;
  if (has_ordertype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordertype().data(), this->ordertype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->ordertype(), output);
  }
  
  // required int32 VolumeTraded = 23;
  if (has_volumetraded()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->volumetraded(), output);
  }
  
  // required int32 VolumeTotal = 24;
  if (has_volumetotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->volumetotal(), output);
  }
  
  // required string InsertDate = 25;
  if (has_insertdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->insertdate().data(), this->insertdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->insertdate(), output);
  }
  
  // required string InsertTime = 26;
  if (has_inserttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inserttime().data(), this->inserttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->inserttime(), output);
  }
  
  // required string ActiveTime = 27;
  if (has_activetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activetime().data(), this->activetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->activetime(), output);
  }
  
  // required string SuspendTime = 28;
  if (has_suspendtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suspendtime().data(), this->suspendtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->suspendtime(), output);
  }
  
  // required string UpdateTime = 29;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->updatetime(), output);
  }
  
  // required string CancelTime = 30;
  if (has_canceltime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->canceltime().data(), this->canceltime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->canceltime(), output);
  }
  
  // required string ActiveTraderID = 31;
  if (has_activetraderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activetraderid().data(), this->activetraderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->activetraderid(), output);
  }
  
  // required string ClearingPartID = 32;
  if (has_clearingpartid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clearingpartid().data(), this->clearingpartid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->clearingpartid(), output);
  }
  
  // required int32 SequenceNo = 33;
  if (has_sequenceno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->sequenceno(), output);
  }
  
  // required int32 FrontID = 34;
  if (has_frontid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->frontid(), output);
  }
  
  // required int32 SessionID = 35;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->sessionid(), output);
  }
  
  // required string UserProductInfo = 36;
  if (has_userproductinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userproductinfo().data(), this->userproductinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      36, this->userproductinfo(), output);
  }
  
  // required string StatusMsg = 37;
  if (has_statusmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->statusmsg().data(), this->statusmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      37, this->statusmsg(), output);
  }
  
  // required int32 UserForceClose = 38;
  if (has_userforceclose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->userforceclose(), output);
  }
  
  // required int32 BrokerOrderSeq = 39;
  if (has_brokerorderseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->brokerorderseq(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MThostFtdcOrderField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string InstrumentID = 1;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrumentid(), target);
  }
  
  // required string OrderRef = 2;
  if (has_orderref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orderref(), target);
  }
  
  // required string OrderPriceType = 3;
  if (has_orderpricetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderpricetype().data(), this->orderpricetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orderpricetype(), target);
  }
  
  // required string Direction = 4;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->direction().data(), this->direction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->direction(), target);
  }
  
  // required string CombOffsetFlag = 5;
  if (has_comboffsetflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comboffsetflag().data(), this->comboffsetflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->comboffsetflag(), target);
  }
  
  // required string CombHedgeFlag = 6;
  if (has_combhedgeflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->combhedgeflag().data(), this->combhedgeflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->combhedgeflag(), target);
  }
  
  // required double LimitPrice = 7;
  if (has_limitprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->limitprice(), target);
  }
  
  // required int32 VolumeTotalOriginal = 8;
  if (has_volumetotaloriginal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->volumetotaloriginal(), target);
  }
  
  // required string TimeCondition = 9;
  if (has_timecondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timecondition().data(), this->timecondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->timecondition(), target);
  }
  
  // required string GTDDate = 10;
  if (has_gtddate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gtddate().data(), this->gtddate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->gtddate(), target);
  }
  
  // required int32 RequestID = 11;
  if (has_requestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->requestid(), target);
  }
  
  // required string OrderLocalID = 12;
  if (has_orderlocalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderlocalid().data(), this->orderlocalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->orderlocalid(), target);
  }
  
  // required string ExchangeID = 13;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->exchangeid(), target);
  }
  
  // required string ExchangeInstID = 14;
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->exchangeinstid(), target);
  }
  
  // required string OrderSubmitStatus = 15;
  if (has_ordersubmitstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordersubmitstatus().data(), this->ordersubmitstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->ordersubmitstatus(), target);
  }
  
  // required int32 NotifySequence = 16;
  if (has_notifysequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->notifysequence(), target);
  }
  
  // required string TradingDay = 17;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->tradingday(), target);
  }
  
  // required int32 SettlementID = 18;
  if (has_settlementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->settlementid(), target);
  }
  
  // required string OrderSysID = 19;
  if (has_ordersysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordersysid().data(), this->ordersysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->ordersysid(), target);
  }
  
  // required string OrderSource = 20;
  if (has_ordersource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordersource().data(), this->ordersource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->ordersource(), target);
  }
  
  // required string OrderStatus = 21;
  if (has_orderstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderstatus().data(), this->orderstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->orderstatus(), target);
  }
  
  // required string OrderType = 22;
  if (has_ordertype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordertype().data(), this->ordertype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->ordertype(), target);
  }
  
  // required int32 VolumeTraded = 23;
  if (has_volumetraded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->volumetraded(), target);
  }
  
  // required int32 VolumeTotal = 24;
  if (has_volumetotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->volumetotal(), target);
  }
  
  // required string InsertDate = 25;
  if (has_insertdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->insertdate().data(), this->insertdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->insertdate(), target);
  }
  
  // required string InsertTime = 26;
  if (has_inserttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inserttime().data(), this->inserttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->inserttime(), target);
  }
  
  // required string ActiveTime = 27;
  if (has_activetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activetime().data(), this->activetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->activetime(), target);
  }
  
  // required string SuspendTime = 28;
  if (has_suspendtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->suspendtime().data(), this->suspendtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->suspendtime(), target);
  }
  
  // required string UpdateTime = 29;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->updatetime().data(), this->updatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->updatetime(), target);
  }
  
  // required string CancelTime = 30;
  if (has_canceltime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->canceltime().data(), this->canceltime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->canceltime(), target);
  }
  
  // required string ActiveTraderID = 31;
  if (has_activetraderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activetraderid().data(), this->activetraderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->activetraderid(), target);
  }
  
  // required string ClearingPartID = 32;
  if (has_clearingpartid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clearingpartid().data(), this->clearingpartid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->clearingpartid(), target);
  }
  
  // required int32 SequenceNo = 33;
  if (has_sequenceno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->sequenceno(), target);
  }
  
  // required int32 FrontID = 34;
  if (has_frontid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->frontid(), target);
  }
  
  // required int32 SessionID = 35;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->sessionid(), target);
  }
  
  // required string UserProductInfo = 36;
  if (has_userproductinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userproductinfo().data(), this->userproductinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->userproductinfo(), target);
  }
  
  // required string StatusMsg = 37;
  if (has_statusmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->statusmsg().data(), this->statusmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->statusmsg(), target);
  }
  
  // required int32 UserForceClose = 38;
  if (has_userforceclose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->userforceclose(), target);
  }
  
  // required int32 BrokerOrderSeq = 39;
  if (has_brokerorderseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->brokerorderseq(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MThostFtdcOrderField::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InstrumentID = 1;
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }
    
    // required string OrderRef = 2;
    if (has_orderref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderref());
    }
    
    // required string OrderPriceType = 3;
    if (has_orderpricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderpricetype());
    }
    
    // required string Direction = 4;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->direction());
    }
    
    // required string CombOffsetFlag = 5;
    if (has_comboffsetflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comboffsetflag());
    }
    
    // required string CombHedgeFlag = 6;
    if (has_combhedgeflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->combhedgeflag());
    }
    
    // required double LimitPrice = 7;
    if (has_limitprice()) {
      total_size += 1 + 8;
    }
    
    // required int32 VolumeTotalOriginal = 8;
    if (has_volumetotaloriginal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volumetotaloriginal());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string TimeCondition = 9;
    if (has_timecondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timecondition());
    }
    
    // required string GTDDate = 10;
    if (has_gtddate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gtddate());
    }
    
    // required int32 RequestID = 11;
    if (has_requestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requestid());
    }
    
    // required string OrderLocalID = 12;
    if (has_orderlocalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderlocalid());
    }
    
    // required string ExchangeID = 13;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }
    
    // required string ExchangeInstID = 14;
    if (has_exchangeinstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeinstid());
    }
    
    // required string OrderSubmitStatus = 15;
    if (has_ordersubmitstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ordersubmitstatus());
    }
    
    // required int32 NotifySequence = 16;
    if (has_notifysequence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notifysequence());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string TradingDay = 17;
    if (has_tradingday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradingday());
    }
    
    // required int32 SettlementID = 18;
    if (has_settlementid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settlementid());
    }
    
    // required string OrderSysID = 19;
    if (has_ordersysid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ordersysid());
    }
    
    // required string OrderSource = 20;
    if (has_ordersource()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ordersource());
    }
    
    // required string OrderStatus = 21;
    if (has_orderstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderstatus());
    }
    
    // required string OrderType = 22;
    if (has_ordertype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ordertype());
    }
    
    // required int32 VolumeTraded = 23;
    if (has_volumetraded()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volumetraded());
    }
    
    // required int32 VolumeTotal = 24;
    if (has_volumetotal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volumetotal());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required string InsertDate = 25;
    if (has_insertdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->insertdate());
    }
    
    // required string InsertTime = 26;
    if (has_inserttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inserttime());
    }
    
    // required string ActiveTime = 27;
    if (has_activetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activetime());
    }
    
    // required string SuspendTime = 28;
    if (has_suspendtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suspendtime());
    }
    
    // required string UpdateTime = 29;
    if (has_updatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->updatetime());
    }
    
    // required string CancelTime = 30;
    if (has_canceltime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->canceltime());
    }
    
    // required string ActiveTraderID = 31;
    if (has_activetraderid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activetraderid());
    }
    
    // required string ClearingPartID = 32;
    if (has_clearingpartid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clearingpartid());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required int32 SequenceNo = 33;
    if (has_sequenceno()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequenceno());
    }
    
    // required int32 FrontID = 34;
    if (has_frontid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frontid());
    }
    
    // required int32 SessionID = 35;
    if (has_sessionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }
    
    // required string UserProductInfo = 36;
    if (has_userproductinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userproductinfo());
    }
    
    // required string StatusMsg = 37;
    if (has_statusmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statusmsg());
    }
    
    // required int32 UserForceClose = 38;
    if (has_userforceclose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userforceclose());
    }
    
    // required int32 BrokerOrderSeq = 39;
    if (has_brokerorderseq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->brokerorderseq());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MThostFtdcOrderField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MThostFtdcOrderField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MThostFtdcOrderField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MThostFtdcOrderField::MergeFrom(const MThostFtdcOrderField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrumentid()) {
      set_instrumentid(from.instrumentid());
    }
    if (from.has_orderref()) {
      set_orderref(from.orderref());
    }
    if (from.has_orderpricetype()) {
      set_orderpricetype(from.orderpricetype());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_comboffsetflag()) {
      set_comboffsetflag(from.comboffsetflag());
    }
    if (from.has_combhedgeflag()) {
      set_combhedgeflag(from.combhedgeflag());
    }
    if (from.has_limitprice()) {
      set_limitprice(from.limitprice());
    }
    if (from.has_volumetotaloriginal()) {
      set_volumetotaloriginal(from.volumetotaloriginal());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timecondition()) {
      set_timecondition(from.timecondition());
    }
    if (from.has_gtddate()) {
      set_gtddate(from.gtddate());
    }
    if (from.has_requestid()) {
      set_requestid(from.requestid());
    }
    if (from.has_orderlocalid()) {
      set_orderlocalid(from.orderlocalid());
    }
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_exchangeinstid()) {
      set_exchangeinstid(from.exchangeinstid());
    }
    if (from.has_ordersubmitstatus()) {
      set_ordersubmitstatus(from.ordersubmitstatus());
    }
    if (from.has_notifysequence()) {
      set_notifysequence(from.notifysequence());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_settlementid()) {
      set_settlementid(from.settlementid());
    }
    if (from.has_ordersysid()) {
      set_ordersysid(from.ordersysid());
    }
    if (from.has_ordersource()) {
      set_ordersource(from.ordersource());
    }
    if (from.has_orderstatus()) {
      set_orderstatus(from.orderstatus());
    }
    if (from.has_ordertype()) {
      set_ordertype(from.ordertype());
    }
    if (from.has_volumetraded()) {
      set_volumetraded(from.volumetraded());
    }
    if (from.has_volumetotal()) {
      set_volumetotal(from.volumetotal());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_insertdate()) {
      set_insertdate(from.insertdate());
    }
    if (from.has_inserttime()) {
      set_inserttime(from.inserttime());
    }
    if (from.has_activetime()) {
      set_activetime(from.activetime());
    }
    if (from.has_suspendtime()) {
      set_suspendtime(from.suspendtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_canceltime()) {
      set_canceltime(from.canceltime());
    }
    if (from.has_activetraderid()) {
      set_activetraderid(from.activetraderid());
    }
    if (from.has_clearingpartid()) {
      set_clearingpartid(from.clearingpartid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_sequenceno()) {
      set_sequenceno(from.sequenceno());
    }
    if (from.has_frontid()) {
      set_frontid(from.frontid());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_userproductinfo()) {
      set_userproductinfo(from.userproductinfo());
    }
    if (from.has_statusmsg()) {
      set_statusmsg(from.statusmsg());
    }
    if (from.has_userforceclose()) {
      set_userforceclose(from.userforceclose());
    }
    if (from.has_brokerorderseq()) {
      set_brokerorderseq(from.brokerorderseq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MThostFtdcOrderField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MThostFtdcOrderField::CopyFrom(const MThostFtdcOrderField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MThostFtdcOrderField::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void MThostFtdcOrderField::Swap(MThostFtdcOrderField* other) {
  if (other != this) {
    std::swap(instrumentid_, other->instrumentid_);
    std::swap(orderref_, other->orderref_);
    std::swap(orderpricetype_, other->orderpricetype_);
    std::swap(direction_, other->direction_);
    std::swap(comboffsetflag_, other->comboffsetflag_);
    std::swap(combhedgeflag_, other->combhedgeflag_);
    std::swap(limitprice_, other->limitprice_);
    std::swap(volumetotaloriginal_, other->volumetotaloriginal_);
    std::swap(timecondition_, other->timecondition_);
    std::swap(gtddate_, other->gtddate_);
    std::swap(requestid_, other->requestid_);
    std::swap(orderlocalid_, other->orderlocalid_);
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(exchangeinstid_, other->exchangeinstid_);
    std::swap(ordersubmitstatus_, other->ordersubmitstatus_);
    std::swap(notifysequence_, other->notifysequence_);
    std::swap(tradingday_, other->tradingday_);
    std::swap(settlementid_, other->settlementid_);
    std::swap(ordersysid_, other->ordersysid_);
    std::swap(ordersource_, other->ordersource_);
    std::swap(orderstatus_, other->orderstatus_);
    std::swap(ordertype_, other->ordertype_);
    std::swap(volumetraded_, other->volumetraded_);
    std::swap(volumetotal_, other->volumetotal_);
    std::swap(insertdate_, other->insertdate_);
    std::swap(inserttime_, other->inserttime_);
    std::swap(activetime_, other->activetime_);
    std::swap(suspendtime_, other->suspendtime_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(canceltime_, other->canceltime_);
    std::swap(activetraderid_, other->activetraderid_);
    std::swap(clearingpartid_, other->clearingpartid_);
    std::swap(sequenceno_, other->sequenceno_);
    std::swap(frontid_, other->frontid_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(userproductinfo_, other->userproductinfo_);
    std::swap(statusmsg_, other->statusmsg_);
    std::swap(userforceclose_, other->userforceclose_);
    std::swap(brokerorderseq_, other->brokerorderseq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MThostFtdcOrderField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MThostFtdcOrderField_descriptor_;
  metadata.reflection = MThostFtdcOrderField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MThostFtdcTradeField::kInstrumentIDFieldNumber;
const int MThostFtdcTradeField::kOrderRefFieldNumber;
const int MThostFtdcTradeField::kUserIDFieldNumber;
const int MThostFtdcTradeField::kExchangeIDFieldNumber;
const int MThostFtdcTradeField::kTradeIDFieldNumber;
const int MThostFtdcTradeField::kDirectionFieldNumber;
const int MThostFtdcTradeField::kOrderSysIDFieldNumber;
const int MThostFtdcTradeField::kParticipantIDFieldNumber;
const int MThostFtdcTradeField::kClientIDFieldNumber;
const int MThostFtdcTradeField::kTradingRoleFieldNumber;
const int MThostFtdcTradeField::kExchangeInstIDFieldNumber;
const int MThostFtdcTradeField::kOffsetFlagFieldNumber;
const int MThostFtdcTradeField::kHedgeFlagFieldNumber;
const int MThostFtdcTradeField::kPriceFieldNumber;
const int MThostFtdcTradeField::kVolumeFieldNumber;
const int MThostFtdcTradeField::kTradeDateFieldNumber;
const int MThostFtdcTradeField::kTradeTimeFieldNumber;
const int MThostFtdcTradeField::kTradeTypeFieldNumber;
const int MThostFtdcTradeField::kPriceSourceFieldNumber;
const int MThostFtdcTradeField::kTraderIDFieldNumber;
const int MThostFtdcTradeField::kOrderLocalIDFieldNumber;
const int MThostFtdcTradeField::kClearingPartIDFieldNumber;
const int MThostFtdcTradeField::kSequenceNoFieldNumber;
const int MThostFtdcTradeField::kTradingDayFieldNumber;
const int MThostFtdcTradeField::kSettlementIDFieldNumber;
const int MThostFtdcTradeField::kBrokerOrderSeqFieldNumber;
#endif  // !_MSC_VER

MThostFtdcTradeField::MThostFtdcTradeField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MThostFtdcTradeField::InitAsDefaultInstance() {
}

MThostFtdcTradeField::MThostFtdcTradeField(const MThostFtdcTradeField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MThostFtdcTradeField::SharedCtor() {
  _cached_size_ = 0;
  instrumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tradeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  direction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ordersysid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  participantid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tradingrole_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeinstid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offsetflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hedgeflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  price_ = 0;
  volume_ = 0;
  tradedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tradetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tradetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pricesource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  traderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderlocalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clearingpartid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sequenceno_ = 0;
  tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  settlementid_ = 0;
  brokerorderseq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MThostFtdcTradeField::~MThostFtdcTradeField() {
  SharedDtor();
}

void MThostFtdcTradeField::SharedDtor() {
  if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete instrumentid_;
  }
  if (orderref_ != &::google::protobuf::internal::kEmptyString) {
    delete orderref_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeid_;
  }
  if (tradeid_ != &::google::protobuf::internal::kEmptyString) {
    delete tradeid_;
  }
  if (direction_ != &::google::protobuf::internal::kEmptyString) {
    delete direction_;
  }
  if (ordersysid_ != &::google::protobuf::internal::kEmptyString) {
    delete ordersysid_;
  }
  if (participantid_ != &::google::protobuf::internal::kEmptyString) {
    delete participantid_;
  }
  if (clientid_ != &::google::protobuf::internal::kEmptyString) {
    delete clientid_;
  }
  if (tradingrole_ != &::google::protobuf::internal::kEmptyString) {
    delete tradingrole_;
  }
  if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeinstid_;
  }
  if (offsetflag_ != &::google::protobuf::internal::kEmptyString) {
    delete offsetflag_;
  }
  if (hedgeflag_ != &::google::protobuf::internal::kEmptyString) {
    delete hedgeflag_;
  }
  if (tradedate_ != &::google::protobuf::internal::kEmptyString) {
    delete tradedate_;
  }
  if (tradetime_ != &::google::protobuf::internal::kEmptyString) {
    delete tradetime_;
  }
  if (tradetype_ != &::google::protobuf::internal::kEmptyString) {
    delete tradetype_;
  }
  if (pricesource_ != &::google::protobuf::internal::kEmptyString) {
    delete pricesource_;
  }
  if (traderid_ != &::google::protobuf::internal::kEmptyString) {
    delete traderid_;
  }
  if (orderlocalid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderlocalid_;
  }
  if (clearingpartid_ != &::google::protobuf::internal::kEmptyString) {
    delete clearingpartid_;
  }
  if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
    delete tradingday_;
  }
  if (this != default_instance_) {
  }
}

void MThostFtdcTradeField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MThostFtdcTradeField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MThostFtdcTradeField_descriptor_;
}

const MThostFtdcTradeField& MThostFtdcTradeField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureTrading_2eproto();  return *default_instance_;
}

MThostFtdcTradeField* MThostFtdcTradeField::default_instance_ = NULL;

MThostFtdcTradeField* MThostFtdcTradeField::New() const {
  return new MThostFtdcTradeField;
}

void MThostFtdcTradeField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instrumentid()) {
      if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
        instrumentid_->clear();
      }
    }
    if (has_orderref()) {
      if (orderref_ != &::google::protobuf::internal::kEmptyString) {
        orderref_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_exchangeid()) {
      if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeid_->clear();
      }
    }
    if (has_tradeid()) {
      if (tradeid_ != &::google::protobuf::internal::kEmptyString) {
        tradeid_->clear();
      }
    }
    if (has_direction()) {
      if (direction_ != &::google::protobuf::internal::kEmptyString) {
        direction_->clear();
      }
    }
    if (has_ordersysid()) {
      if (ordersysid_ != &::google::protobuf::internal::kEmptyString) {
        ordersysid_->clear();
      }
    }
    if (has_participantid()) {
      if (participantid_ != &::google::protobuf::internal::kEmptyString) {
        participantid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_clientid()) {
      if (clientid_ != &::google::protobuf::internal::kEmptyString) {
        clientid_->clear();
      }
    }
    if (has_tradingrole()) {
      if (tradingrole_ != &::google::protobuf::internal::kEmptyString) {
        tradingrole_->clear();
      }
    }
    if (has_exchangeinstid()) {
      if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeinstid_->clear();
      }
    }
    if (has_offsetflag()) {
      if (offsetflag_ != &::google::protobuf::internal::kEmptyString) {
        offsetflag_->clear();
      }
    }
    if (has_hedgeflag()) {
      if (hedgeflag_ != &::google::protobuf::internal::kEmptyString) {
        hedgeflag_->clear();
      }
    }
    price_ = 0;
    volume_ = 0;
    if (has_tradedate()) {
      if (tradedate_ != &::google::protobuf::internal::kEmptyString) {
        tradedate_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_tradetime()) {
      if (tradetime_ != &::google::protobuf::internal::kEmptyString) {
        tradetime_->clear();
      }
    }
    if (has_tradetype()) {
      if (tradetype_ != &::google::protobuf::internal::kEmptyString) {
        tradetype_->clear();
      }
    }
    if (has_pricesource()) {
      if (pricesource_ != &::google::protobuf::internal::kEmptyString) {
        pricesource_->clear();
      }
    }
    if (has_traderid()) {
      if (traderid_ != &::google::protobuf::internal::kEmptyString) {
        traderid_->clear();
      }
    }
    if (has_orderlocalid()) {
      if (orderlocalid_ != &::google::protobuf::internal::kEmptyString) {
        orderlocalid_->clear();
      }
    }
    if (has_clearingpartid()) {
      if (clearingpartid_ != &::google::protobuf::internal::kEmptyString) {
        clearingpartid_->clear();
      }
    }
    sequenceno_ = 0;
    if (has_tradingday()) {
      if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
        tradingday_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    settlementid_ = 0;
    brokerorderseq_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MThostFtdcTradeField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InstrumentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OrderRef;
        break;
      }
      
      // required string OrderRef = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderRef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderref().data(), this->orderref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_UserID;
        break;
      }
      
      // required string UserID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ExchangeID;
        break;
      }
      
      // required string ExchangeID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_TradeID;
        break;
      }
      
      // required string TradeID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TradeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradeid().data(), this->tradeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Direction;
        break;
      }
      
      // required string Direction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_direction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->direction().data(), this->direction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_OrderSysID;
        break;
      }
      
      // required string OrderSysID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderSysID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordersysid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ordersysid().data(), this->ordersysid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ParticipantID;
        break;
      }
      
      // required string ParticipantID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ParticipantID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_participantid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->participantid().data(), this->participantid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ClientID;
        break;
      }
      
      // required string ClientID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ClientID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_TradingRole;
        break;
      }
      
      // required string TradingRole = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TradingRole:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingrole()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradingrole().data(), this->tradingrole().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ExchangeInstID;
        break;
      }
      
      // required string ExchangeInstID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeInstID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeinstid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeinstid().data(), this->exchangeinstid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_OffsetFlag;
        break;
      }
      
      // required string OffsetFlag = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OffsetFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_offsetflag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->offsetflag().data(), this->offsetflag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_HedgeFlag;
        break;
      }
      
      // required string HedgeFlag = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HedgeFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hedgeflag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hedgeflag().data(), this->hedgeflag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_Price;
        break;
      }
      
      // required double Price = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_Volume;
        break;
      }
      
      // required int32 Volume = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_TradeDate;
        break;
      }
      
      // required string TradeDate = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TradeDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradedate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradedate().data(), this->tradedate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_TradeTime;
        break;
      }
      
      // required string TradeTime = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TradeTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradetime().data(), this->tradetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_TradeType;
        break;
      }
      
      // required string TradeType = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TradeType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradetype().data(), this->tradetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_PriceSource;
        break;
      }
      
      // required string PriceSource = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PriceSource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pricesource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pricesource().data(), this->pricesource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_TraderID;
        break;
      }
      
      // required string TraderID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TraderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->traderid().data(), this->traderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_OrderLocalID;
        break;
      }
      
      // required string OrderLocalID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderLocalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderlocalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderlocalid().data(), this->orderlocalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_ClearingPartID;
        break;
      }
      
      // required string ClearingPartID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ClearingPartID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clearingpartid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clearingpartid().data(), this->clearingpartid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_SequenceNo;
        break;
      }
      
      // required int32 SequenceNo = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SequenceNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequenceno_)));
          set_has_sequenceno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_TradingDay;
        break;
      }
      
      // required string TradingDay = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TradingDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_SettlementID;
        break;
      }
      
      // required int32 SettlementID = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SettlementID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlementid_)));
          set_has_settlementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_BrokerOrderSeq;
        break;
      }
      
      // required int32 BrokerOrderSeq = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BrokerOrderSeq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brokerorderseq_)));
          set_has_brokerorderseq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MThostFtdcTradeField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string InstrumentID = 1;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instrumentid(), output);
  }
  
  // required string OrderRef = 2;
  if (has_orderref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->orderref(), output);
  }
  
  // required string UserID = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->userid(), output);
  }
  
  // required string ExchangeID = 4;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->exchangeid(), output);
  }
  
  // required string TradeID = 5;
  if (has_tradeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradeid().data(), this->tradeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->tradeid(), output);
  }
  
  // required string Direction = 6;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->direction().data(), this->direction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->direction(), output);
  }
  
  // required string OrderSysID = 7;
  if (has_ordersysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordersysid().data(), this->ordersysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->ordersysid(), output);
  }
  
  // required string ParticipantID = 8;
  if (has_participantid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->participantid().data(), this->participantid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->participantid(), output);
  }
  
  // required string ClientID = 9;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->clientid(), output);
  }
  
  // required string TradingRole = 10;
  if (has_tradingrole()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingrole().data(), this->tradingrole().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->tradingrole(), output);
  }
  
  // required string ExchangeInstID = 11;
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->exchangeinstid(), output);
  }
  
  // required string OffsetFlag = 12;
  if (has_offsetflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->offsetflag().data(), this->offsetflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->offsetflag(), output);
  }
  
  // required string HedgeFlag = 13;
  if (has_hedgeflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hedgeflag().data(), this->hedgeflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->hedgeflag(), output);
  }
  
  // required double Price = 14;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->price(), output);
  }
  
  // required int32 Volume = 15;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->volume(), output);
  }
  
  // required string TradeDate = 16;
  if (has_tradedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradedate().data(), this->tradedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->tradedate(), output);
  }
  
  // required string TradeTime = 17;
  if (has_tradetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradetime().data(), this->tradetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->tradetime(), output);
  }
  
  // required string TradeType = 18;
  if (has_tradetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradetype().data(), this->tradetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->tradetype(), output);
  }
  
  // required string PriceSource = 19;
  if (has_pricesource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pricesource().data(), this->pricesource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->pricesource(), output);
  }
  
  // required string TraderID = 20;
  if (has_traderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->traderid().data(), this->traderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->traderid(), output);
  }
  
  // required string OrderLocalID = 21;
  if (has_orderlocalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderlocalid().data(), this->orderlocalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->orderlocalid(), output);
  }
  
  // required string ClearingPartID = 22;
  if (has_clearingpartid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clearingpartid().data(), this->clearingpartid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->clearingpartid(), output);
  }
  
  // required int32 SequenceNo = 23;
  if (has_sequenceno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->sequenceno(), output);
  }
  
  // required string TradingDay = 24;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->tradingday(), output);
  }
  
  // required int32 SettlementID = 25;
  if (has_settlementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->settlementid(), output);
  }
  
  // required int32 BrokerOrderSeq = 26;
  if (has_brokerorderseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->brokerorderseq(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MThostFtdcTradeField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string InstrumentID = 1;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrumentid(), target);
  }
  
  // required string OrderRef = 2;
  if (has_orderref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderref().data(), this->orderref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orderref(), target);
  }
  
  // required string UserID = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userid(), target);
  }
  
  // required string ExchangeID = 4;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exchangeid(), target);
  }
  
  // required string TradeID = 5;
  if (has_tradeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradeid().data(), this->tradeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tradeid(), target);
  }
  
  // required string Direction = 6;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->direction().data(), this->direction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->direction(), target);
  }
  
  // required string OrderSysID = 7;
  if (has_ordersysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordersysid().data(), this->ordersysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ordersysid(), target);
  }
  
  // required string ParticipantID = 8;
  if (has_participantid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->participantid().data(), this->participantid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->participantid(), target);
  }
  
  // required string ClientID = 9;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->clientid(), target);
  }
  
  // required string TradingRole = 10;
  if (has_tradingrole()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingrole().data(), this->tradingrole().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->tradingrole(), target);
  }
  
  // required string ExchangeInstID = 11;
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->exchangeinstid(), target);
  }
  
  // required string OffsetFlag = 12;
  if (has_offsetflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->offsetflag().data(), this->offsetflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->offsetflag(), target);
  }
  
  // required string HedgeFlag = 13;
  if (has_hedgeflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hedgeflag().data(), this->hedgeflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->hedgeflag(), target);
  }
  
  // required double Price = 14;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->price(), target);
  }
  
  // required int32 Volume = 15;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->volume(), target);
  }
  
  // required string TradeDate = 16;
  if (has_tradedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradedate().data(), this->tradedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->tradedate(), target);
  }
  
  // required string TradeTime = 17;
  if (has_tradetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradetime().data(), this->tradetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->tradetime(), target);
  }
  
  // required string TradeType = 18;
  if (has_tradetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradetype().data(), this->tradetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->tradetype(), target);
  }
  
  // required string PriceSource = 19;
  if (has_pricesource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pricesource().data(), this->pricesource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->pricesource(), target);
  }
  
  // required string TraderID = 20;
  if (has_traderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->traderid().data(), this->traderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->traderid(), target);
  }
  
  // required string OrderLocalID = 21;
  if (has_orderlocalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderlocalid().data(), this->orderlocalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->orderlocalid(), target);
  }
  
  // required string ClearingPartID = 22;
  if (has_clearingpartid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clearingpartid().data(), this->clearingpartid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->clearingpartid(), target);
  }
  
  // required int32 SequenceNo = 23;
  if (has_sequenceno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->sequenceno(), target);
  }
  
  // required string TradingDay = 24;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->tradingday(), target);
  }
  
  // required int32 SettlementID = 25;
  if (has_settlementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->settlementid(), target);
  }
  
  // required int32 BrokerOrderSeq = 26;
  if (has_brokerorderseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->brokerorderseq(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MThostFtdcTradeField::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InstrumentID = 1;
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }
    
    // required string OrderRef = 2;
    if (has_orderref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderref());
    }
    
    // required string UserID = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // required string ExchangeID = 4;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }
    
    // required string TradeID = 5;
    if (has_tradeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeid());
    }
    
    // required string Direction = 6;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->direction());
    }
    
    // required string OrderSysID = 7;
    if (has_ordersysid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ordersysid());
    }
    
    // required string ParticipantID = 8;
    if (has_participantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->participantid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string ClientID = 9;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientid());
    }
    
    // required string TradingRole = 10;
    if (has_tradingrole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradingrole());
    }
    
    // required string ExchangeInstID = 11;
    if (has_exchangeinstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeinstid());
    }
    
    // required string OffsetFlag = 12;
    if (has_offsetflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->offsetflag());
    }
    
    // required string HedgeFlag = 13;
    if (has_hedgeflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hedgeflag());
    }
    
    // required double Price = 14;
    if (has_price()) {
      total_size += 1 + 8;
    }
    
    // required int32 Volume = 15;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }
    
    // required string TradeDate = 16;
    if (has_tradedate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradedate());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string TradeTime = 17;
    if (has_tradetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradetime());
    }
    
    // required string TradeType = 18;
    if (has_tradetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradetype());
    }
    
    // required string PriceSource = 19;
    if (has_pricesource()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pricesource());
    }
    
    // required string TraderID = 20;
    if (has_traderid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->traderid());
    }
    
    // required string OrderLocalID = 21;
    if (has_orderlocalid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderlocalid());
    }
    
    // required string ClearingPartID = 22;
    if (has_clearingpartid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clearingpartid());
    }
    
    // required int32 SequenceNo = 23;
    if (has_sequenceno()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequenceno());
    }
    
    // required string TradingDay = 24;
    if (has_tradingday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradingday());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 SettlementID = 25;
    if (has_settlementid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settlementid());
    }
    
    // required int32 BrokerOrderSeq = 26;
    if (has_brokerorderseq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->brokerorderseq());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MThostFtdcTradeField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MThostFtdcTradeField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MThostFtdcTradeField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MThostFtdcTradeField::MergeFrom(const MThostFtdcTradeField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrumentid()) {
      set_instrumentid(from.instrumentid());
    }
    if (from.has_orderref()) {
      set_orderref(from.orderref());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_tradeid()) {
      set_tradeid(from.tradeid());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_ordersysid()) {
      set_ordersysid(from.ordersysid());
    }
    if (from.has_participantid()) {
      set_participantid(from.participantid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_tradingrole()) {
      set_tradingrole(from.tradingrole());
    }
    if (from.has_exchangeinstid()) {
      set_exchangeinstid(from.exchangeinstid());
    }
    if (from.has_offsetflag()) {
      set_offsetflag(from.offsetflag());
    }
    if (from.has_hedgeflag()) {
      set_hedgeflag(from.hedgeflag());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_tradedate()) {
      set_tradedate(from.tradedate());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tradetime()) {
      set_tradetime(from.tradetime());
    }
    if (from.has_tradetype()) {
      set_tradetype(from.tradetype());
    }
    if (from.has_pricesource()) {
      set_pricesource(from.pricesource());
    }
    if (from.has_traderid()) {
      set_traderid(from.traderid());
    }
    if (from.has_orderlocalid()) {
      set_orderlocalid(from.orderlocalid());
    }
    if (from.has_clearingpartid()) {
      set_clearingpartid(from.clearingpartid());
    }
    if (from.has_sequenceno()) {
      set_sequenceno(from.sequenceno());
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_settlementid()) {
      set_settlementid(from.settlementid());
    }
    if (from.has_brokerorderseq()) {
      set_brokerorderseq(from.brokerorderseq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MThostFtdcTradeField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MThostFtdcTradeField::CopyFrom(const MThostFtdcTradeField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MThostFtdcTradeField::IsInitialized() const {
  if ((_has_bits_[0] & 0x03ffffff) != 0x03ffffff) return false;
  
  return true;
}

void MThostFtdcTradeField::Swap(MThostFtdcTradeField* other) {
  if (other != this) {
    std::swap(instrumentid_, other->instrumentid_);
    std::swap(orderref_, other->orderref_);
    std::swap(userid_, other->userid_);
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(tradeid_, other->tradeid_);
    std::swap(direction_, other->direction_);
    std::swap(ordersysid_, other->ordersysid_);
    std::swap(participantid_, other->participantid_);
    std::swap(clientid_, other->clientid_);
    std::swap(tradingrole_, other->tradingrole_);
    std::swap(exchangeinstid_, other->exchangeinstid_);
    std::swap(offsetflag_, other->offsetflag_);
    std::swap(hedgeflag_, other->hedgeflag_);
    std::swap(price_, other->price_);
    std::swap(volume_, other->volume_);
    std::swap(tradedate_, other->tradedate_);
    std::swap(tradetime_, other->tradetime_);
    std::swap(tradetype_, other->tradetype_);
    std::swap(pricesource_, other->pricesource_);
    std::swap(traderid_, other->traderid_);
    std::swap(orderlocalid_, other->orderlocalid_);
    std::swap(clearingpartid_, other->clearingpartid_);
    std::swap(sequenceno_, other->sequenceno_);
    std::swap(tradingday_, other->tradingday_);
    std::swap(settlementid_, other->settlementid_);
    std::swap(brokerorderseq_, other->brokerorderseq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MThostFtdcTradeField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MThostFtdcTradeField_descriptor_;
  metadata.reflection = MThostFtdcTradeField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderAction::kHandleIDFieldNumber;
const int OrderAction::kRefFieldNumber;
const int OrderAction::kOrderSysIDFieldNumber;
const int OrderAction::kFrontIDFieldNumber;
const int OrderAction::kSessionIDFieldNumber;
const int OrderAction::kExchangeIDFieldNumber;
#endif  // !_MSC_VER

OrderAction::OrderAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderAction::InitAsDefaultInstance() {
}

OrderAction::OrderAction(const OrderAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderAction::SharedCtor() {
  _cached_size_ = 0;
  handleid_ = 0;
  ref_ = 0;
  ordersysid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frontid_ = 0;
  sessionid_ = 0;
  exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderAction::~OrderAction() {
  SharedDtor();
}

void OrderAction::SharedDtor() {
  if (ordersysid_ != &::google::protobuf::internal::kEmptyString) {
    delete ordersysid_;
  }
  if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeid_;
  }
  if (this != default_instance_) {
  }
}

void OrderAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderAction_descriptor_;
}

const OrderAction& OrderAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureTrading_2eproto();  return *default_instance_;
}

OrderAction* OrderAction::default_instance_ = NULL;

OrderAction* OrderAction::New() const {
  return new OrderAction;
}

void OrderAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    handleid_ = 0;
    ref_ = 0;
    if (has_ordersysid()) {
      if (ordersysid_ != &::google::protobuf::internal::kEmptyString) {
        ordersysid_->clear();
      }
    }
    frontid_ = 0;
    sessionid_ = 0;
    if (has_exchangeid()) {
      if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 HandleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handleid_)));
          set_has_handleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Ref;
        break;
      }
      
      // required int32 Ref = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ref_)));
          set_has_ref();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_OrderSysID;
        break;
      }
      
      // optional string OrderSysID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderSysID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordersysid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ordersysid().data(), this->ordersysid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FrontID;
        break;
      }
      
      // optional int32 FrontID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FrontID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frontid_)));
          set_has_frontid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_SessionID;
        break;
      }
      
      // optional int32 SessionID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ExchangeID;
        break;
      }
      
      // optional string ExchangeID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 HandleID = 1;
  if (has_handleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->handleid(), output);
  }
  
  // required int32 Ref = 2;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ref(), output);
  }
  
  // optional string OrderSysID = 3;
  if (has_ordersysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordersysid().data(), this->ordersysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ordersysid(), output);
  }
  
  // optional int32 FrontID = 4;
  if (has_frontid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->frontid(), output);
  }
  
  // optional int32 SessionID = 5;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sessionid(), output);
  }
  
  // optional string ExchangeID = 6;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->exchangeid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 HandleID = 1;
  if (has_handleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->handleid(), target);
  }
  
  // required int32 Ref = 2;
  if (has_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ref(), target);
  }
  
  // optional string OrderSysID = 3;
  if (has_ordersysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordersysid().data(), this->ordersysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ordersysid(), target);
  }
  
  // optional int32 FrontID = 4;
  if (has_frontid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->frontid(), target);
  }
  
  // optional int32 SessionID = 5;
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sessionid(), target);
  }
  
  // optional string ExchangeID = 6;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->exchangeid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderAction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 HandleID = 1;
    if (has_handleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handleid());
    }
    
    // required int32 Ref = 2;
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ref());
    }
    
    // optional string OrderSysID = 3;
    if (has_ordersysid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ordersysid());
    }
    
    // optional int32 FrontID = 4;
    if (has_frontid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frontid());
    }
    
    // optional int32 SessionID = 5;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sessionid());
    }
    
    // optional string ExchangeID = 6;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderAction::MergeFrom(const OrderAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handleid()) {
      set_handleid(from.handleid());
    }
    if (from.has_ref()) {
      set_ref(from.ref());
    }
    if (from.has_ordersysid()) {
      set_ordersysid(from.ordersysid());
    }
    if (from.has_frontid()) {
      set_frontid(from.frontid());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderAction::CopyFrom(const OrderAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void OrderAction::Swap(OrderAction* other) {
  if (other != this) {
    std::swap(handleid_, other->handleid_);
    std::swap(ref_, other->ref_);
    std::swap(ordersysid_, other->ordersysid_);
    std::swap(frontid_, other->frontid_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderAction_descriptor_;
  metadata.reflection = OrderAction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MThostFtdcQryInvestorPositionField::kInstrumentIDFieldNumber;
#endif  // !_MSC_VER

MThostFtdcQryInvestorPositionField::MThostFtdcQryInvestorPositionField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MThostFtdcQryInvestorPositionField::InitAsDefaultInstance() {
}

MThostFtdcQryInvestorPositionField::MThostFtdcQryInvestorPositionField(const MThostFtdcQryInvestorPositionField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MThostFtdcQryInvestorPositionField::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MThostFtdcQryInvestorPositionField::~MThostFtdcQryInvestorPositionField() {
  SharedDtor();
}

void MThostFtdcQryInvestorPositionField::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MThostFtdcQryInvestorPositionField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MThostFtdcQryInvestorPositionField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MThostFtdcQryInvestorPositionField_descriptor_;
}

const MThostFtdcQryInvestorPositionField& MThostFtdcQryInvestorPositionField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureTrading_2eproto();  return *default_instance_;
}

MThostFtdcQryInvestorPositionField* MThostFtdcQryInvestorPositionField::default_instance_ = NULL;

MThostFtdcQryInvestorPositionField* MThostFtdcQryInvestorPositionField::New() const {
  return new MThostFtdcQryInvestorPositionField;
}

void MThostFtdcQryInvestorPositionField::Clear() {
  instrumentid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MThostFtdcQryInvestorPositionField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string InstrumentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InstrumentID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrumentid(0).data(), this->instrumentid(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_InstrumentID;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MThostFtdcQryInvestorPositionField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string InstrumentID = 1;
  for (int i = 0; i < this->instrumentid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->instrumentid(i).data(), this->instrumentid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instrumentid(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MThostFtdcQryInvestorPositionField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string InstrumentID = 1;
  for (int i = 0; i < this->instrumentid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid(i).data(), this->instrumentid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->instrumentid(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MThostFtdcQryInvestorPositionField::ByteSize() const {
  int total_size = 0;
  
  // repeated string InstrumentID = 1;
  total_size += 1 * this->instrumentid_size();
  for (int i = 0; i < this->instrumentid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->instrumentid(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MThostFtdcQryInvestorPositionField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MThostFtdcQryInvestorPositionField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MThostFtdcQryInvestorPositionField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MThostFtdcQryInvestorPositionField::MergeFrom(const MThostFtdcQryInvestorPositionField& from) {
  GOOGLE_CHECK_NE(&from, this);
  instrumentid_.MergeFrom(from.instrumentid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MThostFtdcQryInvestorPositionField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MThostFtdcQryInvestorPositionField::CopyFrom(const MThostFtdcQryInvestorPositionField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MThostFtdcQryInvestorPositionField::IsInitialized() const {
  
  return true;
}

void MThostFtdcQryInvestorPositionField::Swap(MThostFtdcQryInvestorPositionField* other) {
  if (other != this) {
    instrumentid_.Swap(&other->instrumentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MThostFtdcQryInvestorPositionField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MThostFtdcQryInvestorPositionField_descriptor_;
  metadata.reflection = MThostFtdcQryInvestorPositionField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtnMThostFtdcQryInvestorPositionField::kInvestorPositionFieldNumber;
#endif  // !_MSC_VER

RtnMThostFtdcQryInvestorPositionField::RtnMThostFtdcQryInvestorPositionField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtnMThostFtdcQryInvestorPositionField::InitAsDefaultInstance() {
}

RtnMThostFtdcQryInvestorPositionField::RtnMThostFtdcQryInvestorPositionField(const RtnMThostFtdcQryInvestorPositionField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtnMThostFtdcQryInvestorPositionField::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtnMThostFtdcQryInvestorPositionField::~RtnMThostFtdcQryInvestorPositionField() {
  SharedDtor();
}

void RtnMThostFtdcQryInvestorPositionField::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtnMThostFtdcQryInvestorPositionField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtnMThostFtdcQryInvestorPositionField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtnMThostFtdcQryInvestorPositionField_descriptor_;
}

const RtnMThostFtdcQryInvestorPositionField& RtnMThostFtdcQryInvestorPositionField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureTrading_2eproto();  return *default_instance_;
}

RtnMThostFtdcQryInvestorPositionField* RtnMThostFtdcQryInvestorPositionField::default_instance_ = NULL;

RtnMThostFtdcQryInvestorPositionField* RtnMThostFtdcQryInvestorPositionField::New() const {
  return new RtnMThostFtdcQryInvestorPositionField;
}

void RtnMThostFtdcQryInvestorPositionField::Clear() {
  investorposition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtnMThostFtdcQryInvestorPositionField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FutureTradingPB.MThostFtdcInvestorPositionField InvestorPosition = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InvestorPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_investorposition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_InvestorPosition;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtnMThostFtdcQryInvestorPositionField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FutureTradingPB.MThostFtdcInvestorPositionField InvestorPosition = 1;
  for (int i = 0; i < this->investorposition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->investorposition(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtnMThostFtdcQryInvestorPositionField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FutureTradingPB.MThostFtdcInvestorPositionField InvestorPosition = 1;
  for (int i = 0; i < this->investorposition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->investorposition(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtnMThostFtdcQryInvestorPositionField::ByteSize() const {
  int total_size = 0;
  
  // repeated .FutureTradingPB.MThostFtdcInvestorPositionField InvestorPosition = 1;
  total_size += 1 * this->investorposition_size();
  for (int i = 0; i < this->investorposition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->investorposition(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtnMThostFtdcQryInvestorPositionField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtnMThostFtdcQryInvestorPositionField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtnMThostFtdcQryInvestorPositionField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtnMThostFtdcQryInvestorPositionField::MergeFrom(const RtnMThostFtdcQryInvestorPositionField& from) {
  GOOGLE_CHECK_NE(&from, this);
  investorposition_.MergeFrom(from.investorposition_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtnMThostFtdcQryInvestorPositionField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtnMThostFtdcQryInvestorPositionField::CopyFrom(const RtnMThostFtdcQryInvestorPositionField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtnMThostFtdcQryInvestorPositionField::IsInitialized() const {
  
  for (int i = 0; i < investorposition_size(); i++) {
    if (!this->investorposition(i).IsInitialized()) return false;
  }
  return true;
}

void RtnMThostFtdcQryInvestorPositionField::Swap(RtnMThostFtdcQryInvestorPositionField* other) {
  if (other != this) {
    investorposition_.Swap(&other->investorposition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtnMThostFtdcQryInvestorPositionField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtnMThostFtdcQryInvestorPositionField_descriptor_;
  metadata.reflection = RtnMThostFtdcQryInvestorPositionField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MThostFtdcInvestorPositionField::kInstrumentIDFieldNumber;
const int MThostFtdcInvestorPositionField::kPosiDirectionFieldNumber;
const int MThostFtdcInvestorPositionField::kHedgeFlagFieldNumber;
const int MThostFtdcInvestorPositionField::kPositionDateFieldNumber;
const int MThostFtdcInvestorPositionField::kYdPositionFieldNumber;
const int MThostFtdcInvestorPositionField::kPositionFieldNumber;
const int MThostFtdcInvestorPositionField::kLongFrozenFieldNumber;
const int MThostFtdcInvestorPositionField::kShortFrozenFieldNumber;
const int MThostFtdcInvestorPositionField::kLongFrozenAmountFieldNumber;
const int MThostFtdcInvestorPositionField::kShortFrozenAmountFieldNumber;
const int MThostFtdcInvestorPositionField::kOpenVolumeFieldNumber;
const int MThostFtdcInvestorPositionField::kCloseVolumeFieldNumber;
const int MThostFtdcInvestorPositionField::kOpenAmountFieldNumber;
const int MThostFtdcInvestorPositionField::kCloseAmountFieldNumber;
const int MThostFtdcInvestorPositionField::kPositionCostFieldNumber;
const int MThostFtdcInvestorPositionField::kPreMarginFieldNumber;
const int MThostFtdcInvestorPositionField::kUseMarginFieldNumber;
const int MThostFtdcInvestorPositionField::kFrozenMarginFieldNumber;
const int MThostFtdcInvestorPositionField::kFrozenCashFieldNumber;
const int MThostFtdcInvestorPositionField::kFrozenCommissionFieldNumber;
const int MThostFtdcInvestorPositionField::kCashInFieldNumber;
const int MThostFtdcInvestorPositionField::kCommissionFieldNumber;
const int MThostFtdcInvestorPositionField::kCloseProfitFieldNumber;
const int MThostFtdcInvestorPositionField::kPositionProfitFieldNumber;
const int MThostFtdcInvestorPositionField::kPreSettlementPriceFieldNumber;
const int MThostFtdcInvestorPositionField::kSettlementPriceFieldNumber;
const int MThostFtdcInvestorPositionField::kTradingDayFieldNumber;
const int MThostFtdcInvestorPositionField::kSettlementIDFieldNumber;
const int MThostFtdcInvestorPositionField::kOpenCostFieldNumber;
const int MThostFtdcInvestorPositionField::kExchangeMarginFieldNumber;
const int MThostFtdcInvestorPositionField::kCombPositionFieldNumber;
const int MThostFtdcInvestorPositionField::kCombLongFrozenFieldNumber;
const int MThostFtdcInvestorPositionField::kCombShortFrozenFieldNumber;
const int MThostFtdcInvestorPositionField::kCloseProfitByDateFieldNumber;
const int MThostFtdcInvestorPositionField::kCloseProfitByTradeFieldNumber;
const int MThostFtdcInvestorPositionField::kTodayPositionFieldNumber;
const int MThostFtdcInvestorPositionField::kMarginRateByMoneyFieldNumber;
const int MThostFtdcInvestorPositionField::kMarginRateByVolumeFieldNumber;
#endif  // !_MSC_VER

MThostFtdcInvestorPositionField::MThostFtdcInvestorPositionField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MThostFtdcInvestorPositionField::InitAsDefaultInstance() {
}

MThostFtdcInvestorPositionField::MThostFtdcInvestorPositionField(const MThostFtdcInvestorPositionField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MThostFtdcInvestorPositionField::SharedCtor() {
  _cached_size_ = 0;
  instrumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  posidirection_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hedgeflag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  positiondate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ydposition_ = 0;
  position_ = 0;
  longfrozen_ = 0;
  shortfrozen_ = 0;
  longfrozenamount_ = 0;
  shortfrozenamount_ = 0;
  openvolume_ = 0;
  closevolume_ = 0;
  openamount_ = 0;
  closeamount_ = 0;
  positioncost_ = 0;
  premargin_ = 0;
  usemargin_ = 0;
  frozenmargin_ = 0;
  frozencash_ = 0;
  frozencommission_ = 0;
  cashin_ = 0;
  commission_ = 0;
  closeprofit_ = 0;
  positionprofit_ = 0;
  presettlementprice_ = 0;
  settlementprice_ = 0;
  tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  settlementid_ = 0;
  opencost_ = 0;
  exchangemargin_ = 0;
  combposition_ = 0;
  comblongfrozen_ = 0;
  combshortfrozen_ = 0;
  closeprofitbydate_ = 0;
  closeprofitbytrade_ = 0;
  todayposition_ = 0;
  marginratebymoney_ = 0;
  marginratebyvolume_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MThostFtdcInvestorPositionField::~MThostFtdcInvestorPositionField() {
  SharedDtor();
}

void MThostFtdcInvestorPositionField::SharedDtor() {
  if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete instrumentid_;
  }
  if (posidirection_ != &::google::protobuf::internal::kEmptyString) {
    delete posidirection_;
  }
  if (hedgeflag_ != &::google::protobuf::internal::kEmptyString) {
    delete hedgeflag_;
  }
  if (positiondate_ != &::google::protobuf::internal::kEmptyString) {
    delete positiondate_;
  }
  if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
    delete tradingday_;
  }
  if (this != default_instance_) {
  }
}

void MThostFtdcInvestorPositionField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MThostFtdcInvestorPositionField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MThostFtdcInvestorPositionField_descriptor_;
}

const MThostFtdcInvestorPositionField& MThostFtdcInvestorPositionField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureTrading_2eproto();  return *default_instance_;
}

MThostFtdcInvestorPositionField* MThostFtdcInvestorPositionField::default_instance_ = NULL;

MThostFtdcInvestorPositionField* MThostFtdcInvestorPositionField::New() const {
  return new MThostFtdcInvestorPositionField;
}

void MThostFtdcInvestorPositionField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instrumentid()) {
      if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
        instrumentid_->clear();
      }
    }
    if (has_posidirection()) {
      if (posidirection_ != &::google::protobuf::internal::kEmptyString) {
        posidirection_->clear();
      }
    }
    if (has_hedgeflag()) {
      if (hedgeflag_ != &::google::protobuf::internal::kEmptyString) {
        hedgeflag_->clear();
      }
    }
    if (has_positiondate()) {
      if (positiondate_ != &::google::protobuf::internal::kEmptyString) {
        positiondate_->clear();
      }
    }
    ydposition_ = 0;
    position_ = 0;
    longfrozen_ = 0;
    shortfrozen_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    longfrozenamount_ = 0;
    shortfrozenamount_ = 0;
    openvolume_ = 0;
    closevolume_ = 0;
    openamount_ = 0;
    closeamount_ = 0;
    positioncost_ = 0;
    premargin_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    usemargin_ = 0;
    frozenmargin_ = 0;
    frozencash_ = 0;
    frozencommission_ = 0;
    cashin_ = 0;
    commission_ = 0;
    closeprofit_ = 0;
    positionprofit_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    presettlementprice_ = 0;
    settlementprice_ = 0;
    if (has_tradingday()) {
      if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
        tradingday_->clear();
      }
    }
    settlementid_ = 0;
    opencost_ = 0;
    exchangemargin_ = 0;
    combposition_ = 0;
    comblongfrozen_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    combshortfrozen_ = 0;
    closeprofitbydate_ = 0;
    closeprofitbytrade_ = 0;
    todayposition_ = 0;
    marginratebymoney_ = 0;
    marginratebyvolume_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MThostFtdcInvestorPositionField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InstrumentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PosiDirection;
        break;
      }
      
      // required string PosiDirection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PosiDirection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_posidirection()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->posidirection().data(), this->posidirection().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_HedgeFlag;
        break;
      }
      
      // required string HedgeFlag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HedgeFlag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hedgeflag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hedgeflag().data(), this->hedgeflag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_PositionDate;
        break;
      }
      
      // required string PositionDate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PositionDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_positiondate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->positiondate().data(), this->positiondate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_YdPosition;
        break;
      }
      
      // required int32 YdPosition = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YdPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydposition_)));
          set_has_ydposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Position;
        break;
      }
      
      // required int32 Position = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LongFrozen;
        break;
      }
      
      // required int32 LongFrozen = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LongFrozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longfrozen_)));
          set_has_longfrozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ShortFrozen;
        break;
      }
      
      // required int32 ShortFrozen = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShortFrozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shortfrozen_)));
          set_has_shortfrozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_LongFrozenAmount;
        break;
      }
      
      // required double LongFrozenAmount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LongFrozenAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longfrozenamount_)));
          set_has_longfrozenamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_ShortFrozenAmount;
        break;
      }
      
      // required double ShortFrozenAmount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ShortFrozenAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shortfrozenamount_)));
          set_has_shortfrozenamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_OpenVolume;
        break;
      }
      
      // required int32 OpenVolume = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpenVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &openvolume_)));
          set_has_openvolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_CloseVolume;
        break;
      }
      
      // required int32 CloseVolume = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CloseVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closevolume_)));
          set_has_closevolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_OpenAmount;
        break;
      }
      
      // required double OpenAmount = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_OpenAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openamount_)));
          set_has_openamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_CloseAmount;
        break;
      }
      
      // required double CloseAmount = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CloseAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeamount_)));
          set_has_closeamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_PositionCost;
        break;
      }
      
      // required double PositionCost = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PositionCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positioncost_)));
          set_has_positioncost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_PreMargin;
        break;
      }
      
      // required double PreMargin = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premargin_)));
          set_has_premargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_UseMargin;
        break;
      }
      
      // required double UseMargin = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_UseMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usemargin_)));
          set_has_usemargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_FrozenMargin;
        break;
      }
      
      // required double FrozenMargin = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_FrozenMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozenmargin_)));
          set_has_frozenmargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_FrozenCash;
        break;
      }
      
      // required double FrozenCash = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_FrozenCash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencash_)));
          set_has_frozencash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_FrozenCommission;
        break;
      }
      
      // required double FrozenCommission = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_FrozenCommission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencommission_)));
          set_has_frozencommission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_CashIn;
        break;
      }
      
      // required double CashIn = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CashIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cashin_)));
          set_has_cashin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_Commission;
        break;
      }
      
      // required double Commission = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Commission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));
          set_has_commission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_CloseProfit;
        break;
      }
      
      // required double CloseProfit = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CloseProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofit_)));
          set_has_closeprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_PositionProfit;
        break;
      }
      
      // required double PositionProfit = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PositionProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positionprofit_)));
          set_has_positionprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_PreSettlementPrice;
        break;
      }
      
      // required double PreSettlementPrice = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreSettlementPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &presettlementprice_)));
          set_has_presettlementprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_SettlementPrice;
        break;
      }
      
      // required double SettlementPrice = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SettlementPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settlementprice_)));
          set_has_settlementprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_TradingDay;
        break;
      }
      
      // required string TradingDay = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TradingDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_SettlementID;
        break;
      }
      
      // required int32 SettlementID = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SettlementID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlementid_)));
          set_has_settlementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_OpenCost;
        break;
      }
      
      // required double OpenCost = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_OpenCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &opencost_)));
          set_has_opencost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_ExchangeMargin;
        break;
      }
      
      // required double ExchangeMargin = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ExchangeMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchangemargin_)));
          set_has_exchangemargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_CombPosition;
        break;
      }
      
      // required double CombPosition = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CombPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &combposition_)));
          set_has_combposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_CombLongFrozen;
        break;
      }
      
      // required double CombLongFrozen = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CombLongFrozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &comblongfrozen_)));
          set_has_comblongfrozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_CombShortFrozen;
        break;
      }
      
      // required double CombShortFrozen = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CombShortFrozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &combshortfrozen_)));
          set_has_combshortfrozen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(273)) goto parse_CloseProfitByDate;
        break;
      }
      
      // required double CloseProfitByDate = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CloseProfitByDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofitbydate_)));
          set_has_closeprofitbydate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(281)) goto parse_CloseProfitByTrade;
        break;
      }
      
      // required double CloseProfitByTrade = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CloseProfitByTrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofitbytrade_)));
          set_has_closeprofitbytrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(289)) goto parse_TodayPosition;
        break;
      }
      
      // required double TodayPosition = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TodayPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &todayposition_)));
          set_has_todayposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(297)) goto parse_MarginRateByMoney;
        break;
      }
      
      // required double MarginRateByMoney = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MarginRateByMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginratebymoney_)));
          set_has_marginratebymoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(305)) goto parse_MarginRateByVolume;
        break;
      }
      
      // required double MarginRateByVolume = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MarginRateByVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &marginratebyvolume_)));
          set_has_marginratebyvolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MThostFtdcInvestorPositionField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string InstrumentID = 1;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instrumentid(), output);
  }
  
  // required string PosiDirection = 2;
  if (has_posidirection()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->posidirection().data(), this->posidirection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->posidirection(), output);
  }
  
  // required string HedgeFlag = 3;
  if (has_hedgeflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hedgeflag().data(), this->hedgeflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->hedgeflag(), output);
  }
  
  // required string PositionDate = 4;
  if (has_positiondate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->positiondate().data(), this->positiondate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->positiondate(), output);
  }
  
  // required int32 YdPosition = 5;
  if (has_ydposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ydposition(), output);
  }
  
  // required int32 Position = 6;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->position(), output);
  }
  
  // required int32 LongFrozen = 7;
  if (has_longfrozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->longfrozen(), output);
  }
  
  // required int32 ShortFrozen = 8;
  if (has_shortfrozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->shortfrozen(), output);
  }
  
  // required double LongFrozenAmount = 9;
  if (has_longfrozenamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->longfrozenamount(), output);
  }
  
  // required double ShortFrozenAmount = 10;
  if (has_shortfrozenamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->shortfrozenamount(), output);
  }
  
  // required int32 OpenVolume = 11;
  if (has_openvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->openvolume(), output);
  }
  
  // required int32 CloseVolume = 12;
  if (has_closevolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->closevolume(), output);
  }
  
  // required double OpenAmount = 13;
  if (has_openamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->openamount(), output);
  }
  
  // required double CloseAmount = 14;
  if (has_closeamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->closeamount(), output);
  }
  
  // required double PositionCost = 15;
  if (has_positioncost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->positioncost(), output);
  }
  
  // required double PreMargin = 16;
  if (has_premargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->premargin(), output);
  }
  
  // required double UseMargin = 17;
  if (has_usemargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->usemargin(), output);
  }
  
  // required double FrozenMargin = 18;
  if (has_frozenmargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->frozenmargin(), output);
  }
  
  // required double FrozenCash = 19;
  if (has_frozencash()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->frozencash(), output);
  }
  
  // required double FrozenCommission = 20;
  if (has_frozencommission()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->frozencommission(), output);
  }
  
  // required double CashIn = 21;
  if (has_cashin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->cashin(), output);
  }
  
  // required double Commission = 22;
  if (has_commission()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->commission(), output);
  }
  
  // required double CloseProfit = 23;
  if (has_closeprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->closeprofit(), output);
  }
  
  // required double PositionProfit = 24;
  if (has_positionprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->positionprofit(), output);
  }
  
  // required double PreSettlementPrice = 25;
  if (has_presettlementprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->presettlementprice(), output);
  }
  
  // required double SettlementPrice = 26;
  if (has_settlementprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->settlementprice(), output);
  }
  
  // required string TradingDay = 27;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->tradingday(), output);
  }
  
  // required int32 SettlementID = 28;
  if (has_settlementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->settlementid(), output);
  }
  
  // required double OpenCost = 29;
  if (has_opencost()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->opencost(), output);
  }
  
  // required double ExchangeMargin = 30;
  if (has_exchangemargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->exchangemargin(), output);
  }
  
  // required double CombPosition = 31;
  if (has_combposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->combposition(), output);
  }
  
  // required double CombLongFrozen = 32;
  if (has_comblongfrozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->comblongfrozen(), output);
  }
  
  // required double CombShortFrozen = 33;
  if (has_combshortfrozen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->combshortfrozen(), output);
  }
  
  // required double CloseProfitByDate = 34;
  if (has_closeprofitbydate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->closeprofitbydate(), output);
  }
  
  // required double CloseProfitByTrade = 35;
  if (has_closeprofitbytrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->closeprofitbytrade(), output);
  }
  
  // required double TodayPosition = 36;
  if (has_todayposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->todayposition(), output);
  }
  
  // required double MarginRateByMoney = 37;
  if (has_marginratebymoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->marginratebymoney(), output);
  }
  
  // required double MarginRateByVolume = 38;
  if (has_marginratebyvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->marginratebyvolume(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MThostFtdcInvestorPositionField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string InstrumentID = 1;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrumentid(), target);
  }
  
  // required string PosiDirection = 2;
  if (has_posidirection()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->posidirection().data(), this->posidirection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->posidirection(), target);
  }
  
  // required string HedgeFlag = 3;
  if (has_hedgeflag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hedgeflag().data(), this->hedgeflag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hedgeflag(), target);
  }
  
  // required string PositionDate = 4;
  if (has_positiondate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->positiondate().data(), this->positiondate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->positiondate(), target);
  }
  
  // required int32 YdPosition = 5;
  if (has_ydposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ydposition(), target);
  }
  
  // required int32 Position = 6;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->position(), target);
  }
  
  // required int32 LongFrozen = 7;
  if (has_longfrozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->longfrozen(), target);
  }
  
  // required int32 ShortFrozen = 8;
  if (has_shortfrozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->shortfrozen(), target);
  }
  
  // required double LongFrozenAmount = 9;
  if (has_longfrozenamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->longfrozenamount(), target);
  }
  
  // required double ShortFrozenAmount = 10;
  if (has_shortfrozenamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->shortfrozenamount(), target);
  }
  
  // required int32 OpenVolume = 11;
  if (has_openvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->openvolume(), target);
  }
  
  // required int32 CloseVolume = 12;
  if (has_closevolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->closevolume(), target);
  }
  
  // required double OpenAmount = 13;
  if (has_openamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->openamount(), target);
  }
  
  // required double CloseAmount = 14;
  if (has_closeamount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->closeamount(), target);
  }
  
  // required double PositionCost = 15;
  if (has_positioncost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->positioncost(), target);
  }
  
  // required double PreMargin = 16;
  if (has_premargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->premargin(), target);
  }
  
  // required double UseMargin = 17;
  if (has_usemargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->usemargin(), target);
  }
  
  // required double FrozenMargin = 18;
  if (has_frozenmargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->frozenmargin(), target);
  }
  
  // required double FrozenCash = 19;
  if (has_frozencash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->frozencash(), target);
  }
  
  // required double FrozenCommission = 20;
  if (has_frozencommission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->frozencommission(), target);
  }
  
  // required double CashIn = 21;
  if (has_cashin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->cashin(), target);
  }
  
  // required double Commission = 22;
  if (has_commission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->commission(), target);
  }
  
  // required double CloseProfit = 23;
  if (has_closeprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->closeprofit(), target);
  }
  
  // required double PositionProfit = 24;
  if (has_positionprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->positionprofit(), target);
  }
  
  // required double PreSettlementPrice = 25;
  if (has_presettlementprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->presettlementprice(), target);
  }
  
  // required double SettlementPrice = 26;
  if (has_settlementprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->settlementprice(), target);
  }
  
  // required string TradingDay = 27;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->tradingday(), target);
  }
  
  // required int32 SettlementID = 28;
  if (has_settlementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->settlementid(), target);
  }
  
  // required double OpenCost = 29;
  if (has_opencost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->opencost(), target);
  }
  
  // required double ExchangeMargin = 30;
  if (has_exchangemargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->exchangemargin(), target);
  }
  
  // required double CombPosition = 31;
  if (has_combposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->combposition(), target);
  }
  
  // required double CombLongFrozen = 32;
  if (has_comblongfrozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->comblongfrozen(), target);
  }
  
  // required double CombShortFrozen = 33;
  if (has_combshortfrozen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->combshortfrozen(), target);
  }
  
  // required double CloseProfitByDate = 34;
  if (has_closeprofitbydate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->closeprofitbydate(), target);
  }
  
  // required double CloseProfitByTrade = 35;
  if (has_closeprofitbytrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->closeprofitbytrade(), target);
  }
  
  // required double TodayPosition = 36;
  if (has_todayposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->todayposition(), target);
  }
  
  // required double MarginRateByMoney = 37;
  if (has_marginratebymoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->marginratebymoney(), target);
  }
  
  // required double MarginRateByVolume = 38;
  if (has_marginratebyvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->marginratebyvolume(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MThostFtdcInvestorPositionField::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InstrumentID = 1;
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }
    
    // required string PosiDirection = 2;
    if (has_posidirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->posidirection());
    }
    
    // required string HedgeFlag = 3;
    if (has_hedgeflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hedgeflag());
    }
    
    // required string PositionDate = 4;
    if (has_positiondate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->positiondate());
    }
    
    // required int32 YdPosition = 5;
    if (has_ydposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydposition());
    }
    
    // required int32 Position = 6;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }
    
    // required int32 LongFrozen = 7;
    if (has_longfrozen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->longfrozen());
    }
    
    // required int32 ShortFrozen = 8;
    if (has_shortfrozen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shortfrozen());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double LongFrozenAmount = 9;
    if (has_longfrozenamount()) {
      total_size += 1 + 8;
    }
    
    // required double ShortFrozenAmount = 10;
    if (has_shortfrozenamount()) {
      total_size += 1 + 8;
    }
    
    // required int32 OpenVolume = 11;
    if (has_openvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->openvolume());
    }
    
    // required int32 CloseVolume = 12;
    if (has_closevolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->closevolume());
    }
    
    // required double OpenAmount = 13;
    if (has_openamount()) {
      total_size += 1 + 8;
    }
    
    // required double CloseAmount = 14;
    if (has_closeamount()) {
      total_size += 1 + 8;
    }
    
    // required double PositionCost = 15;
    if (has_positioncost()) {
      total_size += 1 + 8;
    }
    
    // required double PreMargin = 16;
    if (has_premargin()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double UseMargin = 17;
    if (has_usemargin()) {
      total_size += 2 + 8;
    }
    
    // required double FrozenMargin = 18;
    if (has_frozenmargin()) {
      total_size += 2 + 8;
    }
    
    // required double FrozenCash = 19;
    if (has_frozencash()) {
      total_size += 2 + 8;
    }
    
    // required double FrozenCommission = 20;
    if (has_frozencommission()) {
      total_size += 2 + 8;
    }
    
    // required double CashIn = 21;
    if (has_cashin()) {
      total_size += 2 + 8;
    }
    
    // required double Commission = 22;
    if (has_commission()) {
      total_size += 2 + 8;
    }
    
    // required double CloseProfit = 23;
    if (has_closeprofit()) {
      total_size += 2 + 8;
    }
    
    // required double PositionProfit = 24;
    if (has_positionprofit()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double PreSettlementPrice = 25;
    if (has_presettlementprice()) {
      total_size += 2 + 8;
    }
    
    // required double SettlementPrice = 26;
    if (has_settlementprice()) {
      total_size += 2 + 8;
    }
    
    // required string TradingDay = 27;
    if (has_tradingday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradingday());
    }
    
    // required int32 SettlementID = 28;
    if (has_settlementid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settlementid());
    }
    
    // required double OpenCost = 29;
    if (has_opencost()) {
      total_size += 2 + 8;
    }
    
    // required double ExchangeMargin = 30;
    if (has_exchangemargin()) {
      total_size += 2 + 8;
    }
    
    // required double CombPosition = 31;
    if (has_combposition()) {
      total_size += 2 + 8;
    }
    
    // required double CombLongFrozen = 32;
    if (has_comblongfrozen()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required double CombShortFrozen = 33;
    if (has_combshortfrozen()) {
      total_size += 2 + 8;
    }
    
    // required double CloseProfitByDate = 34;
    if (has_closeprofitbydate()) {
      total_size += 2 + 8;
    }
    
    // required double CloseProfitByTrade = 35;
    if (has_closeprofitbytrade()) {
      total_size += 2 + 8;
    }
    
    // required double TodayPosition = 36;
    if (has_todayposition()) {
      total_size += 2 + 8;
    }
    
    // required double MarginRateByMoney = 37;
    if (has_marginratebymoney()) {
      total_size += 2 + 8;
    }
    
    // required double MarginRateByVolume = 38;
    if (has_marginratebyvolume()) {
      total_size += 2 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MThostFtdcInvestorPositionField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MThostFtdcInvestorPositionField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MThostFtdcInvestorPositionField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MThostFtdcInvestorPositionField::MergeFrom(const MThostFtdcInvestorPositionField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrumentid()) {
      set_instrumentid(from.instrumentid());
    }
    if (from.has_posidirection()) {
      set_posidirection(from.posidirection());
    }
    if (from.has_hedgeflag()) {
      set_hedgeflag(from.hedgeflag());
    }
    if (from.has_positiondate()) {
      set_positiondate(from.positiondate());
    }
    if (from.has_ydposition()) {
      set_ydposition(from.ydposition());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_longfrozen()) {
      set_longfrozen(from.longfrozen());
    }
    if (from.has_shortfrozen()) {
      set_shortfrozen(from.shortfrozen());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_longfrozenamount()) {
      set_longfrozenamount(from.longfrozenamount());
    }
    if (from.has_shortfrozenamount()) {
      set_shortfrozenamount(from.shortfrozenamount());
    }
    if (from.has_openvolume()) {
      set_openvolume(from.openvolume());
    }
    if (from.has_closevolume()) {
      set_closevolume(from.closevolume());
    }
    if (from.has_openamount()) {
      set_openamount(from.openamount());
    }
    if (from.has_closeamount()) {
      set_closeamount(from.closeamount());
    }
    if (from.has_positioncost()) {
      set_positioncost(from.positioncost());
    }
    if (from.has_premargin()) {
      set_premargin(from.premargin());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_usemargin()) {
      set_usemargin(from.usemargin());
    }
    if (from.has_frozenmargin()) {
      set_frozenmargin(from.frozenmargin());
    }
    if (from.has_frozencash()) {
      set_frozencash(from.frozencash());
    }
    if (from.has_frozencommission()) {
      set_frozencommission(from.frozencommission());
    }
    if (from.has_cashin()) {
      set_cashin(from.cashin());
    }
    if (from.has_commission()) {
      set_commission(from.commission());
    }
    if (from.has_closeprofit()) {
      set_closeprofit(from.closeprofit());
    }
    if (from.has_positionprofit()) {
      set_positionprofit(from.positionprofit());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_presettlementprice()) {
      set_presettlementprice(from.presettlementprice());
    }
    if (from.has_settlementprice()) {
      set_settlementprice(from.settlementprice());
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_settlementid()) {
      set_settlementid(from.settlementid());
    }
    if (from.has_opencost()) {
      set_opencost(from.opencost());
    }
    if (from.has_exchangemargin()) {
      set_exchangemargin(from.exchangemargin());
    }
    if (from.has_combposition()) {
      set_combposition(from.combposition());
    }
    if (from.has_comblongfrozen()) {
      set_comblongfrozen(from.comblongfrozen());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_combshortfrozen()) {
      set_combshortfrozen(from.combshortfrozen());
    }
    if (from.has_closeprofitbydate()) {
      set_closeprofitbydate(from.closeprofitbydate());
    }
    if (from.has_closeprofitbytrade()) {
      set_closeprofitbytrade(from.closeprofitbytrade());
    }
    if (from.has_todayposition()) {
      set_todayposition(from.todayposition());
    }
    if (from.has_marginratebymoney()) {
      set_marginratebymoney(from.marginratebymoney());
    }
    if (from.has_marginratebyvolume()) {
      set_marginratebyvolume(from.marginratebyvolume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MThostFtdcInvestorPositionField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MThostFtdcInvestorPositionField::CopyFrom(const MThostFtdcInvestorPositionField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MThostFtdcInvestorPositionField::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void MThostFtdcInvestorPositionField::Swap(MThostFtdcInvestorPositionField* other) {
  if (other != this) {
    std::swap(instrumentid_, other->instrumentid_);
    std::swap(posidirection_, other->posidirection_);
    std::swap(hedgeflag_, other->hedgeflag_);
    std::swap(positiondate_, other->positiondate_);
    std::swap(ydposition_, other->ydposition_);
    std::swap(position_, other->position_);
    std::swap(longfrozen_, other->longfrozen_);
    std::swap(shortfrozen_, other->shortfrozen_);
    std::swap(longfrozenamount_, other->longfrozenamount_);
    std::swap(shortfrozenamount_, other->shortfrozenamount_);
    std::swap(openvolume_, other->openvolume_);
    std::swap(closevolume_, other->closevolume_);
    std::swap(openamount_, other->openamount_);
    std::swap(closeamount_, other->closeamount_);
    std::swap(positioncost_, other->positioncost_);
    std::swap(premargin_, other->premargin_);
    std::swap(usemargin_, other->usemargin_);
    std::swap(frozenmargin_, other->frozenmargin_);
    std::swap(frozencash_, other->frozencash_);
    std::swap(frozencommission_, other->frozencommission_);
    std::swap(cashin_, other->cashin_);
    std::swap(commission_, other->commission_);
    std::swap(closeprofit_, other->closeprofit_);
    std::swap(positionprofit_, other->positionprofit_);
    std::swap(presettlementprice_, other->presettlementprice_);
    std::swap(settlementprice_, other->settlementprice_);
    std::swap(tradingday_, other->tradingday_);
    std::swap(settlementid_, other->settlementid_);
    std::swap(opencost_, other->opencost_);
    std::swap(exchangemargin_, other->exchangemargin_);
    std::swap(combposition_, other->combposition_);
    std::swap(comblongfrozen_, other->comblongfrozen_);
    std::swap(combshortfrozen_, other->combshortfrozen_);
    std::swap(closeprofitbydate_, other->closeprofitbydate_);
    std::swap(closeprofitbytrade_, other->closeprofitbytrade_);
    std::swap(todayposition_, other->todayposition_);
    std::swap(marginratebymoney_, other->marginratebymoney_);
    std::swap(marginratebyvolume_, other->marginratebyvolume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MThostFtdcInvestorPositionField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MThostFtdcInvestorPositionField_descriptor_;
  metadata.reflection = MThostFtdcInvestorPositionField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MThostFtdcTradingAccountField::kBrokerIDFieldNumber;
const int MThostFtdcTradingAccountField::kAccountIDFieldNumber;
const int MThostFtdcTradingAccountField::kPreMortgageFieldNumber;
const int MThostFtdcTradingAccountField::kPreCreditFieldNumber;
const int MThostFtdcTradingAccountField::kPreDepositFieldNumber;
const int MThostFtdcTradingAccountField::kPreBalanceFieldNumber;
const int MThostFtdcTradingAccountField::kPreMarginFieldNumber;
const int MThostFtdcTradingAccountField::kInterestBaseFieldNumber;
const int MThostFtdcTradingAccountField::kInterestFieldNumber;
const int MThostFtdcTradingAccountField::kDepositFieldNumber;
const int MThostFtdcTradingAccountField::kWithdrawFieldNumber;
const int MThostFtdcTradingAccountField::kFrozenMarginFieldNumber;
const int MThostFtdcTradingAccountField::kFrozenCashFieldNumber;
const int MThostFtdcTradingAccountField::kFrozenCommissionFieldNumber;
const int MThostFtdcTradingAccountField::kCurrMarginFieldNumber;
const int MThostFtdcTradingAccountField::kCashInFieldNumber;
const int MThostFtdcTradingAccountField::kCommissionFieldNumber;
const int MThostFtdcTradingAccountField::kCloseProfitFieldNumber;
const int MThostFtdcTradingAccountField::kPositionProfitFieldNumber;
const int MThostFtdcTradingAccountField::kBalanceFieldNumber;
const int MThostFtdcTradingAccountField::kAvailableFieldNumber;
const int MThostFtdcTradingAccountField::kWithdrawQuotaFieldNumber;
const int MThostFtdcTradingAccountField::kReserveFieldNumber;
const int MThostFtdcTradingAccountField::kTradingDayFieldNumber;
const int MThostFtdcTradingAccountField::kSettlementIDFieldNumber;
const int MThostFtdcTradingAccountField::kCreditFieldNumber;
const int MThostFtdcTradingAccountField::kMortgageFieldNumber;
const int MThostFtdcTradingAccountField::kExchangeMarginFieldNumber;
#endif  // !_MSC_VER

MThostFtdcTradingAccountField::MThostFtdcTradingAccountField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MThostFtdcTradingAccountField::InitAsDefaultInstance() {
}

MThostFtdcTradingAccountField::MThostFtdcTradingAccountField(const MThostFtdcTradingAccountField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MThostFtdcTradingAccountField::SharedCtor() {
  _cached_size_ = 0;
  brokerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  premortgage_ = 0;
  precredit_ = 0;
  predeposit_ = 0;
  prebalance_ = 0;
  premargin_ = 0;
  interestbase_ = 0;
  interest_ = 0;
  deposit_ = 0;
  withdraw_ = 0;
  frozenmargin_ = 0;
  frozencash_ = 0;
  frozencommission_ = 0;
  currmargin_ = 0;
  cashin_ = 0;
  commission_ = 0;
  closeprofit_ = 0;
  positionprofit_ = 0;
  balance_ = 0;
  available_ = 0;
  withdrawquota_ = 0;
  reserve_ = 0;
  tradingday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  settlementid_ = 0;
  credit_ = 0;
  mortgage_ = 0;
  exchangemargin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MThostFtdcTradingAccountField::~MThostFtdcTradingAccountField() {
  SharedDtor();
}

void MThostFtdcTradingAccountField::SharedDtor() {
  if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
    delete brokerid_;
  }
  if (accountid_ != &::google::protobuf::internal::kEmptyString) {
    delete accountid_;
  }
  if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
    delete tradingday_;
  }
  if (this != default_instance_) {
  }
}

void MThostFtdcTradingAccountField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MThostFtdcTradingAccountField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MThostFtdcTradingAccountField_descriptor_;
}

const MThostFtdcTradingAccountField& MThostFtdcTradingAccountField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureTrading_2eproto();  return *default_instance_;
}

MThostFtdcTradingAccountField* MThostFtdcTradingAccountField::default_instance_ = NULL;

MThostFtdcTradingAccountField* MThostFtdcTradingAccountField::New() const {
  return new MThostFtdcTradingAccountField;
}

void MThostFtdcTradingAccountField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_brokerid()) {
      if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
        brokerid_->clear();
      }
    }
    if (has_accountid()) {
      if (accountid_ != &::google::protobuf::internal::kEmptyString) {
        accountid_->clear();
      }
    }
    premortgage_ = 0;
    precredit_ = 0;
    predeposit_ = 0;
    prebalance_ = 0;
    premargin_ = 0;
    interestbase_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    interest_ = 0;
    deposit_ = 0;
    withdraw_ = 0;
    frozenmargin_ = 0;
    frozencash_ = 0;
    frozencommission_ = 0;
    currmargin_ = 0;
    cashin_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    commission_ = 0;
    closeprofit_ = 0;
    positionprofit_ = 0;
    balance_ = 0;
    available_ = 0;
    withdrawquota_ = 0;
    reserve_ = 0;
    if (has_tradingday()) {
      if (tradingday_ != &::google::protobuf::internal::kEmptyString) {
        tradingday_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    settlementid_ = 0;
    credit_ = 0;
    mortgage_ = 0;
    exchangemargin_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MThostFtdcTradingAccountField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BrokerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AccountID;
        break;
      }
      
      // required string AccountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AccountID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountid().data(), this->accountid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_PreMortgage;
        break;
      }
      
      // required double PreMortgage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreMortgage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premortgage_)));
          set_has_premortgage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_PreCredit;
        break;
      }
      
      // required double PreCredit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreCredit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precredit_)));
          set_has_precredit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_PreDeposit;
        break;
      }
      
      // required double PreDeposit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreDeposit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &predeposit_)));
          set_has_predeposit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_PreBalance;
        break;
      }
      
      // required double PreBalance = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreBalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prebalance_)));
          set_has_prebalance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_PreMargin;
        break;
      }
      
      // required double PreMargin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PreMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &premargin_)));
          set_has_premargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_InterestBase;
        break;
      }
      
      // required double InterestBase = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_InterestBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interestbase_)));
          set_has_interestbase();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_Interest;
        break;
      }
      
      // required double Interest = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Interest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interest_)));
          set_has_interest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_Deposit;
        break;
      }
      
      // required double Deposit = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Deposit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deposit_)));
          set_has_deposit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_Withdraw;
        break;
      }
      
      // required double Withdraw = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Withdraw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &withdraw_)));
          set_has_withdraw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_FrozenMargin;
        break;
      }
      
      // required double FrozenMargin = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_FrozenMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozenmargin_)));
          set_has_frozenmargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_FrozenCash;
        break;
      }
      
      // required double FrozenCash = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_FrozenCash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencash_)));
          set_has_frozencash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_FrozenCommission;
        break;
      }
      
      // required double FrozenCommission = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_FrozenCommission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frozencommission_)));
          set_has_frozencommission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_CurrMargin;
        break;
      }
      
      // required double CurrMargin = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CurrMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &currmargin_)));
          set_has_currmargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_CashIn;
        break;
      }
      
      // required double CashIn = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CashIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cashin_)));
          set_has_cashin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_Commission;
        break;
      }
      
      // required double Commission = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Commission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));
          set_has_commission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_CloseProfit;
        break;
      }
      
      // required double CloseProfit = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CloseProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofit_)));
          set_has_closeprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_PositionProfit;
        break;
      }
      
      // required double PositionProfit = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PositionProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positionprofit_)));
          set_has_positionprofit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_Balance;
        break;
      }
      
      // required double Balance = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &balance_)));
          set_has_balance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_Available;
        break;
      }
      
      // required double Available = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &available_)));
          set_has_available();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_WithdrawQuota;
        break;
      }
      
      // required double WithdrawQuota = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_WithdrawQuota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &withdrawquota_)));
          set_has_withdrawquota();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_Reserve;
        break;
      }
      
      // required double Reserve = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Reserve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reserve_)));
          set_has_reserve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_TradingDay;
        break;
      }
      
      // required string TradingDay = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TradingDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradingday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradingday().data(), this->tradingday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_SettlementID;
        break;
      }
      
      // required int32 SettlementID = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SettlementID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settlementid_)));
          set_has_settlementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_Credit;
        break;
      }
      
      // required double Credit = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &credit_)));
          set_has_credit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_Mortgage;
        break;
      }
      
      // required double Mortgage = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Mortgage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mortgage_)));
          set_has_mortgage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_ExchangeMargin;
        break;
      }
      
      // required double ExchangeMargin = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ExchangeMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exchangemargin_)));
          set_has_exchangemargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MThostFtdcTradingAccountField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string BrokerID = 1;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->brokerid(), output);
  }
  
  // required string AccountID = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accountid(), output);
  }
  
  // required double PreMortgage = 3;
  if (has_premortgage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->premortgage(), output);
  }
  
  // required double PreCredit = 4;
  if (has_precredit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->precredit(), output);
  }
  
  // required double PreDeposit = 5;
  if (has_predeposit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->predeposit(), output);
  }
  
  // required double PreBalance = 6;
  if (has_prebalance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->prebalance(), output);
  }
  
  // required double PreMargin = 7;
  if (has_premargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->premargin(), output);
  }
  
  // required double InterestBase = 8;
  if (has_interestbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->interestbase(), output);
  }
  
  // required double Interest = 9;
  if (has_interest()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->interest(), output);
  }
  
  // required double Deposit = 10;
  if (has_deposit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->deposit(), output);
  }
  
  // required double Withdraw = 11;
  if (has_withdraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->withdraw(), output);
  }
  
  // required double FrozenMargin = 12;
  if (has_frozenmargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->frozenmargin(), output);
  }
  
  // required double FrozenCash = 13;
  if (has_frozencash()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->frozencash(), output);
  }
  
  // required double FrozenCommission = 14;
  if (has_frozencommission()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->frozencommission(), output);
  }
  
  // required double CurrMargin = 15;
  if (has_currmargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->currmargin(), output);
  }
  
  // required double CashIn = 16;
  if (has_cashin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->cashin(), output);
  }
  
  // required double Commission = 17;
  if (has_commission()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->commission(), output);
  }
  
  // required double CloseProfit = 18;
  if (has_closeprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->closeprofit(), output);
  }
  
  // required double PositionProfit = 19;
  if (has_positionprofit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->positionprofit(), output);
  }
  
  // required double Balance = 20;
  if (has_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->balance(), output);
  }
  
  // required double Available = 21;
  if (has_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->available(), output);
  }
  
  // required double WithdrawQuota = 22;
  if (has_withdrawquota()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->withdrawquota(), output);
  }
  
  // required double Reserve = 23;
  if (has_reserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->reserve(), output);
  }
  
  // required string TradingDay = 24;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->tradingday(), output);
  }
  
  // required int32 SettlementID = 25;
  if (has_settlementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->settlementid(), output);
  }
  
  // required double Credit = 26;
  if (has_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->credit(), output);
  }
  
  // required double Mortgage = 27;
  if (has_mortgage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->mortgage(), output);
  }
  
  // required double ExchangeMargin = 28;
  if (has_exchangemargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->exchangemargin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MThostFtdcTradingAccountField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string BrokerID = 1;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->brokerid(), target);
  }
  
  // required string AccountID = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accountid(), target);
  }
  
  // required double PreMortgage = 3;
  if (has_premortgage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->premortgage(), target);
  }
  
  // required double PreCredit = 4;
  if (has_precredit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->precredit(), target);
  }
  
  // required double PreDeposit = 5;
  if (has_predeposit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->predeposit(), target);
  }
  
  // required double PreBalance = 6;
  if (has_prebalance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->prebalance(), target);
  }
  
  // required double PreMargin = 7;
  if (has_premargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->premargin(), target);
  }
  
  // required double InterestBase = 8;
  if (has_interestbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->interestbase(), target);
  }
  
  // required double Interest = 9;
  if (has_interest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->interest(), target);
  }
  
  // required double Deposit = 10;
  if (has_deposit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->deposit(), target);
  }
  
  // required double Withdraw = 11;
  if (has_withdraw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->withdraw(), target);
  }
  
  // required double FrozenMargin = 12;
  if (has_frozenmargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->frozenmargin(), target);
  }
  
  // required double FrozenCash = 13;
  if (has_frozencash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->frozencash(), target);
  }
  
  // required double FrozenCommission = 14;
  if (has_frozencommission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->frozencommission(), target);
  }
  
  // required double CurrMargin = 15;
  if (has_currmargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->currmargin(), target);
  }
  
  // required double CashIn = 16;
  if (has_cashin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->cashin(), target);
  }
  
  // required double Commission = 17;
  if (has_commission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->commission(), target);
  }
  
  // required double CloseProfit = 18;
  if (has_closeprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->closeprofit(), target);
  }
  
  // required double PositionProfit = 19;
  if (has_positionprofit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->positionprofit(), target);
  }
  
  // required double Balance = 20;
  if (has_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->balance(), target);
  }
  
  // required double Available = 21;
  if (has_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->available(), target);
  }
  
  // required double WithdrawQuota = 22;
  if (has_withdrawquota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->withdrawquota(), target);
  }
  
  // required double Reserve = 23;
  if (has_reserve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->reserve(), target);
  }
  
  // required string TradingDay = 24;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradingday().data(), this->tradingday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->tradingday(), target);
  }
  
  // required int32 SettlementID = 25;
  if (has_settlementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->settlementid(), target);
  }
  
  // required double Credit = 26;
  if (has_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->credit(), target);
  }
  
  // required double Mortgage = 27;
  if (has_mortgage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->mortgage(), target);
  }
  
  // required double ExchangeMargin = 28;
  if (has_exchangemargin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->exchangemargin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MThostFtdcTradingAccountField::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string BrokerID = 1;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brokerid());
    }
    
    // required string AccountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountid());
    }
    
    // required double PreMortgage = 3;
    if (has_premortgage()) {
      total_size += 1 + 8;
    }
    
    // required double PreCredit = 4;
    if (has_precredit()) {
      total_size += 1 + 8;
    }
    
    // required double PreDeposit = 5;
    if (has_predeposit()) {
      total_size += 1 + 8;
    }
    
    // required double PreBalance = 6;
    if (has_prebalance()) {
      total_size += 1 + 8;
    }
    
    // required double PreMargin = 7;
    if (has_premargin()) {
      total_size += 1 + 8;
    }
    
    // required double InterestBase = 8;
    if (has_interestbase()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double Interest = 9;
    if (has_interest()) {
      total_size += 1 + 8;
    }
    
    // required double Deposit = 10;
    if (has_deposit()) {
      total_size += 1 + 8;
    }
    
    // required double Withdraw = 11;
    if (has_withdraw()) {
      total_size += 1 + 8;
    }
    
    // required double FrozenMargin = 12;
    if (has_frozenmargin()) {
      total_size += 1 + 8;
    }
    
    // required double FrozenCash = 13;
    if (has_frozencash()) {
      total_size += 1 + 8;
    }
    
    // required double FrozenCommission = 14;
    if (has_frozencommission()) {
      total_size += 1 + 8;
    }
    
    // required double CurrMargin = 15;
    if (has_currmargin()) {
      total_size += 1 + 8;
    }
    
    // required double CashIn = 16;
    if (has_cashin()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double Commission = 17;
    if (has_commission()) {
      total_size += 2 + 8;
    }
    
    // required double CloseProfit = 18;
    if (has_closeprofit()) {
      total_size += 2 + 8;
    }
    
    // required double PositionProfit = 19;
    if (has_positionprofit()) {
      total_size += 2 + 8;
    }
    
    // required double Balance = 20;
    if (has_balance()) {
      total_size += 2 + 8;
    }
    
    // required double Available = 21;
    if (has_available()) {
      total_size += 2 + 8;
    }
    
    // required double WithdrawQuota = 22;
    if (has_withdrawquota()) {
      total_size += 2 + 8;
    }
    
    // required double Reserve = 23;
    if (has_reserve()) {
      total_size += 2 + 8;
    }
    
    // required string TradingDay = 24;
    if (has_tradingday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradingday());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 SettlementID = 25;
    if (has_settlementid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settlementid());
    }
    
    // required double Credit = 26;
    if (has_credit()) {
      total_size += 2 + 8;
    }
    
    // required double Mortgage = 27;
    if (has_mortgage()) {
      total_size += 2 + 8;
    }
    
    // required double ExchangeMargin = 28;
    if (has_exchangemargin()) {
      total_size += 2 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MThostFtdcTradingAccountField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MThostFtdcTradingAccountField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MThostFtdcTradingAccountField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MThostFtdcTradingAccountField::MergeFrom(const MThostFtdcTradingAccountField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brokerid()) {
      set_brokerid(from.brokerid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_premortgage()) {
      set_premortgage(from.premortgage());
    }
    if (from.has_precredit()) {
      set_precredit(from.precredit());
    }
    if (from.has_predeposit()) {
      set_predeposit(from.predeposit());
    }
    if (from.has_prebalance()) {
      set_prebalance(from.prebalance());
    }
    if (from.has_premargin()) {
      set_premargin(from.premargin());
    }
    if (from.has_interestbase()) {
      set_interestbase(from.interestbase());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_interest()) {
      set_interest(from.interest());
    }
    if (from.has_deposit()) {
      set_deposit(from.deposit());
    }
    if (from.has_withdraw()) {
      set_withdraw(from.withdraw());
    }
    if (from.has_frozenmargin()) {
      set_frozenmargin(from.frozenmargin());
    }
    if (from.has_frozencash()) {
      set_frozencash(from.frozencash());
    }
    if (from.has_frozencommission()) {
      set_frozencommission(from.frozencommission());
    }
    if (from.has_currmargin()) {
      set_currmargin(from.currmargin());
    }
    if (from.has_cashin()) {
      set_cashin(from.cashin());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_commission()) {
      set_commission(from.commission());
    }
    if (from.has_closeprofit()) {
      set_closeprofit(from.closeprofit());
    }
    if (from.has_positionprofit()) {
      set_positionprofit(from.positionprofit());
    }
    if (from.has_balance()) {
      set_balance(from.balance());
    }
    if (from.has_available()) {
      set_available(from.available());
    }
    if (from.has_withdrawquota()) {
      set_withdrawquota(from.withdrawquota());
    }
    if (from.has_reserve()) {
      set_reserve(from.reserve());
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_settlementid()) {
      set_settlementid(from.settlementid());
    }
    if (from.has_credit()) {
      set_credit(from.credit());
    }
    if (from.has_mortgage()) {
      set_mortgage(from.mortgage());
    }
    if (from.has_exchangemargin()) {
      set_exchangemargin(from.exchangemargin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MThostFtdcTradingAccountField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MThostFtdcTradingAccountField::CopyFrom(const MThostFtdcTradingAccountField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MThostFtdcTradingAccountField::IsInitialized() const {
  if ((_has_bits_[0] & 0x0fffffff) != 0x0fffffff) return false;
  
  return true;
}

void MThostFtdcTradingAccountField::Swap(MThostFtdcTradingAccountField* other) {
  if (other != this) {
    std::swap(brokerid_, other->brokerid_);
    std::swap(accountid_, other->accountid_);
    std::swap(premortgage_, other->premortgage_);
    std::swap(precredit_, other->precredit_);
    std::swap(predeposit_, other->predeposit_);
    std::swap(prebalance_, other->prebalance_);
    std::swap(premargin_, other->premargin_);
    std::swap(interestbase_, other->interestbase_);
    std::swap(interest_, other->interest_);
    std::swap(deposit_, other->deposit_);
    std::swap(withdraw_, other->withdraw_);
    std::swap(frozenmargin_, other->frozenmargin_);
    std::swap(frozencash_, other->frozencash_);
    std::swap(frozencommission_, other->frozencommission_);
    std::swap(currmargin_, other->currmargin_);
    std::swap(cashin_, other->cashin_);
    std::swap(commission_, other->commission_);
    std::swap(closeprofit_, other->closeprofit_);
    std::swap(positionprofit_, other->positionprofit_);
    std::swap(balance_, other->balance_);
    std::swap(available_, other->available_);
    std::swap(withdrawquota_, other->withdrawquota_);
    std::swap(reserve_, other->reserve_);
    std::swap(tradingday_, other->tradingday_);
    std::swap(settlementid_, other->settlementid_);
    std::swap(credit_, other->credit_);
    std::swap(mortgage_, other->mortgage_);
    std::swap(exchangemargin_, other->exchangemargin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MThostFtdcTradingAccountField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MThostFtdcTradingAccountField_descriptor_;
  metadata.reflection = MThostFtdcTradingAccountField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MThostFtdcQryTradingAccountField::kBrokerIDFieldNumber;
const int MThostFtdcQryTradingAccountField::kInvestorIDFieldNumber;
#endif  // !_MSC_VER

MThostFtdcQryTradingAccountField::MThostFtdcQryTradingAccountField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MThostFtdcQryTradingAccountField::InitAsDefaultInstance() {
}

MThostFtdcQryTradingAccountField::MThostFtdcQryTradingAccountField(const MThostFtdcQryTradingAccountField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MThostFtdcQryTradingAccountField::SharedCtor() {
  _cached_size_ = 0;
  brokerid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  investorid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MThostFtdcQryTradingAccountField::~MThostFtdcQryTradingAccountField() {
  SharedDtor();
}

void MThostFtdcQryTradingAccountField::SharedDtor() {
  if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
    delete brokerid_;
  }
  if (investorid_ != &::google::protobuf::internal::kEmptyString) {
    delete investorid_;
  }
  if (this != default_instance_) {
  }
}

void MThostFtdcQryTradingAccountField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MThostFtdcQryTradingAccountField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MThostFtdcQryTradingAccountField_descriptor_;
}

const MThostFtdcQryTradingAccountField& MThostFtdcQryTradingAccountField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureTrading_2eproto();  return *default_instance_;
}

MThostFtdcQryTradingAccountField* MThostFtdcQryTradingAccountField::default_instance_ = NULL;

MThostFtdcQryTradingAccountField* MThostFtdcQryTradingAccountField::New() const {
  return new MThostFtdcQryTradingAccountField;
}

void MThostFtdcQryTradingAccountField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_brokerid()) {
      if (brokerid_ != &::google::protobuf::internal::kEmptyString) {
        brokerid_->clear();
      }
    }
    if (has_investorid()) {
      if (investorid_ != &::google::protobuf::internal::kEmptyString) {
        investorid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MThostFtdcQryTradingAccountField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string BrokerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brokerid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brokerid().data(), this->brokerid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_InvestorID;
        break;
      }
      
      // required string InvestorID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InvestorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_investorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->investorid().data(), this->investorid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MThostFtdcQryTradingAccountField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string BrokerID = 1;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->brokerid(), output);
  }
  
  // required string InvestorID = 2;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->investorid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MThostFtdcQryTradingAccountField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string BrokerID = 1;
  if (has_brokerid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brokerid().data(), this->brokerid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->brokerid(), target);
  }
  
  // required string InvestorID = 2;
  if (has_investorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->investorid().data(), this->investorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->investorid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MThostFtdcQryTradingAccountField::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string BrokerID = 1;
    if (has_brokerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brokerid());
    }
    
    // required string InvestorID = 2;
    if (has_investorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->investorid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MThostFtdcQryTradingAccountField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MThostFtdcQryTradingAccountField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MThostFtdcQryTradingAccountField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MThostFtdcQryTradingAccountField::MergeFrom(const MThostFtdcQryTradingAccountField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brokerid()) {
      set_brokerid(from.brokerid());
    }
    if (from.has_investorid()) {
      set_investorid(from.investorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MThostFtdcQryTradingAccountField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MThostFtdcQryTradingAccountField::CopyFrom(const MThostFtdcQryTradingAccountField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MThostFtdcQryTradingAccountField::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MThostFtdcQryTradingAccountField::Swap(MThostFtdcQryTradingAccountField* other) {
  if (other != this) {
    std::swap(brokerid_, other->brokerid_);
    std::swap(investorid_, other->investorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MThostFtdcQryTradingAccountField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MThostFtdcQryTradingAccountField_descriptor_;
  metadata.reflection = MThostFtdcQryTradingAccountField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConRequest::kQueTypeFieldNumber;
const int ConRequest::kContractListFieldNumber;
#endif  // !_MSC_VER

ConRequest::ConRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConRequest::InitAsDefaultInstance() {
}

ConRequest::ConRequest(const ConRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConRequest::SharedCtor() {
  _cached_size_ = 0;
  quetype_ = 0;
  contractlist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConRequest::~ConRequest() {
  SharedDtor();
}

void ConRequest::SharedDtor() {
  if (contractlist_ != &::google::protobuf::internal::kEmptyString) {
    delete contractlist_;
  }
  if (this != default_instance_) {
  }
}

void ConRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConRequest_descriptor_;
}

const ConRequest& ConRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureTrading_2eproto();  return *default_instance_;
}

ConRequest* ConRequest::default_instance_ = NULL;

ConRequest* ConRequest::New() const {
  return new ConRequest;
}

void ConRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quetype_ = 0;
    if (has_contractlist()) {
      if (contractlist_ != &::google::protobuf::internal::kEmptyString) {
        contractlist_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 QueType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quetype_)));
          set_has_quetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ContractList;
        break;
      }
      
      // required string ContractList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContractList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contractlist().data(), this->contractlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 QueType = 1;
  if (has_quetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->quetype(), output);
  }
  
  // required string ContractList = 2;
  if (has_contractlist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contractlist().data(), this->contractlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->contractlist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 QueType = 1;
  if (has_quetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->quetype(), target);
  }
  
  // required string ContractList = 2;
  if (has_contractlist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contractlist().data(), this->contractlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contractlist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 QueType = 1;
    if (has_quetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quetype());
    }
    
    // required string ContractList = 2;
    if (has_contractlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contractlist());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConRequest::MergeFrom(const ConRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quetype()) {
      set_quetype(from.quetype());
    }
    if (from.has_contractlist()) {
      set_contractlist(from.contractlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConRequest::CopyFrom(const ConRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ConRequest::Swap(ConRequest* other) {
  if (other != this) {
    std::swap(quetype_, other->quetype_);
    std::swap(contractlist_, other->contractlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConRequest_descriptor_;
  metadata.reflection = ConRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConResponse::kTimeStampFieldNumber;
const int ConResponse::kContractListFieldNumber;
#endif  // !_MSC_VER

ConResponse::ConResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConResponse::InitAsDefaultInstance() {
}

ConResponse::ConResponse(const ConResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConResponse::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConResponse::~ConResponse() {
  SharedDtor();
}

void ConResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConResponse_descriptor_;
}

const ConResponse& ConResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureTrading_2eproto();  return *default_instance_;
}

ConResponse* ConResponse::default_instance_ = NULL;

ConResponse* ConResponse::New() const {
  return new ConResponse;
}

void ConResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0;
  }
  contractlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 TimeStamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ContractList;
        break;
      }
      
      // repeated .FutureTradingPB.MThostFtdcInstrumentField ContractList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContractList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contractlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ContractList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 TimeStamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timestamp(), output);
  }
  
  // repeated .FutureTradingPB.MThostFtdcInstrumentField ContractList = 2;
  for (int i = 0; i < this->contractlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->contractlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 TimeStamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timestamp(), target);
  }
  
  // repeated .FutureTradingPB.MThostFtdcInstrumentField ContractList = 2;
  for (int i = 0; i < this->contractlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->contractlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 TimeStamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }
    
  }
  // repeated .FutureTradingPB.MThostFtdcInstrumentField ContractList = 2;
  total_size += 1 * this->contractlist_size();
  for (int i = 0; i < this->contractlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contractlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConResponse::MergeFrom(const ConResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  contractlist_.MergeFrom(from.contractlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConResponse::CopyFrom(const ConResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < contractlist_size(); i++) {
    if (!this->contractlist(i).IsInitialized()) return false;
  }
  return true;
}

void ConResponse::Swap(ConResponse* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    contractlist_.Swap(&other->contractlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConResponse_descriptor_;
  metadata.reflection = ConResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MThostFtdcInstrumentField::kInstrumentIDFieldNumber;
const int MThostFtdcInstrumentField::kExchangeIDFieldNumber;
const int MThostFtdcInstrumentField::kInstrumentNameFieldNumber;
const int MThostFtdcInstrumentField::kExchangeInstIDFieldNumber;
const int MThostFtdcInstrumentField::kProductIDFieldNumber;
const int MThostFtdcInstrumentField::kProductClassFieldNumber;
const int MThostFtdcInstrumentField::kDeliveryYearFieldNumber;
const int MThostFtdcInstrumentField::kDeliveryMonthFieldNumber;
const int MThostFtdcInstrumentField::kMaxMarketOrderVolumeFieldNumber;
const int MThostFtdcInstrumentField::kMinMarketOrderVolumeFieldNumber;
const int MThostFtdcInstrumentField::kMaxLimitOrderVolumeFieldNumber;
const int MThostFtdcInstrumentField::kMinLimitOrderVolumeFieldNumber;
const int MThostFtdcInstrumentField::kVolumeMultipleFieldNumber;
const int MThostFtdcInstrumentField::kPriceTickFieldNumber;
const int MThostFtdcInstrumentField::kCreateDateFieldNumber;
const int MThostFtdcInstrumentField::kOpenDateFieldNumber;
const int MThostFtdcInstrumentField::kExpireDateFieldNumber;
const int MThostFtdcInstrumentField::kStartDelivDateFieldNumber;
const int MThostFtdcInstrumentField::kEndDelivDateFieldNumber;
const int MThostFtdcInstrumentField::kInstLifePhaseFieldNumber;
const int MThostFtdcInstrumentField::kIsTradingFieldNumber;
const int MThostFtdcInstrumentField::kPositionTypeFieldNumber;
const int MThostFtdcInstrumentField::kPositionDateTypeFieldNumber;
const int MThostFtdcInstrumentField::kLongMarginRatioFieldNumber;
const int MThostFtdcInstrumentField::kShortMarginRatioFieldNumber;
#endif  // !_MSC_VER

MThostFtdcInstrumentField::MThostFtdcInstrumentField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MThostFtdcInstrumentField::InitAsDefaultInstance() {
}

MThostFtdcInstrumentField::MThostFtdcInstrumentField(const MThostFtdcInstrumentField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MThostFtdcInstrumentField::SharedCtor() {
  _cached_size_ = 0;
  instrumentid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instrumentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exchangeinstid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productclass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deliveryyear_ = 0;
  deliverymonth_ = 0;
  maxmarketordervolume_ = 0;
  minmarketordervolume_ = 0;
  maxlimitordervolume_ = 0;
  minlimitordervolume_ = 0;
  volumemultiple_ = 0;
  pricetick_ = 0;
  createdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opendate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  expiredate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  startdelivdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enddelivdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instlifephase_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  istrading_ = 0;
  positiontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  positiondatetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  longmarginratio_ = 0;
  shortmarginratio_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MThostFtdcInstrumentField::~MThostFtdcInstrumentField() {
  SharedDtor();
}

void MThostFtdcInstrumentField::SharedDtor() {
  if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
    delete instrumentid_;
  }
  if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeid_;
  }
  if (instrumentname_ != &::google::protobuf::internal::kEmptyString) {
    delete instrumentname_;
  }
  if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangeinstid_;
  }
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    delete productid_;
  }
  if (productclass_ != &::google::protobuf::internal::kEmptyString) {
    delete productclass_;
  }
  if (createdate_ != &::google::protobuf::internal::kEmptyString) {
    delete createdate_;
  }
  if (opendate_ != &::google::protobuf::internal::kEmptyString) {
    delete opendate_;
  }
  if (expiredate_ != &::google::protobuf::internal::kEmptyString) {
    delete expiredate_;
  }
  if (startdelivdate_ != &::google::protobuf::internal::kEmptyString) {
    delete startdelivdate_;
  }
  if (enddelivdate_ != &::google::protobuf::internal::kEmptyString) {
    delete enddelivdate_;
  }
  if (instlifephase_ != &::google::protobuf::internal::kEmptyString) {
    delete instlifephase_;
  }
  if (positiontype_ != &::google::protobuf::internal::kEmptyString) {
    delete positiontype_;
  }
  if (positiondatetype_ != &::google::protobuf::internal::kEmptyString) {
    delete positiondatetype_;
  }
  if (this != default_instance_) {
  }
}

void MThostFtdcInstrumentField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MThostFtdcInstrumentField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MThostFtdcInstrumentField_descriptor_;
}

const MThostFtdcInstrumentField& MThostFtdcInstrumentField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FutureTrading_2eproto();  return *default_instance_;
}

MThostFtdcInstrumentField* MThostFtdcInstrumentField::default_instance_ = NULL;

MThostFtdcInstrumentField* MThostFtdcInstrumentField::New() const {
  return new MThostFtdcInstrumentField;
}

void MThostFtdcInstrumentField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instrumentid()) {
      if (instrumentid_ != &::google::protobuf::internal::kEmptyString) {
        instrumentid_->clear();
      }
    }
    if (has_exchangeid()) {
      if (exchangeid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeid_->clear();
      }
    }
    if (has_instrumentname()) {
      if (instrumentname_ != &::google::protobuf::internal::kEmptyString) {
        instrumentname_->clear();
      }
    }
    if (has_exchangeinstid()) {
      if (exchangeinstid_ != &::google::protobuf::internal::kEmptyString) {
        exchangeinstid_->clear();
      }
    }
    if (has_productid()) {
      if (productid_ != &::google::protobuf::internal::kEmptyString) {
        productid_->clear();
      }
    }
    if (has_productclass()) {
      if (productclass_ != &::google::protobuf::internal::kEmptyString) {
        productclass_->clear();
      }
    }
    deliveryyear_ = 0;
    deliverymonth_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    maxmarketordervolume_ = 0;
    minmarketordervolume_ = 0;
    maxlimitordervolume_ = 0;
    minlimitordervolume_ = 0;
    volumemultiple_ = 0;
    pricetick_ = 0;
    if (has_createdate()) {
      if (createdate_ != &::google::protobuf::internal::kEmptyString) {
        createdate_->clear();
      }
    }
    if (has_opendate()) {
      if (opendate_ != &::google::protobuf::internal::kEmptyString) {
        opendate_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_expiredate()) {
      if (expiredate_ != &::google::protobuf::internal::kEmptyString) {
        expiredate_->clear();
      }
    }
    if (has_startdelivdate()) {
      if (startdelivdate_ != &::google::protobuf::internal::kEmptyString) {
        startdelivdate_->clear();
      }
    }
    if (has_enddelivdate()) {
      if (enddelivdate_ != &::google::protobuf::internal::kEmptyString) {
        enddelivdate_->clear();
      }
    }
    if (has_instlifephase()) {
      if (instlifephase_ != &::google::protobuf::internal::kEmptyString) {
        instlifephase_->clear();
      }
    }
    istrading_ = 0;
    if (has_positiontype()) {
      if (positiontype_ != &::google::protobuf::internal::kEmptyString) {
        positiontype_->clear();
      }
    }
    if (has_positiondatetype()) {
      if (positiondatetype_ != &::google::protobuf::internal::kEmptyString) {
        positiondatetype_->clear();
      }
    }
    longmarginratio_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    shortmarginratio_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MThostFtdcInstrumentField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string InstrumentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrumentid().data(), this->instrumentid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ExchangeID;
        break;
      }
      
      // required string ExchangeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeid().data(), this->exchangeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_InstrumentName;
        break;
      }
      
      // required string InstrumentName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InstrumentName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrumentname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrumentname().data(), this->instrumentname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ExchangeInstID;
        break;
      }
      
      // required string ExchangeInstID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeInstID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangeinstid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangeinstid().data(), this->exchangeinstid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ProductID;
        break;
      }
      
      // required string ProductID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ProductID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ProductClass;
        break;
      }
      
      // required string ProductClass = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ProductClass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productclass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productclass().data(), this->productclass().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_DeliveryYear;
        break;
      }
      
      // required int32 DeliveryYear = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DeliveryYear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deliveryyear_)));
          set_has_deliveryyear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_DeliveryMonth;
        break;
      }
      
      // required int32 DeliveryMonth = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DeliveryMonth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deliverymonth_)));
          set_has_deliverymonth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_MaxMarketOrderVolume;
        break;
      }
      
      // required int32 MaxMarketOrderVolume = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxMarketOrderVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmarketordervolume_)));
          set_has_maxmarketordervolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_MinMarketOrderVolume;
        break;
      }
      
      // required int32 MinMarketOrderVolume = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MinMarketOrderVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minmarketordervolume_)));
          set_has_minmarketordervolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_MaxLimitOrderVolume;
        break;
      }
      
      // required int32 MaxLimitOrderVolume = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxLimitOrderVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlimitordervolume_)));
          set_has_maxlimitordervolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_MinLimitOrderVolume;
        break;
      }
      
      // required int32 MinLimitOrderVolume = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MinLimitOrderVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minlimitordervolume_)));
          set_has_minlimitordervolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_VolumeMultiple;
        break;
      }
      
      // required int32 VolumeMultiple = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VolumeMultiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumemultiple_)));
          set_has_volumemultiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_PriceTick;
        break;
      }
      
      // required double PriceTick = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PriceTick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pricetick_)));
          set_has_pricetick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_CreateDate;
        break;
      }
      
      // required string CreateDate = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CreateDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createdate().data(), this->createdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_OpenDate;
        break;
      }
      
      // required string OpenDate = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OpenDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opendate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opendate().data(), this->opendate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_ExpireDate;
        break;
      }
      
      // required string ExpireDate = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExpireDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expiredate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->expiredate().data(), this->expiredate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_StartDelivDate;
        break;
      }
      
      // required string StartDelivDate = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StartDelivDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startdelivdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->startdelivdate().data(), this->startdelivdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_EndDelivDate;
        break;
      }
      
      // required string EndDelivDate = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EndDelivDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enddelivdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->enddelivdate().data(), this->enddelivdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_InstLifePhase;
        break;
      }
      
      // required string InstLifePhase = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InstLifePhase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instlifephase()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instlifephase().data(), this->instlifephase().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_IsTrading;
        break;
      }
      
      // required int32 IsTrading = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsTrading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &istrading_)));
          set_has_istrading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_PositionType;
        break;
      }
      
      // required string PositionType = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PositionType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_positiontype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->positiontype().data(), this->positiontype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_PositionDateType;
        break;
      }
      
      // required string PositionDateType = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PositionDateType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_positiondatetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->positiondatetype().data(), this->positiondatetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_LongMarginRatio;
        break;
      }
      
      // required double LongMarginRatio = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_LongMarginRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longmarginratio_)));
          set_has_longmarginratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_ShortMarginRatio;
        break;
      }
      
      // required double ShortMarginRatio = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ShortMarginRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shortmarginratio_)));
          set_has_shortmarginratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MThostFtdcInstrumentField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string InstrumentID = 1;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instrumentid(), output);
  }
  
  // required string ExchangeID = 2;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->exchangeid(), output);
  }
  
  // required string InstrumentName = 3;
  if (has_instrumentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentname().data(), this->instrumentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->instrumentname(), output);
  }
  
  // required string ExchangeInstID = 4;
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->exchangeinstid(), output);
  }
  
  // required string ProductID = 5;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->productid(), output);
  }
  
  // required string ProductClass = 6;
  if (has_productclass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productclass().data(), this->productclass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->productclass(), output);
  }
  
  // required int32 DeliveryYear = 7;
  if (has_deliveryyear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->deliveryyear(), output);
  }
  
  // required int32 DeliveryMonth = 8;
  if (has_deliverymonth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->deliverymonth(), output);
  }
  
  // required int32 MaxMarketOrderVolume = 9;
  if (has_maxmarketordervolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->maxmarketordervolume(), output);
  }
  
  // required int32 MinMarketOrderVolume = 10;
  if (has_minmarketordervolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->minmarketordervolume(), output);
  }
  
  // required int32 MaxLimitOrderVolume = 11;
  if (has_maxlimitordervolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->maxlimitordervolume(), output);
  }
  
  // required int32 MinLimitOrderVolume = 12;
  if (has_minlimitordervolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->minlimitordervolume(), output);
  }
  
  // required int32 VolumeMultiple = 13;
  if (has_volumemultiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->volumemultiple(), output);
  }
  
  // required double PriceTick = 14;
  if (has_pricetick()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->pricetick(), output);
  }
  
  // required string CreateDate = 15;
  if (has_createdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createdate().data(), this->createdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->createdate(), output);
  }
  
  // required string OpenDate = 16;
  if (has_opendate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opendate().data(), this->opendate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->opendate(), output);
  }
  
  // required string ExpireDate = 17;
  if (has_expiredate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->expiredate().data(), this->expiredate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->expiredate(), output);
  }
  
  // required string StartDelivDate = 18;
  if (has_startdelivdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->startdelivdate().data(), this->startdelivdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->startdelivdate(), output);
  }
  
  // required string EndDelivDate = 19;
  if (has_enddelivdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enddelivdate().data(), this->enddelivdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->enddelivdate(), output);
  }
  
  // required string InstLifePhase = 20;
  if (has_instlifephase()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instlifephase().data(), this->instlifephase().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->instlifephase(), output);
  }
  
  // required int32 IsTrading = 21;
  if (has_istrading()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->istrading(), output);
  }
  
  // required string PositionType = 22;
  if (has_positiontype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->positiontype().data(), this->positiontype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->positiontype(), output);
  }
  
  // required string PositionDateType = 23;
  if (has_positiondatetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->positiondatetype().data(), this->positiondatetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->positiondatetype(), output);
  }
  
  // required double LongMarginRatio = 24;
  if (has_longmarginratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->longmarginratio(), output);
  }
  
  // required double ShortMarginRatio = 25;
  if (has_shortmarginratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->shortmarginratio(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MThostFtdcInstrumentField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string InstrumentID = 1;
  if (has_instrumentid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentid().data(), this->instrumentid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrumentid(), target);
  }
  
  // required string ExchangeID = 2;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeid().data(), this->exchangeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchangeid(), target);
  }
  
  // required string InstrumentName = 3;
  if (has_instrumentname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrumentname().data(), this->instrumentname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->instrumentname(), target);
  }
  
  // required string ExchangeInstID = 4;
  if (has_exchangeinstid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangeinstid().data(), this->exchangeinstid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exchangeinstid(), target);
  }
  
  // required string ProductID = 5;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->productid(), target);
  }
  
  // required string ProductClass = 6;
  if (has_productclass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productclass().data(), this->productclass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->productclass(), target);
  }
  
  // required int32 DeliveryYear = 7;
  if (has_deliveryyear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->deliveryyear(), target);
  }
  
  // required int32 DeliveryMonth = 8;
  if (has_deliverymonth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->deliverymonth(), target);
  }
  
  // required int32 MaxMarketOrderVolume = 9;
  if (has_maxmarketordervolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->maxmarketordervolume(), target);
  }
  
  // required int32 MinMarketOrderVolume = 10;
  if (has_minmarketordervolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->minmarketordervolume(), target);
  }
  
  // required int32 MaxLimitOrderVolume = 11;
  if (has_maxlimitordervolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->maxlimitordervolume(), target);
  }
  
  // required int32 MinLimitOrderVolume = 12;
  if (has_minlimitordervolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->minlimitordervolume(), target);
  }
  
  // required int32 VolumeMultiple = 13;
  if (has_volumemultiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->volumemultiple(), target);
  }
  
  // required double PriceTick = 14;
  if (has_pricetick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->pricetick(), target);
  }
  
  // required string CreateDate = 15;
  if (has_createdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createdate().data(), this->createdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->createdate(), target);
  }
  
  // required string OpenDate = 16;
  if (has_opendate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opendate().data(), this->opendate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->opendate(), target);
  }
  
  // required string ExpireDate = 17;
  if (has_expiredate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->expiredate().data(), this->expiredate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->expiredate(), target);
  }
  
  // required string StartDelivDate = 18;
  if (has_startdelivdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->startdelivdate().data(), this->startdelivdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->startdelivdate(), target);
  }
  
  // required string EndDelivDate = 19;
  if (has_enddelivdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enddelivdate().data(), this->enddelivdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->enddelivdate(), target);
  }
  
  // required string InstLifePhase = 20;
  if (has_instlifephase()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instlifephase().data(), this->instlifephase().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->instlifephase(), target);
  }
  
  // required int32 IsTrading = 21;
  if (has_istrading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->istrading(), target);
  }
  
  // required string PositionType = 22;
  if (has_positiontype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->positiontype().data(), this->positiontype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->positiontype(), target);
  }
  
  // required string PositionDateType = 23;
  if (has_positiondatetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->positiondatetype().data(), this->positiondatetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->positiondatetype(), target);
  }
  
  // required double LongMarginRatio = 24;
  if (has_longmarginratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->longmarginratio(), target);
  }
  
  // required double ShortMarginRatio = 25;
  if (has_shortmarginratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->shortmarginratio(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MThostFtdcInstrumentField::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string InstrumentID = 1;
    if (has_instrumentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentid());
    }
    
    // required string ExchangeID = 2;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeid());
    }
    
    // required string InstrumentName = 3;
    if (has_instrumentname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrumentname());
    }
    
    // required string ExchangeInstID = 4;
    if (has_exchangeinstid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangeinstid());
    }
    
    // required string ProductID = 5;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }
    
    // required string ProductClass = 6;
    if (has_productclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productclass());
    }
    
    // required int32 DeliveryYear = 7;
    if (has_deliveryyear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deliveryyear());
    }
    
    // required int32 DeliveryMonth = 8;
    if (has_deliverymonth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deliverymonth());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 MaxMarketOrderVolume = 9;
    if (has_maxmarketordervolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxmarketordervolume());
    }
    
    // required int32 MinMarketOrderVolume = 10;
    if (has_minmarketordervolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minmarketordervolume());
    }
    
    // required int32 MaxLimitOrderVolume = 11;
    if (has_maxlimitordervolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlimitordervolume());
    }
    
    // required int32 MinLimitOrderVolume = 12;
    if (has_minlimitordervolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minlimitordervolume());
    }
    
    // required int32 VolumeMultiple = 13;
    if (has_volumemultiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volumemultiple());
    }
    
    // required double PriceTick = 14;
    if (has_pricetick()) {
      total_size += 1 + 8;
    }
    
    // required string CreateDate = 15;
    if (has_createdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createdate());
    }
    
    // required string OpenDate = 16;
    if (has_opendate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opendate());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string ExpireDate = 17;
    if (has_expiredate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->expiredate());
    }
    
    // required string StartDelivDate = 18;
    if (has_startdelivdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->startdelivdate());
    }
    
    // required string EndDelivDate = 19;
    if (has_enddelivdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enddelivdate());
    }
    
    // required string InstLifePhase = 20;
    if (has_instlifephase()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instlifephase());
    }
    
    // required int32 IsTrading = 21;
    if (has_istrading()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->istrading());
    }
    
    // required string PositionType = 22;
    if (has_positiontype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->positiontype());
    }
    
    // required string PositionDateType = 23;
    if (has_positiondatetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->positiondatetype());
    }
    
    // required double LongMarginRatio = 24;
    if (has_longmarginratio()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required double ShortMarginRatio = 25;
    if (has_shortmarginratio()) {
      total_size += 2 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MThostFtdcInstrumentField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MThostFtdcInstrumentField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MThostFtdcInstrumentField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MThostFtdcInstrumentField::MergeFrom(const MThostFtdcInstrumentField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrumentid()) {
      set_instrumentid(from.instrumentid());
    }
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_instrumentname()) {
      set_instrumentname(from.instrumentname());
    }
    if (from.has_exchangeinstid()) {
      set_exchangeinstid(from.exchangeinstid());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_productclass()) {
      set_productclass(from.productclass());
    }
    if (from.has_deliveryyear()) {
      set_deliveryyear(from.deliveryyear());
    }
    if (from.has_deliverymonth()) {
      set_deliverymonth(from.deliverymonth());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxmarketordervolume()) {
      set_maxmarketordervolume(from.maxmarketordervolume());
    }
    if (from.has_minmarketordervolume()) {
      set_minmarketordervolume(from.minmarketordervolume());
    }
    if (from.has_maxlimitordervolume()) {
      set_maxlimitordervolume(from.maxlimitordervolume());
    }
    if (from.has_minlimitordervolume()) {
      set_minlimitordervolume(from.minlimitordervolume());
    }
    if (from.has_volumemultiple()) {
      set_volumemultiple(from.volumemultiple());
    }
    if (from.has_pricetick()) {
      set_pricetick(from.pricetick());
    }
    if (from.has_createdate()) {
      set_createdate(from.createdate());
    }
    if (from.has_opendate()) {
      set_opendate(from.opendate());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_expiredate()) {
      set_expiredate(from.expiredate());
    }
    if (from.has_startdelivdate()) {
      set_startdelivdate(from.startdelivdate());
    }
    if (from.has_enddelivdate()) {
      set_enddelivdate(from.enddelivdate());
    }
    if (from.has_instlifephase()) {
      set_instlifephase(from.instlifephase());
    }
    if (from.has_istrading()) {
      set_istrading(from.istrading());
    }
    if (from.has_positiontype()) {
      set_positiontype(from.positiontype());
    }
    if (from.has_positiondatetype()) {
      set_positiondatetype(from.positiondatetype());
    }
    if (from.has_longmarginratio()) {
      set_longmarginratio(from.longmarginratio());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_shortmarginratio()) {
      set_shortmarginratio(from.shortmarginratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MThostFtdcInstrumentField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MThostFtdcInstrumentField::CopyFrom(const MThostFtdcInstrumentField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MThostFtdcInstrumentField::IsInitialized() const {
  if ((_has_bits_[0] & 0x01ffffff) != 0x01ffffff) return false;
  
  return true;
}

void MThostFtdcInstrumentField::Swap(MThostFtdcInstrumentField* other) {
  if (other != this) {
    std::swap(instrumentid_, other->instrumentid_);
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(instrumentname_, other->instrumentname_);
    std::swap(exchangeinstid_, other->exchangeinstid_);
    std::swap(productid_, other->productid_);
    std::swap(productclass_, other->productclass_);
    std::swap(deliveryyear_, other->deliveryyear_);
    std::swap(deliverymonth_, other->deliverymonth_);
    std::swap(maxmarketordervolume_, other->maxmarketordervolume_);
    std::swap(minmarketordervolume_, other->minmarketordervolume_);
    std::swap(maxlimitordervolume_, other->maxlimitordervolume_);
    std::swap(minlimitordervolume_, other->minlimitordervolume_);
    std::swap(volumemultiple_, other->volumemultiple_);
    std::swap(pricetick_, other->pricetick_);
    std::swap(createdate_, other->createdate_);
    std::swap(opendate_, other->opendate_);
    std::swap(expiredate_, other->expiredate_);
    std::swap(startdelivdate_, other->startdelivdate_);
    std::swap(enddelivdate_, other->enddelivdate_);
    std::swap(instlifephase_, other->instlifephase_);
    std::swap(istrading_, other->istrading_);
    std::swap(positiontype_, other->positiontype_);
    std::swap(positiondatetype_, other->positiondatetype_);
    std::swap(longmarginratio_, other->longmarginratio_);
    std::swap(shortmarginratio_, other->shortmarginratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MThostFtdcInstrumentField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MThostFtdcInstrumentField_descriptor_;
  metadata.reflection = MThostFtdcInstrumentField_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FutureTradingPB

// @@protoc_insertion_point(global_scope)
